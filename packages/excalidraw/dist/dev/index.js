var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __glob = (map) => (path) => {
  var fn = map[path];
  if (fn)
    return fn();
  throw new Error("Module not found in bundle: " + path);
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// <define:import.meta.env>
var define_import_meta_env_default;
var init_define_import_meta_env = __esm({
  "<define:import.meta.env>"() {
    define_import_meta_env_default = { DEV: true };
  }
});

// css/variables.module.scss
var variables_module_default;
var init_variables_module = __esm({
  "css/variables.module.scss"() {
    variables_module_default = {};
  }
});

// colors.ts
import oc from "open-color";
var pick, MAX_CUSTOM_COLORS_USED_IN_CANVAS, COLORS_PER_ROW, DEFAULT_CHART_COLOR_INDEX, DEFAULT_ELEMENT_STROKE_COLOR_INDEX, DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX, ELEMENTS_PALETTE_SHADE_INDEXES, getSpecificColorShades, COLOR_PALETTE, COMMON_ELEMENT_SHADES, DEFAULT_ELEMENT_STROKE_PICKS, DEFAULT_ELEMENT_BACKGROUND_PICKS, DEFAULT_CANVAS_BACKGROUND_PICKS, DEFAULT_ELEMENT_STROKE_COLOR_PALETTE, DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE, getAllColorsSpecificShade, rgbToHex;
var init_colors = __esm({
  "colors.ts"() {
    "use strict";
    init_define_import_meta_env();
    pick = (source, keys) => {
      return keys.reduce((acc, key) => {
        if (key in source) {
          acc[key] = source[key];
        }
        return acc;
      }, {});
    };
    MAX_CUSTOM_COLORS_USED_IN_CANVAS = 5;
    COLORS_PER_ROW = 5;
    DEFAULT_CHART_COLOR_INDEX = 4;
    DEFAULT_ELEMENT_STROKE_COLOR_INDEX = 4;
    DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX = 1;
    ELEMENTS_PALETTE_SHADE_INDEXES = [0, 2, 4, 6, 8];
    getSpecificColorShades = (color, indexArr) => {
      return indexArr.map((index) => oc[color][index]);
    };
    COLOR_PALETTE = {
      transparent: "transparent",
      black: "#1e1e1e",
      white: "#ffffff",
      // open-colors
      gray: getSpecificColorShades("gray", ELEMENTS_PALETTE_SHADE_INDEXES),
      red: getSpecificColorShades("red", ELEMENTS_PALETTE_SHADE_INDEXES),
      pink: getSpecificColorShades("pink", ELEMENTS_PALETTE_SHADE_INDEXES),
      grape: getSpecificColorShades("grape", ELEMENTS_PALETTE_SHADE_INDEXES),
      violet: getSpecificColorShades("violet", ELEMENTS_PALETTE_SHADE_INDEXES),
      blue: getSpecificColorShades("blue", ELEMENTS_PALETTE_SHADE_INDEXES),
      cyan: getSpecificColorShades("cyan", ELEMENTS_PALETTE_SHADE_INDEXES),
      teal: getSpecificColorShades("teal", ELEMENTS_PALETTE_SHADE_INDEXES),
      green: getSpecificColorShades("green", ELEMENTS_PALETTE_SHADE_INDEXES),
      yellow: getSpecificColorShades("yellow", ELEMENTS_PALETTE_SHADE_INDEXES),
      orange: getSpecificColorShades("orange", ELEMENTS_PALETTE_SHADE_INDEXES),
      // radix bronze shades 3,5,7,9,11
      bronze: ["#f8f1ee", "#eaddd7", "#d2bab0", "#a18072", "#846358"]
    };
    COMMON_ELEMENT_SHADES = pick(COLOR_PALETTE, [
      "cyan",
      "blue",
      "violet",
      "grape",
      "pink",
      "green",
      "teal",
      "yellow",
      "orange",
      "red"
    ]);
    DEFAULT_ELEMENT_STROKE_PICKS = [
      COLOR_PALETTE.black,
      COLOR_PALETTE.red[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],
      COLOR_PALETTE.green[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],
      COLOR_PALETTE.blue[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],
      COLOR_PALETTE.yellow[DEFAULT_ELEMENT_STROKE_COLOR_INDEX]
    ];
    DEFAULT_ELEMENT_BACKGROUND_PICKS = [
      COLOR_PALETTE.transparent,
      COLOR_PALETTE.red[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],
      COLOR_PALETTE.green[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],
      COLOR_PALETTE.blue[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],
      COLOR_PALETTE.yellow[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX]
    ];
    DEFAULT_CANVAS_BACKGROUND_PICKS = [
      COLOR_PALETTE.white,
      // radix slate2
      "#f8f9fa",
      // radix blue2
      "#f5faff",
      // radix yellow2
      "#fffce8",
      // radix bronze2
      "#fdf8f6"
    ];
    DEFAULT_ELEMENT_STROKE_COLOR_PALETTE = {
      // 1st row
      transparent: COLOR_PALETTE.transparent,
      white: COLOR_PALETTE.white,
      gray: COLOR_PALETTE.gray,
      black: COLOR_PALETTE.black,
      bronze: COLOR_PALETTE.bronze,
      // rest
      ...COMMON_ELEMENT_SHADES
    };
    DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE = {
      transparent: COLOR_PALETTE.transparent,
      white: COLOR_PALETTE.white,
      gray: COLOR_PALETTE.gray,
      black: COLOR_PALETTE.black,
      bronze: COLOR_PALETTE.bronze,
      ...COMMON_ELEMENT_SHADES
    };
    getAllColorsSpecificShade = (index) => [
      // 2nd row
      COLOR_PALETTE.cyan[index],
      COLOR_PALETTE.blue[index],
      COLOR_PALETTE.violet[index],
      COLOR_PALETTE.grape[index],
      COLOR_PALETTE.pink[index],
      // 3rd row
      COLOR_PALETTE.green[index],
      COLOR_PALETTE.teal[index],
      COLOR_PALETTE.yellow[index],
      COLOR_PALETTE.orange[index],
      COLOR_PALETTE.red[index]
    ];
    rgbToHex = (r, g, b) => `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
  }
});

// constants.ts
var isDarwin, isWindows, isAndroid, isFirefox, isChrome, isSafari, isIOS, isBrave, supportsResizeObserver, APP_NAME, TEXT_AUTOWRAP_THRESHOLD, DRAGGING_THRESHOLD, LINE_CONFIRM_THRESHOLD, ELEMENT_SHIFT_TRANSLATE_AMOUNT, ELEMENT_TRANSLATE_AMOUNT, TEXT_TO_CENTER_SNAP_THRESHOLD, SHIFT_LOCKING_ANGLE, DEFAULT_LASER_COLOR, CURSOR_TYPE, POINTER_BUTTON, POINTER_EVENTS, YOUTUBE_STATES, ENV, CLASSES, FONT_FAMILY, THEME, FRAME_STYLE, WINDOWS_EMOJI_FALLBACK_FONT, MIN_FONT_SIZE, DEFAULT_FONT_SIZE, DEFAULT_FONT_FAMILY, DEFAULT_TEXT_ALIGN, DEFAULT_VERTICAL_ALIGN, DEFAULT_TRANSFORM_HANDLE_SPACING, SIDE_RESIZING_THRESHOLD, EPSILON, DEFAULT_COLLISION_THRESHOLD, COLOR_WHITE, COLOR_CHARCOAL_BLACK, COLOR_VOICE_CALL, DEFAULT_GRID_SIZE, DEFAULT_GRID_STEP, IMAGE_MIME_TYPES, ALLOWED_PASTE_MIME_TYPES, MIME_TYPES, EXPORT_IMAGE_TYPES, EXPORT_DATA_TYPES, EXPORT_SOURCE, IMAGE_RENDER_TIMEOUT, TAP_TWICE_TIMEOUT, TOUCH_CTX_MENU_TIMEOUT, SCROLL_TIMEOUT, ZOOM_STEP, MIN_ZOOM, MAX_ZOOM, HYPERLINK_TOOLTIP_DELAY, THEME_FILTER, URL_QUERY_KEYS, URL_HASH_KEYS, DEFAULT_UI_OPTIONS, MQ_MAX_WIDTH_PORTRAIT, MQ_MAX_WIDTH_LANDSCAPE, MQ_MAX_HEIGHT_LANDSCAPE, MQ_RIGHT_SIDEBAR_MIN_WIDTH, LIBRARY_SIDEBAR_WIDTH, MAX_DECIMALS_FOR_SVG_EXPORT, EXPORT_SCALES, DEFAULT_EXPORT_PADDING, DEFAULT_MAX_IMAGE_WIDTH_OR_HEIGHT, MAX_ALLOWED_FILE_BYTES, SVG_NS, VERSIONS, BOUND_TEXT_PADDING, ARROW_LABEL_WIDTH_FRACTION, ARROW_LABEL_FONT_SIZE_TO_MIN_WIDTH_RATIO, VERTICAL_ALIGN, TEXT_ALIGN, ELEMENT_READY_TO_ERASE_OPACITY, DEFAULT_PROPORTIONAL_RADIUS, DEFAULT_ADAPTIVE_RADIUS, ROUNDNESS, ROUGHNESS, STROKE_WIDTH, DEFAULT_ELEMENT_PROPS, LIBRARY_SIDEBAR_TAB, CANVAS_SEARCH_TAB, DEFAULT_SIDEBAR, LIBRARY_DISABLED_TYPES, TOOL_TYPE, EDITOR_LS_KEYS, DEFAULT_FILENAME, STATS_PANELS, MIN_WIDTH_OR_HEIGHT, ARROW_TYPE;
var init_constants = __esm({
  "constants.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_variables_module();
    init_colors();
    isDarwin = /Mac|iPod|iPhone|iPad/.test(navigator.platform);
    isWindows = /^Win/.test(navigator.platform);
    isAndroid = /\b(android)\b/i.test(navigator.userAgent);
    isFirefox = "netscape" in window && navigator.userAgent.indexOf("rv:") > 1 && navigator.userAgent.indexOf("Gecko") > 1;
    isChrome = navigator.userAgent.indexOf("Chrome") !== -1;
    isSafari = !isChrome && navigator.userAgent.indexOf("Safari") !== -1;
    isIOS = /iPad|iPhone/.test(navigator.platform) || // iPadOS 13+
    navigator.userAgent.includes("Mac") && "ontouchend" in document;
    isBrave = () => navigator.brave?.isBrave?.name === "isBrave";
    supportsResizeObserver = typeof window !== "undefined" && "ResizeObserver" in window;
    APP_NAME = "Excalidraw";
    TEXT_AUTOWRAP_THRESHOLD = 36;
    DRAGGING_THRESHOLD = 10;
    LINE_CONFIRM_THRESHOLD = 8;
    ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;
    ELEMENT_TRANSLATE_AMOUNT = 1;
    TEXT_TO_CENTER_SNAP_THRESHOLD = 30;
    SHIFT_LOCKING_ANGLE = Math.PI / 12;
    DEFAULT_LASER_COLOR = "red";
    CURSOR_TYPE = {
      TEXT: "text",
      CROSSHAIR: "crosshair",
      GRABBING: "grabbing",
      GRAB: "grab",
      POINTER: "pointer",
      MOVE: "move",
      AUTO: ""
    };
    POINTER_BUTTON = {
      MAIN: 0,
      WHEEL: 1,
      SECONDARY: 2,
      TOUCH: -1,
      ERASER: 5
    };
    POINTER_EVENTS = {
      enabled: "all",
      disabled: "none",
      // asserted as any so it can be freely assigned to React Element
      // "pointerEnvets" CSS prop
      inheritFromUI: "var(--ui-pointerEvents)"
    };
    YOUTUBE_STATES = {
      UNSTARTED: -1,
      ENDED: 0,
      PLAYING: 1,
      PAUSED: 2,
      BUFFERING: 3,
      CUED: 5
    };
    ENV = {
      TEST: "test",
      DEVELOPMENT: "development"
    };
    CLASSES = {
      SHAPE_ACTIONS_MENU: "App-menu__left",
      ZOOM_ACTIONS: "zoom-actions",
      SEARCH_MENU_INPUT_WRAPPER: "layer-ui__search-inputWrapper"
    };
    FONT_FAMILY = {
      Virgil: 1,
      Helvetica: 2,
      Cascadia: 3,
      // leave 4 unused as it was historically used for Assistant (which we don't use anymore) or custom font (Obsidian)
      Excalifont: 5,
      Nunito: 6,
      "Lilita One": 7,
      "Comic Shanns": 8,
      "Liberation Sans": 9
    };
    THEME = {
      LIGHT: "light",
      DARK: "dark"
    };
    FRAME_STYLE = {
      strokeColor: "#bbb",
      strokeWidth: 2,
      strokeStyle: "solid",
      fillStyle: "solid",
      roughness: 0,
      roundness: null,
      backgroundColor: "transparent",
      radius: 8,
      nameOffsetY: 3,
      nameColorLightTheme: "#999999",
      nameColorDarkTheme: "#7a7a7a",
      nameFontSize: 14,
      nameLineHeight: 1.25
    };
    WINDOWS_EMOJI_FALLBACK_FONT = "Segoe UI Emoji";
    MIN_FONT_SIZE = 1;
    DEFAULT_FONT_SIZE = 20;
    DEFAULT_FONT_FAMILY = FONT_FAMILY.Excalifont;
    DEFAULT_TEXT_ALIGN = "left";
    DEFAULT_VERTICAL_ALIGN = "top";
    DEFAULT_TRANSFORM_HANDLE_SPACING = 2;
    SIDE_RESIZING_THRESHOLD = 2 * DEFAULT_TRANSFORM_HANDLE_SPACING;
    EPSILON = 1e-5;
    DEFAULT_COLLISION_THRESHOLD = 2 * SIDE_RESIZING_THRESHOLD - EPSILON;
    COLOR_WHITE = "#ffffff";
    COLOR_CHARCOAL_BLACK = "#1e1e1e";
    COLOR_VOICE_CALL = "#a2f1a6";
    DEFAULT_GRID_SIZE = 20;
    DEFAULT_GRID_STEP = 5;
    IMAGE_MIME_TYPES = {
      svg: "image/svg+xml",
      png: "image/png",
      jpg: "image/jpeg",
      gif: "image/gif",
      webp: "image/webp",
      bmp: "image/bmp",
      ico: "image/x-icon",
      avif: "image/avif",
      jfif: "image/jfif"
    };
    ALLOWED_PASTE_MIME_TYPES = ["text/plain", "text/html"];
    MIME_TYPES = {
      json: "application/json",
      // excalidraw data
      excalidraw: "application/vnd.excalidraw+json",
      excalidrawlib: "application/vnd.excalidrawlib+json",
      // image-encoded excalidraw data
      "excalidraw.svg": "image/svg+xml",
      "excalidraw.png": "image/png",
      // binary
      binary: "application/octet-stream",
      // image
      ...IMAGE_MIME_TYPES
    };
    EXPORT_IMAGE_TYPES = {
      png: "png",
      svg: "svg",
      clipboard: "clipboard"
    };
    EXPORT_DATA_TYPES = {
      excalidraw: "excalidraw",
      excalidrawClipboard: "excalidraw/clipboard",
      excalidrawLibrary: "excalidrawlib",
      excalidrawClipboardWithAPI: "excalidraw-api/clipboard"
    };
    EXPORT_SOURCE = window.EXCALIDRAW_EXPORT_SOURCE || window.location.origin;
    IMAGE_RENDER_TIMEOUT = 500;
    TAP_TWICE_TIMEOUT = 300;
    TOUCH_CTX_MENU_TIMEOUT = 500;
    SCROLL_TIMEOUT = 100;
    ZOOM_STEP = 0.1;
    MIN_ZOOM = 0.1;
    MAX_ZOOM = 30;
    HYPERLINK_TOOLTIP_DELAY = 300;
    THEME_FILTER = variables_module_default.themeFilter;
    URL_QUERY_KEYS = {
      addLibrary: "addLibrary"
    };
    URL_HASH_KEYS = {
      addLibrary: "addLibrary"
    };
    DEFAULT_UI_OPTIONS = {
      canvasActions: {
        changeViewBackgroundColor: true,
        clearCanvas: true,
        export: { saveFileToDisk: true },
        loadScene: true,
        saveToActiveFile: true,
        toggleTheme: null,
        saveAsImage: true
      },
      tools: {
        image: true
      }
    };
    MQ_MAX_WIDTH_PORTRAIT = 730;
    MQ_MAX_WIDTH_LANDSCAPE = 1e3;
    MQ_MAX_HEIGHT_LANDSCAPE = 500;
    MQ_RIGHT_SIDEBAR_MIN_WIDTH = 1229;
    LIBRARY_SIDEBAR_WIDTH = parseInt(variables_module_default.rightSidebarWidth);
    MAX_DECIMALS_FOR_SVG_EXPORT = 2;
    EXPORT_SCALES = [1, 2, 3];
    DEFAULT_EXPORT_PADDING = 10;
    DEFAULT_MAX_IMAGE_WIDTH_OR_HEIGHT = 1440;
    MAX_ALLOWED_FILE_BYTES = 4 * 1024 * 1024;
    SVG_NS = "http://www.w3.org/2000/svg";
    VERSIONS = {
      excalidraw: 2,
      excalidrawLibrary: 2
    };
    BOUND_TEXT_PADDING = 5;
    ARROW_LABEL_WIDTH_FRACTION = 0.7;
    ARROW_LABEL_FONT_SIZE_TO_MIN_WIDTH_RATIO = 11;
    VERTICAL_ALIGN = {
      TOP: "top",
      MIDDLE: "middle",
      BOTTOM: "bottom"
    };
    TEXT_ALIGN = {
      LEFT: "left",
      CENTER: "center",
      RIGHT: "right"
    };
    ELEMENT_READY_TO_ERASE_OPACITY = 20;
    DEFAULT_PROPORTIONAL_RADIUS = 0.25;
    DEFAULT_ADAPTIVE_RADIUS = 32;
    ROUNDNESS = {
      // Used for legacy rounding (rectangles), which currently works the same
      // as PROPORTIONAL_RADIUS, but we need to differentiate for UI purposes and
      // forwards-compat.
      LEGACY: 1,
      // Used for linear elements & diamonds
      PROPORTIONAL_RADIUS: 2,
      // Current default algorithm for rectangles, using fixed pixel radius.
      // It's working similarly to a regular border-radius, but attemps to make
      // radius visually similar across differnt element sizes, especially
      // very large and very small elements.
      //
      // NOTE right now we don't allow configuration and use a constant radius
      // (see DEFAULT_ADAPTIVE_RADIUS constant)
      ADAPTIVE_RADIUS: 3
    };
    ROUGHNESS = {
      architect: 0,
      artist: 1,
      cartoonist: 2
    };
    STROKE_WIDTH = {
      thin: 1,
      bold: 2,
      extraBold: 4
    };
    DEFAULT_ELEMENT_PROPS = {
      strokeColor: COLOR_PALETTE.black,
      backgroundColor: COLOR_PALETTE.transparent,
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: ROUGHNESS.artist,
      opacity: 100,
      locked: false
    };
    LIBRARY_SIDEBAR_TAB = "library";
    CANVAS_SEARCH_TAB = "search";
    DEFAULT_SIDEBAR = {
      name: "default",
      defaultTab: LIBRARY_SIDEBAR_TAB
    };
    LIBRARY_DISABLED_TYPES = /* @__PURE__ */ new Set([
      "iframe",
      "embeddable",
      "image"
    ]);
    TOOL_TYPE = {
      selection: "selection",
      rectangle: "rectangle",
      diamond: "diamond",
      ellipse: "ellipse",
      arrow: "arrow",
      line: "line",
      freedraw: "freedraw",
      text: "text",
      image: "image",
      eraser: "eraser",
      hand: "hand",
      frame: "frame",
      magicframe: "magicframe",
      embeddable: "embeddable",
      laser: "laser"
    };
    EDITOR_LS_KEYS = {
      OAI_API_KEY: "excalidraw-oai-api-key",
      // legacy naming (non)scheme
      MERMAID_TO_EXCALIDRAW: "mermaid-to-excalidraw",
      PUBLISH_LIBRARY: "publish-library-data"
    };
    DEFAULT_FILENAME = "Untitled";
    STATS_PANELS = { generalStats: 1, elementProperties: 2 };
    MIN_WIDTH_OR_HEIGHT = 1;
    ARROW_TYPE = {
      sharp: "sharp",
      round: "round",
      elbow: "elbow"
    };
  }
});

// ../math/utils.ts
var PRECISION, clamp, round, roundToStep, average, isFiniteNumber;
var init_utils = __esm({
  "../math/utils.ts"() {
    "use strict";
    init_define_import_meta_env();
    PRECISION = 1e-4;
    clamp = (value, min, max) => {
      return Math.min(Math.max(value, min), max);
    };
    round = (value, precision, func = "round") => {
      const multiplier = Math.pow(10, precision);
      return Math[func]((value + Number.EPSILON) * multiplier) / multiplier;
    };
    roundToStep = (value, step, func = "round") => {
      const factor = 1 / step;
      return Math[func](value * factor) / factor;
    };
    average = (a, b) => (a + b) / 2;
    isFiniteNumber = (value) => {
      return typeof value === "number" && Number.isFinite(value);
    };
  }
});

// ../math/angle.ts
function degreesToRadians(degrees) {
  return degrees * Math.PI / 180;
}
function radiansToDegrees(degrees) {
  return degrees * 180 / Math.PI;
}
function isRightAngleRads(rads) {
  return Math.abs(Math.sin(2 * rads)) < PRECISION;
}
var normalizeRadians;
var init_angle = __esm({
  "../math/angle.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_utils();
    normalizeRadians = (angle) => {
      if (angle < 0) {
        return angle + 2 * Math.PI;
      }
      if (angle >= 2 * Math.PI) {
        return angle - 2 * Math.PI;
      }
      return angle;
    };
  }
});

// ../math/arc.ts
var init_arc = __esm({
  "../math/arc.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_angle();
    init_utils();
  }
});

// ../math/vector.ts
function vector(x, y, originX = 0, originY = 0) {
  return [x - originX, y - originY];
}
function vectorFromPoint(p, origin = [0, 0]) {
  return vector(p[0] - origin[0], p[1] - origin[1]);
}
function vectorCross(a, b) {
  return a[0] * b[1] - b[0] * a[1];
}
function vectorAdd(a, b) {
  return [a[0] + b[0], a[1] + b[1]];
}
function vectorSubtract(start2, end) {
  return [start2[0] - end[0], start2[1] - end[1]];
}
function vectorScale(v, scalar) {
  return vector(v[0] * scalar, v[1] * scalar);
}
var init_vector = __esm({
  "../math/vector.ts"() {
    "use strict";
    init_define_import_meta_env();
  }
});

// ../math/point.ts
function pointFrom(x, y) {
  return [x, y];
}
function pointFromArray(numberArray) {
  return numberArray.length === 2 ? pointFrom(numberArray[0], numberArray[1]) : void 0;
}
function pointFromPair(pair) {
  return pair;
}
function pointFromVector(v) {
  return v;
}
function isPoint(p) {
  return Array.isArray(p) && p.length === 2 && typeof p[0] === "number" && !isNaN(p[0]) && typeof p[1] === "number" && !isNaN(p[1]);
}
function pointsEqual(a, b) {
  const abs2 = Math.abs;
  return abs2(a[0] - b[0]) < PRECISION && abs2(a[1] - b[1]) < PRECISION;
}
function pointRotateRads([x, y], [cx, cy], angle) {
  return pointFrom(
    (x - cx) * Math.cos(angle) - (y - cy) * Math.sin(angle) + cx,
    (x - cx) * Math.sin(angle) + (y - cy) * Math.cos(angle) + cy
  );
}
function pointTranslate(p, v = [0, 0]) {
  return pointFrom(p[0] + v[0], p[1] + v[1]);
}
function pointCenter(a, b) {
  return pointFrom((a[0] + b[0]) / 2, (a[1] + b[1]) / 2);
}
function pointDistance(a, b) {
  return Math.hypot(b[0] - a[0], b[1] - a[1]);
}
function pointDistanceSq(a, b) {
  return Math.hypot(b[0] - a[0], b[1] - a[1]);
}
var pointScaleFromOrigin, isPointWithinBounds;
var init_point = __esm({
  "../math/point.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_angle();
    init_utils();
    init_vector();
    pointScaleFromOrigin = (p, mid, multiplier) => pointTranslate(mid, vectorScale(vectorFromPoint(p, mid), multiplier));
    isPointWithinBounds = (p, q, r) => {
      return q[0] <= Math.max(p[0], r[0]) && q[0] >= Math.min(p[0], r[0]) && q[1] <= Math.max(p[1], r[1]) && q[1] >= Math.min(p[1], r[1]);
    };
  }
});

// ../math/curve.ts
function curve(a, b, c, d) {
  return [a, b, c, d];
}
var init_curve = __esm({
  "../math/curve.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_point();
  }
});

// ../math/line.ts
var init_line = __esm({
  "../math/line.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_point();
  }
});

// ../math/segment.ts
function lineSegment(a, b) {
  return [a, b];
}
var segmentsIntersectAt, pointOnLineSegment, distanceToLineSegment;
var init_segment = __esm({
  "../math/segment.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_point();
    init_utils();
    init_vector();
    segmentsIntersectAt = (a, b) => {
      const a0 = vectorFromPoint(a[0]);
      const a1 = vectorFromPoint(a[1]);
      const b0 = vectorFromPoint(b[0]);
      const b1 = vectorFromPoint(b[1]);
      const r = vectorSubtract(a1, a0);
      const s = vectorSubtract(b1, b0);
      const denominator = vectorCross(r, s);
      if (denominator === 0) {
        return null;
      }
      const i = vectorSubtract(vectorFromPoint(b[0]), vectorFromPoint(a[0]));
      const u = vectorCross(i, r) / denominator;
      const t2 = vectorCross(i, s) / denominator;
      if (u === 0) {
        return null;
      }
      const p = vectorAdd(a0, vectorScale(r, t2));
      if (t2 >= 0 && t2 < 1 && u >= 0 && u < 1) {
        return pointFromVector(p);
      }
      return null;
    };
    pointOnLineSegment = (point2, line, threshold = PRECISION) => {
      const distance3 = distanceToLineSegment(point2, line);
      if (distance3 === 0) {
        return true;
      }
      return distance3 < threshold;
    };
    distanceToLineSegment = (point2, line) => {
      const [x, y] = point2;
      const [[x1, y1], [x2, y2]] = line;
      const A = x - x1;
      const B = y - y1;
      const C = x2 - x1;
      const D = y2 - y1;
      const dot2 = A * C + B * D;
      const len_sq = C * C + D * D;
      let param = -1;
      if (len_sq !== 0) {
        param = dot2 / len_sq;
      }
      let xx;
      let yy;
      if (param < 0) {
        xx = x1;
        yy = y1;
      } else if (param > 1) {
        xx = x2;
        yy = y2;
      } else {
        xx = x1 + param * C;
        yy = y1 + param * D;
      }
      const dx = x - xx;
      const dy = y - yy;
      return Math.sqrt(dx * dx + dy * dy);
    };
  }
});

// ../math/polygon.ts
function polygon(...points) {
  return polygonClose(points);
}
function polygonFromPoints(points) {
  return polygonClose(points);
}
function polygonClose(polygon2) {
  return polygonIsClosed(polygon2) ? polygon2 : [...polygon2, polygon2[0]];
}
function polygonIsClosed(polygon2) {
  return pointsEqual(polygon2[0], polygon2[polygon2.length - 1]);
}
var polygonIncludesPoint, pointOnPolygon;
var init_polygon = __esm({
  "../math/polygon.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_point();
    init_segment();
    init_utils();
    polygonIncludesPoint = (point2, polygon2) => {
      const x = point2[0];
      const y = point2[1];
      let inside = false;
      for (let i = 0, j = polygon2.length - 1; i < polygon2.length; j = i++) {
        const xi = polygon2[i][0];
        const yi = polygon2[i][1];
        const xj = polygon2[j][0];
        const yj = polygon2[j][1];
        if ((yi > y && yj <= y || yi <= y && yj > y) && x < (xj - xi) * (y - yi) / (yj - yi) + xi) {
          inside = !inside;
        }
      }
      return inside;
    };
    pointOnPolygon = (p, poly, threshold = PRECISION) => {
      let on = false;
      for (let i = 0, l = poly.length - 1; i < l; i++) {
        if (pointOnLineSegment(p, lineSegment(poly[i], poly[i + 1]), threshold)) {
          on = true;
          break;
        }
      }
      return on;
    };
  }
});

// ../math/range.ts
function rangeInclusive(start2, end) {
  return toBrandedType([start2, end]);
}
var rangesOverlap, rangeIntersection, rangeIncludesValue;
var init_range = __esm({
  "../math/range.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_utils2();
    rangesOverlap = ([a0, a1], [b0, b1]) => {
      if (a0 <= b0) {
        return a1 >= b0;
      }
      if (a0 >= b0) {
        return b1 >= a0;
      }
      return false;
    };
    rangeIntersection = ([a0, a1], [b0, b1]) => {
      const rangeStart = Math.max(a0, b0);
      const rangeEnd = Math.min(a1, b1);
      if (rangeStart <= rangeEnd) {
        return toBrandedType([rangeStart, rangeEnd]);
      }
      return null;
    };
    rangeIncludesValue = (value, [min, max]) => {
      return value >= min && value <= max;
    };
  }
});

// ../math/triangle.ts
function triangleIncludesPoint([a, b, c], p) {
  const triangleSign = (p1, p2, p3) => (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1]);
  const d1 = triangleSign(p, a, b);
  const d2 = triangleSign(p, b, c);
  const d3 = triangleSign(p, c, a);
  const has_neg = d1 < 0 || d2 < 0 || d3 < 0;
  const has_pos = d1 > 0 || d2 > 0 || d3 > 0;
  return !(has_neg && has_pos);
}
var init_triangle = __esm({
  "../math/triangle.ts"() {
    "use strict";
    init_define_import_meta_env();
  }
});

// ../math/types.ts
var init_types = __esm({
  "../math/types.ts"() {
    "use strict";
    init_define_import_meta_env();
  }
});

// ../math/index.ts
var init_math = __esm({
  "../math/index.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_arc();
    init_angle();
    init_curve();
    init_line();
    init_point();
    init_polygon();
    init_range();
    init_segment();
    init_triangle();
    init_types();
    init_vector();
    init_utils();
  }
});

// utils.ts
function invariant(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}
function addEventListener(target, type, listener, options) {
  if (!target) {
    return () => {
    };
  }
  target?.addEventListener?.(type, listener, options);
  return () => {
    target?.removeEventListener?.(type, listener, options);
  };
}
function getSvgPathFromStroke(points, closed = true) {
  const len = points.length;
  if (len < 4) {
    return ``;
  }
  let a = points[0];
  let b = points[1];
  const c = points[2];
  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(
    2
  )},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(
    b[1],
    c[1]
  ).toFixed(2)} T`;
  for (let i = 2, max = len - 1; i < max; i++) {
    a = points[i];
    b = points[i + 1];
    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(
      2
    )} `;
  }
  if (closed) {
    result += "Z";
  }
  return result;
}
var mockDateTime, getDateTime, capitalizeString, isToolIcon, isInputLike, isInteractive, isWritableElement, getFontFamilyString, getFontString, debounce, throttleRAF, easeOut, easeOutInterpolate, easeToValuesRAF, chunk, distance, updateActiveTool, getShortcutKey, viewportCoordsToSceneCoords, sceneCoordsToViewportCoords, getGlobalCSSVariable, RS_LTR_CHARS, RS_RTL_CHARS, RE_RTL_CHECK, isRTL, tupleToCoors, muteFSAbortError, findIndex, findLastIndex, isTransparent, resolvablePromise, getNearestScrollableContainer, focusNearestParent, preventUnload, bytesToHexString, getUpdatedTimestamp, arrayToMap, arrayToMapWithIndex, arrayToObject, arrayToList, isTestEnv, isDevEnv, wrapEvent, updateObject, getFrame, isPromiseLike, queryFocusableElements, _defaultIsShallowComparatorFallback, isShallowEqual, composeEventHandlers, assertNever, memoize, isMemberOf, cloneJSON, updateStable, normalizeEOL, toBrandedType, promiseTry, isAnyTrue;
var init_utils2 = __esm({
  "utils.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_colors();
    init_constants();
    mockDateTime = null;
    getDateTime = () => {
      if (mockDateTime) {
        return mockDateTime;
      }
      const date = /* @__PURE__ */ new Date();
      const year = date.getFullYear();
      const month = `${date.getMonth() + 1}`.padStart(2, "0");
      const day = `${date.getDate()}`.padStart(2, "0");
      const hr = `${date.getHours()}`.padStart(2, "0");
      const min = `${date.getMinutes()}`.padStart(2, "0");
      return `${year}-${month}-${day}-${hr}${min}`;
    };
    capitalizeString = (str) => str.charAt(0).toUpperCase() + str.slice(1);
    isToolIcon = (target) => target instanceof HTMLElement && target.className.includes("ToolIcon");
    isInputLike = (target) => target instanceof HTMLElement && target.dataset.type === "wysiwyg" || target instanceof HTMLBRElement || // newline in wysiwyg
    target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement;
    isInteractive = (target) => {
      return isInputLike(target) || target instanceof Element && !!target.closest("label, button");
    };
    isWritableElement = (target) => target instanceof HTMLElement && target.dataset.type === "wysiwyg" || target instanceof HTMLBRElement || // newline in wysiwyg
    target instanceof HTMLTextAreaElement || target instanceof HTMLInputElement && (target.type === "text" || target.type === "number" || target.type === "password");
    getFontFamilyString = ({
      fontFamily
    }) => {
      for (const [fontFamilyString, id] of Object.entries(FONT_FAMILY)) {
        if (id === fontFamily) {
          return `${fontFamilyString}, ${WINDOWS_EMOJI_FALLBACK_FONT}`;
        }
      }
      return WINDOWS_EMOJI_FALLBACK_FONT;
    };
    getFontString = ({
      fontSize,
      fontFamily
    }) => {
      return `${fontSize}px ${getFontFamilyString({ fontFamily })}`;
    };
    debounce = (fn, timeout) => {
      let handle = 0;
      let lastArgs = null;
      const ret = (...args) => {
        lastArgs = args;
        clearTimeout(handle);
        handle = window.setTimeout(() => {
          lastArgs = null;
          fn(...args);
        }, timeout);
      };
      ret.flush = () => {
        clearTimeout(handle);
        if (lastArgs) {
          const _lastArgs = lastArgs;
          lastArgs = null;
          fn(..._lastArgs);
        }
      };
      ret.cancel = () => {
        lastArgs = null;
        clearTimeout(handle);
      };
      return ret;
    };
    throttleRAF = (fn, opts) => {
      let timerId = null;
      let lastArgs = null;
      let lastArgsTrailing = null;
      const scheduleFunc = (args) => {
        timerId = window.requestAnimationFrame(() => {
          timerId = null;
          fn(...args);
          lastArgs = null;
          if (lastArgsTrailing) {
            lastArgs = lastArgsTrailing;
            lastArgsTrailing = null;
            scheduleFunc(lastArgs);
          }
        });
      };
      const ret = (...args) => {
        if (define_import_meta_env_default.MODE === "test") {
          fn(...args);
          return;
        }
        lastArgs = args;
        if (timerId === null) {
          scheduleFunc(lastArgs);
        } else if (opts?.trailing) {
          lastArgsTrailing = args;
        }
      };
      ret.flush = () => {
        if (timerId !== null) {
          cancelAnimationFrame(timerId);
          timerId = null;
        }
        if (lastArgs) {
          fn(...lastArgsTrailing || lastArgs);
          lastArgs = lastArgsTrailing = null;
        }
      };
      ret.cancel = () => {
        lastArgs = lastArgsTrailing = null;
        if (timerId !== null) {
          cancelAnimationFrame(timerId);
          timerId = null;
        }
      };
      return ret;
    };
    easeOut = (k) => {
      return 1 - Math.pow(1 - k, 4);
    };
    easeOutInterpolate = (from3, to, progress) => {
      return (to - from3) * easeOut(progress) + from3;
    };
    easeToValuesRAF = ({
      fromValues,
      toValues,
      onStep,
      duration = 250,
      interpolateValue,
      onStart,
      onEnd,
      onCancel
    }) => {
      let canceled = false;
      let frameId = 0;
      let startTime;
      function step(timestamp) {
        if (canceled) {
          return;
        }
        if (startTime === void 0) {
          startTime = timestamp;
          onStart?.();
        }
        const elapsed = Math.min(timestamp - startTime, duration);
        const factor = easeOut(elapsed / duration);
        const newValues = {};
        Object.keys(fromValues).forEach((key) => {
          const _key = key;
          const result = (toValues[_key] - fromValues[_key]) * factor + fromValues[_key];
          newValues[_key] = result;
        });
        onStep(newValues);
        if (elapsed < duration) {
          const progress = elapsed / duration;
          const newValues2 = {};
          Object.keys(fromValues).forEach((key) => {
            const _key = key;
            const startValue = fromValues[_key];
            const endValue = toValues[_key];
            let result;
            result = interpolateValue ? interpolateValue(startValue, endValue, progress, _key) : easeOutInterpolate(startValue, endValue, progress);
            if (result == null) {
              result = easeOutInterpolate(startValue, endValue, progress);
            }
            newValues2[_key] = result;
          });
          onStep(newValues2);
          frameId = window.requestAnimationFrame(step);
        } else {
          onStep(toValues);
          onEnd?.();
        }
      }
      frameId = window.requestAnimationFrame(step);
      return () => {
        onCancel?.();
        canceled = true;
        window.cancelAnimationFrame(frameId);
      };
    };
    chunk = (array, size) => {
      if (!array.length || size < 1) {
        return [];
      }
      let index = 0;
      let resIndex = 0;
      const result = Array(Math.ceil(array.length / size));
      while (index < array.length) {
        result[resIndex++] = array.slice(index, index += size);
      }
      return result;
    };
    distance = (x, y) => Math.abs(x - y);
    updateActiveTool = (appState, data) => {
      if (data.type === "custom") {
        return {
          ...appState.activeTool,
          type: "custom",
          customType: data.customType,
          locked: data.locked ?? appState.activeTool.locked
        };
      }
      return {
        ...appState.activeTool,
        lastActiveTool: data.lastActiveToolBeforeEraser === void 0 ? appState.activeTool.lastActiveTool : data.lastActiveToolBeforeEraser,
        type: data.type,
        customType: null,
        locked: data.locked ?? appState.activeTool.locked
      };
    };
    getShortcutKey = (shortcut) => {
      shortcut = shortcut.replace(/\bAlt\b/i, "Alt").replace(/\bShift\b/i, "Shift").replace(/\b(Enter|Return)\b/i, "Enter");
      if (isDarwin) {
        return shortcut.replace(/\bCtrlOrCmd\b/gi, "Cmd").replace(/\bAlt\b/i, "Option");
      }
      return shortcut.replace(/\bCtrlOrCmd\b/gi, "Ctrl");
    };
    viewportCoordsToSceneCoords = ({ clientX, clientY }, {
      zoom,
      offsetLeft,
      offsetTop,
      scrollX,
      scrollY
    }) => {
      const x = (clientX - offsetLeft) / zoom.value - scrollX;
      const y = (clientY - offsetTop) / zoom.value - scrollY;
      return { x, y };
    };
    sceneCoordsToViewportCoords = ({ sceneX, sceneY }, {
      zoom,
      offsetLeft,
      offsetTop,
      scrollX,
      scrollY
    }) => {
      const x = (sceneX + scrollX) * zoom.value + offsetLeft;
      const y = (sceneY + scrollY) * zoom.value + offsetTop;
      return { x, y };
    };
    getGlobalCSSVariable = (name) => getComputedStyle(document.documentElement).getPropertyValue(`--${name}`);
    RS_LTR_CHARS = "A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u0300-\u0590\u0800-\u1FFF\u2C00-\uFB1C\uFDFE-\uFE6F\uFEFD-\uFFFF";
    RS_RTL_CHARS = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
    RE_RTL_CHECK = new RegExp(`^[^${RS_LTR_CHARS}]*[${RS_RTL_CHARS}]`);
    isRTL = (text) => RE_RTL_CHECK.test(text);
    tupleToCoors = (xyTuple) => {
      const [x, y] = xyTuple;
      return { x, y };
    };
    muteFSAbortError = (error) => {
      if (error?.name === "AbortError") {
        console.warn(error);
        return;
      }
      throw error;
    };
    findIndex = (array, cb, fromIndex = 0) => {
      if (fromIndex < 0) {
        fromIndex = array.length + fromIndex;
      }
      fromIndex = Math.min(array.length, Math.max(fromIndex, 0));
      let index = fromIndex - 1;
      while (++index < array.length) {
        if (cb(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    };
    findLastIndex = (array, cb, fromIndex = array.length - 1) => {
      if (fromIndex < 0) {
        fromIndex = array.length + fromIndex;
      }
      fromIndex = Math.min(array.length - 1, Math.max(fromIndex, 0));
      let index = fromIndex + 1;
      while (--index > -1) {
        if (cb(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    };
    isTransparent = (color) => {
      const isRGBTransparent = color.length === 5 && color.substr(4, 1) === "0";
      const isRRGGBBTransparent = color.length === 9 && color.substr(7, 2) === "00";
      return isRGBTransparent || isRRGGBBTransparent || color === COLOR_PALETTE.transparent;
    };
    resolvablePromise = () => {
      let resolve;
      let reject;
      const promise = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
      });
      promise.resolve = resolve;
      promise.reject = reject;
      return promise;
    };
    getNearestScrollableContainer = (element) => {
      let parent = element.parentElement;
      while (parent) {
        if (parent === document.body) {
          return document;
        }
        const { overflowY } = window.getComputedStyle(parent);
        const hasScrollableContent = parent.scrollHeight > parent.clientHeight;
        if (hasScrollableContent && (overflowY === "auto" || overflowY === "scroll" || overflowY === "overlay")) {
          return parent;
        }
        parent = parent.parentElement;
      }
      return document;
    };
    focusNearestParent = (element) => {
      let parent = element.parentElement;
      while (parent) {
        if (parent.tabIndex > -1) {
          parent.focus();
          return;
        }
        parent = parent.parentElement;
      }
    };
    preventUnload = (event) => {
      event.preventDefault();
      event.returnValue = "";
    };
    bytesToHexString = (bytes) => {
      return Array.from(bytes).map((byte) => `0${byte.toString(16)}`.slice(-2)).join("");
    };
    getUpdatedTimestamp = () => isTestEnv() ? 1 : Date.now();
    arrayToMap = (items) => {
      if (items instanceof Map) {
        return items;
      }
      return items.reduce((acc, element) => {
        acc.set(typeof element === "string" ? element : element.id, element);
        return acc;
      }, /* @__PURE__ */ new Map());
    };
    arrayToMapWithIndex = (elements) => elements.reduce((acc, element, idx) => {
      acc.set(element.id, [element, idx]);
      return acc;
    }, /* @__PURE__ */ new Map());
    arrayToObject = (array, groupBy) => array.reduce((acc, value) => {
      acc[groupBy ? groupBy(value) : String(value)] = value;
      return acc;
    }, {});
    arrayToList = (array) => array.reduce((acc, curr, index) => {
      const node = { ...curr, prev: null, next: null };
      if (index !== 0) {
        const prevNode = acc[index - 1];
        node.prev = prevNode;
        prevNode.next = node;
        if (index === array.length - 1) {
          const firstNode = acc[0];
          node.next = firstNode;
          firstNode.prev = node;
        }
      }
      acc.push(node);
      return acc;
    }, []);
    isTestEnv = () => define_import_meta_env_default.MODE === "test";
    isDevEnv = () => define_import_meta_env_default.MODE === "development";
    wrapEvent = (name, nativeEvent) => {
      return new CustomEvent(name, {
        detail: {
          nativeEvent
        },
        cancelable: true
      });
    };
    updateObject = (obj, updates) => {
      let didChange = false;
      for (const key in updates) {
        const value = updates[key];
        if (typeof value !== "undefined") {
          if (obj[key] === value && // if object, always update because its attrs could have changed
          (typeof value !== "object" || value === null)) {
            continue;
          }
          didChange = true;
        }
      }
      if (!didChange) {
        return obj;
      }
      return {
        ...obj,
        ...updates
      };
    };
    getFrame = () => {
      try {
        return window.self === window.top ? "top" : "iframe";
      } catch (error) {
        return "iframe";
      }
    };
    isPromiseLike = (value) => {
      return !!value && typeof value === "object" && "then" in value && "catch" in value && "finally" in value;
    };
    queryFocusableElements = (container) => {
      const focusableElements = container?.querySelectorAll(
        "button, a, input, select, textarea, div[tabindex], label[tabindex]"
      );
      return focusableElements ? Array.from(focusableElements).filter(
        (element) => element.tabIndex > -1 && !element.disabled
      ) : [];
    };
    _defaultIsShallowComparatorFallback = (a, b) => {
      if (Array.isArray(a) && Array.isArray(b) && a.length === 0 && b.length === 0) {
        return true;
      }
      return a === b;
    };
    isShallowEqual = (objA, objB, comparators, debug = false) => {
      const aKeys = Object.keys(objA);
      const bKeys = Object.keys(objB);
      if (aKeys.length !== bKeys.length) {
        if (debug) {
          console.warn(
            `%cisShallowEqual: objects don't have same properties ->`,
            "color: #8B4000",
            objA,
            objB
          );
        }
        return false;
      }
      if (comparators && Array.isArray(comparators)) {
        for (const key of comparators) {
          const ret = objA[key] === objB[key] || _defaultIsShallowComparatorFallback(objA[key], objB[key]);
          if (!ret) {
            if (debug) {
              console.warn(
                `%cisShallowEqual: ${key} not equal ->`,
                "color: #8B4000",
                objA[key],
                objB[key]
              );
            }
            return false;
          }
        }
        return true;
      }
      return aKeys.every((key) => {
        const comparator = comparators?.[key];
        const ret = comparator ? comparator(objA[key], objB[key]) : objA[key] === objB[key] || _defaultIsShallowComparatorFallback(objA[key], objB[key]);
        if (!ret && debug) {
          console.warn(
            `%cisShallowEqual: ${key} not equal ->`,
            "color: #8B4000",
            objA[key],
            objB[key]
          );
        }
        return ret;
      });
    };
    composeEventHandlers = (originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) => {
      return function handleEvent(event) {
        originalEventHandler?.(event);
        if (!checkForDefaultPrevented || !event?.defaultPrevented) {
          return ourEventHandler?.(event);
        }
      };
    };
    assertNever = (value, message, softAssert) => {
      if (!message) {
        return value;
      }
      if (softAssert) {
        console.error(message);
        return value;
      }
      throw new Error(message);
    };
    memoize = (func) => {
      let lastArgs;
      let lastResult;
      const ret = function(opts) {
        const currentArgs = Object.entries(opts);
        if (lastArgs) {
          let argsAreEqual = true;
          for (const [key, value] of currentArgs) {
            if (lastArgs.get(key) !== value) {
              argsAreEqual = false;
              break;
            }
          }
          if (argsAreEqual) {
            return lastResult;
          }
        }
        const result = func(opts);
        lastArgs = new Map(currentArgs);
        lastResult = result;
        return result;
      };
      ret.clear = () => {
        lastArgs = void 0;
        lastResult = void 0;
      };
      return ret;
    };
    isMemberOf = (collection, value) => {
      return collection instanceof Set || collection instanceof Map ? collection.has(value) : "includes" in collection ? collection.includes(value) : collection.hasOwnProperty(value);
    };
    cloneJSON = (obj) => JSON.parse(JSON.stringify(obj));
    updateStable = (prevValue, nextValue) => {
      if (isShallowEqual(prevValue, nextValue)) {
        return prevValue;
      }
      return nextValue;
    };
    normalizeEOL = (str) => {
      return str.replace(/\r?\n|\r/g, "\n");
    };
    toBrandedType = (value) => {
      return value;
    };
    promiseTry = async (fn, ...args) => {
      return new Promise((resolve) => {
        resolve(fn(...args));
      });
    };
    isAnyTrue = (...args) => Math.max(...args.map((arg) => arg ? 1 : 0)) > 0;
  }
});

// element/typeChecks.ts
var isInitializedImageElement, isImageElement, isEmbeddableElement, isIframeElement, isIframeLikeElement, isTextElement, isFrameElement, isMagicFrameElement, isFrameLikeElement, isFreeDrawElement, isFreeDrawElementType, isLinearElement, isArrowElement, isElbowArrow, isLinearElementType, isBindingElement, isBindingElementType, isBindableElement, isRectanguloidElement, isRectangularElement, isTextBindableContainer, isExcalidrawElement, isFlowchartNodeElement, hasBoundTextElement, isBoundToContainer, isUsingAdaptiveRadius, isUsingProportionalRadius, canApplyRoundnessTypeToElement, getDefaultRoundnessTypeForElement, isFixedPointBinding;
var init_typeChecks = __esm({
  "element/typeChecks.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_utils2();
    isInitializedImageElement = (element) => {
      return !!element && element.type === "image" && !!element.fileId;
    };
    isImageElement = (element) => {
      return !!element && element.type === "image";
    };
    isEmbeddableElement = (element) => {
      return !!element && element.type === "embeddable";
    };
    isIframeElement = (element) => {
      return !!element && element.type === "iframe";
    };
    isIframeLikeElement = (element) => {
      return !!element && (element.type === "iframe" || element.type === "embeddable");
    };
    isTextElement = (element) => {
      return element != null && element.type === "text";
    };
    isFrameElement = (element) => {
      return element != null && element.type === "frame";
    };
    isMagicFrameElement = (element) => {
      return element != null && element.type === "magicframe";
    };
    isFrameLikeElement = (element) => {
      return element != null && (element.type === "frame" || element.type === "magicframe");
    };
    isFreeDrawElement = (element) => {
      return element != null && isFreeDrawElementType(element.type);
    };
    isFreeDrawElementType = (elementType) => {
      return elementType === "freedraw";
    };
    isLinearElement = (element) => {
      return element != null && isLinearElementType(element.type);
    };
    isArrowElement = (element) => {
      return element != null && element.type === "arrow";
    };
    isElbowArrow = (element) => {
      return isArrowElement(element) && element.elbowed;
    };
    isLinearElementType = (elementType) => {
      return elementType === "arrow" || elementType === "line";
    };
    isBindingElement = (element, includeLocked = true) => {
      return element != null && (!element.locked || includeLocked === true) && isBindingElementType(element.type);
    };
    isBindingElementType = (elementType) => {
      return elementType === "arrow";
    };
    isBindableElement = (element, includeLocked = true) => {
      return element != null && (!element.locked || includeLocked === true) && (element.type === "rectangle" || element.type === "diamond" || element.type === "ellipse" || element.type === "image" || element.type === "iframe" || element.type === "embeddable" || element.type === "frame" || element.type === "magicframe" || element.type === "text" && !element.containerId);
    };
    isRectanguloidElement = (element) => {
      return element != null && (element.type === "rectangle" || element.type === "diamond" || element.type === "image" || element.type === "iframe" || element.type === "embeddable" || element.type === "frame" || element.type === "magicframe" || element.type === "text" && !element.containerId);
    };
    isRectangularElement = (element) => {
      return element != null && (element.type === "rectangle" || element.type === "image" || element.type === "text" || element.type === "iframe" || element.type === "embeddable" || element.type === "frame" || element.type === "magicframe" || element.type === "freedraw");
    };
    isTextBindableContainer = (element, includeLocked = true) => {
      return element != null && (!element.locked || includeLocked === true) && (element.type === "rectangle" || element.type === "diamond" || element.type === "ellipse" || isArrowElement(element));
    };
    isExcalidrawElement = (element) => {
      const type = element?.type;
      if (!type) {
        return false;
      }
      switch (type) {
        case "text":
        case "diamond":
        case "rectangle":
        case "iframe":
        case "embeddable":
        case "ellipse":
        case "arrow":
        case "freedraw":
        case "line":
        case "frame":
        case "magicframe":
        case "image":
        case "selection": {
          return true;
        }
        default: {
          assertNever(type, null);
          return false;
        }
      }
    };
    isFlowchartNodeElement = (element) => {
      return element.type === "rectangle" || element.type === "ellipse" || element.type === "diamond";
    };
    hasBoundTextElement = (element) => {
      return isTextBindableContainer(element) && !!element.boundElements?.some(({ type }) => type === "text");
    };
    isBoundToContainer = (element) => {
      return element !== null && "containerId" in element && element.containerId !== null && isTextElement(element);
    };
    isUsingAdaptiveRadius = (type) => type === "rectangle" || type === "embeddable" || type === "iframe" || type === "image";
    isUsingProportionalRadius = (type) => type === "line" || type === "arrow" || type === "diamond";
    canApplyRoundnessTypeToElement = (roundnessType, element) => {
      if ((roundnessType === ROUNDNESS.ADAPTIVE_RADIUS || // if legacy roundness, it can be applied to elements that currently
      // use adaptive radius
      roundnessType === ROUNDNESS.LEGACY) && isUsingAdaptiveRadius(element.type)) {
        return true;
      }
      if (roundnessType === ROUNDNESS.PROPORTIONAL_RADIUS && isUsingProportionalRadius(element.type)) {
        return true;
      }
      return false;
    };
    getDefaultRoundnessTypeForElement = (element) => {
      if (isUsingProportionalRadius(element.type)) {
        return {
          type: ROUNDNESS.PROPORTIONAL_RADIUS
        };
      }
      if (isUsingAdaptiveRadius(element.type)) {
        return {
          type: ROUNDNESS.ADAPTIVE_RADIUS
        };
      }
      return null;
    };
    isFixedPointBinding = (binding) => {
      return Object.hasOwn(binding, "fixedPoint") && binding.fixedPoint != null;
    };
  }
});

// random.ts
import { Random } from "roughjs/bin/math";
import { nanoid } from "nanoid";
var random, testIdBase, randomInteger, randomId;
var init_random = __esm({
  "random.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_utils2();
    random = new Random(Date.now());
    testIdBase = 0;
    randomInteger = () => Math.floor(random.next() * 2 ** 31);
    randomId = () => isTestEnv() ? `id${testIdBase++}` : nanoid();
  }
});

// errors.ts
var CanvasError, AbortError, ImageSceneDataError, InvalidFractionalIndexError;
var init_errors = __esm({
  "errors.ts"() {
    "use strict";
    init_define_import_meta_env();
    CanvasError = class extends Error {
      constructor(message = "Couldn't export canvas.", name = "CANVAS_ERROR") {
        super();
        this.name = name;
        this.message = message;
      }
    };
    AbortError = class extends DOMException {
      constructor(message = "Request Aborted") {
        super(message, "AbortError");
      }
    };
    ImageSceneDataError = class extends Error {
      code;
      constructor(message = "Image Scene Data Error", code = "IMAGE_SCENE_DATA_ERROR") {
        super(message);
        this.name = "EncodingError";
        this.code = code;
      }
    };
    InvalidFractionalIndexError = class extends Error {
      code = "ELEMENT_HAS_INVALID_INDEX";
    };
  }
});

// appState.ts
var defaultExportScale, getDefaultAppState, APP_STATE_STORAGE_CONF, _clearAppStateForStorage, cleanAppStateForExport, clearAppStateForDatabase, isEraserActive, isHandToolActive;
var init_appState = __esm({
  "appState.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_colors();
    init_constants();
    defaultExportScale = EXPORT_SCALES.includes(devicePixelRatio) ? devicePixelRatio : 1;
    getDefaultAppState = () => {
      return {
        showWelcomeScreen: false,
        theme: THEME.LIGHT,
        collaborators: /* @__PURE__ */ new Map(),
        currentChartType: "bar",
        currentItemBackgroundColor: DEFAULT_ELEMENT_PROPS.backgroundColor,
        currentItemEndArrowhead: "arrow",
        currentItemFillStyle: DEFAULT_ELEMENT_PROPS.fillStyle,
        currentItemFontFamily: DEFAULT_FONT_FAMILY,
        currentItemFontSize: DEFAULT_FONT_SIZE,
        currentItemOpacity: DEFAULT_ELEMENT_PROPS.opacity,
        currentItemRoughness: DEFAULT_ELEMENT_PROPS.roughness,
        currentItemStartArrowhead: null,
        currentItemStrokeColor: DEFAULT_ELEMENT_PROPS.strokeColor,
        currentItemRoundness: "round",
        currentItemArrowType: ARROW_TYPE.round,
        currentItemStrokeStyle: DEFAULT_ELEMENT_PROPS.strokeStyle,
        currentItemStrokeWidth: DEFAULT_ELEMENT_PROPS.strokeWidth,
        currentItemTextAlign: DEFAULT_TEXT_ALIGN,
        currentHoveredFontFamily: null,
        cursorButton: "up",
        activeEmbeddable: null,
        newElement: null,
        editingTextElement: null,
        editingGroupId: null,
        editingLinearElement: null,
        activeTool: {
          type: "selection",
          customType: null,
          locked: DEFAULT_ELEMENT_PROPS.locked,
          lastActiveTool: null
        },
        penMode: false,
        penDetected: false,
        errorMessage: null,
        exportBackground: true,
        exportScale: defaultExportScale,
        exportEmbedScene: false,
        exportWithDarkMode: false,
        fileHandle: null,
        gridSize: DEFAULT_GRID_SIZE,
        gridStep: DEFAULT_GRID_STEP,
        gridModeEnabled: false,
        isBindingEnabled: true,
        defaultSidebarDockedPreference: false,
        isLoading: false,
        isResizing: false,
        isRotating: false,
        lastPointerDownWith: "mouse",
        multiElement: null,
        name: null,
        contextMenu: null,
        openMenu: null,
        openPopup: null,
        openSidebar: null,
        openDialog: null,
        pasteDialog: { shown: false, data: null },
        previousSelectedElementIds: {},
        resizingElement: null,
        scrolledOutside: false,
        scrollX: 0,
        scrollY: 0,
        selectedElementIds: {},
        selectedGroupIds: {},
        selectedElementsAreBeingDragged: false,
        selectionElement: null,
        shouldCacheIgnoreZoom: false,
        stats: {
          open: false,
          panels: STATS_PANELS.generalStats | STATS_PANELS.elementProperties
        },
        startBoundElement: null,
        suggestedBindings: [],
        frameRendering: { enabled: true, clip: true, name: true, outline: true },
        frameToHighlight: null,
        editingFrame: null,
        elementsToHighlight: null,
        toast: null,
        viewBackgroundColor: COLOR_PALETTE.white,
        zenModeEnabled: false,
        zoom: {
          value: 1
        },
        viewModeEnabled: false,
        pendingImageElementId: null,
        showHyperlinkPopup: false,
        selectedLinearElement: null,
        snapLines: [],
        originSnapOffset: {
          x: 0,
          y: 0
        },
        objectsSnapModeEnabled: false,
        userToFollow: null,
        followedBy: /* @__PURE__ */ new Set(),
        searchMatches: []
      };
    };
    APP_STATE_STORAGE_CONF = /* @__PURE__ */ ((config) => config)({
      showWelcomeScreen: { browser: true, export: false, server: false },
      theme: { browser: true, export: false, server: false },
      collaborators: { browser: false, export: false, server: false },
      currentChartType: { browser: true, export: false, server: false },
      currentItemBackgroundColor: { browser: true, export: false, server: false },
      currentItemEndArrowhead: { browser: true, export: false, server: false },
      currentItemFillStyle: { browser: true, export: false, server: false },
      currentItemFontFamily: { browser: true, export: false, server: false },
      currentItemFontSize: { browser: true, export: false, server: false },
      currentItemRoundness: {
        browser: true,
        export: false,
        server: false
      },
      currentItemArrowType: {
        browser: true,
        export: false,
        server: false
      },
      currentItemOpacity: { browser: true, export: false, server: false },
      currentItemRoughness: { browser: true, export: false, server: false },
      currentItemStartArrowhead: { browser: true, export: false, server: false },
      currentItemStrokeColor: { browser: true, export: false, server: false },
      currentItemStrokeStyle: { browser: true, export: false, server: false },
      currentItemStrokeWidth: { browser: true, export: false, server: false },
      currentItemTextAlign: { browser: true, export: false, server: false },
      currentHoveredFontFamily: { browser: false, export: false, server: false },
      cursorButton: { browser: true, export: false, server: false },
      activeEmbeddable: { browser: false, export: false, server: false },
      newElement: { browser: false, export: false, server: false },
      editingTextElement: { browser: false, export: false, server: false },
      editingGroupId: { browser: true, export: false, server: false },
      editingLinearElement: { browser: false, export: false, server: false },
      activeTool: { browser: true, export: false, server: false },
      penMode: { browser: true, export: false, server: false },
      penDetected: { browser: true, export: false, server: false },
      errorMessage: { browser: false, export: false, server: false },
      exportBackground: { browser: true, export: false, server: false },
      exportEmbedScene: { browser: true, export: false, server: false },
      exportScale: { browser: true, export: false, server: false },
      exportWithDarkMode: { browser: true, export: false, server: false },
      fileHandle: { browser: false, export: false, server: false },
      gridSize: { browser: true, export: true, server: true },
      gridStep: { browser: true, export: true, server: true },
      gridModeEnabled: { browser: true, export: true, server: true },
      height: { browser: false, export: false, server: false },
      isBindingEnabled: { browser: false, export: false, server: false },
      defaultSidebarDockedPreference: {
        browser: true,
        export: false,
        server: false
      },
      isLoading: { browser: false, export: false, server: false },
      isResizing: { browser: false, export: false, server: false },
      isRotating: { browser: false, export: false, server: false },
      lastPointerDownWith: { browser: true, export: false, server: false },
      multiElement: { browser: false, export: false, server: false },
      name: { browser: true, export: false, server: false },
      offsetLeft: { browser: false, export: false, server: false },
      offsetTop: { browser: false, export: false, server: false },
      contextMenu: { browser: false, export: false, server: false },
      openMenu: { browser: true, export: false, server: false },
      openPopup: { browser: false, export: false, server: false },
      openSidebar: { browser: true, export: false, server: false },
      openDialog: { browser: false, export: false, server: false },
      pasteDialog: { browser: false, export: false, server: false },
      previousSelectedElementIds: { browser: true, export: false, server: false },
      resizingElement: { browser: false, export: false, server: false },
      scrolledOutside: { browser: true, export: false, server: false },
      scrollX: { browser: true, export: false, server: false },
      scrollY: { browser: true, export: false, server: false },
      selectedElementIds: { browser: true, export: false, server: false },
      selectedGroupIds: { browser: true, export: false, server: false },
      selectedElementsAreBeingDragged: {
        browser: false,
        export: false,
        server: false
      },
      selectionElement: { browser: false, export: false, server: false },
      shouldCacheIgnoreZoom: { browser: true, export: false, server: false },
      stats: { browser: true, export: false, server: false },
      startBoundElement: { browser: false, export: false, server: false },
      suggestedBindings: { browser: false, export: false, server: false },
      frameRendering: { browser: false, export: false, server: false },
      frameToHighlight: { browser: false, export: false, server: false },
      editingFrame: { browser: false, export: false, server: false },
      elementsToHighlight: { browser: false, export: false, server: false },
      toast: { browser: false, export: false, server: false },
      viewBackgroundColor: { browser: true, export: true, server: true },
      width: { browser: false, export: false, server: false },
      zenModeEnabled: { browser: true, export: false, server: false },
      zoom: { browser: true, export: false, server: false },
      viewModeEnabled: { browser: false, export: false, server: false },
      pendingImageElementId: { browser: false, export: false, server: false },
      showHyperlinkPopup: { browser: false, export: false, server: false },
      selectedLinearElement: { browser: true, export: false, server: false },
      snapLines: { browser: false, export: false, server: false },
      originSnapOffset: { browser: false, export: false, server: false },
      objectsSnapModeEnabled: { browser: true, export: false, server: false },
      userToFollow: { browser: false, export: false, server: false },
      followedBy: { browser: false, export: false, server: false },
      searchMatches: { browser: false, export: false, server: false }
    });
    _clearAppStateForStorage = (appState, exportType) => {
      const stateForExport = {};
      for (const key of Object.keys(appState)) {
        const propConfig = APP_STATE_STORAGE_CONF[key];
        if (propConfig?.[exportType]) {
          const nextValue = appState[key];
          stateForExport[key] = nextValue;
        }
      }
      return stateForExport;
    };
    cleanAppStateForExport = (appState) => {
      return _clearAppStateForStorage(appState, "export");
    };
    clearAppStateForDatabase = (appState) => {
      return _clearAppStateForStorage(appState, "server");
    };
    isEraserActive = ({
      activeTool
    }) => activeTool.type === "eraser";
    isHandToolActive = ({
      activeTool
    }) => {
      return activeTool.type === "hand";
    };
  }
});

// groups.ts
var selectGroup, selectGroupsForSelectedElements, isSelectedViaGroup, getSelectedGroupForElement, getSelectedGroupIds, selectGroupsFromGivenElements, editGroupForSelectedElement, isElementInGroup, getElementsInGroup, getSelectedGroupIdForElement, getNewGroupIdsForDuplication, addToGroup, removeFromSelectedGroups, getMaximumGroups, getNonDeletedGroupIds, elementsAreInSameGroup, isInGroup;
var init_groups = __esm({
  "groups.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_scene();
    init_textElement();
    init_selection();
    selectGroup = (groupId, appState, elements) => {
      const elementsInGroup = elements.reduce(
        (acc, element) => {
          if (element.groupIds.includes(groupId)) {
            acc[element.id] = true;
          }
          return acc;
        },
        {}
      );
      if (Object.keys(elementsInGroup).length < 2) {
        if (appState.selectedGroupIds[groupId] || appState.editingGroupId === groupId) {
          return {
            selectedElementIds: appState.selectedElementIds,
            selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: false },
            editingGroupId: null
          };
        }
        return appState;
      }
      return {
        editingGroupId: appState.editingGroupId,
        selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: true },
        selectedElementIds: {
          ...appState.selectedElementIds,
          ...elementsInGroup
        }
      };
    };
    selectGroupsForSelectedElements = function() {
      let lastSelectedElements = null;
      let lastElements = null;
      let lastReturnValue = null;
      const _selectGroups = (selectedElements, elements, appState, prevAppState) => {
        if (lastReturnValue !== void 0 && elements === lastElements && selectedElements === lastSelectedElements && appState.editingGroupId === lastReturnValue?.editingGroupId) {
          return lastReturnValue;
        }
        const selectedGroupIds = {};
        for (const selectedElement of selectedElements) {
          let groupIds = selectedElement.groupIds;
          if (appState.editingGroupId) {
            const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);
            if (indexOfEditingGroup > -1) {
              groupIds = groupIds.slice(0, indexOfEditingGroup);
            }
          }
          if (groupIds.length > 0) {
            const lastSelectedGroup = groupIds[groupIds.length - 1];
            selectedGroupIds[lastSelectedGroup] = true;
          }
        }
        const groupElementsIndex = {};
        const selectedElementIdsInGroups = elements.reduce(
          (acc, element) => {
            const groupId = element.groupIds.find((id) => selectedGroupIds[id]);
            if (groupId) {
              acc[element.id] = true;
              if (!Array.isArray(groupElementsIndex[groupId])) {
                groupElementsIndex[groupId] = [element.id];
              } else {
                groupElementsIndex[groupId].push(element.id);
              }
            }
            return acc;
          },
          {}
        );
        for (const groupId of Object.keys(groupElementsIndex)) {
          if (groupElementsIndex[groupId].length < 2) {
            if (selectedGroupIds[groupId]) {
              selectedGroupIds[groupId] = false;
            }
          }
        }
        lastElements = elements;
        lastSelectedElements = selectedElements;
        lastReturnValue = {
          editingGroupId: appState.editingGroupId,
          selectedGroupIds,
          selectedElementIds: makeNextSelectedElementIds(
            {
              ...appState.selectedElementIds,
              ...selectedElementIdsInGroups
            },
            prevAppState
          )
        };
        return lastReturnValue;
      };
      const selectGroupsForSelectedElements2 = (appState, elements, prevAppState, app) => {
        const selectedElements = app ? app.scene.getSelectedElements({
          selectedElementIds: appState.selectedElementIds,
          // supplying elements explicitly in case we're passed non-state elements
          elements
        }) : getSelectedElements(elements, appState);
        if (!selectedElements.length) {
          return {
            selectedGroupIds: {},
            editingGroupId: null,
            selectedElementIds: makeNextSelectedElementIds(
              appState.selectedElementIds,
              prevAppState
            )
          };
        }
        return _selectGroups(selectedElements, elements, appState, prevAppState);
      };
      selectGroupsForSelectedElements2.clearCache = () => {
        lastElements = null;
        lastSelectedElements = null;
        lastReturnValue = null;
      };
      return selectGroupsForSelectedElements2;
    }();
    isSelectedViaGroup = (appState, element) => getSelectedGroupForElement(appState, element) != null;
    getSelectedGroupForElement = (appState, element) => element.groupIds.filter((groupId) => groupId !== appState.editingGroupId).find((groupId) => appState.selectedGroupIds[groupId]);
    getSelectedGroupIds = (appState) => Object.entries(appState.selectedGroupIds).filter(([groupId, isSelected]) => isSelected).map(([groupId, isSelected]) => groupId);
    selectGroupsFromGivenElements = (elements, appState) => {
      let nextAppState = {
        ...appState,
        selectedGroupIds: {}
      };
      for (const element of elements) {
        let groupIds = element.groupIds;
        if (appState.editingGroupId) {
          const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);
          if (indexOfEditingGroup > -1) {
            groupIds = groupIds.slice(0, indexOfEditingGroup);
          }
        }
        if (groupIds.length > 0) {
          const groupId = groupIds[groupIds.length - 1];
          nextAppState = {
            ...nextAppState,
            ...selectGroup(groupId, nextAppState, elements)
          };
        }
      }
      return nextAppState.selectedGroupIds;
    };
    editGroupForSelectedElement = (appState, element) => {
      return {
        ...appState,
        editingGroupId: element.groupIds.length ? element.groupIds[0] : null,
        selectedGroupIds: {},
        selectedElementIds: {
          [element.id]: true
        }
      };
    };
    isElementInGroup = (element, groupId) => element.groupIds.includes(groupId);
    getElementsInGroup = (elements, groupId) => {
      const elementsInGroup = [];
      for (const element of elements.values()) {
        if (isElementInGroup(element, groupId)) {
          elementsInGroup.push(element);
        }
      }
      return elementsInGroup;
    };
    getSelectedGroupIdForElement = (element, selectedGroupIds) => element.groupIds.find((groupId) => selectedGroupIds[groupId]);
    getNewGroupIdsForDuplication = (groupIds, editingGroupId, mapper) => {
      const copy = [...groupIds];
      const positionOfEditingGroupId = editingGroupId ? groupIds.indexOf(editingGroupId) : -1;
      const endIndex = positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;
      for (let index = 0; index < endIndex; index++) {
        copy[index] = mapper(copy[index]);
      }
      return copy;
    };
    addToGroup = (prevGroupIds, newGroupId, editingGroupId) => {
      const groupIds = [...prevGroupIds];
      const positionOfEditingGroupId = editingGroupId ? groupIds.indexOf(editingGroupId) : -1;
      const positionToInsert = positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;
      groupIds.splice(positionToInsert, 0, newGroupId);
      return groupIds;
    };
    removeFromSelectedGroups = (groupIds, selectedGroupIds) => groupIds.filter((groupId) => !selectedGroupIds[groupId]);
    getMaximumGroups = (elements, elementsMap) => {
      const groups = /* @__PURE__ */ new Map();
      elements.forEach((element) => {
        const groupId = element.groupIds.length === 0 ? element.id : element.groupIds[element.groupIds.length - 1];
        const currentGroupMembers = groups.get(groupId) || [];
        const boundTextElement = getBoundTextElement(element, elementsMap);
        if (boundTextElement) {
          currentGroupMembers.push(boundTextElement);
        }
        groups.set(groupId, [...currentGroupMembers, element]);
      });
      return Array.from(groups.values());
    };
    getNonDeletedGroupIds = (elements) => {
      const nonDeletedGroupIds = /* @__PURE__ */ new Set();
      for (const [, element] of elements) {
        if (element.isDeleted) {
          continue;
        }
        for (const groupId of element.groupIds ?? []) {
          nonDeletedGroupIds.add(groupId);
        }
      }
      return nonDeletedGroupIds;
    };
    elementsAreInSameGroup = (elements) => {
      const allGroups = elements.flatMap((element) => element.groupIds);
      const groupCount = /* @__PURE__ */ new Map();
      let maxGroup = 0;
      for (const group of allGroups) {
        groupCount.set(group, (groupCount.get(group) ?? 0) + 1);
        if (groupCount.get(group) > maxGroup) {
          maxGroup = groupCount.get(group);
        }
      }
      return maxGroup === elements.length;
    };
    isInGroup = (element) => {
      return element.groupIds.length > 0;
    };
  }
});

// data/url.ts
import { sanitizeUrl } from "@braintree/sanitize-url";
var sanitizeHTMLAttribute, normalizeLink, isLocalLink, toValidURL;
var init_url = __esm({
  "data/url.ts"() {
    "use strict";
    init_define_import_meta_env();
    sanitizeHTMLAttribute = (html) => {
      return html.replace(/"/g, "&quot;");
    };
    normalizeLink = (link) => {
      link = link.trim();
      if (!link) {
        return link;
      }
      return sanitizeUrl(sanitizeHTMLAttribute(link));
    };
    isLocalLink = (link) => {
      return !!(link?.includes(location.origin) || link?.startsWith("/"));
    };
    toValidURL = (link) => {
      link = normalizeLink(link);
      if (link.startsWith("/")) {
        return `${location.origin}${link}`;
      }
      try {
        new URL(link);
      } catch {
        return "about:blank";
      }
      return link;
    };
  }
});

// actions/register.ts
var actions, register;
var init_register = __esm({
  "actions/register.ts"() {
    "use strict";
    init_define_import_meta_env();
    actions = [];
    register = (action) => {
      actions = actions.concat(action);
      return action;
    };
  }
});

// cursor.ts
import OpenColor from "open-color";
var laserPointerCursorSVG_tag, laserPointerCursorBackgroundSVG, laserPointerCursorIconSVG, laserPointerCursorDataURL_lightMode, laserPointerCursorDataURL_darkMode, resetCursor, setCursor, eraserCanvasCache, previewDataURL, setEraserCursor, setCursorForShape;
var init_cursor = __esm({
  "cursor.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_appState();
    laserPointerCursorSVG_tag = `<svg viewBox="0 0 24 24" stroke-width="1" width="28" height="28" xmlns="http://www.w3.org/2000/svg">`;
    laserPointerCursorBackgroundSVG = `<path d="M6.164 11.755a5.314 5.314 0 0 1-4.932-5.298 5.314 5.314 0 0 1 5.311-5.311 5.314 5.314 0 0 1 5.307 5.113l8.773 8.773a3.322 3.322 0 0 1 0 4.696l-.895.895a3.322 3.322 0 0 1-4.696 0l-8.868-8.868Z" style="fill:#fff"/>`;
    laserPointerCursorIconSVG = `<path stroke="#1b1b1f" fill="#fff" d="m7.868 11.113 7.773 7.774a2.359 2.359 0 0 0 1.667.691 2.368 2.368 0 0 0 2.357-2.358c0-.625-.248-1.225-.69-1.667L11.201 7.78 9.558 9.469l-1.69 1.643v.001Zm10.273 3.606-3.333 3.333m-3.25-6.583 2 2m-7-7 3 3M3.664 3.625l1 1M2.529 6.922l1.407-.144m5.735-2.932-1.118.866M4.285 9.823l.758-1.194m1.863-6.207-.13 1.408"/>`;
    laserPointerCursorDataURL_lightMode = `data:${MIME_TYPES.svg},${encodeURIComponent(
      `${laserPointerCursorSVG_tag}${laserPointerCursorIconSVG}</svg>`
    )}`;
    laserPointerCursorDataURL_darkMode = `data:${MIME_TYPES.svg},${encodeURIComponent(
      `${laserPointerCursorSVG_tag}${laserPointerCursorBackgroundSVG}${laserPointerCursorIconSVG}</svg>`
    )}`;
    resetCursor = (interactiveCanvas) => {
      if (interactiveCanvas) {
        interactiveCanvas.style.cursor = "";
      }
    };
    setCursor = (interactiveCanvas, cursor) => {
      if (interactiveCanvas) {
        interactiveCanvas.style.cursor = cursor;
      }
    };
    setEraserCursor = (interactiveCanvas, theme) => {
      const cursorImageSizePx = 20;
      const drawCanvas = () => {
        const isDarkTheme = theme === THEME.DARK;
        eraserCanvasCache = document.createElement("canvas");
        eraserCanvasCache.theme = theme;
        eraserCanvasCache.height = cursorImageSizePx;
        eraserCanvasCache.width = cursorImageSizePx;
        const context = eraserCanvasCache.getContext("2d");
        context.lineWidth = 1;
        context.beginPath();
        context.arc(
          eraserCanvasCache.width / 2,
          eraserCanvasCache.height / 2,
          5,
          0,
          2 * Math.PI
        );
        context.fillStyle = isDarkTheme ? OpenColor.black : OpenColor.white;
        context.fill();
        context.strokeStyle = isDarkTheme ? OpenColor.white : OpenColor.black;
        context.stroke();
        previewDataURL = eraserCanvasCache.toDataURL(MIME_TYPES.svg);
      };
      if (!eraserCanvasCache || eraserCanvasCache.theme !== theme) {
        drawCanvas();
      }
      setCursor(
        interactiveCanvas,
        `url(${previewDataURL}) ${cursorImageSizePx / 2} ${cursorImageSizePx / 2}, auto`
      );
    };
    setCursorForShape = (interactiveCanvas, appState) => {
      if (!interactiveCanvas) {
        return;
      }
      if (appState.activeTool.type === "selection") {
        resetCursor(interactiveCanvas);
      } else if (isHandToolActive(appState)) {
        interactiveCanvas.style.cursor = CURSOR_TYPE.GRAB;
      } else if (isEraserActive(appState)) {
        setEraserCursor(interactiveCanvas, appState.theme);
      } else if (appState.activeTool.type === "laser") {
        const url = appState.theme === THEME.LIGHT ? laserPointerCursorDataURL_lightMode : laserPointerCursorDataURL_darkMode;
        interactiveCanvas.style.cursor = `url(${url}), auto`;
      } else if (!["image", "custom"].includes(appState.activeTool.type)) {
        interactiveCanvas.style.cursor = CURSOR_TYPE.CROSSHAIR;
      } else if (appState.activeTool.type !== "image") {
        interactiveCanvas.style.cursor = CURSOR_TYPE.AUTO;
      }
    };
  }
});

// scene/ShapeCache.ts
import { RoughGenerator } from "roughjs/bin/generator";
var ShapeCache;
var init_ShapeCache = __esm({
  "scene/ShapeCache.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_renderElement();
    init_Shape();
    init_colors();
    ShapeCache = class _ShapeCache {
      static rg = new RoughGenerator();
      static cache = /* @__PURE__ */ new WeakMap();
      /**
       * Retrieves shape from cache if available. Use this only if shape
       * is optional and you have a fallback in case it's not cached.
       */
      static get = (element) => {
        return _ShapeCache.cache.get(
          element
        );
      };
      static set = (element, shape) => _ShapeCache.cache.set(element, shape);
      static delete = (element) => _ShapeCache.cache.delete(element);
      static destroy = () => {
        _ShapeCache.cache = /* @__PURE__ */ new WeakMap();
      };
      /**
       * Generates & caches shape for element if not already cached, otherwise
       * returns cached shape.
       */
      static generateElementShape = (element, renderConfig) => {
        const cachedShape = renderConfig?.isExporting ? void 0 : _ShapeCache.get(element);
        if (cachedShape !== void 0) {
          return cachedShape;
        }
        elementWithCanvasCache.delete(element);
        const shape = _generateElementShape(
          element,
          _ShapeCache.rg,
          renderConfig || {
            isExporting: false,
            canvasBackgroundColor: COLOR_PALETTE.white,
            embedsValidationStatus: null
          }
        );
        _ShapeCache.cache.set(element, shape);
        return shape;
      };
    };
  }
});

// components/icons.tsx
import React3 from "react";
import oc2 from "open-color";
import clsx2 from "clsx";
import { Fragment, jsx as jsx4, jsxs as jsxs2 } from "react/jsx-runtime";
var iconFillColor, handlerColor, createIcon, tablerIconProps, modifiedTablerIconProps, PlusPromoIcon, LibraryIcon, PlusIcon, DotsIcon, PinIcon, UnlockedIcon, LockedIcon, WelcomeScreenMenuArrow, WelcomeScreenHelpArrow, WelcomeScreenTopToolbarArrow, ExcalLogo, SelectionIcon, RectangleIcon, DiamondIcon, EllipseIcon, ArrowIcon, LineIcon, PenModeIcon, FreedrawIcon, TextIcon, ImageIcon, EraserIcon, ZoomInIcon, ZoomOutIcon, ZoomResetIcon, TrashIcon, EmbedIcon, DuplicateIcon, MoonIcon, SunIcon, HamburgerMenuIcon, ExportIcon, HelpIcon, HelpIconThin, ExternalLinkIcon, GithubIcon, DiscordIcon, XBrandIcon, checkIcon, LinkIcon, save, saveAs, LoadIcon, clipboard, palette, bucketFillIcon, ExportImageIcon, exportToFileIcon, zoomIn, zoomOut, done, menu, UndoIcon, RedoIcon, questionCircle, share, warning, shareIOS, exportToPlus, shareWindows, resetZoom, arrowBarToTopJSX, arrownNarrowUpJSX, BringForwardIcon, SendBackwardIcon, BringToFrontIcon, SendToBackIcon, AlignTopIcon, AlignBottomIcon, AlignLeftIcon, AlignRightIcon, DistributeHorizontallyIcon, DistributeVerticallyIcon, CenterVerticallyIcon, CenterHorizontallyIcon, usersIcon, start, stop, CloseIcon, clone, shield, file, GroupIcon, UngroupIcon, FillZigZagIcon, FillHachureIcon, FillCrossHatchIcon, FillSolidIcon, StrokeWidthBaseIcon, StrokeWidthBoldIcon, StrokeWidthExtraBoldIcon, StrokeStyleSolidIcon, StrokeStyleDashedIcon, StrokeStyleDottedIcon, SloppinessArchitectIcon, SloppinessArtistIcon, SloppinessCartoonistIcon, EdgeSharpIcon, EdgeRoundIcon, ArrowheadNoneIcon, ArrowheadArrowIcon, ArrowheadCircleIcon, ArrowheadCircleOutlineIcon, ArrowheadBarIcon, ArrowheadTriangleIcon, ArrowheadTriangleOutlineIcon, ArrowheadDiamondIcon, ArrowheadDiamondOutlineIcon, FontSizeSmallIcon, FontSizeMediumIcon, FontSizeLargeIcon, FontSizeExtraLargeIcon, fontSizeIcon, FontFamilyHeadingIcon, FontFamilyNormalIcon, FontFamilyCodeIcon, TextAlignLeftIcon, TextAlignCenterIcon, TextAlignRightIcon, TextAlignTopIcon, TextAlignBottomIcon, TextAlignMiddleIcon, angleIcon, publishIcon, eraser, handIcon, downloadIcon, copyIcon, cutIcon, helpIcon, playerPlayIcon, playerStopFilledIcon, tablerCheckIcon, alertTriangleIcon, eyeDropperIcon, extraToolsIcon, frameToolIcon, mermaidLogoIcon, ArrowRightIcon, laserPointerToolIcon, MagicIcon, MagicIconThin, OpenAIIcon, fullscreenIcon, eyeIcon, eyeClosedIcon, brainIcon, brainIconThin, searchIcon, clockIcon, microphoneIcon, microphoneMutedIcon, boltIcon, selectAllIcon, abacusIcon, flipVertical, flipHorizontal, paintIcon, zoomAreaIcon, svgIcon, pngIcon, magnetIcon, coffeeIcon, DeviceDesktopIcon, loginIcon, youtubeIcon, gridIcon, lineEditorIcon, sharpArrowIcon, elbowArrowIcon, roundArrowIcon, collapseDownIcon, collapseUpIcon, upIcon;
var init_icons = __esm({
  "components/icons.tsx"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    iconFillColor = (theme) => "var(--icon-fill-color)";
    handlerColor = (theme) => theme === THEME.LIGHT ? oc2.white : "#1e1e1e";
    createIcon = (d, opts = 512) => {
      const {
        width = 512,
        height = width,
        mirror,
        style,
        ...rest
      } = typeof opts === "number" ? { width: opts } : opts;
      return /* @__PURE__ */ jsx4(
        "svg",
        {
          "aria-hidden": "true",
          focusable: "false",
          role: "img",
          viewBox: `0 0 ${width} ${height}`,
          className: clsx2({ "rtl-mirror": mirror }),
          style,
          ...rest,
          children: typeof d === "string" ? /* @__PURE__ */ jsx4("path", { fill: "currentColor", d }) : d
        }
      );
    };
    tablerIconProps = {
      width: 24,
      height: 24,
      fill: "none",
      strokeWidth: 2,
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    };
    modifiedTablerIconProps = {
      width: 20,
      height: 20,
      fill: "none",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    };
    PlusPromoIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("rect", { x: 3, y: 8, width: 18, height: 4, rx: 1 }),
        /* @__PURE__ */ jsx4("line", { x1: 12, y1: 8, x2: 12, y2: 21 }),
        /* @__PURE__ */ jsx4("path", { d: "M19 12v7a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-7" }),
        /* @__PURE__ */ jsx4("path", { d: "M7.5 8a2.5 2.5 0 0 1 0 -5a4.8 8 0 0 1 4.5 5a4.8 8 0 0 1 4.5 -5a2.5 2.5 0 0 1 0 5" })
      ] }),
      tablerIconProps
    );
    LibraryIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0" }),
        /* @__PURE__ */ jsx4("line", { x1: "3", y1: "6", x2: "3", y2: "19" }),
        /* @__PURE__ */ jsx4("line", { x1: "12", y1: "6", x2: "12", y2: "19" }),
        /* @__PURE__ */ jsx4("line", { x1: "21", y1: "6", x2: "21", y2: "19" })
      ] }),
      tablerIconProps
    );
    PlusIcon = createIcon(
      /* @__PURE__ */ jsxs2("svg", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("line", { x1: "12", y1: "5", x2: "12", y2: "19" }),
        /* @__PURE__ */ jsx4("line", { x1: "5", y1: "12", x2: "19", y2: "12" })
      ] }),
      tablerIconProps
    );
    DotsIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("circle", { cx: "12", cy: "12", r: "1" }),
        /* @__PURE__ */ jsx4("circle", { cx: "12", cy: "19", r: "1" }),
        /* @__PURE__ */ jsx4("circle", { cx: "12", cy: "5", r: "1" })
      ] }),
      tablerIconProps
    );
    PinIcon = createIcon(
      /* @__PURE__ */ jsxs2("svg", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M9 4v6l-2 4v2h10v-2l-2 -4v-6" }),
        /* @__PURE__ */ jsx4("line", { x1: "12", y1: "16", x2: "12", y2: "21" }),
        /* @__PURE__ */ jsx4("line", { x1: "8", y1: "4", x2: "16", y2: "4" })
      ] }),
      tablerIconProps
    );
    UnlockedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M13.542 8.542H6.458a2.5 2.5 0 0 0-2.5 2.5v3.75a2.5 2.5 0 0 0 2.5 2.5h7.084a2.5 2.5 0 0 0 2.5-2.5v-3.75a2.5 2.5 0 0 0-2.5-2.5Z",
            stroke: "currentColor",
            strokeWidth: "1.25"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M10 13.958a1.042 1.042 0 1 0 0-2.083 1.042 1.042 0 0 0 0 2.083Z",
            stroke: "currentColor",
            strokeWidth: "1.25"
          }
        ),
        /* @__PURE__ */ jsx4(
          "mask",
          {
            id: "UnlockedIcon",
            style: { maskType: "alpha" },
            maskUnits: "userSpaceOnUse",
            x: 6,
            y: 1,
            width: 9,
            height: 9,
            children: /* @__PURE__ */ jsx4(
              "path",
              {
                stroke: "none",
                d: "M6.399 9.561V5.175c0-.93.401-1.823 1.116-2.48a3.981 3.981 0 0 1 2.693-1.028c1.01 0 1.98.37 2.694 1.027.715.658 1.116 1.55 1.116 2.481",
                fill: "#fff"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx4("g", { mask: "url(#UnlockedIcon)", children: /* @__PURE__ */ jsx4(
          "path",
          {
            stroke: "none",
            d: "M5.149 9.561v1.25h2.5v-1.25h-2.5Zm5.06-7.894V.417v1.25Zm2.559 3.508v1.25h2.5v-1.25h-2.5ZM7.648 8.51V5.175h-2.5V8.51h2.5Zm0-3.334c0-.564.243-1.128.713-1.561L6.668 1.775c-.959.883-1.52 2.104-1.52 3.4h2.5Zm.713-1.561a2.732 2.732 0 0 1 1.847-.697v-2.5c-1.31 0-2.585.478-3.54 1.358L8.36 3.614Zm1.847-.697c.71 0 1.374.26 1.847.697l1.694-1.839a5.231 5.231 0 0 0-3.54-1.358v2.5Zm1.847.697c.47.433.713.997.713 1.561h2.5c0-1.296-.56-2.517-1.52-3.4l-1.693 1.839Z",
            fill: "currentColor"
          }
        ) })
      ] }),
      modifiedTablerIconProps
    );
    LockedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M13.542 8.542H6.458a2.5 2.5 0 0 0-2.5 2.5v3.75a2.5 2.5 0 0 0 2.5 2.5h7.084a2.5 2.5 0 0 0 2.5-2.5v-3.75a2.5 2.5 0 0 0-2.5-2.5Z" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 13.958a1.042 1.042 0 1 0 0-2.083 1.042 1.042 0 0 0 0 2.083Z" }),
        /* @__PURE__ */ jsx4("path", { d: "M6.667 8.333V5.417C6.667 3.806 8.159 2.5 10 2.5c1.841 0 3.333 1.306 3.333 2.917v2.916" })
      ] }),
      modifiedTablerIconProps
    );
    WelcomeScreenMenuArrow = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M38.5 83.5c-14-2-17.833-10.473-21-22.5C14.333 48.984 12 22 12 12.5",
            stroke: "currentColor",
            strokeWidth: 2,
            strokeLinecap: "round"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "m12.005 10.478 7.905 14.423L6 25.75l6.005-15.273Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M12.005 10.478c1.92 3.495 3.838 7 7.905 14.423m-7.905-14.423c3.11 5.683 6.23 11.368 7.905 14.423m0 0c-3.68.226-7.35.455-13.91.85m13.91-.85c-5.279.33-10.566.647-13.91.85m0 0c1.936-4.931 3.882-9.86 6.005-15.273M6 25.75c2.069-5.257 4.135-10.505 6.005-15.272",
            stroke: "currentColor",
            strokeWidth: 2,
            strokeLinecap: "round"
          }
        )
      ] }),
      { width: 41, height: 94, fill: "none" }
    );
    WelcomeScreenHelpArrow = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M18.026 1.232c-5.268 13.125-5.548 33.555 3.285 42.311 8.823 8.75 33.31 12.304 42.422 13.523",
            stroke: "currentColor",
            strokeWidth: 2,
            strokeLinecap: "round"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "m72.181 59.247-13.058-10-2.948 13.62 16.006-3.62Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M72.181 59.247c-3.163-2.429-6.337-4.856-13.058-10m13.058 10c-5.145-3.936-10.292-7.882-13.058-10m0 0c-.78 3.603-1.563 7.196-2.948 13.62m2.948-13.62c-1.126 5.168-2.24 10.346-2.948 13.62m0 0c5.168-1.166 10.334-2.343 16.006-3.62m-16.006 3.62c5.51-1.248 11.01-2.495 16.006-3.62",
            stroke: "currentColor",
            strokeWidth: 2,
            strokeLinecap: "round"
          }
        )
      ] }),
      { width: 85, height: 71, fill: "none" }
    );
    WelcomeScreenTopToolbarArrow = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M1 77c14-2 31.833-11.973 35-24 3.167-12.016-6-35-9.5-43.5",
            stroke: "currentColor",
            strokeWidth: 2,
            strokeLinecap: "round"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "m24.165 1.093-2.132 16.309 13.27-4.258-11.138-12.05Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M24.165 1.093c-.522 3.953-1.037 7.916-2.132 16.309m2.131-16.309c-.835 6.424-1.68 12.854-2.13 16.308m0 0c3.51-1.125 7.013-2.243 13.27-4.257m-13.27 4.257c5.038-1.608 10.08-3.232 13.27-4.257m0 0c-3.595-3.892-7.197-7.777-11.14-12.05m11.14 12.05c-3.837-4.148-7.667-8.287-11.14-12.05",
            stroke: "currentColor",
            strokeWidth: 2,
            strokeLinecap: "round"
          }
        )
      ] }),
      { width: 38, height: 78, fill: "none" }
    );
    ExcalLogo = createIcon(
      /* @__PURE__ */ jsx4("g", { fill: "currentColor", children: /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M39.9 32.889a.326.326 0 0 0-.279-.056c-2.094-3.083-4.774-6-7.343-8.833l-.419-.472a.212.212 0 0 0-.056-.139.586.586 0 0 0-.167-.111l-.084-.083-.056-.056c-.084-.167-.28-.278-.475-.167-.782.39-1.507.973-2.206 1.528-.92.722-1.842 1.445-2.708 2.25a8.405 8.405 0 0 0-.977 1.028c-.14.194-.028.361.14.444-.615.611-1.23 1.223-1.843 1.861a.315.315 0 0 0-.084.223c0 .083.056.166.111.194l1.09.833v.028c1.535 1.528 4.244 3.611 7.12 5.861.418.334.865.667 1.284 1 .195.223.39.473.558.695.084.11.28.139.391.055.056.056.14.111.196.167a.398.398 0 0 0 .167.056.255.255 0 0 0 .224-.111.394.394 0 0 0 .055-.167c.029 0 .028.028.056.028a.318.318 0 0 0 .224-.084l5.082-5.528a.309.309 0 0 0 0-.444Zm-14.63-1.917a.485.485 0 0 0 .111.14c.586.5 1.2 1 1.843 1.555l-2.569-1.945-.251-.166c-.056-.028-.112-.084-.168-.111l-.195-.167.056-.056.055-.055.112-.111c.866-.861 2.346-2.306 3.1-3.028-.81.805-2.43 3.167-2.095 3.944Zm8.767 6.89-2.122-1.612a44.713 44.713 0 0 0-2.625-2.5c1.145.861 2.122 1.611 2.262 1.75 1.117.972 1.06.806 1.815 1.445l.921.666a1.06 1.06 0 0 1-.251.25Zm.558.416-.056-.028c.084-.055.168-.111.252-.194l-.196.222ZM1.089 5.75c.055.361.14.722.195 1.056.335 1.833.67 3.5 1.284 4.75l.252.944c.084.361.223.806.363.917 1.424 1.25 3.602 3.11 5.947 4.889a.295.295 0 0 0 .363 0s0 .027.028.027a.254.254 0 0 0 .196.084.318.318 0 0 0 .223-.084c2.988-3.305 5.221-6.027 6.813-8.305.112-.111.14-.278.14-.417.111-.111.195-.25.307-.333.111-.111.111-.306 0-.39l-.028-.027c0-.055-.028-.139-.084-.167-.698-.666-1.2-1.138-1.731-1.638-.922-.862-1.871-1.75-3.881-3.75l-.028-.028c-.028-.028-.056-.056-.112-.056-.558-.194-1.703-.389-3.127-.639C6.087 2.223 3.21 1.723.614.944c0 0-.168 0-.196.028l-.083.084c-.028.027-.056.055-.224.11h.056-.056c.028.167.028.278.084.473 0 .055.112.5.112.555l.782 3.556Zm15.496 3.278-.335-.334c.084.112.196.195.335.334Zm-3.546 4.666-.056.056c0-.028.028-.056.056-.056Zm-2.038-10c.168.167.866.834 1.033.973-.726-.334-2.54-1.167-3.379-1.445.838.167 1.983.334 2.346.472ZM1.424 2.306c.419.722.754 3.222 1.089 5.666-.196-.778-.335-1.555-.503-2.278-.251-1.277-.503-2.416-.838-3.416.056 0 .14 0 .252.028Zm-.168-.584c-.112 0-.223-.028-.307-.028 0-.027 0-.055-.028-.055.14 0 .223.028.335.083Zm-1.089.222c0-.027 0-.027 0 0ZM39.453 1.333c.028-.11-.558-.61-.363-.639.42-.027.42-.666 0-.666-.558.028-1.144.166-1.675.25-.977.194-1.982.389-2.96.61-2.205.473-4.383.973-6.561 1.557-.67.194-1.424.333-2.066.666-.224.111-.196.333-.084.472-.056.028-.084.028-.14.056-.195.028-.363.056-.558.083-.168.028-.252.167-.224.334 0 .027.028.083.028.11-1.173 1.556-2.485 3.195-3.909 4.945-1.396 1.611-2.876 3.306-4.356 5.056-4.719 5.5-10.052 11.75-15.943 17.25a.268.268 0 0 0 0 .389c.028.027.056.055.084.055-.084.084-.168.14-.252.222-.056.056-.084.111-.084.167a.605.605 0 0 0-.111.139c-.112.111-.112.305.028.389.111.11.307.11.39-.028.029-.028.029-.056.056-.056a.44.44 0 0 1 .615 0c.335.362.67.723.977 1.028l-.698-.583c-.112-.111-.307-.083-.39.028-.113.11-.085.305.027.389l7.427 6.194c.056.056.112.056.196.056s.14-.028.195-.084l.168-.166c.028.027.083.027.111.027.084 0 .14-.027.196-.083 10.052-10.055 18.15-17.639 27.42-24.417.083-.055.111-.166.111-.25.112 0 .196-.083.251-.194 1.704-5.194 2.039-9.806 2.15-12.083v-.028c0-.028.028-.056.028-.083.028-.056.028-.084.028-.084a1.626 1.626 0 0 0-.111-1.028ZM21.472 9.5c.446-.5.893-1.028 1.34-1.5-2.876 3.778-7.65 9.583-14.408 16.5 4.607-5.083 9.242-10.333 13.068-15ZM5.193 35.778h.084-.084Zm3.462 3.194c-.027-.028-.027-.028 0-.028v.028Zm4.16-3.583c.224-.25.448-.472.699-.722 0 0 0 .027.028.027-.252.223-.475.445-.726.695Zm1.146-1.111c.14-.14.279-.334.446-.5l.028-.028c1.648-1.694 3.351-3.389 5.082-5.111l.028-.028c.419-.333.921-.694 1.368-1.028a379.003 379.003 0 0 0-6.952 6.695ZM24.794 6.472c-.921 1.195-1.954 2.778-2.82 4.028-2.736 3.944-11.532 13.583-11.727 13.75a1976.983 1976.983 0 0 1-8.042 7.639l-.167.167c-.14-.167-.14-.417.028-.556C14.49 19.861 22.03 10.167 25.074 5.917c-.084.194-.14.36-.28.555Zm4.83 5.695c-1.116-.64-1.646-1.64-1.34-2.611l.084-.334c.028-.083.084-.194.14-.277.307-.5.754-.917 1.257-1.167.027 0 .055 0 .083-.028-.028-.056-.028-.139-.028-.222.028-.167.14-.278.335-.278.335 0 1.369.306 1.76.639.111.083.223.194.335.305.14.167.363.445.474.667.056.028.112.306.196.445.056.222.111.472.084.694-.028.028 0 .194-.028.194a2.668 2.668 0 0 1-.363 1.028c-.028.028-.028.056-.056.084l-.028.027c-.14.223-.335.417-.53.556-.643.444-1.369.583-2.095.389 0 0-.195-.084-.28-.111Zm8.154-.834a39.098 39.098 0 0 1-.893 3.167c0 .028-.028.083 0 .111-.056 0-.084.028-.14.056-2.206 1.61-4.356 3.305-6.506 5.028 1.843-1.64 3.686-3.306 5.613-4.945.558-.5.949-1.139 1.06-1.861l.28-1.667v-.055c.14-.334.67-.195.586.166Z",
          fill: "currentColor"
        }
      ) }),
      { width: 40, height: 40, fill: "none" }
    );
    SelectionIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 6l4.153 11.793a0.365 .365 0 0 0 .331 .207a0.366 .366 0 0 0 .332 -.207l2.184 -4.793l4.787 -1.994a0.355 .355 0 0 0 .213 -.323a0.355 .355 0 0 0 -.213 -.323l-11.787 -4.36z" }),
        /* @__PURE__ */ jsx4("path", { d: "M13.5 13.5l4.5 4.5" })
      ] }),
      { fill: "none", width: 22, height: 22, strokeWidth: 1.25 }
    );
    RectangleIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("rect", { x: "4", y: "4", width: "16", height: "16", rx: "2" })
      ] }),
      tablerIconProps
    );
    DiamondIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M10.5 20.4l-6.9 -6.9c-.781 -.781 -.781 -2.219 0 -3l6.9 -6.9c.781 -.781 2.219 -.781 3 0l6.9 6.9c.781 .781 .781 2.219 0 3l-6.9 6.9c-.781 .781 -2.219 .781 -3 0z" })
      ] }),
      tablerIconProps
    );
    EllipseIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("circle", { cx: "12", cy: "12", r: "9" })
      ] }),
      tablerIconProps
    );
    ArrowIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("line", { x1: "5", y1: "12", x2: "19", y2: "12" }),
        /* @__PURE__ */ jsx4("line", { x1: "15", y1: "16", x2: "19", y2: "12" }),
        /* @__PURE__ */ jsx4("line", { x1: "15", y1: "8", x2: "19", y2: "12" })
      ] }),
      tablerIconProps
    );
    LineIcon = createIcon(
      /* @__PURE__ */ jsx4("path", { d: "M4.167 10h11.666", strokeWidth: "1.5" }),
      modifiedTablerIconProps
    );
    PenModeIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 17v-12c0 -1.121 -.879 -2 -2 -2s-2 .879 -2 2v12l2 2l2 -2z" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 7h4" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 19h-13a2 2 0 1 1 0 -4h4a2 2 0 1 0 0 -4h-3" })
      ] }),
      tablerIconProps
    );
    FreedrawIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            clipRule: "evenodd",
            d: "m7.643 15.69 7.774-7.773a2.357 2.357 0 1 0-3.334-3.334L4.31 12.357a3.333 3.333 0 0 0-.977 2.357v1.953h1.953c.884 0 1.732-.352 2.357-.977Z"
          }
        ),
        /* @__PURE__ */ jsx4("path", { d: "m11.25 5.417 3.333 3.333" })
      ] }),
      modifiedTablerIconProps
    );
    TextIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("line", { x1: "4", y1: "20", x2: "7", y2: "20" }),
        /* @__PURE__ */ jsx4("line", { x1: "14", y1: "20", x2: "21", y2: "20" }),
        /* @__PURE__ */ jsx4("line", { x1: "6.9", y1: "15", x2: "13.8", y2: "15" }),
        /* @__PURE__ */ jsx4("line", { x1: "10.2", y1: "6.3", x2: "16", y2: "20" }),
        /* @__PURE__ */ jsx4("polyline", { points: "5 20 11 4 13 4 20 20" })
      ] }),
      tablerIconProps
    );
    ImageIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M12.5 6.667h.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M4.91 2.625h10.18a2.284 2.284 0 0 1 2.285 2.284v10.182a2.284 2.284 0 0 1-2.284 2.284H4.909a2.284 2.284 0 0 1-2.284-2.284V4.909a2.284 2.284 0 0 1 2.284-2.284Z" }),
        /* @__PURE__ */ jsx4("path", { d: "m3.333 12.5 3.334-3.333c.773-.745 1.726-.745 2.5 0l4.166 4.166" }),
        /* @__PURE__ */ jsx4("path", { d: "m11.667 11.667.833-.834c.774-.744 1.726-.744 2.5 0l1.667 1.667" })
      ] }),
      modifiedTablerIconProps
    );
    EraserIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 20h-10.5l-4.21 -4.3a1 1 0 0 1 0 -1.41l10 -10a1 1 0 0 1 1.41 0l5 5a1 1 0 0 1 0 1.41l-9.2 9.3" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 13.3l-6.3 -6.3" })
      ] }),
      tablerIconProps
    );
    ZoomInIcon = createIcon(
      /* @__PURE__ */ jsx4("path", { strokeWidth: "1.25", d: "M10 4.167v11.666M4.167 10h11.666" }),
      modifiedTablerIconProps
    );
    ZoomOutIcon = createIcon(
      /* @__PURE__ */ jsx4("path", { d: "M5 10h10", strokeWidth: "1.25" }),
      modifiedTablerIconProps
    );
    ZoomResetIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M21 21l-6 -6" }),
        /* @__PURE__ */ jsx4("path", { d: "M3.268 12.043a7.017 7.017 0 0 0 6.634 4.957a7.012 7.012 0 0 0 7.043 -6.131a7 7 0 0 0 -5.314 -7.672a7.021 7.021 0 0 0 -8.241 4.403" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 4v4h4" })
      ] }),
      tablerIconProps
    );
    TrashIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          strokeWidth: "1.25",
          d: "M3.333 5.833h13.334M8.333 9.167v5M11.667 9.167v5M4.167 5.833l.833 10c0 .92.746 1.667 1.667 1.667h6.666c.92 0 1.667-.746 1.667-1.667l.833-10M7.5 5.833v-2.5c0-.46.373-.833.833-.833h3.334c.46 0 .833.373.833.833v2.5"
        }
      ),
      modifiedTablerIconProps
    );
    EmbedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("polyline", { points: "12 16 18 10 12 4" }),
        /* @__PURE__ */ jsx4("polyline", { points: "8 4 2 10 8 16" })
      ] }),
      modifiedTablerIconProps
    );
    DuplicateIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M14.375 6.458H8.958a2.5 2.5 0 0 0-2.5 2.5v5.417a2.5 2.5 0 0 0 2.5 2.5h5.417a2.5 2.5 0 0 0 2.5-2.5V8.958a2.5 2.5 0 0 0-2.5-2.5Z" }),
        /* @__PURE__ */ jsx4(
          "path",
          {
            clipRule: "evenodd",
            d: "M11.667 3.125c.517 0 .986.21 1.325.55.34.338.55.807.55 1.325v1.458H8.333c-.485 0-.927.185-1.26.487-.343.312-.57.75-.609 1.24l-.005 5.357H5a1.87 1.87 0 0 1-1.326-.55 1.87 1.87 0 0 1-.549-1.325V5c0-.518.21-.987.55-1.326.338-.34.807-.549 1.325-.549h6.667Z"
          }
        )
      ] }),
      modifiedTablerIconProps
    );
    MoonIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          clipRule: "evenodd",
          d: "M10 2.5h.328a6.25 6.25 0 0 0 6.6 10.372A7.5 7.5 0 1 1 10 2.493V2.5Z",
          stroke: "currentColor"
        }
      ),
      modifiedTablerIconProps
    );
    SunIcon = createIcon(
      /* @__PURE__ */ jsx4("g", { stroke: "currentColor", strokeLinejoin: "round", children: /* @__PURE__ */ jsx4("path", { d: "M10 12.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM10 4.167V2.5M14.167 5.833l1.166-1.166M15.833 10H17.5M14.167 14.167l1.166 1.166M10 15.833V17.5M5.833 14.167l-1.166 1.166M5 10H3.333M5.833 5.833 4.667 4.667" }) }),
      { ...modifiedTablerIconProps, strokeWidth: 1.5 }
    );
    HamburgerMenuIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("line", { x1: "4", y1: "6", x2: "20", y2: "6" }),
        /* @__PURE__ */ jsx4("line", { x1: "4", y1: "12", x2: "20", y2: "12" }),
        /* @__PURE__ */ jsx4("line", { x1: "4", y1: "18", x2: "20", y2: "18" })
      ] }),
      tablerIconProps
    );
    ExportIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          strokeWidth: "1.25",
          d: "M3.333 14.167v1.666c0 .92.747 1.667 1.667 1.667h10c.92 0 1.667-.746 1.667-1.667v-1.666M5.833 9.167 10 13.333l4.167-4.166M10 3.333v10"
        }
      ),
      modifiedTablerIconProps
    );
    HelpIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("circle", { cx: "12", cy: "12", r: "9" }),
        /* @__PURE__ */ jsx4("line", { x1: "12", y1: "17", x2: "12", y2: "17.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4" })
      ] }),
      tablerIconProps
    );
    HelpIconThin = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("circle", { cx: "12", cy: "12", r: "9" }),
        /* @__PURE__ */ jsx4("line", { x1: "12", y1: "17", x2: "12", y2: "17.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4" })
      ] }),
      tablerIconProps
    );
    ExternalLinkIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          strokeWidth: "1.25",
          d: "M9.167 5.833H5.833c-1.254 0-2.5 1.282-2.5 2.5v5.834c0 1.283 1.252 2.5 2.5 2.5h5.834c1.251 0 2.5-1.25 2.5-2.5v-3.334M8.333 11.667l8.334-8.334M12.5 3.333h4.167V7.5"
        }
      ),
      modifiedTablerIconProps
    );
    GithubIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M7.5 15.833c-3.583 1.167-3.583-2.083-5-2.5m10 4.167v-2.917c0-.833.083-1.166-.417-1.666 2.334-.25 4.584-1.167 4.584-5a3.833 3.833 0 0 0-1.084-2.667 3.5 3.5 0 0 0-.083-2.667s-.917-.25-2.917 1.084a10.25 10.25 0 0 0-5.166 0C5.417 2.333 4.5 2.583 4.5 2.583a3.5 3.5 0 0 0-.083 2.667 3.833 3.833 0 0 0-1.084 2.667c0 3.833 2.25 4.75 4.584 5-.5.5-.5 1-.417 1.666V17.5",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    DiscordIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M7.5 10.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666ZM12.5 10.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666ZM6.25 6.25c2.917-.833 4.583-.833 7.5 0M5.833 13.75c2.917.833 5.417.833 8.334 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M12.917 14.167c0 .833 1.25 2.5 1.666 2.5 1.25 0 2.361-1.39 2.917-2.5.556-1.39.417-4.861-1.25-9.584-1.214-.846-2.5-1.116-3.75-1.25l-.833 2.084M7.083 14.167c0 .833-1.13 2.5-1.526 2.5-1.191 0-2.249-1.39-2.778-2.5-.529-1.39-.397-4.861 1.19-9.584 1.157-.846 2.318-1.116 3.531-1.25l.833 2.084" })
      ] }),
      modifiedTablerIconProps
    );
    XBrandIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 4l11.733 16h4.267l-11.733 -16z" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 20l6.768 -6.768m2.46 -2.46l6.772 -6.772" })
      ] }),
      tablerIconProps
    );
    checkIcon = createIcon(
      /* @__PURE__ */ jsx4("polyline", { fill: "none", stroke: "currentColor", points: "20 6 9 17 4 12" }),
      {
        width: 24,
        height: 24
      }
    );
    LinkIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M8.333 11.667a2.917 2.917 0 0 0 4.167 0l3.333-3.334a2.946 2.946 0 1 0-4.166-4.166l-.417.416" }),
        /* @__PURE__ */ jsx4("path", { d: "M11.667 8.333a2.917 2.917 0 0 0-4.167 0l-3.333 3.334a2.946 2.946 0 0 0 4.166 4.166l.417-.416" })
      ] }),
      modifiedTablerIconProps
    );
    save = createIcon(
      "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z",
      { width: 448, height: 512 }
    );
    saveAs = createIcon(
      "M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z",
      { width: 448, height: 512 }
    );
    LoadIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "m9.257 6.351.183.183H15.819c.34 0 .727.182 1.051.506.323.323.505.708.505 1.05v5.819c0 .316-.183.7-.52 1.035-.337.338-.723.522-1.037.522H4.182c-.352 0-.74-.181-1.058-.5-.318-.318-.499-.705-.499-1.057V5.182c0-.351.181-.736.5-1.054.32-.321.71-.503 1.057-.503H6.53l2.726 2.726Z",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    clipboard = createIcon(
      "M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z",
      { width: 384, height: 512 }
    );
    palette = createIcon(
      "M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"
    );
    bucketFillIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 16l1.465 1.638a2 2 0 1 1 -3.015 .099l1.55 -1.737z" }),
        /* @__PURE__ */ jsx4("path", { d: "M13.737 9.737c2.299 -2.3 3.23 -5.095 2.081 -6.245c-1.15 -1.15 -3.945 -.217 -6.244 2.082c-2.3 2.299 -3.231 5.095 -2.082 6.244c1.15 1.15 3.946 .218 6.245 -2.081z" }),
        /* @__PURE__ */ jsx4("path", { d: "M7.492 11.818c.362 .362 .768 .676 1.208 .934l6.895 4.047c1.078 .557 2.255 -.075 3.692 -1.512c1.437 -1.437 2.07 -2.614 1.512 -3.692c-.372 -.718 -1.72 -3.017 -4.047 -6.895a6.015 6.015 0 0 0 -.934 -1.208" })
      ] }),
      tablerIconProps
    );
    ExportImageIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 8h.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 20h-5a3 3 0 0 1 -3 -3v-10a3 3 0 0 1 3 -3h10a3 3 0 0 1 3 3v5" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 15l4 -4c.928 -.893 2.072 -.893 3 0l4 4" }),
        /* @__PURE__ */ jsx4("path", { d: "M14 14l1 -1c.617 -.593 1.328 -.793 2.009 -.598" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 16v6" }),
        /* @__PURE__ */ jsx4("path", { d: "M22 19l-3 3l-3 -3" })
      ] }),
      tablerIconProps
    );
    exportToFileIcon = createIcon(
      "M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z",
      { width: 512, height: 512 }
    );
    zoomIn = createIcon(
      "M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z",
      { width: 448, height: 512 }
    );
    zoomOut = createIcon(
      "M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z",
      { width: 448, height: 512 }
    );
    done = createIcon(
      "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
    );
    menu = createIcon(
      "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"
    );
    UndoIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M7.5 10.833 4.167 7.5 7.5 4.167M4.167 7.5h9.166a3.333 3.333 0 0 1 0 6.667H12.5",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    RedoIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M12.5 10.833 15.833 7.5 12.5 4.167M15.833 7.5H6.667a3.333 3.333 0 1 0 0 6.667H7.5",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    questionCircle = createIcon(
      "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z",
      { mirror: true }
    );
    share = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M5 12.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM15 7.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM15 17.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM7.25 8.917l5.5-2.834M7.25 11.083l5.5 2.834",
          strokeWidth: "1.5"
        }
      ),
      modifiedTablerIconProps
    );
    warning = createIcon(
      "M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z"
    );
    shareIOS = createIcon(
      "M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z",
      { width: 24, height: 24 }
    );
    exportToPlus = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 9h-1a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-8a2 2 0 0 0 -2 -2h-1" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 14v-11" }),
        /* @__PURE__ */ jsx4("path", { d: "M9 6l3 -3l3 3" })
      ] }),
      tablerIconProps
    );
    shareWindows = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            fill: "currentColor",
            d: "M40 5.6v6.1l-4.1.7c-8.9 1.4-16.5 6.9-20.6 15C13 32 10.9 43 12.4 43c.4 0 2.4-1.3 4.4-3 5-3.9 12.1-7 18.2-7.7l5-.6v12.8l11.2-11.3L62.5 22 51.2 10.8 40-.5v6.1zm10.2 22.6L44 34.5v-6.8l-6.9.6c-3.9.3-9.8 1.7-13.2 3.1-3.5 1.4-6.5 2.4-6.7 2.2-.9-1 3-7.5 6.4-10.8C28 18.6 34.4 16 40.1 16c3.7 0 3.9-.1 3.9-3.2V9.5l6.2 6.3 6.3 6.2-6.3 6.2z"
          }
        ),
        /* @__PURE__ */ jsx4(
          "path",
          {
            stroke: "currentColor",
            fill: "currentColor",
            d: "M0 36v20h48v-6.2c0-6 0-6.1-2-4.3-1.1 1-2 2.9-2 4.2V52H4V34c0-17.3-.1-18-2-18s-2 .7-2 20z"
          }
        )
      ] }),
      { width: 64, height: 64 }
    );
    resetZoom = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          stroke: "currentColor",
          strokeWidth: "40",
          fill: "currentColor",
          d: "M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z"
        }
      ),
      { width: 1024 }
    );
    arrowBarToTopJSX = /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
      /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
      /* @__PURE__ */ jsx4("path", { d: "M12 10l0 10" }),
      /* @__PURE__ */ jsx4("path", { d: "M12 10l4 4" }),
      /* @__PURE__ */ jsx4("path", { d: "M12 10l-4 4" }),
      /* @__PURE__ */ jsx4("path", { d: "M4 4l16 0" })
    ] });
    arrownNarrowUpJSX = /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
      /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
      /* @__PURE__ */ jsx4("path", { d: "M12 5l0 14" }),
      /* @__PURE__ */ jsx4("path", { d: "M16 9l-4 -4" }),
      /* @__PURE__ */ jsx4("path", { d: "M8 9l4 -4" })
    ] });
    BringForwardIcon = createIcon(arrownNarrowUpJSX, tablerIconProps);
    SendBackwardIcon = createIcon(arrownNarrowUpJSX, {
      ...tablerIconProps,
      style: {
        transform: "rotate(180deg)"
      }
    });
    BringToFrontIcon = createIcon(arrowBarToTopJSX, tablerIconProps);
    SendToBackIcon = createIcon(arrowBarToTopJSX, {
      ...tablerIconProps,
      style: {
        transform: "rotate(180deg)"
      }
    });
    AlignTopIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", stroke: "currentColor", strokeWidth: "1.25", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M3.333 3.333h13.334",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M13.542 6.458h-.417c-.92 0-1.667.747-1.667 1.667v7.083c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667V8.125c0-.92-.746-1.667-1.666-1.667ZM6.875 6.458h-.417c-.92 0-1.666.747-1.666 1.667v3.75c0 .92.746 1.667 1.666 1.667h.417c.92 0 1.667-.746 1.667-1.667v-3.75c0-.92-.747-1.667-1.667-1.667Z" })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    AlignBottomIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", stroke: "currentColor", strokeWidth: "1.25", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M3.333 16.667h13.334",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M6.875 3.125h-.417c-.92 0-1.666.746-1.666 1.667v7.083c0 .92.746 1.667 1.666 1.667h.417c.92 0 1.667-.746 1.667-1.667V4.792c0-.92-.747-1.667-1.667-1.667ZM13.542 5.817h-.417c-.92 0-1.667.747-1.667 1.667v4.391c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667V7.484c0-.92-.746-1.667-1.666-1.667Z" })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    AlignLeftIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", stroke: "currentColor", strokeWidth: "1.25", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M3.333 3.333v13.334",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M15.208 4.792H8.125c-.92 0-1.667.746-1.667 1.666v.417c0 .92.747 1.667 1.667 1.667h7.083c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666ZM12.516 11.458H8.125c-.92 0-1.667.746-1.667 1.667v.417c0 .92.747 1.666 1.667 1.666h4.391c.92 0 1.667-.746 1.667-1.666v-.417c0-.92-.746-1.667-1.667-1.667Z" })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    AlignRightIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", stroke: "currentColor", strokeWidth: "1.25", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M16.667 3.333v13.334",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M11.875 4.792H4.792c-.92 0-1.667.746-1.667 1.666v.417c0 .92.746 1.667 1.667 1.667h7.083c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666ZM11.683 11.458H7.292c-.92 0-1.667.746-1.667 1.667v.417c0 .92.746 1.666 1.667 1.666h4.39c.921 0 1.667-.746 1.667-1.666v-.417c0-.92-.746-1.667-1.666-1.667Z" })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    DistributeHorizontallyIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", stroke: "currentColor", strokeWidth: "1.25", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M16.667 3.333v13.334M3.333 3.333v13.334",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M14.375 10.208v-.416c0-.92-.746-1.667-1.667-1.667H7.292c-.92 0-1.667.746-1.667 1.667v.416c0 .92.746 1.667 1.667 1.667h5.416c.92 0 1.667-.746 1.667-1.667Z" })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    DistributeVerticallyIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", stroke: "currentColor", strokeWidth: "1.25", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M3.333 3.333h13.334M3.333 16.667h13.334",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M10.208 5.625h-.416c-.92 0-1.667.746-1.667 1.667v5.416c0 .92.746 1.667 1.667 1.667h.416c.92 0 1.667-.746 1.667-1.667V7.292c0-.92-.746-1.667-1.667-1.667Z" })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    CenterVerticallyIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M1.667 10h2.916", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ jsx4("path", { d: "M8.333 10h3.334", strokeLinejoin: "round" }),
        /* @__PURE__ */ jsx4("path", { d: "M15.417 10h2.916", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ jsx4("path", { d: "M6.875 4.792h-.417c-.92 0-1.666.746-1.666 1.666v7.084c0 .92.746 1.666 1.666 1.666h.417c.92 0 1.667-.746 1.667-1.666V6.458c0-.92-.747-1.666-1.667-1.666ZM13.542 6.458h-.417c-.92 0-1.667.747-1.667 1.667v3.75c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667v-3.75c0-.92-.746-1.667-1.666-1.667Z" })
      ] }),
      modifiedTablerIconProps
    );
    CenterHorizontallyIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M10 18.333v-2.916", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 11.667V8.333", strokeLinejoin: "round" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 4.583V1.667", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ jsx4("path", { d: "M4.792 13.125v.417c0 .92.746 1.666 1.666 1.666h7.084c.92 0 1.666-.746 1.666-1.666v-.417c0-.92-.746-1.667-1.666-1.667H6.458c-.92 0-1.666.746-1.666 1.667ZM6.458 6.458v.417c0 .92.747 1.667 1.667 1.667h3.75c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666h-3.75c-.92 0-1.667.746-1.667 1.666Z" })
      ] }),
      modifiedTablerIconProps
    );
    usersIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("circle", { cx: "9", cy: "7", r: "4" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 3.13a4 4 0 0 1 0 7.75" }),
        /* @__PURE__ */ jsx4("path", { d: "M21 21v-2a4 4 0 0 0 -3 -3.85" })
      ] }),
      tablerIconProps
    );
    start = createIcon(
      "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z"
    );
    stop = createIcon(
      "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z"
    );
    CloseIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "g",
          {
            clipPath: "url(#a)",
            stroke: "currentColor",
            strokeWidth: "1.25",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: /* @__PURE__ */ jsx4("path", { d: "M15 5 5 15M5 5l10 10" })
          }
        ),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    clone = createIcon(
      "M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z",
      { mirror: true }
    );
    shield = createIcon(
      "M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z",
      { width: 24 }
    );
    file = createIcon(
      "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z",
      { width: 384, height: 512 }
    );
    GroupIcon = React3.memo(
      ({ theme }) => createIcon(
        /* @__PURE__ */ jsxs2(Fragment, { children: [
          /* @__PURE__ */ jsx4("path", { d: "M25 26H111V111H25", fill: iconFillColor(theme) }),
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z",
              stroke: iconFillColor(theme),
              strokeWidth: "2"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M100 100H160V160H100", fill: iconFillColor(theme) }),
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z",
              stroke: iconFillColor(theme),
              strokeWidth: "2"
            }
          ),
          /* @__PURE__ */ jsxs2(
            "g",
            {
              fill: handlerColor(theme),
              stroke: iconFillColor(theme),
              strokeWidth: "6",
              children: [
                /* @__PURE__ */ jsx4("rect", { x: "2.5", y: "2.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "2.5", y: "149.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "147.5", y: "149.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "147.5", y: "2.5", width: "30", height: "30" })
              ]
            }
          )
        ] }),
        { width: 182, height: 182, mirror: true }
      )
    );
    UngroupIcon = React3.memo(
      ({ theme }) => createIcon(
        /* @__PURE__ */ jsxs2(Fragment, { children: [
          /* @__PURE__ */ jsx4("path", { d: "M25 26H111V111H25", fill: iconFillColor(theme) }),
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z",
              stroke: iconFillColor(theme),
              strokeWidth: "2"
            }
          ),
          /* @__PURE__ */ jsx4("path", { d: "M100 100H160V160H100", fill: iconFillColor(theme) }),
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z",
              stroke: iconFillColor(theme),
              strokeWidth: "2"
            }
          ),
          /* @__PURE__ */ jsxs2(
            "g",
            {
              fill: handlerColor(theme),
              stroke: iconFillColor(theme),
              strokeWidth: "6",
              children: [
                /* @__PURE__ */ jsx4("rect", { x: "2.5", y: "2.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "78.5", y: "149.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "147.5", y: "149.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "147.5", y: "78.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "105.5", y: "2.5", width: "30", height: "30" }),
                /* @__PURE__ */ jsx4("rect", { x: "2.5", y: "102.5", width: "30", height: "30" })
              ]
            }
          )
        ] }),
        { width: 182, height: 182, mirror: true }
      )
    );
    FillZigZagIcon = createIcon(
      /* @__PURE__ */ jsx4("g", { strokeWidth: 1.25, children: /* @__PURE__ */ jsx4("path", { d: "M5.879 2.625h8.242a3.27 3.27 0 0 1 3.254 3.254v8.242a3.27 3.27 0 0 1-3.254 3.254H5.88a3.27 3.27 0 0 1-3.254-3.254V5.88A3.27 3.27 0 0 1 5.88 2.626l-.001-.001ZM4.518 16.118l7.608-12.83m.198 13.934 5.051-9.897M2.778 9.675l9.348-6.387m-7.608 12.83 12.857-8.793" }) }),
      modifiedTablerIconProps
    );
    FillHachureIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z",
            stroke: "currentColor",
            strokeWidth: "1.25"
          }
        ),
        /* @__PURE__ */ jsx4(
          "mask",
          {
            id: "FillHachureIcon",
            style: { maskType: "alpha" },
            maskUnits: "userSpaceOnUse",
            x: 2,
            y: 2,
            width: 16,
            height: 16,
            children: /* @__PURE__ */ jsx4(
              "path",
              {
                d: "M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z",
                fill: "currentColor",
                stroke: "currentColor",
                strokeWidth: "1.25"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx4("g", { mask: "url(#FillHachureIcon)", children: /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M2.258 15.156 15.156 2.258M7.324 20.222 20.222 7.325m-20.444 5.35L12.675-.222m-8.157 18.34L17.416 5.22",
            stroke: "currentColor",
            strokeWidth: "1.25",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) })
      ] }),
      modifiedTablerIconProps
    );
    FillCrossHatchIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsxs2("g", { clipPath: "url(#a)", children: [
          /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z",
              stroke: "currentColor",
              strokeWidth: "1.25"
            }
          ),
          /* @__PURE__ */ jsx4(
            "mask",
            {
              id: "FillCrossHatchIcon",
              style: { maskType: "alpha" },
              maskUnits: "userSpaceOnUse",
              x: -1,
              y: -1,
              width: 22,
              height: 22,
              children: /* @__PURE__ */ jsx4(
                "path",
                {
                  d: "M2.426 15.044 15.044 2.426M7.383 20 20 7.383M0 12.617 12.617 0m-7.98 17.941L17.256 5.324m-2.211 12.25L2.426 4.956M20 12.617 7.383 0m5.234 20L0 7.383m17.941 7.98L5.324 2.745",
                  stroke: "currentColor",
                  strokeWidth: "1.25",
                  strokeLinecap: "round",
                  strokeLinejoin: "round"
                }
              )
            }
          ),
          /* @__PURE__ */ jsx4("g", { mask: "url(#FillCrossHatchIcon)", children: /* @__PURE__ */ jsx4(
            "path",
            {
              d: "M14.121 2H5.88A3.879 3.879 0 0 0 2 5.879v8.242A3.879 3.879 0 0 0 5.879 18h8.242A3.879 3.879 0 0 0 18 14.121V5.88A3.879 3.879 0 0 0 14.121 2Z",
              fill: "currentColor"
            }
          ) })
        ] }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    FillSolidIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("g", { clipPath: "url(#a)", children: /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M4.91 2.625h10.18a2.284 2.284 0 0 1 2.285 2.284v10.182a2.284 2.284 0 0 1-2.284 2.284H4.909a2.284 2.284 0 0 1-2.284-2.284V4.909a2.284 2.284 0 0 1 2.284-2.284Z",
            stroke: "currentColor",
            strokeWidth: "1.25"
          }
        ) }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      { ...modifiedTablerIconProps, fill: "currentColor" }
    );
    StrokeWidthBaseIcon = createIcon(
      /* @__PURE__ */ jsx4(Fragment, { children: /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M4.167 10h11.666",
          stroke: "currentColor",
          strokeWidth: "1.25",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ) }),
      modifiedTablerIconProps
    );
    StrokeWidthBoldIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M5 10h10",
          stroke: "currentColor",
          strokeWidth: "2.5",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      modifiedTablerIconProps
    );
    StrokeWidthExtraBoldIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M5 10h10",
          stroke: "currentColor",
          strokeWidth: "3.75",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ),
      modifiedTablerIconProps
    );
    StrokeStyleSolidIcon = React3.memo(
      ({ theme }) => createIcon(
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M6 10H34",
            stroke: iconFillColor(theme),
            strokeWidth: 2,
            fill: "none",
            strokeLinecap: "round"
          }
        ),
        {
          width: 40,
          height: 20
        }
      )
    );
    StrokeStyleDashedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "2", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 12h2" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 12h2" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 12h2" })
      ] }),
      tablerIconProps
    );
    StrokeStyleDottedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "2", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 12v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 12v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 12v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 12v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 12v.01" })
      ] }),
      tablerIconProps
    );
    SloppinessArchitectIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M2.5 12.038c1.655-.885 5.9-3.292 8.568-4.354 2.668-1.063.101 2.821 1.32 3.104 1.218.283 5.112-1.814 5.112-1.814",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    SloppinessArtistIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M2.5 12.563c1.655-.886 5.9-3.293 8.568-4.355 2.668-1.062.101 2.822 1.32 3.105 1.218.283 5.112-1.814 5.112-1.814m-13.469 2.23c2.963-1.586 6.13-5.62 7.468-4.998 1.338.623-1.153 4.11-.132 5.595 1.02 1.487 6.133-1.43 6.133-1.43",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    SloppinessCartoonistIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M2.5 11.936c1.737-.879 8.627-5.346 10.42-5.268 1.795.078-.418 5.138.345 5.736.763.598 3.53-1.789 4.235-2.147M2.929 9.788c1.164-.519 5.47-3.28 6.987-3.114 1.519.165 1 3.827 2.121 4.109 1.122.281 3.839-2.016 4.606-2.42",
          strokeWidth: "1.25"
        }
      ),
      modifiedTablerIconProps
    );
    EdgeSharpIcon = createIcon(
      /* @__PURE__ */ jsxs2("svg", { strokeWidth: "1.5", children: [
        /* @__PURE__ */ jsx4("path", { d: "M3.33334 9.99998V6.66665C3.33334 6.04326 3.33403 4.9332 3.33539 3.33646C4.95233 3.33436 6.06276 3.33331 6.66668 3.33331H10" }),
        /* @__PURE__ */ jsx4("path", { d: "M13.3333 3.33331V3.34331" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.6667 3.33331V3.34331" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.6667 6.66669V6.67669" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.6667 10V10.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M3.33334 13.3333V13.3433" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.6667 13.3333V13.3433" }),
        /* @__PURE__ */ jsx4("path", { d: "M3.33334 16.6667V16.6767" }),
        /* @__PURE__ */ jsx4("path", { d: "M6.66666 16.6667V16.6767" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 16.6667V16.6767" }),
        /* @__PURE__ */ jsx4("path", { d: "M13.3333 16.6667V16.6767" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.6667 16.6667V16.6767" })
      ] }),
      modifiedTablerIconProps
    );
    EdgeRoundIcon = createIcon(
      /* @__PURE__ */ jsxs2(
        "g",
        {
          strokeWidth: "1.5",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [
            /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
            /* @__PURE__ */ jsx4("path", { d: "M4 12v-4a4 4 0 0 1 4 -4h4" }),
            /* @__PURE__ */ jsx4("line", { x1: "16", y1: "4", x2: "16", y2: "4.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "20", y1: "4", x2: "20", y2: "4.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "20", y1: "8", x2: "20", y2: "8.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "20", y1: "12", x2: "20", y2: "12.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "16", x2: "4", y2: "16.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "20", y1: "16", x2: "20", y2: "16.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "20", x2: "4", y2: "20.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "8", y1: "20", x2: "8", y2: "20.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "12", y1: "20", x2: "12", y2: "20.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "16", y1: "20", x2: "16", y2: "20.01" }),
            /* @__PURE__ */ jsx4("line", { x1: "20", y1: "20", x2: "20", y2: "20.01" })
          ]
        }
      ),
      tablerIconProps
    );
    ArrowheadNoneIcon = createIcon(
      /* @__PURE__ */ jsx4("path", { d: "M6 10H34", stroke: "currentColor", strokeWidth: 2, fill: "none" }),
      {
        width: 40,
        height: 20
      }
    );
    ArrowheadArrowIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            stroke: "currentColor",
            strokeWidth: 2,
            fill: "none",
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M34 10H6M34 10L27 5M34 10L27 15" }),
              /* @__PURE__ */ jsx4("path", { d: "M27.5 5L34.5 10L27.5 15" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    ArrowheadCircleIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            stroke: "currentColor",
            fill: "currentColor",
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M32 10L6 10", strokeWidth: 2 }),
              /* @__PURE__ */ jsx4("circle", { r: "4", transform: "matrix(-1 0 0 1 30 10)" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    ArrowheadCircleOutlineIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            stroke: "currentColor",
            fill: "none",
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            strokeWidth: 2,
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M26 10L6 10" }),
              /* @__PURE__ */ jsx4("circle", { r: "4", transform: "matrix(-1 0 0 1 30 10)" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    ArrowheadBarIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsx4("g", { transform: flip ? "translate(40, 0) scale(-1, 1)" : "", children: /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M34 10H5.99996M34 10L34 5M34 10L34 15",
            stroke: "currentColor",
            strokeWidth: 2,
            fill: "none"
          }
        ) }),
        { width: 40, height: 20 }
      )
    );
    ArrowheadTriangleIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            stroke: "currentColor",
            fill: "currentColor",
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M32 10L6 10", strokeWidth: 2 }),
              /* @__PURE__ */ jsx4("path", { d: "M27.5 5.5L34.5 10L27.5 14.5L27.5 5.5" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    ArrowheadTriangleOutlineIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            stroke: "currentColor",
            fill: "none",
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            strokeWidth: 2,
            strokeLinejoin: "round",
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M6,9.5H27" }),
              /* @__PURE__ */ jsx4("path", { d: "M27,5L34,10L27,14Z", fill: "none" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    ArrowheadDiamondIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            stroke: "currentColor",
            fill: "currentColor",
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            strokeLinejoin: "round",
            strokeWidth: 2,
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M6,9.5H20" }),
              /* @__PURE__ */ jsx4("path", { d: "M27,5L34,10L27,14L20,9.5Z" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    ArrowheadDiamondOutlineIcon = React3.memo(
      ({ flip = false }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            stroke: "currentColor",
            fill: "none",
            transform: flip ? "translate(40, 0) scale(-1, 1)" : "",
            strokeLinejoin: "round",
            strokeWidth: 2,
            children: [
              /* @__PURE__ */ jsx4("path", { d: "M6,9.5H20" }),
              /* @__PURE__ */ jsx4("path", { d: "M27,5L34,10L27,14L20,9.5Z" })
            ]
          }
        ),
        { width: 40, height: 20 }
      )
    );
    FontSizeSmallIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("g", { clipPath: "url(#a)", children: /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M14.167 6.667a3.333 3.333 0 0 0-3.334-3.334H9.167a3.333 3.333 0 0 0 0 6.667h1.666a3.333 3.333 0 0 1 0 6.667H9.167a3.333 3.333 0 0 1-3.334-3.334",
            stroke: "currentColor",
            strokeWidth: "1.25",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    FontSizeMediumIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("g", { clipPath: "url(#a)", children: /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M5 16.667V3.333L10 15l5-11.667v13.334",
            stroke: "currentColor",
            strokeWidth: "1.25",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    FontSizeLargeIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("g", { clipPath: "url(#a)", children: /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M5.833 3.333v13.334h8.334",
            stroke: "currentColor",
            strokeWidth: "1.25",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    FontSizeExtraLargeIcon = createIcon(
      /* @__PURE__ */ jsx4(Fragment, { children: /* @__PURE__ */ jsx4(
        "path",
        {
          d: "m1.667 3.333 6.666 13.334M8.333 3.333 1.667 16.667M11.667 3.333v13.334h6.666",
          stroke: "currentColor",
          strokeWidth: "1.25",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      ) }),
      modifiedTablerIconProps
    );
    fontSizeIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 7v-2h13v2" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 5v14" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 19h-4" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 13v-1h6v1" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 12v7" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 19h2" })
      ] }),
      tablerIconProps
    );
    FontFamilyHeadingIcon = createIcon(
      /* @__PURE__ */ jsx4(Fragment, { children: /* @__PURE__ */ jsxs2(
        "g",
        {
          stroke: "currentColor",
          strokeWidth: "1.25",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [
            /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
            /* @__PURE__ */ jsx4("path", { d: "M7 12h10" }),
            /* @__PURE__ */ jsx4("path", { d: "M7 5v14" }),
            /* @__PURE__ */ jsx4("path", { d: "M17 5v14" }),
            /* @__PURE__ */ jsx4("path", { d: "M15 19h4" }),
            /* @__PURE__ */ jsx4("path", { d: "M15 5h4" }),
            /* @__PURE__ */ jsx4("path", { d: "M5 19h4" }),
            /* @__PURE__ */ jsx4("path", { d: "M5 5h4" })
          ]
        }
      ) }),
      tablerIconProps
    );
    FontFamilyNormalIcon = createIcon(
      /* @__PURE__ */ jsx4(Fragment, { children: /* @__PURE__ */ jsx4(
        "g",
        {
          stroke: "currentColor",
          strokeWidth: "1.25",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: /* @__PURE__ */ jsx4("path", { d: "M5.833 16.667v-10a3.333 3.333 0 0 1 3.334-3.334h1.666a3.333 3.333 0 0 1 3.334 3.334v10M5.833 10.833h8.334" })
        }
      ) }),
      modifiedTablerIconProps
    );
    FontFamilyCodeIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4(
          "g",
          {
            clipPath: "url(#a)",
            stroke: "currentColor",
            strokeWidth: "1.25",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: /* @__PURE__ */ jsx4("path", { d: "M5.833 6.667 2.5 10l3.333 3.333M14.167 6.667 17.5 10l-3.333 3.333M11.667 3.333 8.333 16.667" })
          }
        ),
        /* @__PURE__ */ jsx4("defs", { children: /* @__PURE__ */ jsx4("clipPath", { id: "a", children: /* @__PURE__ */ jsx4("path", { fill: "#fff", d: "M0 0h20v20H0z" }) }) })
      ] }),
      modifiedTablerIconProps
    );
    TextAlignLeftIcon = createIcon(
      /* @__PURE__ */ jsxs2(
        "g",
        {
          stroke: "currentColor",
          fill: "none",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 2,
          children: [
            /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "8", x2: "20", y2: "8" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "12", x2: "12", y2: "12" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "16", x2: "16", y2: "16" })
          ]
        }
      ),
      tablerIconProps
    );
    TextAlignCenterIcon = createIcon(
      /* @__PURE__ */ jsxs2(
        "g",
        {
          stroke: "currentColor",
          fill: "none",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [
            /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "8", x2: "20", y2: "8" }),
            /* @__PURE__ */ jsx4("line", { x1: "8", y1: "12", x2: "16", y2: "12" }),
            /* @__PURE__ */ jsx4("line", { x1: "6", y1: "16", x2: "18", y2: "16" })
          ]
        }
      ),
      tablerIconProps
    );
    TextAlignRightIcon = createIcon(
      /* @__PURE__ */ jsxs2(
        "g",
        {
          stroke: "currentColor",
          fill: "none",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [
            /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
            /* @__PURE__ */ jsx4("line", { x1: "4", y1: "8", x2: "20", y2: "8" }),
            /* @__PURE__ */ jsx4("line", { x1: "10", y1: "12", x2: "20", y2: "12" }),
            /* @__PURE__ */ jsx4("line", { x1: "8", y1: "16", x2: "20", y2: "16" })
          ]
        }
      ),
      tablerIconProps
    );
    TextAlignTopIcon = React3.memo(
      ({ theme }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            strokeWidth: "1.5",
            stroke: "currentColor",
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [
              /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
              /* @__PURE__ */ jsx4("line", { x1: "4", y1: "4", x2: "20", y2: "4" }),
              /* @__PURE__ */ jsx4("rect", { x: "9", y: "8", width: "6", height: "12", rx: "2" })
            ]
          }
        ),
        tablerIconProps
      )
    );
    TextAlignBottomIcon = React3.memo(
      ({ theme }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            strokeWidth: "2",
            stroke: "currentColor",
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [
              /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
              /* @__PURE__ */ jsx4("line", { x1: "4", y1: "20", x2: "20", y2: "20" }),
              /* @__PURE__ */ jsx4("rect", { x: "9", y: "4", width: "6", height: "12", rx: "2" })
            ]
          }
        ),
        tablerIconProps
      )
    );
    TextAlignMiddleIcon = React3.memo(
      ({ theme }) => createIcon(
        /* @__PURE__ */ jsxs2(
          "g",
          {
            strokeWidth: "1.5",
            stroke: "currentColor",
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [
              /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
              /* @__PURE__ */ jsx4("line", { x1: "4", y1: "12", x2: "9", y2: "12" }),
              /* @__PURE__ */ jsx4("line", { x1: "15", y1: "12", x2: "20", y2: "12" }),
              /* @__PURE__ */ jsx4("rect", { x: "9", y: "6", width: "6", height: "12", rx: "2" })
            ]
          }
        ),
        tablerIconProps
      )
    );
    angleIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M21 19h-18l9 -15" }),
        /* @__PURE__ */ jsx4("path", { d: "M20.615 15.171h.015" }),
        /* @__PURE__ */ jsx4("path", { d: "M19.515 11.771h.015" }),
        /* @__PURE__ */ jsx4("path", { d: "M17.715 8.671h.015" }),
        /* @__PURE__ */ jsx4("path", { d: "M15.415 5.971h.015" })
      ] }),
      tablerIconProps
    );
    publishIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          d: "M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zM393.4 288H328v112c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V288h-65.4c-14.3 0-21.4-17.2-11.3-27.3l105.4-105.4c6.2-6.2 16.4-6.2 22.6 0l105.4 105.4c10.1 10.1 2.9 27.3-11.3 27.3z",
          fill: "currentColor"
        }
      ),
      { width: 640, height: 512 }
    );
    eraser = createIcon(
      /* @__PURE__ */ jsx4("path", { d: "M480 416C497.7 416 512 430.3 512 448C512 465.7 497.7 480 480 480H150.6C133.7 480 117.4 473.3 105.4 461.3L25.37 381.3C.3786 356.3 .3786 315.7 25.37 290.7L258.7 57.37C283.7 32.38 324.3 32.38 349.3 57.37L486.6 194.7C511.6 219.7 511.6 260.3 486.6 285.3L355.9 416H480zM265.4 416L332.7 348.7L195.3 211.3L70.63 336L150.6 416L265.4 416z" })
    );
    handIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 13v-7.5a1.5 1.5 0 0 1 3 0v6.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 5.5v-2a1.5 1.5 0 1 1 3 0v8.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M14 5.5a1.5 1.5 0 0 1 3 0v6.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 7.5a1.5 1.5 0 0 1 3 0v8.5a6 6 0 0 1 -6 6h-2h.208a6 6 0 0 1 -5.012 -2.7a69.74 69.74 0 0 1 -.196 -.3c-.312 -.479 -1.407 -2.388 -3.286 -5.728a1.5 1.5 0 0 1 .536 -2.022a1.867 1.867 0 0 1 2.28 .28l1.47 1.47" })
      ] }),
      tablerIconProps
    );
    downloadIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2" }),
        /* @__PURE__ */ jsx4("path", { d: "M7 11l5 5l5 -5" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 4l0 12" })
      ] }),
      tablerIconProps
    );
    copyIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 8m0 2a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2z" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2" })
      ] }),
      tablerIconProps
    );
    cutIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M7 17m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 17m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M9.15 14.85l8.85 -10.85" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 4l8.85 10.85" })
      ] }),
      tablerIconProps
    );
    helpIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 17l0 .01" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4" })
      ] }),
      tablerIconProps
    );
    playerPlayIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M7 4v16l13 -8z" })
      ] }),
      tablerIconProps
    );
    playerStopFilledIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M17 4h-10a3 3 0 0 0 -3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3 -3v-10a3 3 0 0 0 -3 -3z",
            strokeWidth: "0",
            fill: "currentColor"
          }
        )
      ] }),
      tablerIconProps
    );
    tablerCheckIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 12l5 5l10 -10" })
      ] }),
      tablerIconProps
    );
    alertTriangleIcon = createIcon(
      /* @__PURE__ */ jsxs2(Fragment, { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M10.24 3.957l-8.422 14.06a1.989 1.989 0 0 0 1.7 2.983h16.845a1.989 1.989 0 0 0 1.7 -2.983l-8.423 -14.06a1.989 1.989 0 0 0 -3.4 0z" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 9v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 17h.01" })
      ] }),
      tablerIconProps
    );
    eyeDropperIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 7l6 6" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 16l11.7 -11.7a1 1 0 0 1 1.4 0l2.6 2.6a1 1 0 0 1 0 1.4l-11.7 11.7h-4v-4z" })
      ] }),
      tablerIconProps
    );
    extraToolsIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 3l-4 7h8z" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 17m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 14m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z" })
      ] }),
      tablerIconProps
    );
    frameToolIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 7l16 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 17l16 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M7 4l0 16" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 4l0 16" })
      ] }),
      tablerIconProps
    );
    mermaidLogoIcon = createIcon(
      /* @__PURE__ */ jsx4(
        "path",
        {
          fill: "currentColor",
          d: "M407.48,111.18C335.587,108.103 269.573,152.338 245.08,220C220.587,152.338 154.573,108.103 82.68,111.18C80.285,168.229 107.577,222.632 154.74,254.82C178.908,271.419 193.35,298.951 193.27,328.27L193.27,379.13L296.9,379.13L296.9,328.27C296.816,298.953 311.255,271.42 335.42,254.82C382.596,222.644 409.892,168.233 407.48,111.18Z"
        }
      )
    );
    ArrowRightIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: "1.25", children: [
        /* @__PURE__ */ jsx4("path", { d: "M4.16602 10H15.8327" }),
        /* @__PURE__ */ jsx4("path", { d: "M12.5 13.3333L15.8333 10" }),
        /* @__PURE__ */ jsx4("path", { d: "M12.5 6.66666L15.8333 9.99999" })
      ] }),
      modifiedTablerIconProps
    );
    laserPointerToolIcon = createIcon(
      /* @__PURE__ */ jsxs2(
        "g",
        {
          fill: "none",
          stroke: "currentColor",
          strokeWidth: "1.25",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          transform: "rotate(90 10 10)",
          children: [
            /* @__PURE__ */ jsx4(
              "path",
              {
                clipRule: "evenodd",
                d: "m9.644 13.69 7.774-7.773a2.357 2.357 0 0 0-3.334-3.334l-7.773 7.774L8 12l1.643 1.69Z"
              }
            ),
            /* @__PURE__ */ jsx4("path", { d: "m13.25 3.417 3.333 3.333M10 10l2-2M5 15l3-3M2.156 17.894l1-1M5.453 19.029l-.144-1.407M2.377 11.887l.866 1.118M8.354 17.273l-1.194-.758M.953 14.652l1.408.13" })
          ]
        }
      ),
      20
    );
    MagicIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", fill: "none", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 21l15 -15l-3 -3l-15 15l3 3" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 6l3 3" }),
        /* @__PURE__ */ jsx4("path", { d: "M9 3a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 13a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2" })
      ] }),
      tablerIconProps
    );
    MagicIconThin = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 21l15 -15l-3 -3l-15 15l3 3" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 6l3 3" }),
        /* @__PURE__ */ jsx4("path", { d: "M9 3a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 13a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2" })
      ] }),
      tablerIconProps
    );
    OpenAIIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", fill: "none", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M11.217 19.384a3.501 3.501 0 0 0 6.783 -1.217v-5.167l-6 -3.35" }),
        /* @__PURE__ */ jsx4("path", { d: "M5.214 15.014a3.501 3.501 0 0 0 4.446 5.266l4.34 -2.534v-6.946" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 7.63c-1.391 -.236 -2.787 .395 -3.534 1.689a3.474 3.474 0 0 0 1.271 4.745l4.263 2.514l6 -3.348" }),
        /* @__PURE__ */ jsx4("path", { d: "M12.783 4.616a3.501 3.501 0 0 0 -6.783 1.217v5.067l6 3.45" }),
        /* @__PURE__ */ jsx4("path", { d: "M18.786 8.986a3.501 3.501 0 0 0 -4.446 -5.266l-4.34 2.534v6.946" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 16.302c1.391 .236 2.787 -.395 3.534 -1.689a3.474 3.474 0 0 0 -1.271 -4.745l-4.308 -2.514l-5.955 3.42" })
      ] }),
      tablerIconProps
    );
    fullscreenIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", fill: "none", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 8v-2a2 2 0 0 1 2 -2h2" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 16v2a2 2 0 0 0 2 2h2" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 4h2a2 2 0 0 1 2 2v2" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 20h2a2 2 0 0 0 2 -2v-2" })
      ] }),
      tablerIconProps
    );
    eyeIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", fill: "none", strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6" })
      ] }),
      tablerIconProps
    );
    eyeClosedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", fill: "none", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M10.585 10.587a2 2 0 0 0 2.829 2.828" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.681 16.673a8.717 8.717 0 0 1 -4.681 1.327c-3.6 0 -6.6 -2 -9 -6c1.272 -2.12 2.712 -3.678 4.32 -4.674m2.86 -1.146a9.055 9.055 0 0 1 1.82 -.18c3.6 0 6.6 2 9 6c-.666 1.11 -1.379 2.067 -2.138 2.87" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 3l18 18" })
      ] }),
      tablerIconProps
    );
    brainIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", fill: "none", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M15.5 13a3.5 3.5 0 0 0 -3.5 3.5v1a3.5 3.5 0 0 0 7 0v-1.8" }),
        /* @__PURE__ */ jsx4("path", { d: "M8.5 13a3.5 3.5 0 0 1 3.5 3.5v1a3.5 3.5 0 0 1 -7 0v-1.8" }),
        /* @__PURE__ */ jsx4("path", { d: "M17.5 16a3.5 3.5 0 0 0 0 -7h-.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 9.3v-2.8a3.5 3.5 0 0 0 -7 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M6.5 16a3.5 3.5 0 0 1 0 -7h.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 9.3v-2.8a3.5 3.5 0 0 1 7 0v10" })
      ] }),
      tablerIconProps
    );
    brainIconThin = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M15.5 13a3.5 3.5 0 0 0 -3.5 3.5v1a3.5 3.5 0 0 0 7 0v-1.8" }),
        /* @__PURE__ */ jsx4("path", { d: "M8.5 13a3.5 3.5 0 0 1 3.5 3.5v1a3.5 3.5 0 0 1 -7 0v-1.8" }),
        /* @__PURE__ */ jsx4("path", { d: "M17.5 16a3.5 3.5 0 0 0 0 -7h-.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 9.3v-2.8a3.5 3.5 0 0 0 -7 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M6.5 16a3.5 3.5 0 0 1 0 -7h.5" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 9.3v-2.8a3.5 3.5 0 0 1 7 0v10" })
      ] }),
      tablerIconProps
    );
    searchIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M21 21l-6 -6" })
      ] }),
      tablerIconProps
    );
    clockIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M20.984 12.53a9 9 0 1 0 -7.552 8.355" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 7v5l3 3" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 16l-2 3h4l-2 3" })
      ] }),
      tablerIconProps
    );
    microphoneIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M9 2m0 3a3 3 0 0 1 3 -3h0a3 3 0 0 1 3 3v5a3 3 0 0 1 -3 3h0a3 3 0 0 1 -3 -3z" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 10a7 7 0 0 0 14 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 21l8 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 17l0 4" })
      ] }),
      tablerIconProps
    );
    microphoneMutedIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 3l18 18" }),
        /* @__PURE__ */ jsx4("path", { d: "M9 5a3 3 0 0 1 6 0v5a3 3 0 0 1 -.13 .874m-2 2a3 3 0 0 1 -3.87 -2.872v-1" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 10a7 7 0 0 0 10.846 5.85m2 -2a6.967 6.967 0 0 0 1.152 -3.85" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 21l8 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 17l0 4" })
      ] }),
      tablerIconProps
    );
    boltIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M13 3l0 7l6 0l-8 11l0 -7l-6 0l8 -11" })
      ] }),
      tablerIconProps
    );
    selectAllIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 8m0 1a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-6a1 1 0 0 1 -1 -1z" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 20v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 20v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 20v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 20v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 16v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 12v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 8v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 4v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 4v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 4v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 4v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 4v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 8v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 12v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 16v.01" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 20v.01" })
      ] }),
      tablerIconProps
    );
    abacusIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 3v18" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 21v-18" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 7h14" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 15h14" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 13v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 13v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 13v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M14 5v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 5v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 5v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 21h18" })
      ] }),
      tablerIconProps
    );
    flipVertical = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 12l18 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M7 16l10 0l-10 5l0 -5" }),
        /* @__PURE__ */ jsx4("path", { d: "M7 8l10 0l-10 -5l0 5" })
      ] }),
      tablerIconProps
    );
    flipHorizontal = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 3l0 18" }),
        /* @__PURE__ */ jsx4("path", { d: "M16 7l0 10l5 0l-5 -10" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 7l0 10l-5 0l5 -10" })
      ] }),
      tablerIconProps
    );
    paintIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 3m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v2a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z" }),
        /* @__PURE__ */ jsx4("path", { d: "M19 6h1a2 2 0 0 1 2 2a5 5 0 0 1 -5 5l-5 0v2" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 15m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z" })
      ] }),
      tablerIconProps
    );
    zoomAreaIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 15m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M22 22l-3 -3" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 18h-1a2 2 0 0 1 -2 -2v-1" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 11v-1" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 6v-1a2 2 0 0 1 2 -2h1" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 3h1" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 3h1a2 2 0 0 1 2 2v1" })
      ] }),
      tablerIconProps
    );
    svgIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M14 3v4a1 1 0 0 0 1 1h4" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 20.25c0 .414 .336 .75 .75 .75h1.25a1 1 0 0 0 1 -1v-1a1 1 0 0 0 -1 -1h-1a1 1 0 0 1 -1 -1v-1a1 1 0 0 1 1 -1h1.25a.75 .75 0 0 1 .75 .75" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 15l2 6l2 -6" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 15h-1a2 2 0 0 0 -2 2v2a2 2 0 0 0 2 2h1v-3" })
      ] }),
      tablerIconProps
    );
    pngIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M14 3v4a1 1 0 0 0 1 1h4" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4" }),
        /* @__PURE__ */ jsx4("path", { d: "M20 15h-1a2 2 0 0 0 -2 2v2a2 2 0 0 0 2 2h1v-3" }),
        /* @__PURE__ */ jsx4("path", { d: "M5 18h1.5a1.5 1.5 0 0 0 0 -3h-1.5v6" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 21v-6l3 6v-6" })
      ] }),
      tablerIconProps
    );
    magnetIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 13v-8a2 2 0 0 1 2 -2h1a2 2 0 0 1 2 2v8a2 2 0 0 0 6 0v-8a2 2 0 0 1 2 -2h1a2 2 0 0 1 2 2v8a8 8 0 0 1 -16 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M4 8l5 0" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 8l4 0" })
      ] }),
      tablerIconProps
    );
    coffeeIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.25, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 14c.83 .642 2.077 1.017 3.5 1c1.423 .017 2.67 -.358 3.5 -1c.83 -.642 2.077 -1.017 3.5 -1c1.423 -.017 2.67 .358 3.5 1" }),
        /* @__PURE__ */ jsx4("path", { d: "M8 3a2.4 2.4 0 0 0 -1 2a2.4 2.4 0 0 0 1 2" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 3a2.4 2.4 0 0 0 -1 2a2.4 2.4 0 0 0 1 2" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 10h14v5a6 6 0 0 1 -6 6h-2a6 6 0 0 1 -6 -6v-5z" }),
        /* @__PURE__ */ jsx4("path", { d: "M16.746 16.726a3 3 0 1 0 .252 -5.555" })
      ] }),
      tablerIconProps
    );
    DeviceDesktopIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { stroke: "currentColor", children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 5a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-16a1 1 0 0 1-1-1v-10zM7 20h10M9 16v4M15 16v4" })
      ] }),
      { ...tablerIconProps, strokeWidth: 1.5 }
    );
    loginIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M15 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2" }),
        /* @__PURE__ */ jsx4("path", { d: "M21 12h-13l3 -3" }),
        /* @__PURE__ */ jsx4("path", { d: "M11 15l-3 -3" })
      ] }),
      tablerIconProps
    );
    youtubeIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M2 8a4 4 0 0 1 4 -4h12a4 4 0 0 1 4 4v8a4 4 0 0 1 -4 4h-12a4 4 0 0 1 -4 -4v-8z" }),
        /* @__PURE__ */ jsx4("path", { d: "M10 9l5 3l-5 3z" })
      ] }),
      tablerIconProps
    );
    gridIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 6h18" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 12h18" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 18h18" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 3v18" }),
        /* @__PURE__ */ jsx4("path", { d: "M12 3v18" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 3v18" })
      ] }),
      tablerIconProps
    );
    lineEditorIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { strokeWidth: 1.5, children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 3m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v2a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z" }),
        /* @__PURE__ */ jsx4("path", { d: "M3 17m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v2a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z" }),
        /* @__PURE__ */ jsx4("path", { d: "M17 5c-6.627 0 -12 5.373 -12 12" })
      ] }),
      tablerIconProps
    );
    sharpArrowIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 18l12 -12" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 10v-4h-4" })
      ] }),
      tablerIconProps
    );
    elbowArrowIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M4,19L10,19C11.097,19 12,18.097 12,17L12,9C12,7.903 12.903,7 14,7L21,7" }),
        /* @__PURE__ */ jsx4("path", { d: "M18 4l3 3l-3 3" })
      ] }),
      tablerIconProps
    );
    roundArrowIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { d: "M16,12L20,9L16,6" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 20c0 -6.075 4.925 -11 11 -11h3" })
      ] }),
      tablerIconProps
    );
    collapseDownIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 9l6 6l6 -6" })
      ] }),
      tablerIconProps
    );
    collapseUpIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 15l6 -6l6 6" })
      ] }),
      tablerIconProps
    );
    upIcon = createIcon(
      /* @__PURE__ */ jsxs2("g", { children: [
        /* @__PURE__ */ jsx4("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsx4("path", { d: "M6 15l6 -6l6 6" })
      ] }),
      tablerIconProps
    );
  }
});

// fonts/metadata.ts
var FONT_METADATA, RANGES, LOCAL_FONT_PROTOCOL;
var init_metadata = __esm({
  "fonts/metadata.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_icons();
    init_constants();
    FONT_METADATA = {
      [FONT_FAMILY.Excalifont]: {
        metrics: {
          unitsPerEm: 1e3,
          ascender: 886,
          descender: -374,
          lineHeight: 1.25
        },
        icon: FreedrawIcon
      },
      [FONT_FAMILY.Nunito]: {
        metrics: {
          unitsPerEm: 1e3,
          ascender: 1011,
          descender: -353,
          lineHeight: 1.35
        },
        icon: FontFamilyNormalIcon
      },
      [FONT_FAMILY["Lilita One"]]: {
        metrics: {
          unitsPerEm: 1e3,
          ascender: 923,
          descender: -220,
          lineHeight: 1.15
        },
        icon: FontFamilyHeadingIcon
      },
      [FONT_FAMILY["Comic Shanns"]]: {
        metrics: {
          unitsPerEm: 1e3,
          ascender: 750,
          descender: -250,
          lineHeight: 1.25
        },
        icon: FontFamilyCodeIcon
      },
      [FONT_FAMILY.Virgil]: {
        metrics: {
          unitsPerEm: 1e3,
          ascender: 886,
          descender: -374,
          lineHeight: 1.25
        },
        icon: FreedrawIcon,
        deprecated: true
      },
      [FONT_FAMILY.Helvetica]: {
        metrics: {
          unitsPerEm: 2048,
          ascender: 1577,
          descender: -471,
          lineHeight: 1.15
        },
        icon: FontFamilyNormalIcon,
        deprecated: true,
        local: true
      },
      [FONT_FAMILY.Cascadia]: {
        metrics: {
          unitsPerEm: 2048,
          ascender: 1900,
          descender: -480,
          lineHeight: 1.2
        },
        icon: FontFamilyCodeIcon,
        deprecated: true
      },
      [FONT_FAMILY["Liberation Sans"]]: {
        metrics: {
          unitsPerEm: 2048,
          ascender: 1854,
          descender: -434,
          lineHeight: 1.15
        },
        icon: FontFamilyNormalIcon,
        serverSide: true
      }
    };
    RANGES = {
      LATIN: "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
      LATIN_EXT: "U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF",
      CYRILIC_EXT: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
      CYRILIC: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
      VIETNAMESE: "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+0300-0301, U+0303-0304, U+0308-0309, U+0323, U+0329, U+1EA0-1EF9, U+20AB"
    };
    LOCAL_FONT_PROTOCOL = "local:";
  }
});

// data/filesystem.ts
import {
  fileOpen as _fileOpen,
  fileSave as _fileSave,
  supported as nativeFileSystemSupported
} from "browser-fs-access";
var INPUT_CHANGE_INTERVAL_MS, fileOpen, fileSave;
var init_filesystem = __esm({
  "data/filesystem.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_errors();
    init_utils2();
    INPUT_CHANGE_INTERVAL_MS = 500;
    fileOpen = (opts) => {
      const mimeTypes = opts.extensions?.reduce((mimeTypes2, type) => {
        mimeTypes2.push(MIME_TYPES[type]);
        return mimeTypes2;
      }, []);
      const extensions = opts.extensions?.reduce((acc, ext) => {
        if (ext === "jpg") {
          return acc.concat(".jpg", ".jpeg");
        }
        return acc.concat(`.${ext}`);
      }, []);
      return _fileOpen({
        description: opts.description,
        extensions,
        mimeTypes,
        multiple: opts.multiple ?? false,
        legacySetup: (resolve, reject, input) => {
          const scheduleRejection = debounce(reject, INPUT_CHANGE_INTERVAL_MS);
          const focusHandler = () => {
            checkForFile();
            document.addEventListener("keyup" /* KEYUP */, scheduleRejection);
            document.addEventListener("pointerup" /* POINTER_UP */, scheduleRejection);
            scheduleRejection();
          };
          const checkForFile = () => {
            if (input.files?.length) {
              const ret = opts.multiple ? [...input.files] : input.files[0];
              resolve(ret);
            }
          };
          requestAnimationFrame(() => {
            window.addEventListener("focus" /* FOCUS */, focusHandler);
          });
          const interval = window.setInterval(() => {
            checkForFile();
          }, INPUT_CHANGE_INTERVAL_MS);
          return (rejectPromise) => {
            clearInterval(interval);
            scheduleRejection.cancel();
            window.removeEventListener("focus" /* FOCUS */, focusHandler);
            document.removeEventListener("keyup" /* KEYUP */, scheduleRejection);
            document.removeEventListener("pointerup" /* POINTER_UP */, scheduleRejection);
            if (rejectPromise) {
              console.warn("Opening the file was canceled (legacy-fs).");
              rejectPromise(new AbortError());
            }
          };
        }
      });
    };
    fileSave = (blob, opts) => {
      return _fileSave(
        blob,
        {
          fileName: `${opts.name}.${opts.extension}`,
          description: opts.description,
          extensions: [`.${opts.extension}`]
        },
        opts.fileHandle
      );
    };
  }
});

// data/json.ts
var filterOutDeletedFiles, serializeAsJSON, saveAsJSON, loadFromJSON, isValidExcalidrawData, isValidLibrary, serializeLibraryAsJSON, saveLibraryAsJSON;
var init_json = __esm({
  "data/json.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_filesystem();
    init_appState();
    init_constants();
    init_element();
    init_blob();
    filterOutDeletedFiles = (elements, files) => {
      const nextFiles = {};
      for (const element of elements) {
        if (!element.isDeleted && "fileId" in element && element.fileId && files[element.fileId]) {
          nextFiles[element.fileId] = files[element.fileId];
        }
      }
      return nextFiles;
    };
    serializeAsJSON = (elements, appState, files, type) => {
      const data = {
        type: EXPORT_DATA_TYPES.excalidraw,
        version: VERSIONS.excalidraw,
        source: EXPORT_SOURCE,
        elements: type === "local" ? clearElementsForExport(elements) : clearElementsForDatabase(elements),
        appState: type === "local" ? cleanAppStateForExport(appState) : clearAppStateForDatabase(appState),
        files: type === "local" ? filterOutDeletedFiles(elements, files) : (
          // will be stripped from JSON
          void 0
        )
      };
      return JSON.stringify(data, null, 2);
    };
    saveAsJSON = async (elements, appState, files, name = appState.name || DEFAULT_FILENAME) => {
      const serialized = serializeAsJSON(elements, appState, files, "local");
      const blob = new Blob([serialized], {
        type: MIME_TYPES.excalidraw
      });
      const fileHandle = await fileSave(blob, {
        name,
        extension: "excalidraw",
        description: "Excalidraw file",
        fileHandle: isImageFileHandle(appState.fileHandle) ? null : appState.fileHandle
      });
      return { fileHandle };
    };
    loadFromJSON = async (localAppState, localElements) => {
      const file2 = await fileOpen({
        description: "Excalidraw files"
        // ToDo: Be over-permissive until https://bugs.webkit.org/show_bug.cgi?id=34442
        // gets resolved. Else, iOS users cannot open `.excalidraw` files.
        // extensions: ["json", "excalidraw", "png", "svg"],
      });
      return loadFromBlob(
        await normalizeFile(file2),
        localAppState,
        localElements,
        file2.handle
      );
    };
    isValidExcalidrawData = (data) => {
      return data?.type === EXPORT_DATA_TYPES.excalidraw && (!data.elements || Array.isArray(data.elements) && (!data.appState || typeof data.appState === "object"));
    };
    isValidLibrary = (json) => {
      return typeof json === "object" && json && json.type === EXPORT_DATA_TYPES.excalidrawLibrary && (json.version === 1 || json.version === 2);
    };
    serializeLibraryAsJSON = (libraryItems) => {
      const data = {
        type: EXPORT_DATA_TYPES.excalidrawLibrary,
        version: VERSIONS.excalidrawLibrary,
        source: EXPORT_SOURCE,
        libraryItems
      };
      return JSON.stringify(data, null, 2);
    };
    saveLibraryAsJSON = async (libraryItems) => {
      const serialized = serializeLibraryAsJSON(libraryItems);
      await fileSave(
        new Blob([serialized], {
          type: MIME_TYPES.excalidrawlib
        }),
        {
          name: "library",
          extension: "excalidrawlib",
          description: "Excalidraw library file"
        }
      );
    };
  }
});

// points.ts
var getSizeFromPoints, rescalePoints;
var init_points = __esm({
  "points.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    getSizeFromPoints = (points) => {
      const xs = points.map((point2) => point2[0]);
      const ys = points.map((point2) => point2[1]);
      return {
        width: Math.max(...xs) - Math.min(...xs),
        height: Math.max(...ys) - Math.min(...ys)
      };
    };
    rescalePoints = (dimension, newSize, points, normalize) => {
      const coordinates = points.map((point2) => point2[dimension]);
      const maxCoordinate = Math.max(...coordinates);
      const minCoordinate = Math.min(...coordinates);
      const size = maxCoordinate - minCoordinate;
      const scale = size === 0 ? 1 : newSize / size;
      let nextMinCoordinate = Infinity;
      const scaledPoints = points.map((point2) => {
        const newCoordinate = point2[dimension] * scale;
        const newPoint = [...point2];
        newPoint[dimension] = newCoordinate;
        if (newCoordinate < nextMinCoordinate) {
          nextMinCoordinate = newCoordinate;
        }
        return newPoint;
      });
      if (!normalize) {
        return scaledPoints;
      }
      if (scaledPoints.length === 2) {
        return scaledPoints;
      }
      const translation2 = minCoordinate - nextMinCoordinate;
      const nextPoints = scaledPoints.map(
        (scaledPoint) => pointFromPair(
          scaledPoint.map((value, currentDimension) => {
            return currentDimension === dimension ? value + translation2 : value;
          })
        )
      );
      return nextPoints;
    };
  }
});

// ../math/ga/ga.ts
var point, offset, nvector, reverse, add, sub, mul, mulScalar, meet, join, joinScalar, dot, norm, inorm, normalized, inormalized, isNumber, E0, E1, E2, E01, E20, E12, E012;
var init_ga = __esm({
  "../math/ga/ga.ts"() {
    "use strict";
    init_define_import_meta_env();
    point = (x, y) => [0, 0, 0, 0, y, x, 1, 0];
    offset = (x, y) => [
      0,
      0,
      0,
      0,
      y,
      x,
      0,
      0
    ];
    nvector = (value = 0, index = 0) => {
      const result = [0, 0, 0, 0, 0, 0, 0, 0];
      if (index < 0 || index > 7) {
        throw new Error(`Expected \`index\` between 0 and 7, got \`${index}\``);
      }
      if (value !== 0) {
        result[index] = value;
      }
      return result;
    };
    reverse = (nvector2) => [
      nvector2[0],
      nvector2[1],
      nvector2[2],
      nvector2[3],
      -nvector2[4],
      -nvector2[5],
      -nvector2[6],
      -nvector2[7]
    ];
    add = (a, b) => {
      if (isNumber(b)) {
        return [a[0] + b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];
      }
      return [
        a[0] + b[0],
        a[1] + b[1],
        a[2] + b[2],
        a[3] + b[3],
        a[4] + b[4],
        a[5] + b[5],
        a[6] + b[6],
        a[7] + b[7]
      ];
    };
    sub = (a, b) => {
      if (isNumber(b)) {
        return [a[0] - b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];
      }
      return [
        a[0] - b[0],
        a[1] - b[1],
        a[2] - b[2],
        a[3] - b[3],
        a[4] - b[4],
        a[5] - b[5],
        a[6] - b[6],
        a[7] - b[7]
      ];
    };
    mul = (a, b) => {
      if (isNumber(b)) {
        return [
          a[0] * b,
          a[1] * b,
          a[2] * b,
          a[3] * b,
          a[4] * b,
          a[5] * b,
          a[6] * b,
          a[7] * b
        ];
      }
      return [
        mulScalar(a, b),
        b[1] * a[0] + b[0] * a[1] - b[4] * a[2] + b[5] * a[3] + b[2] * a[4] - b[3] * a[5] - b[7] * a[6] - b[6] * a[7],
        b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6],
        b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6],
        b[4] * a[0] + b[2] * a[1] - b[1] * a[2] + b[7] * a[3] + b[0] * a[4] + b[6] * a[5] - b[5] * a[6] + b[3] * a[7],
        b[5] * a[0] - b[3] * a[1] + b[7] * a[2] + b[1] * a[3] - b[6] * a[4] + b[0] * a[5] + b[4] * a[6] + b[2] * a[7],
        b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6],
        b[7] * a[0] + b[6] * a[1] + b[5] * a[2] + b[4] * a[3] + b[3] * a[4] + b[2] * a[5] + b[1] * a[6] + b[0] * a[7]
      ];
    };
    mulScalar = (a, b) => b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6];
    meet = (a, b) => [
      b[0] * a[0],
      b[1] * a[0] + b[0] * a[1],
      b[2] * a[0] + b[0] * a[2],
      b[3] * a[0] + b[0] * a[3],
      b[4] * a[0] + b[2] * a[1] - b[1] * a[2] + b[0] * a[4],
      b[5] * a[0] - b[3] * a[1] + b[1] * a[3] + b[0] * a[5],
      b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6],
      b[7] * a[0] + b[6] * a[1] + b[5] * a[2] + b[4] * a[3] + b[3] * a[4] + b[2] * a[5] + b[1] * a[6]
    ];
    join = (a, b) => [
      joinScalar(a, b),
      a[1] * b[7] + a[4] * b[5] - a[5] * b[4] + a[7] * b[1],
      a[2] * b[7] - a[4] * b[6] + a[6] * b[4] + a[7] * b[2],
      a[3] * b[7] + a[5] * b[6] - a[6] * b[5] + a[7] * b[3],
      a[4] * b[7] + a[7] * b[4],
      a[5] * b[7] + a[7] * b[5],
      a[6] * b[7] + a[7] * b[6],
      a[7] * b[7]
    ];
    joinScalar = (a, b) => a[0] * b[7] + a[1] * b[6] + a[2] * b[5] + a[3] * b[4] + a[4] * b[3] + a[5] * b[2] + a[6] * b[1] + a[7] * b[0];
    dot = (a, b) => [
      b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6],
      b[1] * a[0] + b[0] * a[1] - b[4] * a[2] + b[5] * a[3] + b[2] * a[4] - b[3] * a[5] - b[7] * a[6] - b[6] * a[7],
      b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6],
      b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6],
      b[4] * a[0] + b[7] * a[3] + b[0] * a[4] + b[3] * a[7],
      b[5] * a[0] + b[7] * a[2] + b[0] * a[5] + b[2] * a[7],
      b[6] * a[0] + b[0] * a[6],
      b[7] * a[0] + b[0] * a[7]
    ];
    norm = (a) => Math.sqrt(Math.abs(a[0] * a[0] - a[2] * a[2] - a[3] * a[3] + a[6] * a[6]));
    inorm = (a) => Math.sqrt(Math.abs(a[7] * a[7] - a[5] * a[5] - a[4] * a[4] + a[1] * a[1]));
    normalized = (a) => {
      const n = norm(a);
      if (n === 0 || n === 1) {
        return a;
      }
      const sign2 = a[6] < 0 ? -1 : 1;
      return mul(a, sign2 / n);
    };
    inormalized = (a) => {
      const n = inorm(a);
      if (n === 0 || n === 1) {
        return a;
      }
      return mul(a, 1 / n);
    };
    isNumber = (a) => typeof a === "number";
    E0 = nvector(1, 1);
    E1 = nvector(1, 2);
    E2 = nvector(1, 3);
    E01 = nvector(1, 4);
    E20 = nvector(1, 5);
    E12 = nvector(1, 6);
    E012 = nvector(1, 7);
  }
});

// ../math/ga/galines.ts
var equation, through, orthogonal, orthogonalThrough, sign;
var init_galines = __esm({
  "../math/ga/galines.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_ga();
    equation = (a, b, c) => normalized([0, c, a, b, 0, 0, 0, 0]);
    through = (from3, to) => normalized(join(to, from3));
    orthogonal = (line, point2) => dot(line, point2);
    orthogonalThrough = (against, intersection) => orthogonal(through(against, intersection), intersection);
    sign = (line) => Math.sign(line[1]);
  }
});

// ../math/ga/gapoints.ts
var from, toTuple, abs, intersect, distance2, distanceToLine;
var init_gapoints = __esm({
  "../math/ga/gapoints.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_ga();
    init_galines();
    init_ga();
    from = ([x, y]) => [
      0,
      0,
      0,
      0,
      y,
      x,
      1,
      0
    ];
    toTuple = (point2) => [point2[5], point2[4]];
    abs = (point2) => [
      0,
      0,
      0,
      0,
      Math.abs(point2[4]),
      Math.abs(point2[5]),
      1,
      0
    ];
    intersect = (line1, line2) => normalized(meet(line1, line2));
    distance2 = (point1, point2) => norm(join(point1, point2));
    distanceToLine = (point2, line) => joinScalar(point2, line);
  }
});

// ../math/ga/gadirections.ts
var from2, fromTo;
var init_gadirections = __esm({
  "../math/ga/gadirections.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_ga();
    from2 = (point2) => [
      0,
      0,
      0,
      0,
      point2[4],
      point2[5],
      0,
      0
    ];
    fromTo = (from3, to) => inormalized([0, 0, 0, 0, to[4] - from3[4], to[5] - from3[5], 0, 0]);
  }
});

// ../math/ga/gatransforms.ts
var rotation, translation, translationOrthogonal, compose, apply;
var init_gatransforms = __esm({
  "../math/ga/gatransforms.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_ga();
    init_gadirections();
    rotation = (pivot, angle) => add(mul(pivot, Math.sin(angle / 2)), Math.cos(angle / 2));
    translation = (direction) => [
      1,
      0,
      0,
      0,
      -(0.5 * direction[5]),
      0.5 * direction[4],
      0,
      0
    ];
    translationOrthogonal = (direction, distance3) => {
      const scale = 0.5 * distance3;
      return [1, 0, 0, 0, scale * direction[4], scale * direction[5], 0, 0];
    };
    compose = (motor1, motor2) => mul(motor2, motor1);
    apply = (motor, nvector2) => normalized(mul(mul(motor, nvector2), reverse(motor)));
  }
});

// ../utils/geometry/shape.ts
import { pointsOnBezierCurves } from "points-on-curve";
var getPolygonShape, getSelectionBoxShape, getEllipseShape, getCurvePathOps, getCurveShape, polylineFromPoints, getFreedrawShape, getClosedCurveShape, segmentIntersectRectangleElement, distanceToEllipse, pointOnEllipse, pointInEllipse;
var init_shape = __esm({
  "../utils/geometry/shape.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_element();
    init_utils2();
    getPolygonShape = (element) => {
      const { angle, width, height, x, y } = element;
      const cx = x + width / 2;
      const cy = y + height / 2;
      const center = pointFrom(cx, cy);
      let data;
      if (element.type === "diamond") {
        data = polygon(
          pointRotateRads(pointFrom(cx, y), center, angle),
          pointRotateRads(pointFrom(x + width, cy), center, angle),
          pointRotateRads(pointFrom(cx, y + height), center, angle),
          pointRotateRads(pointFrom(x, cy), center, angle)
        );
      } else {
        data = polygon(
          pointRotateRads(pointFrom(x, y), center, angle),
          pointRotateRads(pointFrom(x + width, y), center, angle),
          pointRotateRads(pointFrom(x + width, y + height), center, angle),
          pointRotateRads(pointFrom(x, y + height), center, angle)
        );
      }
      return {
        type: "polygon",
        data
      };
    };
    getSelectionBoxShape = (element, elementsMap, padding = 10) => {
      let [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(
        element,
        elementsMap,
        true
      );
      x1 -= padding;
      x2 += padding;
      y1 -= padding;
      y2 += padding;
      const center = pointFrom(cx, cy);
      const topLeft = pointRotateRads(pointFrom(x1, y1), center, element.angle);
      const topRight = pointRotateRads(pointFrom(x2, y1), center, element.angle);
      const bottomLeft = pointRotateRads(pointFrom(x1, y2), center, element.angle);
      const bottomRight = pointRotateRads(pointFrom(x2, y2), center, element.angle);
      return {
        type: "polygon",
        data: [topLeft, topRight, bottomRight, bottomLeft]
      };
    };
    getEllipseShape = (element) => {
      const { width, height, angle, x, y } = element;
      return {
        type: "ellipse",
        data: {
          center: pointFrom(x + width / 2, y + height / 2),
          angle,
          halfWidth: width / 2,
          halfHeight: height / 2
        }
      };
    };
    getCurvePathOps = (shape) => {
      for (const set of shape.sets) {
        if (set.type === "path") {
          return set.ops;
        }
      }
      return shape.sets[0].ops;
    };
    getCurveShape = (roughShape, startingPoint = pointFrom(0, 0), angleInRadian, center) => {
      const transform = (p) => pointRotateRads(
        pointFrom(p[0] + startingPoint[0], p[1] + startingPoint[1]),
        center,
        angleInRadian
      );
      const ops = getCurvePathOps(roughShape);
      const polycurve = [];
      let p0 = pointFrom(0, 0);
      for (const op of ops) {
        if (op.op === "move") {
          const p = pointFromArray(op.data);
          invariant(p != null, "Ops data is not a point");
          p0 = transform(p);
        }
        if (op.op === "bcurveTo") {
          const p1 = transform(pointFrom(op.data[0], op.data[1]));
          const p2 = transform(pointFrom(op.data[2], op.data[3]));
          const p3 = transform(pointFrom(op.data[4], op.data[5]));
          polycurve.push(curve(p0, p1, p2, p3));
          p0 = p3;
        }
      }
      return {
        type: "polycurve",
        data: polycurve
      };
    };
    polylineFromPoints = (points) => {
      let previousPoint = points[0];
      const polyline = [];
      for (let i = 1; i < points.length; i++) {
        const nextPoint = points[i];
        polyline.push(lineSegment(previousPoint, nextPoint));
        previousPoint = nextPoint;
      }
      return polyline;
    };
    getFreedrawShape = (element, center, isClosed = false) => {
      const transform = (p) => pointRotateRads(
        pointFromVector(
          vectorAdd(vectorFromPoint(p), vector(element.x, element.y))
        ),
        center,
        element.angle
      );
      const polyline = polylineFromPoints(
        element.points.map((p) => transform(p))
      );
      return isClosed ? {
        type: "polygon",
        data: polygonFromPoints(polyline.flat())
      } : {
        type: "polyline",
        data: polyline
      };
    };
    getClosedCurveShape = (element, roughShape, startingPoint = pointFrom(0, 0), angleInRadian, center) => {
      const transform = (p) => pointRotateRads(
        pointFrom(p[0] + startingPoint[0], p[1] + startingPoint[1]),
        center,
        angleInRadian
      );
      if (element.roundness === null) {
        return {
          type: "polygon",
          data: polygonFromPoints(
            element.points.map((p) => transform(p))
          )
        };
      }
      const ops = getCurvePathOps(roughShape);
      const points = [];
      let odd = false;
      for (const operation of ops) {
        if (operation.op === "move") {
          odd = !odd;
          if (odd) {
            points.push(pointFrom(operation.data[0], operation.data[1]));
          }
        } else if (operation.op === "bcurveTo") {
          if (odd) {
            points.push(pointFrom(operation.data[0], operation.data[1]));
            points.push(pointFrom(operation.data[2], operation.data[3]));
            points.push(pointFrom(operation.data[4], operation.data[5]));
          }
        } else if (operation.op === "lineTo") {
          if (odd) {
            points.push(pointFrom(operation.data[0], operation.data[1]));
          }
        }
      }
      const polygonPoints = pointsOnBezierCurves(points, 10, 5).map(
        (p) => transform(p)
      );
      return {
        type: "polygon",
        data: polygonFromPoints(polygonPoints)
      };
    };
    segmentIntersectRectangleElement = (element, segment, gap = 0) => {
      const bounds = [
        element.x - gap,
        element.y - gap,
        element.x + element.width + gap,
        element.y + element.height + gap
      ];
      const center = pointFrom(
        (bounds[0] + bounds[2]) / 2,
        (bounds[1] + bounds[3]) / 2
      );
      return [
        lineSegment(
          pointRotateRads(pointFrom(bounds[0], bounds[1]), center, element.angle),
          pointRotateRads(pointFrom(bounds[2], bounds[1]), center, element.angle)
        ),
        lineSegment(
          pointRotateRads(pointFrom(bounds[2], bounds[1]), center, element.angle),
          pointRotateRads(pointFrom(bounds[2], bounds[3]), center, element.angle)
        ),
        lineSegment(
          pointRotateRads(pointFrom(bounds[2], bounds[3]), center, element.angle),
          pointRotateRads(pointFrom(bounds[0], bounds[3]), center, element.angle)
        ),
        lineSegment(
          pointRotateRads(pointFrom(bounds[0], bounds[3]), center, element.angle),
          pointRotateRads(pointFrom(bounds[0], bounds[1]), center, element.angle)
        )
      ].map((s) => segmentsIntersectAt(segment, s)).filter((i) => !!i);
    };
    distanceToEllipse = (p, ellipse) => {
      const { angle, halfWidth, halfHeight, center } = ellipse;
      const a = halfWidth;
      const b = halfHeight;
      const translatedPoint = vectorAdd(
        vectorFromPoint(p),
        vectorScale(vectorFromPoint(center), -1)
      );
      const [rotatedPointX, rotatedPointY] = pointRotateRads(
        pointFromVector(translatedPoint),
        pointFrom(0, 0),
        -angle
      );
      const px = Math.abs(rotatedPointX);
      const py = Math.abs(rotatedPointY);
      let tx = 0.707;
      let ty = 0.707;
      for (let i = 0; i < 3; i++) {
        const x = a * tx;
        const y = b * ty;
        const ex = (a * a - b * b) * tx ** 3 / a;
        const ey = (b * b - a * a) * ty ** 3 / b;
        const rx = x - ex;
        const ry = y - ey;
        const qx = px - ex;
        const qy = py - ey;
        const r = Math.hypot(ry, rx);
        const q = Math.hypot(qy, qx);
        tx = Math.min(1, Math.max(0, (qx * r / q + ex) / a));
        ty = Math.min(1, Math.max(0, (qy * r / q + ey) / b));
        const t2 = Math.hypot(ty, tx);
        tx /= t2;
        ty /= t2;
      }
      const [minX, minY] = [
        a * tx * Math.sign(rotatedPointX),
        b * ty * Math.sign(rotatedPointY)
      ];
      return pointDistance(
        pointFrom(rotatedPointX, rotatedPointY),
        pointFrom(minX, minY)
      );
    };
    pointOnEllipse = (point2, ellipse, threshold = PRECISION) => {
      return distanceToEllipse(point2, ellipse) <= threshold;
    };
    pointInEllipse = (p, ellipse) => {
      const { center, angle, halfWidth, halfHeight } = ellipse;
      const translatedPoint = vectorAdd(
        vectorFromPoint(p),
        vectorScale(vectorFromPoint(center), -1)
      );
      const [rotatedPointX, rotatedPointY] = pointRotateRads(
        pointFromVector(translatedPoint),
        pointFrom(0, 0),
        -angle
      );
      return rotatedPointX / halfWidth * (rotatedPointX / halfWidth) + rotatedPointY / halfHeight * (rotatedPointY / halfHeight) <= 1;
    };
  }
});

// ../utils/collision.ts
var isPointOnShape, isPointInShape, pointOnPolycurve, cubicBezierEquation, polyLineFromCurve, pointOnCurve, pointOnPolyline;
var init_collision = __esm({
  "../utils/collision.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_shape();
    init_math();
    isPointOnShape = (point2, shape, tolerance = 0) => {
      switch (shape.type) {
        case "polygon":
          return pointOnPolygon(point2, shape.data, tolerance);
        case "ellipse":
          return pointOnEllipse(point2, shape.data, tolerance);
        case "line":
          return pointOnLineSegment(point2, shape.data, tolerance);
        case "polyline":
          return pointOnPolyline(point2, shape.data, tolerance);
        case "curve":
          return pointOnCurve(point2, shape.data, tolerance);
        case "polycurve":
          return pointOnPolycurve(point2, shape.data, tolerance);
        default:
          throw Error(`shape ${shape} is not implemented`);
      }
    };
    isPointInShape = (point2, shape) => {
      switch (shape.type) {
        case "polygon":
          return polygonIncludesPoint(point2, shape.data);
        case "line":
          return false;
        case "curve":
          return false;
        case "ellipse":
          return pointInEllipse(point2, shape.data);
        case "polyline": {
          const polygon2 = polygonFromPoints(shape.data.flat());
          return polygonIncludesPoint(point2, polygon2);
        }
        case "polycurve": {
          return false;
        }
        default:
          throw Error(`shape ${shape} is not implemented`);
      }
    };
    pointOnPolycurve = (point2, polycurve, tolerance) => {
      return polycurve.some((curve2) => pointOnCurve(point2, curve2, tolerance));
    };
    cubicBezierEquation = (curve2) => {
      const [p0, p1, p2, p3] = curve2;
      return (t2, idx) => Math.pow(1 - t2, 3) * p3[idx] + 3 * t2 * Math.pow(1 - t2, 2) * p2[idx] + 3 * Math.pow(t2, 2) * (1 - t2) * p1[idx] + p0[idx] * Math.pow(t2, 3);
    };
    polyLineFromCurve = (curve2, segments = 10) => {
      const equation2 = cubicBezierEquation(curve2);
      let startingPoint = [equation2(0, 0), equation2(0, 1)];
      const lineSegments = [];
      let t2 = 0;
      const increment = 1 / segments;
      for (let i = 0; i < segments; i++) {
        t2 += increment;
        if (t2 <= 1) {
          const nextPoint = pointFrom(equation2(t2, 0), equation2(t2, 1));
          lineSegments.push(lineSegment(startingPoint, nextPoint));
          startingPoint = nextPoint;
        }
      }
      return lineSegments;
    };
    pointOnCurve = (point2, curve2, threshold) => {
      return pointOnPolyline(point2, polyLineFromCurve(curve2), threshold);
    };
    pointOnPolyline = (point2, polyline, threshold = 1e-4) => {
      return polyline.some((line) => pointOnLineSegment(point2, line, threshold));
    };
  }
});

// keys.ts
var CODES, KEYS, isArrowKey, shouldResizeFromCenter, shouldMaintainAspectRatio, shouldRotateWithDiscreteAngle;
var init_keys = __esm({
  "keys.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    CODES = {
      EQUAL: "Equal",
      MINUS: "Minus",
      NUM_ADD: "NumpadAdd",
      NUM_SUBTRACT: "NumpadSubtract",
      NUM_ZERO: "Numpad0",
      BRACKET_RIGHT: "BracketRight",
      BRACKET_LEFT: "BracketLeft",
      ONE: "Digit1",
      TWO: "Digit2",
      THREE: "Digit3",
      NINE: "Digit9",
      QUOTE: "Quote",
      ZERO: "Digit0",
      SLASH: "Slash",
      C: "KeyC",
      D: "KeyD",
      H: "KeyH",
      V: "KeyV",
      Z: "KeyZ",
      R: "KeyR",
      S: "KeyS"
    };
    KEYS = {
      ARROW_DOWN: "ArrowDown",
      ARROW_LEFT: "ArrowLeft",
      ARROW_RIGHT: "ArrowRight",
      ARROW_UP: "ArrowUp",
      PAGE_UP: "PageUp",
      PAGE_DOWN: "PageDown",
      BACKSPACE: "Backspace",
      ALT: "Alt",
      CTRL_OR_CMD: isDarwin ? "metaKey" : "ctrlKey",
      DELETE: "Delete",
      ENTER: "Enter",
      ESCAPE: "Escape",
      QUESTION_MARK: "?",
      SPACE: " ",
      TAB: "Tab",
      CHEVRON_LEFT: "<",
      CHEVRON_RIGHT: ">",
      PERIOD: ".",
      COMMA: ",",
      SUBTRACT: "-",
      SLASH: "/",
      A: "a",
      C: "c",
      D: "d",
      E: "e",
      F: "f",
      G: "g",
      H: "h",
      I: "i",
      L: "l",
      O: "o",
      P: "p",
      Q: "q",
      R: "r",
      S: "s",
      T: "t",
      V: "v",
      X: "x",
      Y: "y",
      Z: "z",
      K: "k",
      W: "w",
      0: "0",
      1: "1",
      2: "2",
      3: "3",
      4: "4",
      5: "5",
      6: "6",
      7: "7",
      8: "8",
      9: "9"
    };
    isArrowKey = (key) => key === KEYS.ARROW_LEFT || key === KEYS.ARROW_RIGHT || key === KEYS.ARROW_DOWN || key === KEYS.ARROW_UP;
    shouldResizeFromCenter = (event) => event.altKey;
    shouldMaintainAspectRatio = (event) => event.shiftKey;
    shouldRotateWithDiscreteAngle = (event) => event.shiftKey;
  }
});

// element/collision.ts
var shouldTestInside, hitElementItself, hitElementBoundingBox, hitElementBoundingBoxOnly, hitElementBoundText;
var init_collision2 = __esm({
  "element/collision.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_bounds();
    init_shape();
    init_collision();
    init_utils2();
    init_typeChecks();
    init_shapes();
    init_math();
    shouldTestInside = (element) => {
      if (element.type === "arrow") {
        return false;
      }
      const isDraggableFromInside = !isTransparent(element.backgroundColor) || hasBoundTextElement(element) || isIframeLikeElement(element) || isTextElement(element);
      if (element.type === "line") {
        return isDraggableFromInside && isPathALoop(element.points);
      }
      if (element.type === "freedraw") {
        return isDraggableFromInside && isPathALoop(element.points);
      }
      return isDraggableFromInside || isImageElement(element);
    };
    hitElementItself = ({
      x,
      y,
      element,
      shape,
      threshold = 10,
      frameNameBound = null
    }) => {
      let hit = shouldTestInside(element) ? (
        // Since `inShape` tests STRICTLY againt the insides of a shape
        // we would need `onShape` as well to include the "borders"
        isPointInShape(pointFrom(x, y), shape) || isPointOnShape(pointFrom(x, y), shape, threshold)
      ) : isPointOnShape(pointFrom(x, y), shape, threshold);
      if (!hit && frameNameBound) {
        hit = isPointInShape(pointFrom(x, y), {
          type: "polygon",
          data: getPolygonShape(frameNameBound).data
        });
      }
      return hit;
    };
    hitElementBoundingBox = (x, y, element, elementsMap, tolerance = 0) => {
      let [x1, y1, x2, y2] = getElementBounds(element, elementsMap);
      x1 -= tolerance;
      y1 -= tolerance;
      x2 += tolerance;
      y2 += tolerance;
      return isPointWithinBounds(
        pointFrom(x1, y1),
        pointFrom(x, y),
        pointFrom(x2, y2)
      );
    };
    hitElementBoundingBoxOnly = (hitArgs, elementsMap) => {
      return !hitElementItself(hitArgs) && // bound text is considered part of the element (even if it's outside the bounding box)
      !hitElementBoundText(
        hitArgs.x,
        hitArgs.y,
        getBoundTextShape(hitArgs.element, elementsMap)
      ) && hitElementBoundingBox(hitArgs.x, hitArgs.y, hitArgs.element, elementsMap);
    };
    hitElementBoundText = (x, y, textShape) => {
      return !!textShape && isPointInShape(pointFrom(x, y), textShape);
    };
  }
});

// shapes.tsx
var SHAPES, findShapeByKey, getElementShape, getBoundTextShape, getControlPointsForBezierCurve, getBezierXY, getPointsInBezierCurve, getBezierCurveArcLengths, getBezierCurveLength, mapIntervalToBezierT, aabbForElement, pointInsideBounds, getCornerRadius, isPathALoop;
var init_shapes = __esm({
  "shapes.tsx"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_shape();
    init_icons();
    init_constants();
    init_element();
    init_collision2();
    init_linearElementEditor();
    init_textElement();
    init_keys();
    init_ShapeCache();
    init_utils2();
    SHAPES = [
      {
        icon: SelectionIcon,
        value: "selection",
        key: KEYS.V,
        numericKey: KEYS["1"],
        fillable: true
      },
      {
        icon: RectangleIcon,
        value: "rectangle",
        key: KEYS.R,
        numericKey: KEYS["2"],
        fillable: true
      },
      {
        icon: DiamondIcon,
        value: "diamond",
        key: KEYS.D,
        numericKey: KEYS["3"],
        fillable: true
      },
      {
        icon: EllipseIcon,
        value: "ellipse",
        key: KEYS.O,
        numericKey: KEYS["4"],
        fillable: true
      },
      {
        icon: ArrowIcon,
        value: "arrow",
        key: KEYS.A,
        numericKey: KEYS["5"],
        fillable: true
      },
      {
        icon: LineIcon,
        value: "line",
        key: KEYS.L,
        numericKey: KEYS["6"],
        fillable: true
      },
      {
        icon: FreedrawIcon,
        value: "freedraw",
        key: [KEYS.P, KEYS.X],
        numericKey: KEYS["7"],
        fillable: false
      },
      {
        icon: TextIcon,
        value: "text",
        key: KEYS.T,
        numericKey: KEYS["8"],
        fillable: false
      },
      {
        icon: ImageIcon,
        value: "image",
        key: null,
        numericKey: KEYS["9"],
        fillable: false
      },
      {
        icon: EraserIcon,
        value: "eraser",
        key: KEYS.E,
        numericKey: KEYS["0"],
        fillable: false
      }
    ];
    findShapeByKey = (key) => {
      const shape = SHAPES.find((shape2, index) => {
        return shape2.numericKey != null && key === shape2.numericKey.toString() || shape2.key && (typeof shape2.key === "string" ? shape2.key === key : shape2.key.includes(key));
      });
      return shape?.value || null;
    };
    getElementShape = (element, elementsMap) => {
      switch (element.type) {
        case "rectangle":
        case "diamond":
        case "frame":
        case "magicframe":
        case "embeddable":
        case "image":
        case "iframe":
        case "text":
        case "selection":
          return getPolygonShape(element);
        case "arrow":
        case "line": {
          const roughShape = ShapeCache.get(element)?.[0] ?? ShapeCache.generateElementShape(element, null)[0];
          const [, , , , cx, cy] = getElementAbsoluteCoords(element, elementsMap);
          return shouldTestInside(element) ? getClosedCurveShape(
            element,
            roughShape,
            pointFrom(element.x, element.y),
            element.angle,
            pointFrom(cx, cy)
          ) : getCurveShape(
            roughShape,
            pointFrom(element.x, element.y),
            element.angle,
            pointFrom(cx, cy)
          );
        }
        case "ellipse":
          return getEllipseShape(element);
        case "freedraw": {
          const [, , , , cx, cy] = getElementAbsoluteCoords(element, elementsMap);
          return getFreedrawShape(
            element,
            pointFrom(cx, cy),
            shouldTestInside(element)
          );
        }
      }
    };
    getBoundTextShape = (element, elementsMap) => {
      const boundTextElement = getBoundTextElement(element, elementsMap);
      if (boundTextElement) {
        if (element.type === "arrow") {
          return getElementShape(
            {
              ...boundTextElement,
              // arrow's bound text accurate position is not stored in the element's property
              // but rather calculated and returned from the following static method
              ...LinearElementEditor.getBoundTextElementPosition(
                element,
                boundTextElement,
                elementsMap
              )
            },
            elementsMap
          );
        }
        return getElementShape(boundTextElement, elementsMap);
      }
      return null;
    };
    getControlPointsForBezierCurve = (element, endPoint) => {
      const shape = ShapeCache.generateElementShape(element, null);
      if (!shape) {
        return null;
      }
      const ops = getCurvePathOps(shape[0]);
      let currentP = pointFrom(0, 0);
      let index = 0;
      let minDistance = Infinity;
      let controlPoints = null;
      while (index < ops.length) {
        const { op, data } = ops[index];
        if (op === "move") {
          invariant(
            isPoint(data),
            "The returned ops is not compatible with a point"
          );
          currentP = pointFromPair(data);
        }
        if (op === "bcurveTo") {
          const p0 = currentP;
          const p1 = pointFrom(data[0], data[1]);
          const p2 = pointFrom(data[2], data[3]);
          const p3 = pointFrom(data[4], data[5]);
          const distance3 = pointDistance(p3, endPoint);
          if (distance3 < minDistance) {
            minDistance = distance3;
            controlPoints = [p0, p1, p2, p3];
          }
          currentP = p3;
        }
        index++;
      }
      return controlPoints;
    };
    getBezierXY = (p0, p1, p2, p3, t2) => {
      const equation2 = (t3, idx) => Math.pow(1 - t3, 3) * p3[idx] + 3 * t3 * Math.pow(1 - t3, 2) * p2[idx] + 3 * Math.pow(t3, 2) * (1 - t3) * p1[idx] + p0[idx] * Math.pow(t3, 3);
      const tx = equation2(t2, 0);
      const ty = equation2(t2, 1);
      return pointFrom(tx, ty);
    };
    getPointsInBezierCurve = (element, endPoint) => {
      const controlPoints = getControlPointsForBezierCurve(element, endPoint);
      if (!controlPoints) {
        return [];
      }
      const pointsOnCurve = [];
      let t2 = 1;
      while (t2 > 0) {
        const p = getBezierXY(
          controlPoints[0],
          controlPoints[1],
          controlPoints[2],
          controlPoints[3],
          t2
        );
        pointsOnCurve.push(pointFrom(p[0], p[1]));
        t2 -= 0.05;
      }
      if (pointsOnCurve.length) {
        if (pointsEqual(pointsOnCurve.at(-1), endPoint)) {
          pointsOnCurve.push(pointFrom(endPoint[0], endPoint[1]));
        }
      }
      return pointsOnCurve;
    };
    getBezierCurveArcLengths = (element, endPoint) => {
      const arcLengths = [];
      arcLengths[0] = 0;
      const points = getPointsInBezierCurve(element, endPoint);
      let index = 0;
      let distance3 = 0;
      while (index < points.length - 1) {
        const segmentDistance = pointDistance(points[index], points[index + 1]);
        distance3 += segmentDistance;
        arcLengths.push(distance3);
        index++;
      }
      return arcLengths;
    };
    getBezierCurveLength = (element, endPoint) => {
      const arcLengths = getBezierCurveArcLengths(element, endPoint);
      return arcLengths.at(-1);
    };
    mapIntervalToBezierT = (element, endPoint, interval) => {
      const arcLengths = getBezierCurveArcLengths(element, endPoint);
      const pointsCount = arcLengths.length - 1;
      const curveLength = arcLengths.at(-1);
      const targetLength = interval * curveLength;
      let low = 0;
      let high = pointsCount;
      let index = 0;
      while (low < high) {
        index = Math.floor(low + (high - low) / 2);
        if (arcLengths[index] < targetLength) {
          low = index + 1;
        } else {
          high = index;
        }
      }
      if (arcLengths[index] > targetLength) {
        index--;
      }
      if (arcLengths[index] === targetLength) {
        return index / pointsCount;
      }
      return 1 - (index + (targetLength - arcLengths[index]) / (arcLengths[index + 1] - arcLengths[index])) / pointsCount;
    };
    aabbForElement = (element, offset2) => {
      const bbox = {
        minX: element.x,
        minY: element.y,
        maxX: element.x + element.width,
        maxY: element.y + element.height,
        midX: element.x + element.width / 2,
        midY: element.y + element.height / 2
      };
      const center = pointFrom(bbox.midX, bbox.midY);
      const [topLeftX, topLeftY] = pointRotateRads(
        pointFrom(bbox.minX, bbox.minY),
        center,
        element.angle
      );
      const [topRightX, topRightY] = pointRotateRads(
        pointFrom(bbox.maxX, bbox.minY),
        center,
        element.angle
      );
      const [bottomRightX, bottomRightY] = pointRotateRads(
        pointFrom(bbox.maxX, bbox.maxY),
        center,
        element.angle
      );
      const [bottomLeftX, bottomLeftY] = pointRotateRads(
        pointFrom(bbox.minX, bbox.maxY),
        center,
        element.angle
      );
      const bounds = [
        Math.min(topLeftX, topRightX, bottomRightX, bottomLeftX),
        Math.min(topLeftY, topRightY, bottomRightY, bottomLeftY),
        Math.max(topLeftX, topRightX, bottomRightX, bottomLeftX),
        Math.max(topLeftY, topRightY, bottomRightY, bottomLeftY)
      ];
      if (offset2) {
        const [topOffset, rightOffset, downOffset, leftOffset] = offset2;
        return [
          bounds[0] - leftOffset,
          bounds[1] - topOffset,
          bounds[2] + rightOffset,
          bounds[3] + downOffset
        ];
      }
      return bounds;
    };
    pointInsideBounds = (p, bounds) => p[0] > bounds[0] && p[0] < bounds[2] && p[1] > bounds[1] && p[1] < bounds[3];
    getCornerRadius = (x, element) => {
      if (element.roundness?.type === ROUNDNESS.PROPORTIONAL_RADIUS || element.roundness?.type === ROUNDNESS.LEGACY) {
        return x * DEFAULT_PROPORTIONAL_RADIUS;
      }
      if (element.roundness?.type === ROUNDNESS.ADAPTIVE_RADIUS) {
        const fixedRadiusSize = element.roundness?.value ?? DEFAULT_ADAPTIVE_RADIUS;
        const CUTOFF_SIZE = fixedRadiusSize / DEFAULT_PROPORTIONAL_RADIUS;
        if (x <= CUTOFF_SIZE) {
          return x * DEFAULT_PROPORTIONAL_RADIUS;
        }
        return fixedRadiusSize;
      }
      return 0;
    };
    isPathALoop = (points, zoomValue = 1) => {
      if (points.length >= 3) {
        const [first, last] = [points[0], points[points.length - 1]];
        const distance3 = pointDistance(first, last);
        return distance3 <= LINE_CONFIRM_THRESHOLD / zoomValue;
      }
      return false;
    };
  }
});

// element/heading.ts
var HEADING_RIGHT, HEADING_DOWN, HEADING_LEFT, HEADING_UP, headingForDiamond, vectorToHeading, compareHeading, headingForPointFromElement, flipHeading;
var init_heading = __esm({
  "element/heading.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_bounds();
    HEADING_RIGHT = [1, 0];
    HEADING_DOWN = [0, 1];
    HEADING_LEFT = [-1, 0];
    HEADING_UP = [0, -1];
    headingForDiamond = (a, b) => {
      const angle = radiansToDegrees(
        Math.atan2(b[1] - a[1], b[0] - a[0])
      );
      if (angle >= 315 || angle < 45) {
        return HEADING_UP;
      } else if (angle >= 45 && angle < 135) {
        return HEADING_RIGHT;
      } else if (angle >= 135 && angle < 225) {
        return HEADING_DOWN;
      }
      return HEADING_LEFT;
    };
    vectorToHeading = (vec) => {
      const [x, y] = vec;
      const absX = Math.abs(x);
      const absY = Math.abs(y);
      if (x > absY) {
        return HEADING_RIGHT;
      } else if (x <= -absY) {
        return HEADING_LEFT;
      } else if (y > absX) {
        return HEADING_DOWN;
      }
      return HEADING_UP;
    };
    compareHeading = (a, b) => a[0] === b[0] && a[1] === b[1];
    headingForPointFromElement = (element, aabb, p) => {
      const SEARCH_CONE_MULTIPLIER = 2;
      const midPoint = getCenterForBounds(aabb);
      if (element.type === "diamond") {
        if (p[0] < element.x) {
          return HEADING_LEFT;
        } else if (p[1] < element.y) {
          return HEADING_UP;
        } else if (p[0] > element.x + element.width) {
          return HEADING_RIGHT;
        } else if (p[1] > element.y + element.height) {
          return HEADING_DOWN;
        }
        const top = pointRotateRads(
          pointScaleFromOrigin(
            pointFrom(element.x + element.width / 2, element.y),
            midPoint,
            SEARCH_CONE_MULTIPLIER
          ),
          midPoint,
          element.angle
        );
        const right = pointRotateRads(
          pointScaleFromOrigin(
            pointFrom(element.x + element.width, element.y + element.height / 2),
            midPoint,
            SEARCH_CONE_MULTIPLIER
          ),
          midPoint,
          element.angle
        );
        const bottom = pointRotateRads(
          pointScaleFromOrigin(
            pointFrom(element.x + element.width / 2, element.y + element.height),
            midPoint,
            SEARCH_CONE_MULTIPLIER
          ),
          midPoint,
          element.angle
        );
        const left = pointRotateRads(
          pointScaleFromOrigin(
            pointFrom(element.x, element.y + element.height / 2),
            midPoint,
            SEARCH_CONE_MULTIPLIER
          ),
          midPoint,
          element.angle
        );
        if (triangleIncludesPoint([top, right, midPoint], p)) {
          return headingForDiamond(top, right);
        } else if (triangleIncludesPoint([right, bottom, midPoint], p)) {
          return headingForDiamond(right, bottom);
        } else if (triangleIncludesPoint([bottom, left, midPoint], p)) {
          return headingForDiamond(bottom, left);
        }
        return headingForDiamond(left, top);
      }
      const topLeft = pointScaleFromOrigin(
        pointFrom(aabb[0], aabb[1]),
        midPoint,
        SEARCH_CONE_MULTIPLIER
      );
      const topRight = pointScaleFromOrigin(
        pointFrom(aabb[2], aabb[1]),
        midPoint,
        SEARCH_CONE_MULTIPLIER
      );
      const bottomLeft = pointScaleFromOrigin(
        pointFrom(aabb[0], aabb[3]),
        midPoint,
        SEARCH_CONE_MULTIPLIER
      );
      const bottomRight = pointScaleFromOrigin(
        pointFrom(aabb[2], aabb[3]),
        midPoint,
        SEARCH_CONE_MULTIPLIER
      );
      return triangleIncludesPoint(
        [topLeft, topRight, midPoint],
        p
      ) ? HEADING_UP : triangleIncludesPoint(
        [topRight, bottomRight, midPoint],
        p
      ) ? HEADING_RIGHT : triangleIncludesPoint(
        [bottomRight, bottomLeft, midPoint],
        p
      ) ? HEADING_DOWN : HEADING_LEFT;
    };
    flipHeading = (h) => [
      h[0] === 0 ? 0 : h[0] > 0 ? -1 : 1,
      h[1] === 0 ? 0 : h[1] > 0 ? -1 : 1
    ];
  }
});

// element/binding.ts
var shouldEnableBindingForPointerEvent, isBindingEnabled, FIXED_BINDING_DISTANCE, getNonDeletedElements, bindOrUnbindLinearElement, bindOrUnbindLinearElementEdge, getOriginalBindingIfStillCloseOfLinearElementEdge, getOriginalBindingsIfStillCloseToArrowEnds, getBindingStrategyForDraggingArrowEndpoints, getBindingStrategyForDraggingArrowOrJoints, bindOrUnbindLinearElements, getSuggestedBindingsForArrows, maybeBindLinearElement, bindLinearElement, isLinearElementSimpleAndAlreadyBoundOnOppositeEdge, isLinearElementSimpleAndAlreadyBound, isLinearElementSimple, unbindLinearElement, getHoveredElementForBinding, calculateFocusAndGap, updateBoundElements, doesNeedUpdate, getSimultaneouslyUpdatedElementIds, getHeadingForElbowArrowSnap, getDistanceForBinding, bindPointToSnapToElementOutline, headingToMidBindPoint, avoidRectangularCorner, snapToMid, updateBoundPoint, calculateFixedPointForElbowArrowBinding, maybeCalculateNewGapWhenScaling, getElligibleElementForBindingElement, getLinearElementEdgeCoors, fixBindingsAfterDuplication, newBindingAfterDuplication, fixBindingsAfterDeletion, newBoundElements, bindingBorderTest, maxBindingGap, distanceToBindableElement, distanceToRectangle, distanceToDiamond, distanceToEllipse2, ellipseParamsForTest, pointRelativeToElement, relativizationToElementCenter, coordsCenter, determineFocusDistance, determineFocusPoint, intersectElementWithLine, getSortedElementLineIntersections, getCorners, intersectSegment, offsetSegment, getEllipseIntersections, getCircleIntersections, findFocusPointForEllipse, findFocusPointForRectangulars, bindingProperties, boundElementsVisitor, bindableElementsVisitor, BoundElement, BindableElement, getGlobalFixedPointForBindableElement, getGlobalFixedPoints, getArrowLocalFixedPoints, normalizeFixedPoint;
var init_binding = __esm({
  "element/binding.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_ga();
    init_gapoints();
    init_gadirections();
    init_galines();
    init_gatransforms();
    init_bounds();
    init_collision();
    init_scene();
    init_typeChecks();
    init_mutateElement();
    init_linearElementEditor();
    init_utils2();
    init_keys();
    init_textElement();
    init_shapes();
    init_heading();
    init_math();
    init_shape();
    shouldEnableBindingForPointerEvent = (event) => {
      return !event[KEYS.CTRL_OR_CMD];
    };
    isBindingEnabled = (appState) => {
      return appState.isBindingEnabled;
    };
    FIXED_BINDING_DISTANCE = 5;
    getNonDeletedElements = (scene, ids) => {
      const result = [];
      ids.forEach((id) => {
        const element = scene.getNonDeletedElement(id);
        if (element != null) {
          result.push(element);
        }
      });
      return result;
    };
    bindOrUnbindLinearElement = (linearElement, startBindingElement, endBindingElement, elementsMap, scene) => {
      const boundToElementIds = /* @__PURE__ */ new Set();
      const unboundFromElementIds = /* @__PURE__ */ new Set();
      bindOrUnbindLinearElementEdge(
        linearElement,
        startBindingElement,
        endBindingElement,
        "start",
        boundToElementIds,
        unboundFromElementIds,
        elementsMap
      );
      bindOrUnbindLinearElementEdge(
        linearElement,
        endBindingElement,
        startBindingElement,
        "end",
        boundToElementIds,
        unboundFromElementIds,
        elementsMap
      );
      const onlyUnbound = Array.from(unboundFromElementIds).filter(
        (id) => !boundToElementIds.has(id)
      );
      getNonDeletedElements(scene, onlyUnbound).forEach((element) => {
        mutateElement(element, {
          boundElements: element.boundElements?.filter(
            (element2) => element2.type !== "arrow" || element2.id !== linearElement.id
          )
        });
      });
    };
    bindOrUnbindLinearElementEdge = (linearElement, bindableElement, otherEdgeBindableElement, startOrEnd, boundToElementIds, unboundFromElementIds, elementsMap) => {
      if (bindableElement === "keep") {
        return;
      }
      if (bindableElement === null) {
        const unbound = unbindLinearElement(linearElement, startOrEnd);
        if (unbound != null) {
          unboundFromElementIds.add(unbound);
        }
        return;
      }
      if (isLinearElementSimple(linearElement)) {
        if (otherEdgeBindableElement == null || (otherEdgeBindableElement === "keep" ? (
          // TODO: Refactor - Needlessly complex
          !isLinearElementSimpleAndAlreadyBoundOnOppositeEdge(
            linearElement,
            bindableElement,
            startOrEnd
          )
        ) : startOrEnd === "start" || otherEdgeBindableElement.id !== bindableElement.id)) {
          bindLinearElement(
            linearElement,
            bindableElement,
            startOrEnd,
            elementsMap
          );
          boundToElementIds.add(bindableElement.id);
        }
      } else {
        bindLinearElement(linearElement, bindableElement, startOrEnd, elementsMap);
        boundToElementIds.add(bindableElement.id);
      }
    };
    getOriginalBindingIfStillCloseOfLinearElementEdge = (linearElement, edge, elementsMap) => {
      const coors = getLinearElementEdgeCoors(linearElement, edge, elementsMap);
      const elementId = edge === "start" ? linearElement.startBinding?.elementId : linearElement.endBinding?.elementId;
      if (elementId) {
        const element = elementsMap.get(elementId);
        if (isBindableElement(element) && bindingBorderTest(element, coors, elementsMap)) {
          return element;
        }
      }
      return null;
    };
    getOriginalBindingsIfStillCloseToArrowEnds = (linearElement, elementsMap) => ["start", "end"].map(
      (edge) => getOriginalBindingIfStillCloseOfLinearElementEdge(
        linearElement,
        edge,
        elementsMap
      )
    );
    getBindingStrategyForDraggingArrowEndpoints = (selectedElement, isBindingEnabled2, draggingPoints, elementsMap, elements) => {
      const startIdx = 0;
      const endIdx = selectedElement.points.length - 1;
      const startDragged = draggingPoints.findIndex((i) => i === startIdx) > -1;
      const endDragged = draggingPoints.findIndex((i) => i === endIdx) > -1;
      const start2 = startDragged ? isBindingEnabled2 ? getElligibleElementForBindingElement(
        selectedElement,
        "start",
        elementsMap,
        elements
      ) : null : (
        // We have to update the focus and gap of the binding, so let's rebind
        getElligibleElementForBindingElement(
          selectedElement,
          "start",
          elementsMap,
          elements
        )
      );
      const end = endDragged ? isBindingEnabled2 ? getElligibleElementForBindingElement(
        selectedElement,
        "end",
        elementsMap,
        elements
      ) : null : (
        // We have to update the focus and gap of the binding, so let's rebind
        getElligibleElementForBindingElement(
          selectedElement,
          "end",
          elementsMap,
          elements
        )
      );
      return [start2, end];
    };
    getBindingStrategyForDraggingArrowOrJoints = (selectedElement, elementsMap, elements, isBindingEnabled2) => {
      const [startIsClose, endIsClose] = getOriginalBindingsIfStillCloseToArrowEnds(
        selectedElement,
        elementsMap
      );
      const start2 = startIsClose ? isBindingEnabled2 ? getElligibleElementForBindingElement(
        selectedElement,
        "start",
        elementsMap,
        elements
      ) : null : null;
      const end = endIsClose ? isBindingEnabled2 ? getElligibleElementForBindingElement(
        selectedElement,
        "end",
        elementsMap,
        elements
      ) : null : null;
      return [start2, end];
    };
    bindOrUnbindLinearElements = (selectedElements, elementsMap, elements, scene, isBindingEnabled2, draggingPoints) => {
      selectedElements.forEach((selectedElement) => {
        const [start2, end] = draggingPoints?.length ? (
          // The arrow edge points are dragged (i.e. start, end)
          getBindingStrategyForDraggingArrowEndpoints(
            selectedElement,
            isBindingEnabled2,
            draggingPoints ?? [],
            elementsMap,
            elements
          )
        ) : (
          // The arrow itself (the shaft) or the inner joins are dragged
          getBindingStrategyForDraggingArrowOrJoints(
            selectedElement,
            elementsMap,
            elements,
            isBindingEnabled2
          )
        );
        bindOrUnbindLinearElement(selectedElement, start2, end, elementsMap, scene);
      });
    };
    getSuggestedBindingsForArrows = (selectedElements, elementsMap) => {
      if (selectedElements.length > 50) {
        return [];
      }
      return selectedElements.filter(isLinearElement).flatMap(
        (element) => getOriginalBindingsIfStillCloseToArrowEnds(element, elementsMap)
      ).filter(
        (element) => element !== null
      ).filter(
        (element) => selectedElements.filter((selected) => selected.id === element?.id).length === 0
      );
    };
    maybeBindLinearElement = (linearElement, appState, pointerCoords, elementsMap, elements) => {
      if (appState.startBoundElement != null) {
        bindLinearElement(
          linearElement,
          appState.startBoundElement,
          "start",
          elementsMap
        );
      }
      const hoveredElement = getHoveredElementForBinding(
        pointerCoords,
        elements,
        elementsMap,
        isElbowArrow(linearElement) && isElbowArrow(linearElement)
      );
      if (hoveredElement !== null) {
        if (!isLinearElementSimpleAndAlreadyBoundOnOppositeEdge(
          linearElement,
          hoveredElement,
          "end"
        )) {
          bindLinearElement(linearElement, hoveredElement, "end", elementsMap);
        }
      }
    };
    bindLinearElement = (linearElement, hoveredElement, startOrEnd, elementsMap) => {
      if (!isArrowElement(linearElement)) {
        return;
      }
      const binding = {
        elementId: hoveredElement.id,
        ...calculateFocusAndGap(
          linearElement,
          hoveredElement,
          startOrEnd,
          elementsMap
        ),
        ...isElbowArrow(linearElement) ? calculateFixedPointForElbowArrowBinding(
          linearElement,
          hoveredElement,
          startOrEnd,
          elementsMap
        ) : { fixedPoint: null }
      };
      mutateElement(linearElement, {
        [startOrEnd === "start" ? "startBinding" : "endBinding"]: binding
      });
      const boundElementsMap = arrayToMap(hoveredElement.boundElements || []);
      if (!boundElementsMap.has(linearElement.id)) {
        mutateElement(hoveredElement, {
          boundElements: (hoveredElement.boundElements || []).concat({
            id: linearElement.id,
            type: "arrow"
          })
        });
      }
    };
    isLinearElementSimpleAndAlreadyBoundOnOppositeEdge = (linearElement, bindableElement, startOrEnd) => {
      const otherBinding = linearElement[startOrEnd === "start" ? "endBinding" : "startBinding"];
      return isLinearElementSimpleAndAlreadyBound(
        linearElement,
        otherBinding?.elementId,
        bindableElement
      );
    };
    isLinearElementSimpleAndAlreadyBound = (linearElement, alreadyBoundToId, bindableElement) => {
      return alreadyBoundToId === bindableElement.id && isLinearElementSimple(linearElement);
    };
    isLinearElementSimple = (linearElement) => linearElement.points.length < 3;
    unbindLinearElement = (linearElement, startOrEnd) => {
      const field = startOrEnd === "start" ? "startBinding" : "endBinding";
      const binding = linearElement[field];
      if (binding == null) {
        return null;
      }
      mutateElement(linearElement, { [field]: null });
      return binding.elementId;
    };
    getHoveredElementForBinding = (pointerCoords, elements, elementsMap, fullShape) => {
      const hoveredElement = getElementAtPosition(
        elements,
        (element) => isBindableElement(element, false) && bindingBorderTest(
          element,
          pointerCoords,
          elementsMap,
          // disable fullshape snapping for frame elements so we
          // can bind to frame children
          fullShape && !isFrameLikeElement(element)
        )
      );
      return hoveredElement;
    };
    calculateFocusAndGap = (linearElement, hoveredElement, startOrEnd, elementsMap) => {
      const direction = startOrEnd === "start" ? -1 : 1;
      const edgePointIndex = direction === -1 ? 0 : linearElement.points.length - 1;
      const adjacentPointIndex = edgePointIndex - direction;
      const edgePoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
        linearElement,
        edgePointIndex,
        elementsMap
      );
      const adjacentPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
        linearElement,
        adjacentPointIndex,
        elementsMap
      );
      return {
        focus: determineFocusDistance(
          hoveredElement,
          adjacentPoint,
          edgePoint,
          elementsMap
        ),
        gap: Math.max(
          1,
          distanceToBindableElement(hoveredElement, edgePoint, elementsMap)
        )
      };
    };
    updateBoundElements = (changedElement, elementsMap, options) => {
      const { oldSize, simultaneouslyUpdated, changedElements } = options ?? {};
      const simultaneouslyUpdatedElementIds = getSimultaneouslyUpdatedElementIds(
        simultaneouslyUpdated
      );
      if (!isBindableElement(changedElement)) {
        return;
      }
      boundElementsVisitor(elementsMap, changedElement, (element) => {
        if (!isLinearElement(element) || element.isDeleted) {
          return;
        }
        if (!doesNeedUpdate(element, changedElement)) {
          return;
        }
        const bindings = {
          startBinding: maybeCalculateNewGapWhenScaling(
            changedElement,
            element.startBinding,
            oldSize
          ),
          endBinding: maybeCalculateNewGapWhenScaling(
            changedElement,
            element.endBinding,
            oldSize
          )
        };
        if (simultaneouslyUpdatedElementIds.has(element.id)) {
          mutateElement(element, bindings);
          return;
        }
        const updates = bindableElementsVisitor(
          elementsMap,
          element,
          (bindableElement, bindingProp) => {
            if (bindableElement && isBindableElement(bindableElement) && (bindingProp === "startBinding" || bindingProp === "endBinding") && changedElement.id === element[bindingProp]?.elementId) {
              const point2 = updateBoundPoint(
                element,
                bindingProp,
                bindings[bindingProp],
                bindableElement,
                elementsMap
              );
              if (point2) {
                return {
                  index: bindingProp === "startBinding" ? 0 : element.points.length - 1,
                  point: point2
                };
              }
            }
            return null;
          }
        ).filter(
          (update) => update !== null
        );
        LinearElementEditor.movePoints(
          element,
          updates,
          elementsMap,
          {
            ...changedElement.id === element.startBinding?.elementId ? { startBinding: bindings.startBinding } : {},
            ...changedElement.id === element.endBinding?.elementId ? { endBinding: bindings.endBinding } : {}
          },
          {
            changedElements
          }
        );
        const boundText = getBoundTextElement(element, elementsMap);
        if (boundText && !boundText.isDeleted) {
          handleBindTextResize(element, elementsMap, false);
        }
      });
    };
    doesNeedUpdate = (boundElement, changedElement) => {
      return boundElement.startBinding?.elementId === changedElement.id || boundElement.endBinding?.elementId === changedElement.id;
    };
    getSimultaneouslyUpdatedElementIds = (simultaneouslyUpdated) => {
      return new Set((simultaneouslyUpdated || []).map((element) => element.id));
    };
    getHeadingForElbowArrowSnap = (p, otherPoint, bindableElement, aabb, elementsMap, origPoint) => {
      const otherPointHeading = vectorToHeading(vectorFromPoint(otherPoint, p));
      if (!bindableElement || !aabb) {
        return otherPointHeading;
      }
      const distance3 = getDistanceForBinding(
        origPoint,
        bindableElement,
        elementsMap
      );
      if (!distance3) {
        return vectorToHeading(
          vectorFromPoint(
            p,
            pointFrom(
              bindableElement.x + bindableElement.width / 2,
              bindableElement.y + bindableElement.height / 2
            )
          )
        );
      }
      const pointHeading = headingForPointFromElement(bindableElement, aabb, p);
      return pointHeading;
    };
    getDistanceForBinding = (point2, bindableElement, elementsMap) => {
      const distance3 = distanceToBindableElement(
        bindableElement,
        point2,
        elementsMap
      );
      const bindDistance = maxBindingGap(
        bindableElement,
        bindableElement.width,
        bindableElement.height
      );
      return distance3 > bindDistance ? null : distance3;
    };
    bindPointToSnapToElementOutline = (p, otherPoint, bindableElement, elementsMap) => {
      const aabb = bindableElement && aabbForElement(bindableElement);
      if (bindableElement && aabb) {
        const heading = headingForPointFromElement(bindableElement, aabb, p);
        const intersections = [
          ...intersectElementWithLine(
            bindableElement,
            pointFrom(p[0], p[1] - 2 * bindableElement.height),
            pointFrom(p[0], p[1] + 2 * bindableElement.height),
            FIXED_BINDING_DISTANCE,
            elementsMap
          ) ?? [],
          ...intersectElementWithLine(
            bindableElement,
            pointFrom(p[0] - 2 * bindableElement.width, p[1]),
            pointFrom(p[0] + 2 * bindableElement.width, p[1]),
            FIXED_BINDING_DISTANCE,
            elementsMap
          ) ?? []
        ];
        const isVertical = compareHeading(heading, HEADING_LEFT) || compareHeading(heading, HEADING_RIGHT);
        const dist = Math.abs(
          distanceToBindableElement(bindableElement, p, elementsMap)
        );
        const isInner = isVertical ? dist < bindableElement.width * -0.1 : dist < bindableElement.height * -0.1;
        intersections.sort((a, b) => pointDistanceSq(a, p) - pointDistanceSq(b, p));
        return isInner ? headingToMidBindPoint(otherPoint, bindableElement, aabb) : intersections.filter(
          (i) => isVertical ? Math.abs(p[1] - i[1]) < 0.1 : Math.abs(p[0] - i[0]) < 0.1
        )[0] ?? p;
      }
      return p;
    };
    headingToMidBindPoint = (p, bindableElement, aabb) => {
      const center = getCenterForBounds(aabb);
      const heading = vectorToHeading(vectorFromPoint(p, center));
      switch (true) {
        case compareHeading(heading, HEADING_UP):
          return pointRotateRads(
            pointFrom((aabb[0] + aabb[2]) / 2 + 0.1, aabb[1]),
            center,
            bindableElement.angle
          );
        case compareHeading(heading, HEADING_RIGHT):
          return pointRotateRads(
            pointFrom(aabb[2], (aabb[1] + aabb[3]) / 2 + 0.1),
            center,
            bindableElement.angle
          );
        case compareHeading(heading, HEADING_DOWN):
          return pointRotateRads(
            pointFrom((aabb[0] + aabb[2]) / 2 - 0.1, aabb[3]),
            center,
            bindableElement.angle
          );
        default:
          return pointRotateRads(
            pointFrom(aabb[0], (aabb[1] + aabb[3]) / 2 - 0.1),
            center,
            bindableElement.angle
          );
      }
    };
    avoidRectangularCorner = (element, p) => {
      const center = pointFrom(
        element.x + element.width / 2,
        element.y + element.height / 2
      );
      const nonRotatedPoint = pointRotateRads(p, center, -element.angle);
      if (nonRotatedPoint[0] < element.x && nonRotatedPoint[1] < element.y) {
        if (nonRotatedPoint[1] - element.y > -FIXED_BINDING_DISTANCE) {
          return pointRotateRads(
            pointFrom(element.x - FIXED_BINDING_DISTANCE, element.y),
            center,
            element.angle
          );
        }
        return pointRotateRads(
          pointFrom(element.x, element.y - FIXED_BINDING_DISTANCE),
          center,
          element.angle
        );
      } else if (nonRotatedPoint[0] < element.x && nonRotatedPoint[1] > element.y + element.height) {
        if (nonRotatedPoint[0] - element.x > -FIXED_BINDING_DISTANCE) {
          return pointRotateRads(
            pointFrom(
              element.x,
              element.y + element.height + FIXED_BINDING_DISTANCE
            ),
            center,
            element.angle
          );
        }
        return pointRotateRads(
          pointFrom(element.x - FIXED_BINDING_DISTANCE, element.y + element.height),
          center,
          element.angle
        );
      } else if (nonRotatedPoint[0] > element.x + element.width && nonRotatedPoint[1] > element.y + element.height) {
        if (nonRotatedPoint[0] - element.x < element.width + FIXED_BINDING_DISTANCE) {
          return pointRotateRads(
            pointFrom(
              element.x + element.width,
              element.y + element.height + FIXED_BINDING_DISTANCE
            ),
            center,
            element.angle
          );
        }
        return pointRotateRads(
          pointFrom(
            element.x + element.width + FIXED_BINDING_DISTANCE,
            element.y + element.height
          ),
          center,
          element.angle
        );
      } else if (nonRotatedPoint[0] > element.x + element.width && nonRotatedPoint[1] < element.y) {
        if (nonRotatedPoint[0] - element.x < element.width + FIXED_BINDING_DISTANCE) {
          return pointRotateRads(
            pointFrom(
              element.x + element.width,
              element.y - FIXED_BINDING_DISTANCE
            ),
            center,
            element.angle
          );
        }
        return pointRotateRads(
          pointFrom(element.x + element.width + FIXED_BINDING_DISTANCE, element.y),
          center,
          element.angle
        );
      }
      return p;
    };
    snapToMid = (element, p, tolerance = 0.05) => {
      const { x, y, width, height, angle } = element;
      const center = pointFrom(
        x + width / 2 - 0.1,
        y + height / 2 - 0.1
      );
      const nonRotated = pointRotateRads(p, center, -angle);
      const verticalThrehsold = clamp(tolerance * height, 5, 80);
      const horizontalThrehsold = clamp(tolerance * width, 5, 80);
      if (nonRotated[0] <= x + width / 2 && nonRotated[1] > center[1] - verticalThrehsold && nonRotated[1] < center[1] + verticalThrehsold) {
        return pointRotateRads(
          pointFrom(x - FIXED_BINDING_DISTANCE, center[1]),
          center,
          angle
        );
      } else if (nonRotated[1] <= y + height / 2 && nonRotated[0] > center[0] - horizontalThrehsold && nonRotated[0] < center[0] + horizontalThrehsold) {
        return pointRotateRads(
          pointFrom(center[0], y - FIXED_BINDING_DISTANCE),
          center,
          angle
        );
      } else if (nonRotated[0] >= x + width / 2 && nonRotated[1] > center[1] - verticalThrehsold && nonRotated[1] < center[1] + verticalThrehsold) {
        return pointRotateRads(
          pointFrom(x + width + FIXED_BINDING_DISTANCE, center[1]),
          center,
          angle
        );
      } else if (nonRotated[1] >= y + height / 2 && nonRotated[0] > center[0] - horizontalThrehsold && nonRotated[0] < center[0] + horizontalThrehsold) {
        return pointRotateRads(
          pointFrom(center[0], y + height + FIXED_BINDING_DISTANCE),
          center,
          angle
        );
      }
      return p;
    };
    updateBoundPoint = (linearElement, startOrEnd, binding, bindableElement, elementsMap) => {
      if (binding == null || // We only need to update the other end if this is a 2 point line element
      binding.elementId !== bindableElement.id && linearElement.points.length > 2) {
        return null;
      }
      const direction = startOrEnd === "startBinding" ? -1 : 1;
      const edgePointIndex = direction === -1 ? 0 : linearElement.points.length - 1;
      if (isElbowArrow(linearElement) && isFixedPointBinding(binding)) {
        const fixedPoint = normalizeFixedPoint(binding.fixedPoint) ?? calculateFixedPointForElbowArrowBinding(
          linearElement,
          bindableElement,
          startOrEnd === "startBinding" ? "start" : "end",
          elementsMap
        ).fixedPoint;
        const globalMidPoint = pointFrom(
          bindableElement.x + bindableElement.width / 2,
          bindableElement.y + bindableElement.height / 2
        );
        const global = pointFrom(
          bindableElement.x + fixedPoint[0] * bindableElement.width,
          bindableElement.y + fixedPoint[1] * bindableElement.height
        );
        const rotatedGlobal = pointRotateRads(
          global,
          globalMidPoint,
          bindableElement.angle
        );
        return LinearElementEditor.pointFromAbsoluteCoords(
          linearElement,
          rotatedGlobal,
          elementsMap
        );
      }
      const adjacentPointIndex = edgePointIndex - direction;
      const adjacentPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
        linearElement,
        adjacentPointIndex,
        elementsMap
      );
      const focusPointAbsolute = determineFocusPoint(
        bindableElement,
        binding.focus,
        adjacentPoint,
        elementsMap
      );
      let newEdgePoint;
      if (binding.gap === 0) {
        newEdgePoint = focusPointAbsolute;
      } else {
        const intersections = intersectElementWithLine(
          bindableElement,
          adjacentPoint,
          focusPointAbsolute,
          binding.gap,
          elementsMap
        );
        if (!intersections || intersections.length === 0) {
          newEdgePoint = focusPointAbsolute;
        } else {
          newEdgePoint = intersections[0];
        }
      }
      return LinearElementEditor.pointFromAbsoluteCoords(
        linearElement,
        newEdgePoint,
        elementsMap
      );
    };
    calculateFixedPointForElbowArrowBinding = (linearElement, hoveredElement, startOrEnd, elementsMap) => {
      const bounds = [
        hoveredElement.x,
        hoveredElement.y,
        hoveredElement.x + hoveredElement.width,
        hoveredElement.y + hoveredElement.height
      ];
      const edgePointIndex = startOrEnd === "start" ? 0 : linearElement.points.length - 1;
      const globalPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
        linearElement,
        edgePointIndex,
        elementsMap
      );
      const otherGlobalPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
        linearElement,
        edgePointIndex,
        elementsMap
      );
      const snappedPoint = bindPointToSnapToElementOutline(
        globalPoint,
        otherGlobalPoint,
        hoveredElement,
        elementsMap
      );
      const globalMidPoint = pointFrom(
        bounds[0] + (bounds[2] - bounds[0]) / 2,
        bounds[1] + (bounds[3] - bounds[1]) / 2
      );
      const nonRotatedSnappedGlobalPoint = pointRotateRads(
        snappedPoint,
        globalMidPoint,
        -hoveredElement.angle
      );
      return {
        fixedPoint: normalizeFixedPoint([
          (nonRotatedSnappedGlobalPoint[0] - hoveredElement.x) / hoveredElement.width,
          (nonRotatedSnappedGlobalPoint[1] - hoveredElement.y) / hoveredElement.height
        ])
      };
    };
    maybeCalculateNewGapWhenScaling = (changedElement, currentBinding, newSize) => {
      if (currentBinding == null || newSize == null) {
        return currentBinding;
      }
      const { width: newWidth, height: newHeight } = newSize;
      const { width, height } = changedElement;
      const newGap = Math.max(
        1,
        Math.min(
          maxBindingGap(changedElement, newWidth, newHeight),
          currentBinding.gap * (newWidth < newHeight ? newWidth / width : newHeight / height)
        )
      );
      return { ...currentBinding, gap: newGap };
    };
    getElligibleElementForBindingElement = (linearElement, startOrEnd, elementsMap, elements) => {
      return getHoveredElementForBinding(
        getLinearElementEdgeCoors(linearElement, startOrEnd, elementsMap),
        elements,
        elementsMap
      );
    };
    getLinearElementEdgeCoors = (linearElement, startOrEnd, elementsMap) => {
      const index = startOrEnd === "start" ? 0 : -1;
      return tupleToCoors(
        LinearElementEditor.getPointAtIndexGlobalCoordinates(
          linearElement,
          index,
          elementsMap
        )
      );
    };
    fixBindingsAfterDuplication = (sceneElements, oldElements, oldIdToDuplicatedId, duplicatesServeAsOld) => {
      const allBoundElementIds = /* @__PURE__ */ new Set();
      const allBindableElementIds = /* @__PURE__ */ new Set();
      const shouldReverseRoles = duplicatesServeAsOld === "duplicatesServeAsOld";
      const duplicateIdToOldId = new Map(
        [...oldIdToDuplicatedId].map(([key, value]) => [value, key])
      );
      oldElements.forEach((oldElement) => {
        const { boundElements } = oldElement;
        if (boundElements != null && boundElements.length > 0) {
          boundElements.forEach((boundElement) => {
            if (shouldReverseRoles && !oldIdToDuplicatedId.has(boundElement.id)) {
              allBoundElementIds.add(boundElement.id);
            }
          });
          allBindableElementIds.add(oldIdToDuplicatedId.get(oldElement.id));
        }
        if (isBindingElement(oldElement)) {
          if (oldElement.startBinding != null) {
            const { elementId } = oldElement.startBinding;
            if (shouldReverseRoles && !oldIdToDuplicatedId.has(elementId)) {
              allBindableElementIds.add(elementId);
            }
          }
          if (oldElement.endBinding != null) {
            const { elementId } = oldElement.endBinding;
            if (shouldReverseRoles && !oldIdToDuplicatedId.has(elementId)) {
              allBindableElementIds.add(elementId);
            }
          }
          if (oldElement.startBinding != null || oldElement.endBinding != null) {
            allBoundElementIds.add(oldIdToDuplicatedId.get(oldElement.id));
          }
        }
      });
      sceneElements.filter(
        ({ id }) => allBoundElementIds.has(id)
      ).forEach((element) => {
        const { startBinding, endBinding } = element;
        mutateElement(element, {
          startBinding: newBindingAfterDuplication(
            startBinding,
            oldIdToDuplicatedId
          ),
          endBinding: newBindingAfterDuplication(endBinding, oldIdToDuplicatedId)
        });
      });
      sceneElements.filter(({ id }) => allBindableElementIds.has(id)).forEach((bindableElement) => {
        const oldElementId = duplicateIdToOldId.get(bindableElement.id);
        const boundElements = sceneElements.find(
          ({ id }) => id === oldElementId
        )?.boundElements;
        if (boundElements && boundElements.length > 0) {
          mutateElement(bindableElement, {
            boundElements: boundElements.map(
              (boundElement) => oldIdToDuplicatedId.has(boundElement.id) ? {
                id: oldIdToDuplicatedId.get(boundElement.id),
                type: boundElement.type
              } : boundElement
            )
          });
        }
      });
    };
    newBindingAfterDuplication = (binding, oldIdToDuplicatedId) => {
      if (binding == null) {
        return null;
      }
      return {
        ...binding,
        elementId: oldIdToDuplicatedId.get(binding.elementId) ?? binding.elementId
      };
    };
    fixBindingsAfterDeletion = (sceneElements, deletedElements) => {
      const elements = arrayToMap(sceneElements);
      for (const element of deletedElements) {
        BoundElement.unbindAffected(elements, element, mutateElement);
        BindableElement.unbindAffected(elements, element, mutateElement);
      }
    };
    newBoundElements = (boundElements, idsToRemove, elementsToAdd = []) => {
      if (!boundElements) {
        return null;
      }
      const nextBoundElements = boundElements.filter(
        (boundElement) => !idsToRemove.has(boundElement.id)
      );
      nextBoundElements.push(
        ...elementsToAdd.map(
          (x) => ({ id: x.id, type: x.type })
        )
      );
      return nextBoundElements;
    };
    bindingBorderTest = (element, { x, y }, elementsMap, fullShape) => {
      const threshold = maxBindingGap(element, element.width, element.height);
      const shape = getElementShape(element, elementsMap);
      return isPointOnShape(pointFrom(x, y), shape, threshold) || fullShape === true && pointInsideBounds(pointFrom(x, y), aabbForElement(element));
    };
    maxBindingGap = (element, elementWidth, elementHeight) => {
      const shapeRatio = element.type === "diamond" ? 1 / Math.sqrt(2) : 1;
      const smallerDimension = shapeRatio * Math.min(elementWidth, elementHeight);
      return Math.max(16, Math.min(0.25 * smallerDimension, 32));
    };
    distanceToBindableElement = (element, point2, elementsMap) => {
      switch (element.type) {
        case "rectangle":
        case "image":
        case "text":
        case "iframe":
        case "embeddable":
        case "frame":
        case "magicframe":
          return distanceToRectangle(element, point2, elementsMap);
        case "diamond":
          return distanceToDiamond(element, point2, elementsMap);
        case "ellipse":
          return distanceToEllipse2(element, point2, elementsMap);
      }
    };
    distanceToRectangle = (element, p, elementsMap) => {
      const [, pointRel, hwidth, hheight] = pointRelativeToElement(
        element,
        p,
        elementsMap
      );
      return Math.max(
        distanceToLine(pointRel, equation(0, 1, -hheight)),
        distanceToLine(pointRel, equation(1, 0, -hwidth))
      );
    };
    distanceToDiamond = (element, point2, elementsMap) => {
      const [, pointRel, hwidth, hheight] = pointRelativeToElement(
        element,
        point2,
        elementsMap
      );
      const side = equation(hheight, hwidth, -hheight * hwidth);
      return distanceToLine(pointRel, side);
    };
    distanceToEllipse2 = (element, point2, elementsMap) => {
      const [pointRel, tangent] = ellipseParamsForTest(element, point2, elementsMap);
      return -sign(tangent) * distanceToLine(pointRel, tangent);
    };
    ellipseParamsForTest = (element, point2, elementsMap) => {
      const [, pointRel, hwidth, hheight] = pointRelativeToElement(
        element,
        point2,
        elementsMap
      );
      const [px, py] = toTuple(pointRel);
      let tx = 0.707;
      let ty = 0.707;
      const a = hwidth;
      const b = hheight;
      [0, 1, 2, 3].forEach((_) => {
        const xx = a * tx;
        const yy = b * ty;
        const ex = (a * a - b * b) * tx ** 3 / a;
        const ey = (b * b - a * a) * ty ** 3 / b;
        const rx = xx - ex;
        const ry = yy - ey;
        const qx = px - ex;
        const qy = py - ey;
        const r = Math.hypot(ry, rx);
        const q = Math.hypot(qy, qx);
        tx = Math.min(1, Math.max(0, (qx * r / q + ex) / a));
        ty = Math.min(1, Math.max(0, (qy * r / q + ey) / b));
        const t2 = Math.hypot(ty, tx);
        tx /= t2;
        ty /= t2;
      });
      const closestPoint = point(a * tx, b * ty);
      const tangent = orthogonalThrough(pointRel, closestPoint);
      return [pointRel, tangent];
    };
    pointRelativeToElement = (element, pointTuple, elementsMap) => {
      const point2 = from(pointTuple);
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
      const center = coordsCenter(x1, y1, x2, y2);
      const rotate = rotation(center, element.angle);
      const pointRotated = apply(rotate, point2);
      const pointRelToCenter = sub(pointRotated, from2(center));
      const pointRelToCenterAbs = abs(pointRelToCenter);
      const elementPos = offset(element.x, element.y);
      const pointRelToPos = sub(pointRotated, elementPos);
      const halfWidth = (x2 - x1) / 2;
      const halfHeight = (y2 - y1) / 2;
      return [pointRelToPos, pointRelToCenterAbs, halfWidth, halfHeight];
    };
    relativizationToElementCenter = (element, elementsMap) => {
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
      const center = coordsCenter(x1, y1, x2, y2);
      const rotate = rotation(center, element.angle);
      const translate = reverse(
        translation(from2(center))
      );
      return compose(rotate, translate);
    };
    coordsCenter = (x1, y1, x2, y2) => {
      return point((x1 + x2) / 2, (y1 + y2) / 2);
    };
    determineFocusDistance = (element, a, b, elementsMap) => {
      const relateToCenter = relativizationToElementCenter(element, elementsMap);
      const aRel = apply(relateToCenter, from(a));
      const bRel = apply(relateToCenter, from(b));
      const line = through(aRel, bRel);
      const q = element.height / element.width;
      const hwidth = element.width / 2;
      const hheight = element.height / 2;
      const n = line[2];
      const m = line[3];
      const c = line[1];
      const mabs = Math.abs(m);
      const nabs = Math.abs(n);
      let ret;
      switch (element.type) {
        case "rectangle":
        case "image":
        case "text":
        case "iframe":
        case "embeddable":
        case "frame":
        case "magicframe":
          ret = c / (hwidth * (nabs + q * mabs));
          break;
        case "diamond":
          ret = mabs < nabs ? c / (nabs * hwidth) : c / (mabs * hheight);
          break;
        case "ellipse":
          ret = c / (hwidth * Math.sqrt(n ** 2 + q ** 2 * m ** 2));
          break;
      }
      return ret || 0;
    };
    determineFocusPoint = (element, focus, adjecentPoint, elementsMap) => {
      if (focus === 0) {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const center = coordsCenter(x1, y1, x2, y2);
        return pointFromPair(toTuple(center));
      }
      const relateToCenter = relativizationToElementCenter(element, elementsMap);
      const adjecentPointRel = apply(
        relateToCenter,
        from(adjecentPoint)
      );
      const reverseRelateToCenter = reverse(relateToCenter);
      let point2;
      switch (element.type) {
        case "rectangle":
        case "image":
        case "text":
        case "diamond":
        case "iframe":
        case "embeddable":
        case "frame":
        case "magicframe":
          point2 = findFocusPointForRectangulars(element, focus, adjecentPointRel);
          break;
        case "ellipse":
          point2 = findFocusPointForEllipse(element, focus, adjecentPointRel);
          break;
      }
      return pointFromPair(
        toTuple(apply(reverseRelateToCenter, point2))
      );
    };
    intersectElementWithLine = (element, a, b, gap = 0, elementsMap) => {
      if (isRectangularElement(element)) {
        return segmentIntersectRectangleElement(element, lineSegment(a, b), gap);
      }
      const relateToCenter = relativizationToElementCenter(element, elementsMap);
      const aRel = apply(relateToCenter, from(a));
      const bRel = apply(relateToCenter, from(b));
      const line = through(aRel, bRel);
      const reverseRelateToCenter = reverse(relateToCenter);
      const intersections = getSortedElementLineIntersections(
        element,
        line,
        aRel,
        gap
      );
      return intersections.map(
        (point2) => pointFromPair(
          toTuple(apply(reverseRelateToCenter, point2))
        )
        // pointFromArray(
        //   ,
        // ),
      );
    };
    getSortedElementLineIntersections = (element, line, nearPoint, gap = 0) => {
      let intersections;
      switch (element.type) {
        case "rectangle":
        case "image":
        case "text":
        case "diamond":
        case "iframe":
        case "embeddable":
        case "frame":
        case "magicframe":
          const corners = getCorners(element);
          intersections = corners.flatMap((point2, i) => {
            const edge = [point2, corners[(i + 1) % 4]];
            return intersectSegment(line, offsetSegment(edge, gap));
          }).concat(
            corners.flatMap((point2) => getCircleIntersections(point2, gap, line))
          );
          break;
        case "ellipse":
          intersections = getEllipseIntersections(element, gap, line);
          break;
      }
      if (intersections.length < 2) {
        return [];
      }
      const sortedIntersections = intersections.sort(
        (i1, i2) => distance2(i1, nearPoint) - distance2(i2, nearPoint)
      );
      return [
        sortedIntersections[0],
        sortedIntersections[sortedIntersections.length - 1]
      ];
    };
    getCorners = (element, scale = 1) => {
      const hx = scale * element.width / 2;
      const hy = scale * element.height / 2;
      switch (element.type) {
        case "rectangle":
        case "image":
        case "text":
        case "iframe":
        case "embeddable":
        case "frame":
        case "magicframe":
          return [
            point(hx, hy),
            point(hx, -hy),
            point(-hx, -hy),
            point(-hx, hy)
          ];
        case "diamond":
          return [
            point(0, hy),
            point(hx, 0),
            point(0, -hy),
            point(-hx, 0)
          ];
      }
    };
    intersectSegment = (line, segment) => {
      const [a, b] = segment;
      const aDist = distanceToLine(a, line);
      const bDist = distanceToLine(b, line);
      if (aDist * bDist >= 0) {
        return [];
      }
      return [intersect(line, through(a, b))];
    };
    offsetSegment = (segment, distance3) => {
      const [a, b] = segment;
      const offset2 = translationOrthogonal(
        fromTo(a, b),
        distance3
      );
      return [apply(offset2, a), apply(offset2, b)];
    };
    getEllipseIntersections = (element, gap, line) => {
      const a = element.width / 2 + gap;
      const b = element.height / 2 + gap;
      const m = line[2];
      const n = line[3];
      const c = line[1];
      const squares = a * a * m * m + b * b * n * n;
      const discr = squares - c * c;
      if (squares === 0 || discr <= 0) {
        return [];
      }
      const discrRoot = Math.sqrt(discr);
      const xn = -a * a * m * c;
      const yn = -b * b * n * c;
      return [
        point(
          (xn + a * b * n * discrRoot) / squares,
          (yn - a * b * m * discrRoot) / squares
        ),
        point(
          (xn - a * b * n * discrRoot) / squares,
          (yn + a * b * m * discrRoot) / squares
        )
      ];
    };
    getCircleIntersections = (center, radius, line) => {
      if (radius === 0) {
        return distanceToLine(line, center) === 0 ? [center] : [];
      }
      const m = line[2];
      const n = line[3];
      const c = line[1];
      const [a, b] = toTuple(center);
      const r = radius;
      const squares = m * m + n * n;
      const discr = r * r * squares - (m * a + n * b + c) ** 2;
      if (squares === 0 || discr <= 0) {
        return [];
      }
      const discrRoot = Math.sqrt(discr);
      const xn = a * n * n - b * m * n - m * c;
      const yn = b * m * m - a * m * n - n * c;
      return [
        point((xn + n * discrRoot) / squares, (yn - m * discrRoot) / squares),
        point((xn - n * discrRoot) / squares, (yn + m * discrRoot) / squares)
      ];
    };
    findFocusPointForEllipse = (ellipse, relativeDistance, point2) => {
      const relativeDistanceAbs = Math.abs(relativeDistance);
      const a = ellipse.width * relativeDistanceAbs / 2;
      const b = ellipse.height * relativeDistanceAbs / 2;
      const orientation = Math.sign(relativeDistance);
      const [px, pyo] = toTuple(point2);
      const py = pyo === 0 ? 1e-4 : pyo;
      const squares = px ** 2 * b ** 2 + py ** 2 * a ** 2;
      const m = (-px * b ** 2 + orientation * py * Math.sqrt(Math.max(0, squares - a ** 2 * b ** 2))) / squares;
      let n = (-m * px - 1) / py;
      if (n === 0) {
        n = (Object.is(n, -0) ? -1 : 1) * 0.01;
      }
      const x = -(a ** 2 * m) / (n ** 2 * b ** 2 + m ** 2 * a ** 2);
      return point(x, (-m * x - 1) / n);
    };
    findFocusPointForRectangulars = (element, relativeDistance, point2) => {
      const relativeDistanceAbs = Math.abs(relativeDistance);
      const orientation = Math.sign(relativeDistance);
      const corners = getCorners(element, relativeDistanceAbs);
      let maxDistance = 0;
      let tangentPoint = null;
      corners.forEach((corner) => {
        const distance3 = orientation * through(point2, corner)[1];
        if (distance3 > maxDistance) {
          maxDistance = distance3;
          tangentPoint = corner;
        }
      });
      return tangentPoint;
    };
    bindingProperties = /* @__PURE__ */ new Set([
      "boundElements",
      "frameId",
      "containerId",
      "startBinding",
      "endBinding"
    ]);
    boundElementsVisitor = (elements, element, visit) => {
      if (isBindableElement(element)) {
        const boundElements = element.boundElements?.slice() ?? [];
        boundElements.forEach(({ id }) => {
          visit(elements.get(id), "boundElements", id);
        });
      }
    };
    bindableElementsVisitor = (elements, element, visit) => {
      const result = [];
      if (element.frameId) {
        const id = element.frameId;
        result.push(visit(elements.get(id), "frameId", id));
      }
      if (isBoundToContainer(element)) {
        const id = element.containerId;
        result.push(visit(elements.get(id), "containerId", id));
      }
      if (isArrowElement(element)) {
        if (element.startBinding) {
          const id = element.startBinding.elementId;
          result.push(visit(elements.get(id), "startBinding", id));
        }
        if (element.endBinding) {
          const id = element.endBinding.elementId;
          result.push(visit(elements.get(id), "endBinding", id));
        }
      }
      return result;
    };
    BoundElement = class {
      /**
       * Unbind the affected non deleted bindable elements (removing element from `boundElements`).
       * - iterates non deleted bindable elements (`containerId` | `startBinding.elementId` | `endBinding.elementId`) of the current element
       * - prepares updates to unbind each bindable element's `boundElements` from the current element
       */
      static unbindAffected(elements, boundElement, updateElementWith) {
        if (!boundElement) {
          return;
        }
        bindableElementsVisitor(elements, boundElement, (bindableElement) => {
          if (!bindableElement || bindableElement.isDeleted) {
            return;
          }
          boundElementsVisitor(
            elements,
            bindableElement,
            (_, __, boundElementId) => {
              if (boundElementId === boundElement.id) {
                updateElementWith(bindableElement, {
                  boundElements: newBoundElements(
                    bindableElement.boundElements,
                    /* @__PURE__ */ new Set([boundElementId])
                  )
                });
              }
            }
          );
        });
      }
      /**
       * Rebind the next affected non deleted bindable elements (adding element to `boundElements`).
       * - iterates non deleted bindable elements (`containerId` | `startBinding.elementId` | `endBinding.elementId`) of the current element
       * - prepares updates to rebind each bindable element's `boundElements` to the current element
       *
       * NOTE: rebind expects that affected elements were previously unbound with `BoundElement.unbindAffected`
       */
      static rebindAffected = (elements, boundElement, updateElementWith) => {
        if (!boundElement || boundElement.isDeleted) {
          return;
        }
        bindableElementsVisitor(
          elements,
          boundElement,
          (bindableElement, bindingProp) => {
            if (!bindableElement || bindableElement.isDeleted) {
              updateElementWith(boundElement, { [bindingProp]: null });
              return;
            }
            if (bindingProp === "frameId") {
              return;
            }
            if (bindableElement.boundElements?.find((x) => x.id === boundElement.id)) {
              return;
            }
            if (isArrowElement(boundElement)) {
              updateElementWith(bindableElement, {
                boundElements: newBoundElements(
                  bindableElement.boundElements,
                  /* @__PURE__ */ new Set(),
                  new Array(boundElement)
                )
              });
            }
            if (isTextElement(boundElement)) {
              if (!bindableElement.boundElements?.find((x) => x.type === "text")) {
                updateElementWith(bindableElement, {
                  boundElements: newBoundElements(
                    bindableElement.boundElements,
                    /* @__PURE__ */ new Set(),
                    new Array(boundElement)
                  )
                });
              } else {
                updateElementWith(boundElement, { [bindingProp]: null });
              }
            }
          }
        );
      };
    };
    BindableElement = class {
      /**
       * Unbind the affected non deleted bound elements (resetting `containerId`, `startBinding`, `endBinding` to `null`).
       * - iterates through non deleted `boundElements` of the current element
       * - prepares updates to unbind each bound element from the current element
       */
      static unbindAffected(elements, bindableElement, updateElementWith) {
        if (!bindableElement) {
          return;
        }
        boundElementsVisitor(elements, bindableElement, (boundElement) => {
          if (!boundElement || boundElement.isDeleted) {
            return;
          }
          bindableElementsVisitor(
            elements,
            boundElement,
            (_, bindingProp, bindableElementId) => {
              if (bindableElementId === bindableElement.id) {
                updateElementWith(boundElement, { [bindingProp]: null });
              }
            }
          );
        });
      }
      /**
       * Rebind the affected non deleted bound elements (for now setting only `containerId`, as we cannot rebind arrows atm).
       * - iterates through non deleted `boundElements` of the current element
       * - prepares updates to rebind each bound element to the current element or unbind it from `boundElements` in case of conflicts
       *
       * NOTE: rebind expects that affected elements were previously unbound with `BindaleElement.unbindAffected`
       */
      static rebindAffected = (elements, bindableElement, updateElementWith) => {
        if (!bindableElement || bindableElement.isDeleted) {
          return;
        }
        boundElementsVisitor(
          elements,
          bindableElement,
          (boundElement, _, boundElementId) => {
            if (!boundElement || boundElement.isDeleted) {
              updateElementWith(bindableElement, {
                boundElements: newBoundElements(
                  bindableElement.boundElements,
                  /* @__PURE__ */ new Set([boundElementId])
                )
              });
              return;
            }
            if (isTextElement(boundElement)) {
              const boundElements = bindableElement.boundElements?.slice() ?? [];
              if (boundElements.reverse().find((x) => x.type === "text")?.id === boundElement.id) {
                if (boundElement.containerId !== bindableElement.id) {
                  updateElementWith(boundElement, {
                    containerId: bindableElement.id
                  });
                }
              } else {
                if (boundElement.containerId !== null) {
                  updateElementWith(boundElement, {
                    containerId: null
                  });
                }
                updateElementWith(bindableElement, {
                  boundElements: newBoundElements(
                    bindableElement.boundElements,
                    /* @__PURE__ */ new Set([boundElement.id])
                  )
                });
              }
            }
          }
        );
      };
    };
    getGlobalFixedPointForBindableElement = (fixedPointRatio, element) => {
      const [fixedX, fixedY] = normalizeFixedPoint(fixedPointRatio);
      return pointRotateRads(
        pointFrom(
          element.x + element.width * fixedX,
          element.y + element.height * fixedY
        ),
        pointFrom(
          element.x + element.width / 2,
          element.y + element.height / 2
        ),
        element.angle
      );
    };
    getGlobalFixedPoints = (arrow, elementsMap) => {
      const startElement = arrow.startBinding && elementsMap.get(arrow.startBinding.elementId);
      const endElement = arrow.endBinding && elementsMap.get(arrow.endBinding.elementId);
      const startPoint = startElement && arrow.startBinding ? getGlobalFixedPointForBindableElement(
        arrow.startBinding.fixedPoint,
        startElement
      ) : pointFrom(
        arrow.x + arrow.points[0][0],
        arrow.y + arrow.points[0][1]
      );
      const endPoint = endElement && arrow.endBinding ? getGlobalFixedPointForBindableElement(
        arrow.endBinding.fixedPoint,
        endElement
      ) : pointFrom(
        arrow.x + arrow.points[arrow.points.length - 1][0],
        arrow.y + arrow.points[arrow.points.length - 1][1]
      );
      return [startPoint, endPoint];
    };
    getArrowLocalFixedPoints = (arrow, elementsMap) => {
      const [startPoint, endPoint] = getGlobalFixedPoints(arrow, elementsMap);
      return [
        LinearElementEditor.pointFromAbsoluteCoords(arrow, startPoint, elementsMap),
        LinearElementEditor.pointFromAbsoluteCoords(arrow, endPoint, elementsMap)
      ];
    };
    normalizeFixedPoint = (fixedPoint) => {
      if (fixedPoint && (fixedPoint[0] === 0.5 || fixedPoint[1] === 0.5)) {
        return fixedPoint.map(
          (ratio) => ratio === 0.5 ? 0.5001 : ratio
        );
      }
      return fixedPoint;
    };
  }
});

// data/restore.ts
var AllowedExcalidrawActiveTools, getFontFamilyByName, repairBinding, restoreElementWithProperties, restoreElement, repairContainerElement, repairBoundElement, repairFrameMembership, restoreElements, coalesceAppStateValue, LegacyAppStateMigrations, restoreAppState, restore, restoreLibraryItem, restoreLibraryItems;
var init_restore = __esm({
  "data/restore.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_typeChecks();
    init_random();
    init_constants();
    init_appState();
    init_linearElementEditor();
    init_mutateElement();
    init_utils2();
    init_utils2();
    init_textElement();
    init_url();
    init_fractionalIndex();
    init_points();
    init_fonts();
    init_binding();
    init_scene();
    init_math();
    AllowedExcalidrawActiveTools = {
      selection: true,
      text: true,
      rectangle: true,
      diamond: true,
      ellipse: true,
      line: true,
      image: true,
      arrow: true,
      freedraw: true,
      eraser: false,
      custom: true,
      frame: true,
      embeddable: true,
      hand: true,
      laser: false,
      magicframe: false
    };
    getFontFamilyByName = (fontFamilyName) => {
      if (Object.keys(FONT_FAMILY).includes(fontFamilyName)) {
        return FONT_FAMILY[fontFamilyName];
      }
      return DEFAULT_FONT_FAMILY;
    };
    repairBinding = (element, binding) => {
      if (!binding) {
        return null;
      }
      return {
        ...binding,
        focus: binding.focus || 0,
        ...isElbowArrow(element) && isFixedPointBinding(binding) ? {
          fixedPoint: normalizeFixedPoint(binding.fixedPoint ?? [0, 0])
        } : {}
      };
    };
    restoreElementWithProperties = (element, extra) => {
      const base = {
        type: extra.type || element.type,
        // all elements must have version > 0 so getSceneVersion() will pick up
        // newly added elements
        version: element.version || 1,
        versionNonce: element.versionNonce ?? 0,
        index: element.index ?? null,
        isDeleted: element.isDeleted ?? false,
        id: element.id || randomId(),
        fillStyle: element.fillStyle || DEFAULT_ELEMENT_PROPS.fillStyle,
        strokeWidth: element.strokeWidth || DEFAULT_ELEMENT_PROPS.strokeWidth,
        strokeStyle: element.strokeStyle ?? DEFAULT_ELEMENT_PROPS.strokeStyle,
        roughness: element.roughness ?? DEFAULT_ELEMENT_PROPS.roughness,
        opacity: element.opacity == null ? DEFAULT_ELEMENT_PROPS.opacity : element.opacity,
        angle: element.angle || 0,
        x: extra.x ?? element.x ?? 0,
        y: extra.y ?? element.y ?? 0,
        strokeColor: element.strokeColor || DEFAULT_ELEMENT_PROPS.strokeColor,
        backgroundColor: element.backgroundColor || DEFAULT_ELEMENT_PROPS.backgroundColor,
        width: element.width || 0,
        height: element.height || 0,
        seed: element.seed ?? 1,
        groupIds: element.groupIds ?? [],
        frameId: element.frameId ?? null,
        roundness: element.roundness ? element.roundness : element.strokeSharpness === "round" ? {
          // for old elements that would now use adaptive radius algo,
          // use legacy algo instead
          type: isUsingAdaptiveRadius(element.type) ? ROUNDNESS.LEGACY : ROUNDNESS.PROPORTIONAL_RADIUS
        } : null,
        boundElements: element.boundElementIds ? element.boundElementIds.map((id) => ({ type: "arrow", id })) : element.boundElements ?? [],
        updated: element.updated ?? getUpdatedTimestamp(),
        link: element.link ? normalizeLink(element.link) : null,
        locked: element.locked ?? false
      };
      if ("customData" in element || "customData" in extra) {
        base.customData = "customData" in extra ? extra.customData : element.customData;
      }
      return {
        ...base,
        ...getNormalizedDimensions(base),
        ...extra
      };
    };
    restoreElement = (element) => {
      switch (element.type) {
        case "text":
          let fontSize = element.fontSize;
          let fontFamily = element.fontFamily;
          if ("font" in element) {
            const [fontPx, _fontFamily] = element.font.split(" ");
            fontSize = parseFloat(fontPx);
            fontFamily = getFontFamilyByName(_fontFamily);
          }
          const text = typeof element.text === "string" && element.text || "";
          const lineHeight = element.lineHeight || (element.height ? (
            // detect line-height from current element height and font-size
            detectLineHeight(element)
          ) : (
            // no element height likely means programmatic use, so default
            // to a fixed line height
            getLineHeight(element.fontFamily)
          ));
          element = restoreElementWithProperties(element, {
            fontSize,
            fontFamily,
            text,
            textAlign: element.textAlign || DEFAULT_TEXT_ALIGN,
            verticalAlign: element.verticalAlign || DEFAULT_VERTICAL_ALIGN,
            containerId: element.containerId ?? null,
            originalText: element.originalText || text,
            autoResize: element.autoResize ?? true,
            lineHeight
          });
          if (!text && !element.isDeleted) {
            element = { ...element, originalText: text, isDeleted: true };
            element = bumpVersion(element);
          }
          return element;
        case "freedraw": {
          return restoreElementWithProperties(element, {
            points: element.points,
            lastCommittedPoint: null,
            simulatePressure: element.simulatePressure,
            pressures: element.pressures
          });
        }
        case "image":
          return restoreElementWithProperties(element, {
            status: element.status || "pending",
            fileId: element.fileId,
            scale: element.scale || [1, 1]
          });
        case "line":
        case "draw":
          const { startArrowhead = null, endArrowhead = null } = element;
          let x = element.x;
          let y = element.y;
          let points = (
            // migrate old arrow model to new one
            !Array.isArray(element.points) || element.points.length < 2 ? [pointFrom(0, 0), pointFrom(element.width, element.height)] : element.points
          );
          if (points[0][0] !== 0 || points[0][1] !== 0) {
            ({ points, x, y } = LinearElementEditor.getNormalizedPoints(element));
          }
          return restoreElementWithProperties(element, {
            type: element.type === "draw" ? "line" : element.type,
            startBinding: repairBinding(element, element.startBinding),
            endBinding: repairBinding(element, element.endBinding),
            lastCommittedPoint: null,
            startArrowhead,
            endArrowhead,
            points,
            x,
            y,
            ...getSizeFromPoints(points)
          });
        case "arrow": {
          const { startArrowhead: startArrowhead2 = null, endArrowhead: endArrowhead2 = "arrow" } = element;
          let x2 = element.x;
          let y2 = element.y;
          let points2 = (
            // migrate old arrow model to new one
            !Array.isArray(element.points) || element.points.length < 2 ? [pointFrom(0, 0), pointFrom(element.width, element.height)] : element.points
          );
          if (points2[0][0] !== 0 || points2[0][1] !== 0) {
            ({ points: points2, x: x2, y: y2 } = LinearElementEditor.getNormalizedPoints(element));
          }
          return restoreElementWithProperties(element, {
            type: element.type,
            startBinding: repairBinding(element, element.startBinding),
            endBinding: repairBinding(element, element.endBinding),
            lastCommittedPoint: null,
            startArrowhead: startArrowhead2,
            endArrowhead: endArrowhead2,
            points: points2,
            x: x2,
            y: y2,
            elbowed: element.elbowed,
            ...getSizeFromPoints(points2)
          });
        }
        case "ellipse":
        case "rectangle":
        case "diamond":
        case "iframe":
        case "embeddable":
          return restoreElementWithProperties(element, {});
        case "magicframe":
        case "frame":
          return restoreElementWithProperties(element, {
            name: element.name ?? null
          });
      }
      return null;
    };
    repairContainerElement = (container, elementsMap) => {
      if (container.boundElements) {
        const boundElements = container.boundElements.slice();
        const boundIds = /* @__PURE__ */ new Set();
        container.boundElements = boundElements.reduce(
          (acc, binding) => {
            const boundElement = elementsMap.get(binding.id);
            if (boundElement && !boundIds.has(binding.id)) {
              boundIds.add(binding.id);
              if (boundElement.isDeleted) {
                return acc;
              }
              acc.push(binding);
              if (isTextElement(boundElement) && // being slightly conservative here, preserving existing containerId
              // if defined, lest boundElements is stale
              !boundElement.containerId) {
                boundElement.containerId = container.id;
              }
            }
            return acc;
          },
          []
        );
      }
    };
    repairBoundElement = (boundElement, elementsMap) => {
      const container = boundElement.containerId ? elementsMap.get(boundElement.containerId) : null;
      if (!container) {
        boundElement.containerId = null;
        return;
      }
      if (boundElement.isDeleted) {
        return;
      }
      if (container.boundElements && !container.boundElements.find((binding) => binding.id === boundElement.id)) {
        const boundElements = (container.boundElements || (container.boundElements = [])).slice();
        boundElements.push({ type: "text", id: boundElement.id });
        container.boundElements = boundElements;
      }
    };
    repairFrameMembership = (element, elementsMap) => {
      if (element.frameId) {
        const containingFrame = elementsMap.get(element.frameId);
        if (!containingFrame) {
          element.frameId = null;
        }
      }
    };
    restoreElements = (elements, localElements, opts) => {
      const existingIds = /* @__PURE__ */ new Set();
      const localElementsMap = localElements ? arrayToMap(localElements) : null;
      const restoredElements = syncInvalidIndices(
        (elements || []).reduce((elements2, element) => {
          if (element.type !== "selection" && !isInvisiblySmallElement(element)) {
            let migratedElement = restoreElement(element);
            if (migratedElement) {
              const localElement = localElementsMap?.get(element.id);
              if (localElement && localElement.version > migratedElement.version) {
                migratedElement = bumpVersion(
                  migratedElement,
                  localElement.version
                );
              }
              if (existingIds.has(migratedElement.id)) {
                migratedElement = { ...migratedElement, id: randomId() };
              }
              existingIds.add(migratedElement.id);
              elements2.push(migratedElement);
            }
          }
          return elements2;
        }, [])
      );
      if (!opts?.repairBindings) {
        return restoredElements;
      }
      const restoredElementsMap = arrayToMap(restoredElements);
      for (const element of restoredElements) {
        if (element.frameId) {
          repairFrameMembership(element, restoredElementsMap);
        }
        if (isTextElement(element) && element.containerId) {
          repairBoundElement(element, restoredElementsMap);
        } else if (element.boundElements) {
          repairContainerElement(element, restoredElementsMap);
        }
        if (opts.refreshDimensions && isTextElement(element)) {
          Object.assign(
            element,
            refreshTextDimensions(
              element,
              getContainerElement(element, restoredElementsMap),
              restoredElementsMap
            )
          );
        }
        if (isLinearElement(element)) {
          if (element.startBinding && (!restoredElementsMap.has(element.startBinding.elementId) || !isArrowElement(element))) {
            element.startBinding = null;
          }
          if (element.endBinding && (!restoredElementsMap.has(element.endBinding.elementId) || !isArrowElement(element))) {
            element.endBinding = null;
          }
        }
      }
      return restoredElements;
    };
    coalesceAppStateValue = (key, appState, defaultAppState2) => {
      const value = appState[key];
      return value !== void 0 ? value : defaultAppState2[key];
    };
    LegacyAppStateMigrations = {
      isSidebarDocked: (appState, defaultAppState2) => {
        return [
          "defaultSidebarDockedPreference",
          appState.isSidebarDocked ?? coalesceAppStateValue(
            "defaultSidebarDockedPreference",
            appState,
            defaultAppState2
          )
        ];
      }
    };
    restoreAppState = (appState, localAppState) => {
      appState = appState || {};
      const defaultAppState2 = getDefaultAppState();
      const nextAppState = {};
      for (const legacyKey of Object.keys(
        LegacyAppStateMigrations
      )) {
        if (legacyKey in appState) {
          const [nextKey, nextValue] = LegacyAppStateMigrations[legacyKey](
            appState,
            defaultAppState2
          );
          nextAppState[nextKey] = nextValue;
        }
      }
      for (const [key, defaultValue] of Object.entries(defaultAppState2)) {
        const suppliedValue = appState[key];
        const localValue = localAppState ? localAppState[key] : void 0;
        nextAppState[key] = suppliedValue !== void 0 ? suppliedValue : localValue !== void 0 ? localValue : defaultValue;
      }
      return {
        ...nextAppState,
        cursorButton: localAppState?.cursorButton || "up",
        // reset on fresh restore so as to hide the UI button if penMode not active
        penDetected: localAppState?.penDetected ?? (appState.penMode ? appState.penDetected ?? false : false),
        activeTool: {
          ...updateActiveTool(
            defaultAppState2,
            nextAppState.activeTool.type && AllowedExcalidrawActiveTools[nextAppState.activeTool.type] ? nextAppState.activeTool : { type: "selection" }
          ),
          lastActiveTool: null,
          locked: nextAppState.activeTool.locked ?? false
        },
        // Migrates from previous version where appState.zoom was a number
        zoom: {
          value: getNormalizedZoom(
            isFiniteNumber(appState.zoom) ? appState.zoom : appState.zoom?.value ?? defaultAppState2.zoom.value
          )
        },
        openSidebar: (
          // string (legacy)
          typeof appState.openSidebar === "string" ? { name: DEFAULT_SIDEBAR.name } : nextAppState.openSidebar
        ),
        gridSize: getNormalizedGridSize(
          isFiniteNumber(appState.gridSize) ? appState.gridSize : DEFAULT_GRID_SIZE
        ),
        gridStep: getNormalizedGridStep(
          isFiniteNumber(appState.gridStep) ? appState.gridStep : DEFAULT_GRID_STEP
        )
      };
    };
    restore = (data, localAppState, localElements, elementsConfig) => {
      return {
        elements: restoreElements(data?.elements, localElements, elementsConfig),
        appState: restoreAppState(data?.appState, localAppState || null),
        files: data?.files || {}
      };
    };
    restoreLibraryItem = (libraryItem) => {
      const elements = restoreElements(
        getNonDeletedElements2(libraryItem.elements),
        null
      );
      return elements.length ? { ...libraryItem, elements } : null;
    };
    restoreLibraryItems = (libraryItems = [], defaultStatus) => {
      const restoredItems = [];
      for (const item of libraryItems) {
        if (Array.isArray(item)) {
          const restoredItem = restoreLibraryItem({
            status: defaultStatus,
            elements: item,
            id: randomId(),
            created: Date.now()
          });
          if (restoredItem) {
            restoredItems.push(restoredItem);
          }
        } else {
          const _item = item;
          const restoredItem = restoreLibraryItem({
            ..._item,
            id: _item.id || randomId(),
            status: _item.status || defaultStatus,
            created: _item.created || Date.now()
          });
          if (restoredItem) {
            restoredItems.push(restoredItem);
          }
        }
      }
      return restoredItems;
    };
  }
});

// data/image.ts
var image_exports = {};
__export(image_exports, {
  decodePngMetadata: () => decodePngMetadata,
  decodeSvgMetadata: () => decodeSvgMetadata,
  encodePngMetadata: () => encodePngMetadata,
  encodeSvgMetadata: () => encodeSvgMetadata,
  getTEXtChunk: () => getTEXtChunk
});
import decodePng from "png-chunks-extract";
import tEXt from "png-chunk-text";
import encodePng from "png-chunks-encode";
var getTEXtChunk, encodePngMetadata, decodePngMetadata, encodeSvgMetadata, decodeSvgMetadata;
var init_image = __esm({
  "data/image.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_encode();
    init_constants();
    init_blob();
    getTEXtChunk = async (blob) => {
      const chunks = decodePng(new Uint8Array(await blobToArrayBuffer(blob)));
      const metadataChunk = chunks.find((chunk2) => chunk2.name === "tEXt");
      if (metadataChunk) {
        return tEXt.decode(metadataChunk.data);
      }
      return null;
    };
    encodePngMetadata = async ({
      blob,
      metadata
    }) => {
      const chunks = decodePng(new Uint8Array(await blobToArrayBuffer(blob)));
      const metadataChunk = tEXt.encode(
        MIME_TYPES.excalidraw,
        JSON.stringify(
          await encode({
            text: metadata,
            compress: true
          })
        )
      );
      chunks.splice(-1, 0, metadataChunk);
      return new Blob([encodePng(chunks)], { type: MIME_TYPES.png });
    };
    decodePngMetadata = async (blob) => {
      const metadata = await getTEXtChunk(blob);
      if (metadata?.keyword === MIME_TYPES.excalidraw) {
        try {
          const encodedData = JSON.parse(metadata.text);
          if (!("encoded" in encodedData)) {
            if ("type" in encodedData && encodedData.type === EXPORT_DATA_TYPES.excalidraw) {
              return metadata.text;
            }
            throw new Error("FAILED");
          }
          return await decode(encodedData);
        } catch (error) {
          console.error(error);
          throw new Error("FAILED");
        }
      }
      throw new Error("INVALID");
    };
    encodeSvgMetadata = async ({ text }) => {
      const base64 = await stringToBase64(
        JSON.stringify(await encode({ text })),
        true
      );
      let metadata = "";
      metadata += `<!-- payload-type:${MIME_TYPES.excalidraw} -->`;
      metadata += `<!-- payload-version:2 -->`;
      metadata += "<!-- payload-start -->";
      metadata += base64;
      metadata += "<!-- payload-end -->";
      return metadata;
    };
    decodeSvgMetadata = async ({ svg }) => {
      if (svg.includes(`payload-type:${MIME_TYPES.excalidraw}`)) {
        const match = svg.match(
          /<!-- payload-start -->\s*(.+?)\s*<!-- payload-end -->/
        );
        if (!match) {
          throw new Error("INVALID");
        }
        const versionMatch = svg.match(/<!-- payload-version:(\d+) -->/);
        const version = versionMatch?.[1] || "1";
        const isByteString = version !== "1";
        try {
          const json = await base64ToString(match[1], isByteString);
          const encodedData = JSON.parse(json);
          if (!("encoded" in encodedData)) {
            if ("type" in encodedData && encodedData.type === EXPORT_DATA_TYPES.excalidraw) {
              return json;
            }
            throw new Error("FAILED");
          }
          return await decode(encodedData);
        } catch (error) {
          console.error(error);
          throw new Error("FAILED");
        }
      }
      throw new Error("INVALID");
    };
  }
});

// data/blob.ts
import { nanoid as nanoid2 } from "nanoid";
var parseFileContents, getFileHandleType, isImageFileHandleType, isImageFileHandle, isSupportedImageFile, loadSceneOrLibraryFromBlob, loadFromBlob, parseLibraryJSON, loadLibraryFromBlob, canvasToBlob, generateIdFromFile, getDataURL, dataURLToFile, resizeImageFile, SVGStringToFile, ImageURLToFile, getFileFromEvent, getFileHandle, getActualMimeTypeFromImage, createFile, normalizeFile, blobToArrayBuffer;
var init_blob = __esm({
  "data/blob.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_appState();
    init_constants();
    init_element();
    init_errors();
    init_scene();
    init_utils2();
    init_filesystem();
    init_json();
    init_restore();
    parseFileContents = async (blob) => {
      let contents;
      if (blob.type === MIME_TYPES.png) {
        try {
          return await (await Promise.resolve().then(() => (init_image(), image_exports))).decodePngMetadata(blob);
        } catch (error) {
          if (error.message === "INVALID") {
            throw new ImageSceneDataError(
              "Image doesn't contain scene",
              "IMAGE_NOT_CONTAINS_SCENE_DATA"
            );
          } else {
            throw new ImageSceneDataError("Error: cannot restore image");
          }
        }
      } else {
        if ("text" in Blob) {
          contents = await blob.text();
        } else {
          contents = await new Promise((resolve) => {
            const reader = new FileReader();
            reader.readAsText(blob, "utf8");
            reader.onloadend = () => {
              if (reader.readyState === FileReader.DONE) {
                resolve(reader.result);
              }
            };
          });
        }
        if (blob.type === MIME_TYPES.svg) {
          try {
            return await (await Promise.resolve().then(() => (init_image(), image_exports))).decodeSvgMetadata({
              svg: contents
            });
          } catch (error) {
            if (error.message === "INVALID") {
              throw new ImageSceneDataError(
                "Image doesn't contain scene",
                "IMAGE_NOT_CONTAINS_SCENE_DATA"
              );
            } else {
              throw new ImageSceneDataError("Error: cannot restore image");
            }
          }
        }
      }
      return contents;
    };
    getFileHandleType = (handle) => {
      if (!handle) {
        return null;
      }
      return handle.name.match(/\.(json|excalidraw|png|svg)$/)?.[1] || null;
    };
    isImageFileHandleType = (type) => {
      return type === "png" || type === "svg";
    };
    isImageFileHandle = (handle) => {
      const type = getFileHandleType(handle);
      return type === "png" || type === "svg";
    };
    isSupportedImageFile = (blob) => {
      const { type } = blob || {};
      return !!type && Object.values(IMAGE_MIME_TYPES).includes(type);
    };
    loadSceneOrLibraryFromBlob = async (blob, localAppState, localElements, fileHandle) => {
      const contents = await parseFileContents(blob);
      let data;
      try {
        try {
          data = JSON.parse(contents);
        } catch (error) {
          if (isSupportedImageFile(blob)) {
            throw new ImageSceneDataError(
              "Image doesn't contain scene",
              "IMAGE_NOT_CONTAINS_SCENE_DATA"
            );
          }
          throw error;
        }
        if (isValidExcalidrawData(data)) {
          return {
            type: MIME_TYPES.excalidraw,
            data: restore(
              {
                elements: clearElementsForExport(data.elements || []),
                appState: {
                  theme: localAppState?.theme,
                  fileHandle: fileHandle || blob.handle || null,
                  ...cleanAppStateForExport(data.appState || {}),
                  ...localAppState ? calculateScrollCenter(data.elements || [], localAppState) : {}
                },
                files: data.files
              },
              localAppState,
              localElements,
              { repairBindings: true, refreshDimensions: false }
            )
          };
        } else if (isValidLibrary(data)) {
          return {
            type: MIME_TYPES.excalidrawlib,
            data
          };
        }
        throw new Error("Error: invalid file");
      } catch (error) {
        if (error instanceof ImageSceneDataError) {
          throw error;
        }
        throw new Error("Error: invalid file");
      }
    };
    loadFromBlob = async (blob, localAppState, localElements, fileHandle) => {
      const ret = await loadSceneOrLibraryFromBlob(
        blob,
        localAppState,
        localElements,
        fileHandle
      );
      if (ret.type !== MIME_TYPES.excalidraw) {
        throw new Error("Error: invalid file");
      }
      return ret.data;
    };
    parseLibraryJSON = (json, defaultStatus = "unpublished") => {
      const data = JSON.parse(json);
      if (!isValidLibrary(data)) {
        throw new Error("Invalid library");
      }
      const libraryItems = data.libraryItems || data.library;
      return restoreLibraryItems(libraryItems, defaultStatus);
    };
    loadLibraryFromBlob = async (blob, defaultStatus = "unpublished") => {
      return parseLibraryJSON(await parseFileContents(blob), defaultStatus);
    };
    canvasToBlob = async (canvas2) => {
      return new Promise(async (resolve, reject) => {
        try {
          if (isPromiseLike(canvas2)) {
            canvas2 = await canvas2;
          }
          canvas2.toBlob((blob) => {
            if (!blob) {
              return reject(
                new CanvasError("Error: Canvas too big", "CANVAS_POSSIBLY_TOO_BIG")
              );
            }
            resolve(blob);
          });
        } catch (error) {
          reject(error);
        }
      });
    };
    generateIdFromFile = async (file2) => {
      try {
        const hashBuffer = await window.crypto.subtle.digest(
          "SHA-1",
          await blobToArrayBuffer(file2)
        );
        return bytesToHexString(new Uint8Array(hashBuffer));
      } catch (error) {
        console.error(error);
        return nanoid2(40);
      }
    };
    getDataURL = async (file2) => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const dataURL = reader.result;
          resolve(dataURL);
        };
        reader.onerror = (error) => reject(error);
        reader.readAsDataURL(file2);
      });
    };
    dataURLToFile = (dataURL, filename = "") => {
      const dataIndexStart = dataURL.indexOf(",");
      const byteString = atob(dataURL.slice(dataIndexStart + 1));
      const mimeType = dataURL.slice(0, dataIndexStart).split(":")[1].split(";")[0];
      const ab = new ArrayBuffer(byteString.length);
      const ia = new Uint8Array(ab);
      for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      return new File([ab], filename, { type: mimeType });
    };
    resizeImageFile = async (file2, opts) => {
      if (file2.type === MIME_TYPES.svg) {
        return file2;
      }
      const [pica, imageBlobReduce] = await Promise.all([
        import("pica").then((res) => res.default),
        // a wrapper for pica for better API
        import("image-blob-reduce").then((res) => res.default)
      ]);
      const reduce = imageBlobReduce({
        pica: pica({ features: ["js", "wasm"] })
      });
      if (opts.outputType) {
        const { outputType } = opts;
        reduce._create_blob = function(env) {
          return this.pica.toBlob(env.out_canvas, outputType, 0.8).then((blob) => {
            env.out_blob = blob;
            return env;
          });
        };
      }
      if (!isSupportedImageFile(file2)) {
        throw new Error("Error: unsupported file type", { cause: "UNSUPPORTED" });
      }
      return new File(
        [await reduce.toBlob(file2, { max: opts.maxWidthOrHeight })],
        file2.name,
        {
          type: opts.outputType || file2.type
        }
      );
    };
    SVGStringToFile = (SVGString, filename = "") => {
      return new File([new TextEncoder().encode(SVGString)], filename, {
        type: MIME_TYPES.svg
      });
    };
    ImageURLToFile = async (imageUrl, filename = "") => {
      let response;
      try {
        response = await fetch(imageUrl);
      } catch (error) {
        throw new Error("Error: failed to fetch image", { cause: "FETCH_ERROR" });
      }
      if (!response.ok) {
        throw new Error("Error: failed to fetch image", { cause: "FETCH_ERROR" });
      }
      const blob = await response.blob();
      if (blob.type && isSupportedImageFile(blob)) {
        const name = filename || blob.name || "";
        return new File([blob], name, { type: blob.type });
      }
      throw new Error("Error: unsupported file type", { cause: "UNSUPPORTED" });
    };
    getFileFromEvent = async (event) => {
      const file2 = event.dataTransfer.files.item(0);
      const fileHandle = await getFileHandle(event);
      return { file: file2 ? await normalizeFile(file2) : null, fileHandle };
    };
    getFileHandle = async (event) => {
      if (nativeFileSystemSupported) {
        try {
          const item = event.dataTransfer.items[0];
          const handle = await item.getAsFileSystemHandle() || null;
          return handle;
        } catch (error) {
          console.warn(error.name, error.message);
          return null;
        }
      }
      return null;
    };
    getActualMimeTypeFromImage = (buffer) => {
      let mimeType = null;
      const first8Bytes = `${[...new Uint8Array(buffer).slice(0, 8)].join(" ")} `;
      const headerBytes = {
        // https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_header
        png: "137 80 78 71 13 10 26 10 ",
        // https://en.wikipedia.org/wiki/JPEG#Syntax_and_structure
        // jpg is a bit wonky. Checking the first three bytes should be enough,
        // but may yield false positives. (https://stackoverflow.com/a/23360709/927631)
        jpg: "255 216 255 ",
        // https://en.wikipedia.org/wiki/GIF#Example_GIF_file
        gif: "71 73 70 56 57 97 "
      };
      if (first8Bytes === headerBytes.png) {
        mimeType = MIME_TYPES.png;
      } else if (first8Bytes.startsWith(headerBytes.jpg)) {
        mimeType = MIME_TYPES.jpg;
      } else if (first8Bytes.startsWith(headerBytes.gif)) {
        mimeType = MIME_TYPES.gif;
      }
      return mimeType;
    };
    createFile = (blob, mimeType, name) => {
      return new File([blob], name || "", {
        type: mimeType
      });
    };
    normalizeFile = async (file2) => {
      if (!file2.type) {
        if (file2?.name?.endsWith(".excalidrawlib")) {
          file2 = createFile(
            await blobToArrayBuffer(file2),
            MIME_TYPES.excalidrawlib,
            file2.name
          );
        } else if (file2?.name?.endsWith(".excalidraw")) {
          file2 = createFile(
            await blobToArrayBuffer(file2),
            MIME_TYPES.excalidraw,
            file2.name
          );
        } else {
          const buffer = await blobToArrayBuffer(file2);
          const mimeType = getActualMimeTypeFromImage(buffer);
          if (mimeType) {
            file2 = createFile(buffer, mimeType, file2.name);
          }
        }
      } else if (isSupportedImageFile(file2)) {
        const buffer = await blobToArrayBuffer(file2);
        const mimeType = getActualMimeTypeFromImage(buffer);
        if (mimeType && mimeType !== file2.type) {
          file2 = createFile(buffer, mimeType, file2.name);
        }
      }
      return file2;
    };
    blobToArrayBuffer = (blob) => {
      if ("arrayBuffer" in blob) {
        return blob.arrayBuffer();
      }
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (event) => {
          if (!event.target?.result) {
            return reject(new Error("Couldn't convert blob to ArrayBuffer"));
          }
          resolve(event.target.result);
        };
        reader.readAsArrayBuffer(blob);
      });
    };
  }
});

// data/encryption.ts
var init_encryption = __esm({
  "data/encryption.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_blob();
  }
});

// data/encode.ts
import { deflate, inflate } from "pako";
var toByteString, byteStringToArrayBuffer, byteStringToString, stringToBase64, base64ToString, base64ToArrayBuffer, encode, decode;
var init_encode = __esm({
  "data/encode.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_encryption();
    toByteString = (data) => {
      return new Promise((resolve, reject) => {
        const blob = typeof data === "string" ? new Blob([new TextEncoder().encode(data)]) : new Blob([data instanceof Uint8Array ? data : new Uint8Array(data)]);
        const reader = new FileReader();
        reader.onload = (event) => {
          if (!event.target || typeof event.target.result !== "string") {
            return reject(new Error("couldn't convert to byte string"));
          }
          resolve(event.target.result);
        };
        reader.readAsBinaryString(blob);
      });
    };
    byteStringToArrayBuffer = (byteString) => {
      const buffer = new ArrayBuffer(byteString.length);
      const bufferView = new Uint8Array(buffer);
      for (let i = 0, len = byteString.length; i < len; i++) {
        bufferView[i] = byteString.charCodeAt(i);
      }
      return buffer;
    };
    byteStringToString = (byteString) => {
      return new TextDecoder("utf-8").decode(byteStringToArrayBuffer(byteString));
    };
    stringToBase64 = async (str, isByteString = false) => {
      return isByteString ? window.btoa(str) : window.btoa(await toByteString(str));
    };
    base64ToString = async (base64, isByteString = false) => {
      return isByteString ? window.atob(base64) : byteStringToString(window.atob(base64));
    };
    base64ToArrayBuffer = (base64) => {
      if (typeof Buffer !== "undefined") {
        return Buffer.from(base64, "base64").buffer;
      }
      return byteStringToArrayBuffer(atob(base64));
    };
    encode = async ({
      text,
      compress
    }) => {
      let deflated;
      if (compress !== false) {
        try {
          deflated = await toByteString(deflate(text));
        } catch (error) {
          console.error("encode: cannot deflate", error);
        }
      }
      return {
        version: "1",
        encoding: "bstring",
        compressed: !!deflated,
        encoded: deflated || await toByteString(text)
      };
    };
    decode = async (data) => {
      let decoded;
      switch (data.encoding) {
        case "bstring":
          decoded = data.compressed ? data.encoded : await byteStringToString(data.encoded);
          break;
        default:
          throw new Error(`decode: unknown encoding "${data.encoding}"`);
      }
      if (data.compressed) {
        return inflate(new Uint8Array(byteStringToArrayBuffer(decoded)), {
          to: "string"
        });
      }
      return decoded;
    };
  }
});

// fonts/wasm/woff2.wasm.ts
var woff2_wasm_exports = {};
__export(woff2_wasm_exports, {
  default: () => woff2_wasm_default
});
var __toBinary, woff2_wasm_default;
var init_woff2_wasm = __esm({
  "fonts/wasm/woff2.wasm.ts"() {
    "use strict";
    init_define_import_meta_env();
    __toBinary = /* @__PURE__ */ (() => {
      const table = new Uint8Array(128);
      for (let i = 0; i < 64; i++) {
        table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
      }
      return (base64) => {
        const n = base64.length;
        const bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
        for (let i2 = 0, j = 0; i2 < n; ) {
          const c0 = table[base64.charCodeAt(i2++)];
          const c1 = table[base64.charCodeAt(i2++)];
          const c2 = table[base64.charCodeAt(i2++)];
          const c3 = table[base64.charCodeAt(i2++)];
          bytes[j++] = c0 << 2 | c1 >> 4;
          bytes[j++] = c1 << 4 | c2 >> 2;
          bytes[j++] = c2 << 6 | c3;
        }
        return bytes;
      };
    })();
    woff2_wasm_default = __toBinary(``);
  }
});

// fonts/wasm/woff2.bindings.ts
var woff2_bindings_exports = {};
__export(woff2_bindings_exports, {
  default: () => woff2_bindings_default
});
var Module, woff2_bindings_default;
var init_woff2_bindings = __esm({
  "fonts/wasm/woff2.bindings.ts"() {
    "use strict";
    init_define_import_meta_env();
    Module = function() {
      const _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      return function(Module2) {
        Module2 = Module2 || {};
        "use strict";
        var Module2 = typeof Module2 !== "undefined" ? Module2 : {};
        let moduleOverrides = {};
        let key;
        for (key in Module2) {
          if (Module2.hasOwnProperty(key)) {
            moduleOverrides[key] = Module2[key];
          }
        }
        let arguments_ = [];
        let thisProgram = "./this.program";
        let quit_ = function(status, toThrow) {
          throw toThrow;
        };
        let ENVIRONMENT_IS_WEB = false;
        let ENVIRONMENT_IS_WORKER = false;
        let ENVIRONMENT_IS_NODE = false;
        let ENVIRONMENT_HAS_NODE = false;
        let ENVIRONMENT_IS_SHELL = false;
        ENVIRONMENT_IS_WEB = typeof window === "object";
        ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        ENVIRONMENT_HAS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
        ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
        if (Module2.ENVIRONMENT) {
          throw new Error(
            "Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)"
          );
        }
        let scriptDirectory = "";
        function locateFile(path) {
          if (Module2.locateFile) {
            return Module2.locateFile(path, scriptDirectory);
          }
          return scriptDirectory + path;
        }
        let read_;
        let readAsync;
        let readBinary;
        let setWindowTitle;
        if (ENVIRONMENT_IS_NODE) {
          scriptDirectory = `${__dirname}/`;
          let nodeFS;
          let nodePath;
          read_ = function shell_read(filename, binary) {
            let ret;
            if (!nodeFS) {
              nodeFS = __require(["fs"].join());
            }
            if (!nodePath) {
              nodePath = __require(["path"].join());
            }
            filename = nodePath.normalize(filename);
            ret = nodeFS.readFileSync(filename);
            return binary ? ret : ret.toString();
          };
          readBinary = function readBinary2(filename) {
            let ret = read_(filename, true);
            if (!ret.buffer) {
              ret = new Uint8Array(ret);
            }
            assert(ret.buffer);
            return ret;
          };
          if (process.argv.length > 1) {
            thisProgram = process.argv[1].replace(/\\/g, "/");
          }
          arguments_ = process.argv.slice(2);
          process.on("uncaughtException", (ex) => {
            if (!(ex instanceof ExitStatus)) {
              throw ex;
            }
          });
          process.on("unhandledRejection", abort);
          quit_ = function(status) {
            process.exit(status);
          };
          Module2.inspect = function() {
            return "[Emscripten Module object]";
          };
        } else if (ENVIRONMENT_IS_SHELL) {
          if (typeof read != "undefined") {
            read_ = function shell_read(f) {
              return read(f);
            };
          }
          readBinary = function readBinary2(f) {
            let data;
            if (typeof readbuffer === "function") {
              return new Uint8Array(readbuffer(f));
            }
            data = read(f, "binary");
            assert(typeof data === "object");
            return data;
          };
          if (typeof scriptArgs != "undefined") {
            arguments_ = scriptArgs;
          } else if (typeof arguments != "undefined") {
            arguments_ = arguments;
          }
          if (typeof quit === "function") {
            quit_ = function(status) {
              quit(status);
            };
          }
          if (typeof print !== "undefined") {
            if (typeof console === "undefined") {
              console = {};
            }
            console.log = print;
            console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
          }
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
          if (ENVIRONMENT_IS_WORKER) {
            scriptDirectory = self.location.href;
          } else if (document.currentScript) {
            scriptDirectory = document.currentScript.src;
          }
          if (_scriptDir) {
            scriptDirectory = _scriptDir;
          }
          if (scriptDirectory.indexOf("blob:") !== 0) {
            scriptDirectory = scriptDirectory.substr(
              0,
              scriptDirectory.lastIndexOf("/") + 1
            );
          } else {
            scriptDirectory = "";
          }
          read_ = function shell_read(url) {
            const xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.send(null);
            return xhr.responseText;
          };
          if (ENVIRONMENT_IS_WORKER) {
            readBinary = function readBinary2(url) {
              const xhr = new XMLHttpRequest();
              xhr.open("GET", url, false);
              xhr.responseType = "arraybuffer";
              xhr.send(null);
              return new Uint8Array(xhr.response);
            };
          }
          readAsync = function readAsync2(url, onload, onerror) {
            const xhr = new XMLHttpRequest();
            xhr.open("GET", url, true);
            xhr.responseType = "arraybuffer";
            xhr.onload = function xhr_onload() {
              if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                onload(xhr.response);
                return;
              }
              onerror();
            };
            xhr.onerror = onerror;
            xhr.send(null);
          };
          setWindowTitle = function(title) {
            document.title = title;
          };
        } else {
          throw new Error("environment detection error");
        }
        let out = Module2.print || function() {
        };
        let err = Module2.printErr || function() {
        };
        for (key in moduleOverrides) {
          if (moduleOverrides.hasOwnProperty(key)) {
            Module2[key] = moduleOverrides[key];
          }
        }
        moduleOverrides = null;
        if (Module2.arguments) {
          arguments_ = Module2.arguments;
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "arguments")) {
          Object.defineProperty(Module2, "arguments", {
            configurable: true,
            get() {
              abort("Module.arguments has been replaced with plain arguments_");
            }
          });
        }
        if (Module2.thisProgram) {
          thisProgram = Module2.thisProgram;
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "thisProgram")) {
          Object.defineProperty(Module2, "thisProgram", {
            configurable: true,
            get() {
              abort("Module.thisProgram has been replaced with plain thisProgram");
            }
          });
        }
        if (Module2.quit) {
          quit_ = Module2.quit;
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "quit")) {
          Object.defineProperty(Module2, "quit", {
            configurable: true,
            get() {
              abort("Module.quit has been replaced with plain quit_");
            }
          });
        }
        assert(
          typeof Module2.memoryInitializerPrefixURL === "undefined",
          "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"
        );
        assert(
          typeof Module2.pthreadMainPrefixURL === "undefined",
          "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"
        );
        assert(
          typeof Module2.cdInitializerPrefixURL === "undefined",
          "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"
        );
        assert(
          typeof Module2.filePackagePrefixURL === "undefined",
          "Module.filePackagePrefixURL option was removed, use Module.locateFile instead"
        );
        assert(
          typeof Module2.read === "undefined",
          "Module.read option was removed (modify read_ in JS)"
        );
        assert(
          typeof Module2.readAsync === "undefined",
          "Module.readAsync option was removed (modify readAsync in JS)"
        );
        assert(
          typeof Module2.readBinary === "undefined",
          "Module.readBinary option was removed (modify readBinary in JS)"
        );
        assert(
          typeof Module2.setWindowTitle === "undefined",
          "Module.setWindowTitle option was removed (modify setWindowTitle in JS)"
        );
        if (!Object.getOwnPropertyDescriptor(Module2, "read")) {
          Object.defineProperty(Module2, "read", {
            configurable: true,
            get() {
              abort("Module.read has been replaced with plain read_");
            }
          });
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "readAsync")) {
          Object.defineProperty(Module2, "readAsync", {
            configurable: true,
            get() {
              abort("Module.readAsync has been replaced with plain readAsync");
            }
          });
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "readBinary")) {
          Object.defineProperty(Module2, "readBinary", {
            configurable: true,
            get() {
              abort("Module.readBinary has been replaced with plain readBinary");
            }
          });
        }
        stackSave = stackRestore = stackAlloc = function() {
          abort(
            "cannot use the stack before compiled code is ready to run, and has provided stack access"
          );
        };
        function warnOnce(text) {
          if (!warnOnce.shown) {
            warnOnce.shown = {};
          }
          if (!warnOnce.shown[text]) {
            warnOnce.shown[text] = 1;
            err(text);
          }
        }
        const asm2wasmImports = {
          "f64-rem"(x, y) {
            return x % y;
          },
          debugger() {
            debugger;
          }
        };
        const functionPointers = new Array(0);
        let tempRet0 = 0;
        const setTempRet0 = function(value) {
          tempRet0 = value;
        };
        let wasmBinary;
        if (Module2.wasmBinary) {
          wasmBinary = Module2.wasmBinary;
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "wasmBinary")) {
          Object.defineProperty(Module2, "wasmBinary", {
            configurable: true,
            get() {
              abort("Module.wasmBinary has been replaced with plain wasmBinary");
            }
          });
        }
        let noExitRuntime;
        if (Module2.noExitRuntime) {
          noExitRuntime = Module2.noExitRuntime;
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "noExitRuntime")) {
          Object.defineProperty(Module2, "noExitRuntime", {
            configurable: true,
            get() {
              abort(
                "Module.noExitRuntime has been replaced with plain noExitRuntime"
              );
            }
          });
        }
        if (typeof WebAssembly !== "object") {
          abort(
            "No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead."
          );
        }
        let wasmMemory;
        const wasmTable = new WebAssembly.Table({
          initial: 352,
          maximum: 352,
          element: "anyfunc"
        });
        let ABORT = false;
        let EXITSTATUS = 0;
        function assert(condition, text) {
          if (!condition) {
            abort(`Assertion failed: ${text}`);
          }
        }
        function getCFunc(ident) {
          const func = Module2[`_${ident}`];
          assert(
            func,
            `Cannot call unknown function ${ident}, make sure it is exported`
          );
          return func;
        }
        function ccall(ident, returnType, argTypes, args, opts) {
          const toC = {
            string(str) {
              let ret2 = 0;
              if (str !== null && str !== void 0 && str !== 0) {
                const len = (str.length << 2) + 1;
                ret2 = stackAlloc(len);
                stringToUTF8(str, ret2, len);
              }
              return ret2;
            },
            array(arr) {
              const ret2 = stackAlloc(arr.length);
              writeArrayToMemory(arr, ret2);
              return ret2;
            }
          };
          function convertReturnValue(ret2) {
            if (returnType === "string") {
              return UTF8ToString(ret2);
            }
            if (returnType === "boolean") {
              return Boolean(ret2);
            }
            return ret2;
          }
          const func = getCFunc(ident);
          const cArgs = [];
          let stack = 0;
          assert(returnType !== "array", 'Return type should not be "array".');
          if (args) {
            for (let i = 0; i < args.length; i++) {
              const converter = toC[argTypes[i]];
              if (converter) {
                if (stack === 0) {
                  stack = stackSave();
                }
                cArgs[i] = converter(args[i]);
              } else {
                cArgs[i] = args[i];
              }
            }
          }
          let ret = func.apply(null, cArgs);
          ret = convertReturnValue(ret);
          if (stack !== 0) {
            stackRestore(stack);
          }
          return ret;
        }
        function cwrap(ident, returnType, argTypes, opts) {
          return function() {
            return ccall(ident, returnType, argTypes, arguments, opts);
          };
        }
        const UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
        function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
          const endIdx = idx + maxBytesToRead;
          let endPtr = idx;
          while (u8Array[endPtr] && !(endPtr >= endIdx)) {
            ++endPtr;
          }
          if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
            return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
          }
          let str = "";
          while (idx < endPtr) {
            let u0 = u8Array[idx++];
            if (!(u0 & 128)) {
              str += String.fromCharCode(u0);
              continue;
            }
            const u1 = u8Array[idx++] & 63;
            if ((u0 & 224) == 192) {
              str += String.fromCharCode((u0 & 31) << 6 | u1);
              continue;
            }
            const u2 = u8Array[idx++] & 63;
            if ((u0 & 240) == 224) {
              u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
              if ((u0 & 248) != 240) {
                warnOnce(
                  `Invalid UTF-8 leading byte 0x${u0.toString(
                    16
                  )} encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!`
                );
              }
              u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
            }
            if (u0 < 65536) {
              str += String.fromCharCode(u0);
            } else {
              const ch = u0 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            }
          }
          return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
          return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
          if (!(maxBytesToWrite > 0)) {
            return 0;
          }
          const startIdx = outIdx;
          const endIdx = outIdx + maxBytesToWrite - 1;
          for (let i = 0; i < str.length; ++i) {
            let u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) {
              const u1 = str.charCodeAt(++i);
              u = 65536 + ((u & 1023) << 10) | u1 & 1023;
            }
            if (u <= 127) {
              if (outIdx >= endIdx) {
                break;
              }
              outU8Array[outIdx++] = u;
            } else if (u <= 2047) {
              if (outIdx + 1 >= endIdx) {
                break;
              }
              outU8Array[outIdx++] = 192 | u >> 6;
              outU8Array[outIdx++] = 128 | u & 63;
            } else if (u <= 65535) {
              if (outIdx + 2 >= endIdx) {
                break;
              }
              outU8Array[outIdx++] = 224 | u >> 12;
              outU8Array[outIdx++] = 128 | u >> 6 & 63;
              outU8Array[outIdx++] = 128 | u & 63;
            } else {
              if (outIdx + 3 >= endIdx) {
                break;
              }
              if (u >= 2097152) {
                warnOnce(
                  `Invalid Unicode code point 0x${u.toString(
                    16
                  )} encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).`
                );
              }
              outU8Array[outIdx++] = 240 | u >> 18;
              outU8Array[outIdx++] = 128 | u >> 12 & 63;
              outU8Array[outIdx++] = 128 | u >> 6 & 63;
              outU8Array[outIdx++] = 128 | u & 63;
            }
          }
          outU8Array[outIdx] = 0;
          return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
          assert(
            typeof maxBytesToWrite == "number",
            "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          );
          return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
        }
        function lengthBytesUTF8(str) {
          let len = 0;
          for (let i = 0; i < str.length; ++i) {
            let u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) {
              u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
            }
            if (u <= 127) {
              ++len;
            } else if (u <= 2047) {
              len += 2;
            } else if (u <= 65535) {
              len += 3;
            } else {
              len += 4;
            }
          }
          return len;
        }
        const UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
        function writeArrayToMemory(array, buffer2) {
          assert(
            array.length >= 0,
            "writeArrayToMemory array must have a length (should be an array or typed array)"
          );
          HEAP8.set(array, buffer2);
        }
        const WASM_PAGE_SIZE = 65536;
        function alignUp(x, multiple) {
          if (x % multiple > 0) {
            x += multiple - x % multiple;
          }
          return x;
        }
        let buffer;
        let HEAP8;
        let HEAPU8;
        let HEAP16;
        let HEAPU16;
        let HEAP32;
        let HEAPU32;
        let HEAPF32;
        let HEAPF64;
        function updateGlobalBufferAndViews(buf) {
          buffer = buf;
          Module2.HEAP8 = HEAP8 = new Int8Array(buf);
          Module2.HEAP16 = HEAP16 = new Int16Array(buf);
          Module2.HEAP32 = HEAP32 = new Int32Array(buf);
          Module2.HEAPU8 = HEAPU8 = new Uint8Array(buf);
          Module2.HEAPU16 = HEAPU16 = new Uint16Array(buf);
          Module2.HEAPU32 = HEAPU32 = new Uint32Array(buf);
          Module2.HEAPF32 = HEAPF32 = new Float32Array(buf);
          Module2.HEAPF64 = HEAPF64 = new Float64Array(buf);
        }
        const STACK_BASE = 434112;
        const STACK_MAX = 5676992;
        const DYNAMIC_BASE = 5676992;
        const DYNAMICTOP_PTR = 433920;
        assert(STACK_BASE % 16 === 0, "stack must start aligned");
        assert(DYNAMIC_BASE % 16 === 0, "heap must start aligned");
        const TOTAL_STACK = 5242880;
        if (Module2.TOTAL_STACK) {
          assert(
            TOTAL_STACK === Module2.TOTAL_STACK,
            "the stack size can no longer be determined at runtime"
          );
        }
        let INITIAL_TOTAL_MEMORY = Module2.TOTAL_MEMORY || 16777216;
        if (!Object.getOwnPropertyDescriptor(Module2, "TOTAL_MEMORY")) {
          Object.defineProperty(Module2, "TOTAL_MEMORY", {
            configurable: true,
            get() {
              abort(
                "Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY"
              );
            }
          });
        }
        assert(
          INITIAL_TOTAL_MEMORY >= TOTAL_STACK,
          `TOTAL_MEMORY should be larger than TOTAL_STACK, was ${INITIAL_TOTAL_MEMORY}! (TOTAL_STACK=${TOTAL_STACK})`
        );
        assert(
          typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== void 0 && Int32Array.prototype.set !== void 0,
          "JS engine does not provide full typed array support"
        );
        if (Module2.wasmMemory) {
          wasmMemory = Module2.wasmMemory;
        } else {
          wasmMemory = new WebAssembly.Memory({
            initial: INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
          });
        }
        if (wasmMemory) {
          buffer = wasmMemory.buffer;
        }
        INITIAL_TOTAL_MEMORY = buffer.byteLength;
        assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
        updateGlobalBufferAndViews(buffer);
        HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
        function writeStackCookie() {
          assert((STACK_MAX & 3) == 0);
          HEAPU32[(STACK_MAX >> 2) - 1] = 34821223;
          HEAPU32[(STACK_MAX >> 2) - 2] = 2310721022;
          HEAP32[0] = 1668509029;
        }
        function checkStackCookie() {
          const cookie1 = HEAPU32[(STACK_MAX >> 2) - 1];
          const cookie2 = HEAPU32[(STACK_MAX >> 2) - 2];
          if (cookie1 != 34821223 || cookie2 != 2310721022) {
            abort(
              `Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x${cookie2.toString(
                16
              )} ${cookie1.toString(16)}`
            );
          }
          if (HEAP32[0] !== 1668509029) {
            abort(
              "Runtime error: The application has corrupted its heap memory area (address zero)!"
            );
          }
        }
        function abortStackOverflow(allocSize) {
          abort(
            `Stack overflow! Attempted to allocate ${allocSize} bytes on the stack, but stack has only ${STACK_MAX - stackSave() + allocSize} bytes available!`
          );
        }
        (function() {
          const h16 = new Int16Array(1);
          const h8 = new Int8Array(h16.buffer);
          h16[0] = 25459;
          if (h8[0] !== 115 || h8[1] !== 99) {
            throw "Runtime error: expected the system to be little-endian!";
          }
        })();
        function abortFnPtrError(ptr, sig) {
          abort(
            `Invalid function pointer ${ptr} called with signature '${sig}'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.`
          );
        }
        function callRuntimeCallbacks(callbacks) {
          while (callbacks.length > 0) {
            const callback = callbacks.shift();
            if (typeof callback == "function") {
              callback();
              continue;
            }
            const func = callback.func;
            if (typeof func === "number") {
              if (callback.arg === void 0) {
                Module2.dynCall_v(func);
              } else {
                Module2.dynCall_vi(func, callback.arg);
              }
            } else {
              func(callback.arg === void 0 ? null : callback.arg);
            }
          }
        }
        const __ATPRERUN__ = [];
        const __ATINIT__ = [];
        const __ATMAIN__ = [];
        const __ATPOSTRUN__ = [];
        let runtimeInitialized = false;
        let runtimeExited = false;
        function preRun() {
          if (Module2.preRun) {
            if (typeof Module2.preRun == "function") {
              Module2.preRun = [Module2.preRun];
            }
            while (Module2.preRun.length) {
              addOnPreRun(Module2.preRun.shift());
            }
          }
          callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
          checkStackCookie();
          assert(!runtimeInitialized);
          runtimeInitialized = true;
          callRuntimeCallbacks(__ATINIT__);
        }
        function preMain() {
          checkStackCookie();
          callRuntimeCallbacks(__ATMAIN__);
        }
        function exitRuntime() {
          checkStackCookie();
          runtimeExited = true;
        }
        function postRun() {
          checkStackCookie();
          if (Module2.postRun) {
            if (typeof Module2.postRun == "function") {
              Module2.postRun = [Module2.postRun];
            }
            while (Module2.postRun.length) {
              addOnPostRun(Module2.postRun.shift());
            }
          }
          callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
          __ATPRERUN__.unshift(cb);
        }
        function addOnPostRun(cb) {
          __ATPOSTRUN__.unshift(cb);
        }
        assert(
          Math.imul,
          "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        );
        assert(
          Math.fround,
          "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        );
        assert(
          Math.clz32,
          "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        );
        assert(
          Math.trunc,
          "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        );
        let runDependencies = 0;
        let runDependencyWatcher = null;
        let dependenciesFulfilled = null;
        const runDependencyTracking = {};
        function addRunDependency(id) {
          runDependencies++;
          if (Module2.monitorRunDependencies) {
            Module2.monitorRunDependencies(runDependencies);
          }
          if (id) {
            assert(!runDependencyTracking[id]);
            runDependencyTracking[id] = 1;
            if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
              runDependencyWatcher = setInterval(() => {
                if (ABORT) {
                  clearInterval(runDependencyWatcher);
                  runDependencyWatcher = null;
                  return;
                }
                let shown = false;
                for (const dep in runDependencyTracking) {
                  if (!shown) {
                    shown = true;
                    err("still waiting on run dependencies:");
                  }
                  err(`dependency: ${dep}`);
                }
                if (shown) {
                  err("(end of list)");
                }
              }, 1e4);
            }
          } else {
            err("warning: run dependency added without ID");
          }
        }
        function removeRunDependency(id) {
          runDependencies--;
          if (Module2.monitorRunDependencies) {
            Module2.monitorRunDependencies(runDependencies);
          }
          if (id) {
            assert(runDependencyTracking[id]);
            delete runDependencyTracking[id];
          } else {
            err("warning: run dependency removed without ID");
          }
          if (runDependencies == 0) {
            if (runDependencyWatcher !== null) {
              clearInterval(runDependencyWatcher);
              runDependencyWatcher = null;
            }
            if (dependenciesFulfilled) {
              const callback = dependenciesFulfilled;
              dependenciesFulfilled = null;
              callback();
            }
          }
        }
        Module2.preloadedImages = {};
        Module2.preloadedAudios = {};
        function abort(what) {
          if (Module2.onAbort) {
            Module2.onAbort(what);
          }
          what += "";
          out(what);
          err(what);
          ABORT = true;
          EXITSTATUS = 1;
          const extra = "";
          const output = `abort(${what}) at ${stackTrace()}${extra}`;
          throw output;
        }
        var FS = {
          error() {
            abort(
              "Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1"
            );
          },
          init() {
            FS.error();
          },
          createDataFile() {
            FS.error();
          },
          createPreloadedFile() {
            FS.error();
          },
          createLazyFile() {
            FS.error();
          },
          open() {
            FS.error();
          },
          mkdev() {
            FS.error();
          },
          registerDevice() {
            FS.error();
          },
          analyzePath() {
            FS.error();
          },
          loadFilesFromDB() {
            FS.error();
          },
          ErrnoError: function ErrnoError() {
            FS.error();
          }
        };
        Module2.FS_createDataFile = FS.createDataFile;
        Module2.FS_createPreloadedFile = FS.createPreloadedFile;
        const dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
          return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
        }
        let wasmBinaryFile = "woff2.wasm";
        if (!isDataURI(wasmBinaryFile)) {
          wasmBinaryFile = locateFile(wasmBinaryFile);
        }
        function getBinary() {
          try {
            if (wasmBinary) {
              return new Uint8Array(wasmBinary);
            }
            if (readBinary) {
              return readBinary(wasmBinaryFile);
            }
            throw "both async and sync fetching of the wasm failed";
          } catch (err2) {
            abort(err2);
          }
        }
        function getBinaryPromise() {
          if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then((response) => {
              if (!response.ok) {
                throw `failed to load wasm binary file at '${wasmBinaryFile}'`;
              }
              return response.arrayBuffer();
            }).catch(() => {
              return getBinary();
            });
          }
          return new Promise((resolve, reject) => {
            resolve(getBinary());
          });
        }
        function createWasm() {
          const info = {
            env: asmLibraryArg,
            wasi_unstable: asmLibraryArg,
            global: { NaN: NaN, Infinity: Infinity },
            "global.Math": Math,
            asm2wasm: asm2wasmImports
          };
          function receiveInstance(instance, module) {
            const exports = instance.exports;
            Module2.asm = exports;
            removeRunDependency("wasm-instantiate");
          }
          addRunDependency("wasm-instantiate");
          let trueModule = Module2;
          function receiveInstantiatedSource(output) {
            assert(
              Module2 === trueModule,
              "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"
            );
            trueModule = null;
            receiveInstance(output.instance);
          }
          function instantiateArrayBuffer(receiver) {
            return getBinaryPromise().then((binary) => {
              return WebAssembly.instantiate(binary, info);
            }).then(receiver, (reason) => {
              err(`failed to asynchronously prepare wasm: ${reason}`);
              abort(reason);
            });
          }
          function instantiateAsync() {
            if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function" && typeof process === "object" && process.versions && process.versions.node && +process.versions.node.split(".")[0] < 17) {
              fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                (response) => {
                  const result = WebAssembly.instantiateStreaming(response, info);
                  return result.then(receiveInstantiatedSource, (reason) => {
                    err(`wasm streaming compile failed: ${reason}`);
                    err("falling back to ArrayBuffer instantiation");
                    instantiateArrayBuffer(receiveInstantiatedSource);
                  });
                }
              );
            } else {
              return instantiateArrayBuffer(receiveInstantiatedSource);
            }
          }
          if (Module2.instantiateWasm) {
            try {
              const exports = Module2.instantiateWasm(info, receiveInstance);
              return exports;
            } catch (e) {
              err(`Module.instantiateWasm callback failed with error: ${e}`);
              return false;
            }
          }
          instantiateAsync();
          return {};
        }
        Module2.asm = createWasm;
        __ATINIT__.push({
          func() {
            globalCtors();
          }
        });
        const tempDoublePtr = 434096;
        assert(tempDoublePtr % 8 == 0);
        function demangle(func) {
          const __cxa_demangle_func = Module2.___cxa_demangle || Module2.__cxa_demangle;
          assert(__cxa_demangle_func);
          try {
            let s = func;
            if (s.startsWith("__Z")) {
              s = s.substr(1);
            }
            const len = lengthBytesUTF8(s) + 1;
            var buf = _malloc(len);
            stringToUTF8(s, buf, len);
            var status = _malloc(4);
            var ret = __cxa_demangle_func(buf, 0, 0, status);
            if (HEAP32[status >> 2] === 0 && ret) {
              return UTF8ToString(ret);
            }
          } catch (e) {
          } finally {
            if (buf) {
              _free(buf);
            }
            if (status) {
              _free(status);
            }
            if (ret) {
              _free(ret);
            }
          }
          return func;
        }
        function demangleAll(text) {
          const regex = /\b__Z[\w\d_]+/g;
          return text.replace(regex, (x) => {
            const y = demangle(x);
            return x === y ? x : `${y} [${x}]`;
          });
        }
        function jsStackTrace() {
          let err2 = new Error();
          if (!err2.stack) {
            try {
              throw new Error(0);
            } catch (e) {
              err2 = e;
            }
            if (!err2.stack) {
              return "(no stack trace available)";
            }
          }
          return err2.stack.toString();
        }
        function stackTrace() {
          let js = jsStackTrace();
          if (Module2.extraStackTrace) {
            js += `
${Module2.extraStackTrace()}`;
          }
          return demangleAll(js);
        }
        function ___assert_fail(condition, filename, line, func) {
          abort(
            `Assertion failed: ${UTF8ToString(condition)}, at: ${[
              filename ? UTF8ToString(filename) : "unknown filename",
              line,
              func ? UTF8ToString(func) : "unknown function"
            ]}`
          );
        }
        function ___cxa_allocate_exception(size) {
          return _malloc(size);
        }
        const ___exception_infos = {};
        let ___exception_last = 0;
        function ___cxa_throw(ptr, type, destructor) {
          ___exception_infos[ptr] = {
            ptr,
            adjusted: [ptr],
            type,
            destructor,
            refcount: 0,
            caught: false,
            rethrown: false
          };
          ___exception_last = ptr;
          if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
            __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
          } else {
            __ZSt18uncaught_exceptionv.uncaught_exceptions++;
          }
          throw `${ptr} - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.`;
        }
        function ___lock() {
        }
        function ___unlock() {
        }
        var PATH = {
          splitPath(filename) {
            const splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            return splitPathRe.exec(filename).slice(1);
          },
          normalizeArray(parts, allowAboveRoot) {
            let up = 0;
            for (let i = parts.length - 1; i >= 0; i--) {
              const last = parts[i];
              if (last === ".") {
                parts.splice(i, 1);
              } else if (last === "..") {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }
            if (allowAboveRoot) {
              for (; up; up--) {
                parts.unshift("..");
              }
            }
            return parts;
          },
          normalize(path) {
            const isAbsolute = path.charAt(0) === "/";
            const trailingSlash = path.substr(-1) === "/";
            path = PATH.normalizeArray(
              path.split("/").filter((p) => {
                return !!p;
              }),
              !isAbsolute
            ).join("/");
            if (!path && !isAbsolute) {
              path = ".";
            }
            if (path && trailingSlash) {
              path += "/";
            }
            return (isAbsolute ? "/" : "") + path;
          },
          dirname(path) {
            const result = PATH.splitPath(path);
            const root = result[0];
            let dir = result[1];
            if (!root && !dir) {
              return ".";
            }
            if (dir) {
              dir = dir.substr(0, dir.length - 1);
            }
            return root + dir;
          },
          basename(path) {
            if (path === "/") {
              return "/";
            }
            const lastSlash = path.lastIndexOf("/");
            if (lastSlash === -1) {
              return path;
            }
            return path.substr(lastSlash + 1);
          },
          extname(path) {
            return PATH.splitPath(path)[3];
          },
          join() {
            const paths = Array.prototype.slice.call(arguments, 0);
            return PATH.normalize(paths.join("/"));
          },
          join2(l, r) {
            return PATH.normalize(`${l}/${r}`);
          }
        };
        var SYSCALLS = {
          buffers: [null, [], []],
          printChar(stream, curr) {
            const buffer2 = SYSCALLS.buffers[stream];
            assert(buffer2);
            if (curr === 0 || curr === 10) {
              (stream === 1 ? out : err)(UTF8ArrayToString(buffer2, 0));
              buffer2.length = 0;
            } else {
              buffer2.push(curr);
            }
          },
          varargs: 0,
          get(varargs) {
            SYSCALLS.varargs += 4;
            const ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
            return ret;
          },
          getStr() {
            const ret = UTF8ToString(SYSCALLS.get());
            return ret;
          },
          get64() {
            const low = SYSCALLS.get();
            const high = SYSCALLS.get();
            if (low >= 0) {
              assert(high === 0);
            } else {
              assert(high === -1);
            }
            return low;
          },
          getZero() {
            assert(SYSCALLS.get() === 0);
          }
        };
        function _fd_close(fd) {
          try {
            abort(
              "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
            );
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) {
              abort(e);
            }
            return e.errno;
          }
        }
        function ___wasi_fd_close() {
          return _fd_close.apply(null, arguments);
        }
        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
          try {
            abort(
              "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
            );
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) {
              abort(e);
            }
            return e.errno;
          }
        }
        function ___wasi_fd_seek() {
          return _fd_seek.apply(null, arguments);
        }
        function flush_NO_FILESYSTEM() {
          const fflush = Module2._fflush;
          if (fflush) {
            fflush(0);
          }
          const buffers = SYSCALLS.buffers;
          if (buffers[1].length) {
            SYSCALLS.printChar(1, 10);
          }
          if (buffers[2].length) {
            SYSCALLS.printChar(2, 10);
          }
        }
        function _fd_write(fd, iov, iovcnt, pnum) {
          try {
            let num = 0;
            for (let i = 0; i < iovcnt; i++) {
              const ptr = HEAP32[iov + i * 8 >> 2];
              const len = HEAP32[iov + (i * 8 + 4) >> 2];
              for (let j = 0; j < len; j++) {
                SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
              }
              num += len;
            }
            HEAP32[pnum >> 2] = num;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) {
              abort(e);
            }
            return e.errno;
          }
        }
        function ___wasi_fd_write() {
          return _fd_write.apply(null, arguments);
        }
        function getShiftFromSize(size) {
          switch (size) {
            case 1:
              return 0;
            case 2:
              return 1;
            case 4:
              return 2;
            case 8:
              return 3;
            default:
              throw new TypeError(`Unknown type size: ${size}`);
          }
        }
        function embind_init_charCodes() {
          const codes = new Array(256);
          for (let i = 0; i < 256; ++i) {
            codes[i] = String.fromCharCode(i);
          }
          embind_charCodes = codes;
        }
        var embind_charCodes = void 0;
        function readLatin1String(ptr) {
          let ret = "";
          let c = ptr;
          while (HEAPU8[c]) {
            ret += embind_charCodes[HEAPU8[c++]];
          }
          return ret;
        }
        const awaitingDependencies = {};
        const registeredTypes = {};
        const typeDependencies = {};
        const char_0 = 48;
        const char_9 = 57;
        function makeLegalFunctionName(name) {
          if (void 0 === name) {
            return "_unknown";
          }
          name = name.replace(/[^a-zA-Z0-9_]/g, "$");
          const f = name.charCodeAt(0);
          if (f >= char_0 && f <= char_9) {
            return `_${name}`;
          }
          return name;
        }
        function createNamedFunction(name, body) {
          name = makeLegalFunctionName(name);
          return new Function(
            "body",
            `return function ${name}() {
    "use strict";    return body.apply(this, arguments);
};
`
          )(body);
        }
        function extendError(baseErrorType, errorName) {
          const errorClass = createNamedFunction(errorName, function(message) {
            this.name = errorName;
            this.message = message;
            const stack = new Error(message).stack;
            if (stack !== void 0) {
              this.stack = `${this.toString()}
${stack.replace(
                /^Error(:[^\n]*)?\n/,
                ""
              )}`;
            }
          });
          errorClass.prototype = Object.create(baseErrorType.prototype);
          errorClass.prototype.constructor = errorClass;
          errorClass.prototype.toString = function() {
            if (this.message === void 0) {
              return this.name;
            }
            return `${this.name}: ${this.message}`;
          };
          return errorClass;
        }
        let BindingError = void 0;
        function throwBindingError(message) {
          throw new BindingError(message);
        }
        let InternalError = void 0;
        function throwInternalError(message) {
          throw new InternalError(message);
        }
        function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
          myTypes.forEach((type) => {
            typeDependencies[type] = dependentTypes;
          });
          function onComplete(typeConverters2) {
            const myTypeConverters = getTypeConverters(typeConverters2);
            if (myTypeConverters.length !== myTypes.length) {
              throwInternalError("Mismatched type converter count");
            }
            for (let i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
            }
          }
          const typeConverters = new Array(dependentTypes.length);
          const unregisteredTypes = [];
          let registered = 0;
          dependentTypes.forEach((dt, i) => {
            if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
            } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(() => {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                  onComplete(typeConverters);
                }
              });
            }
          });
          if (0 === unregisteredTypes.length) {
            onComplete(typeConverters);
          }
        }
        function registerType(rawType, registeredInstance, options) {
          options = options || {};
          if (!("argPackAdvance" in registeredInstance)) {
            throw new TypeError(
              "registerType registeredInstance requires argPackAdvance"
            );
          }
          const name = registeredInstance.name;
          if (!rawType) {
            throwBindingError(
              `type "${name}" must have a positive integer typeid pointer`
            );
          }
          if (registeredTypes.hasOwnProperty(rawType)) {
            if (options.ignoreDuplicateRegistrations) {
              return;
            }
            throwBindingError(`Cannot register type '${name}' twice`);
          }
          registeredTypes[rawType] = registeredInstance;
          delete typeDependencies[rawType];
          if (awaitingDependencies.hasOwnProperty(rawType)) {
            const callbacks = awaitingDependencies[rawType];
            delete awaitingDependencies[rawType];
            callbacks.forEach((cb) => {
              cb();
            });
          }
        }
        function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
          const shift = getShiftFromSize(size);
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            fromWireType(wt) {
              return !!wt;
            },
            toWireType(destructors, o) {
              return o ? trueValue : falseValue;
            },
            argPackAdvance: 8,
            readValueFromPointer(pointer) {
              let heap;
              if (size === 1) {
                heap = HEAP8;
              } else if (size === 2) {
                heap = HEAP16;
              } else if (size === 4) {
                heap = HEAP32;
              } else {
                throw new TypeError(`Unknown boolean type size: ${name}`);
              }
              return this.fromWireType(heap[pointer >> shift]);
            },
            destructorFunction: null
          });
        }
        function ClassHandle_isAliasOf(other) {
          if (!(this instanceof ClassHandle)) {
            return false;
          }
          if (!(other instanceof ClassHandle)) {
            return false;
          }
          let leftClass = this.$$.ptrType.registeredClass;
          let left = this.$$.ptr;
          let rightClass = other.$$.ptrType.registeredClass;
          let right = other.$$.ptr;
          while (leftClass.baseClass) {
            left = leftClass.upcast(left);
            leftClass = leftClass.baseClass;
          }
          while (rightClass.baseClass) {
            right = rightClass.upcast(right);
            rightClass = rightClass.baseClass;
          }
          return leftClass === rightClass && left === right;
        }
        function shallowCopyInternalPointer(o) {
          return {
            count: o.count,
            deleteScheduled: o.deleteScheduled,
            preservePointerOnDelete: o.preservePointerOnDelete,
            ptr: o.ptr,
            ptrType: o.ptrType,
            smartPtr: o.smartPtr,
            smartPtrType: o.smartPtrType
          };
        }
        function throwInstanceAlreadyDeleted(obj) {
          function getInstanceTypeName(handle) {
            return handle.$$.ptrType.registeredClass.name;
          }
          throwBindingError(`${getInstanceTypeName(obj)} instance already deleted`);
        }
        let finalizationGroup = false;
        function detachFinalizer(handle) {
        }
        function runDestructor($$) {
          if ($$.smartPtr) {
            $$.smartPtrType.rawDestructor($$.smartPtr);
          } else {
            $$.ptrType.registeredClass.rawDestructor($$.ptr);
          }
        }
        function releaseClassHandle($$) {
          $$.count.value -= 1;
          const toDelete = 0 === $$.count.value;
          if (toDelete) {
            runDestructor($$);
          }
        }
        function attachFinalizer(handle) {
          if ("undefined" === typeof FinalizationGroup) {
            attachFinalizer = function(handle2) {
              return handle2;
            };
            return handle;
          }
          finalizationGroup = new FinalizationGroup((iter) => {
            for (let result = iter.next(); !result.done; result = iter.next()) {
              const $$ = result.value;
              if (!$$.ptr) {
                console.warn(`object already deleted: ${$$.ptr}`);
              } else {
                releaseClassHandle($$);
              }
            }
          });
          attachFinalizer = function(handle2) {
            finalizationGroup.register(handle2, handle2.$$, handle2.$$);
            return handle2;
          };
          detachFinalizer = function(handle2) {
            finalizationGroup.unregister(handle2.$$);
          };
          return attachFinalizer(handle);
        }
        function ClassHandle_clone() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.preservePointerOnDelete) {
            this.$$.count.value += 1;
            return this;
          }
          const clone2 = attachFinalizer(
            Object.create(Object.getPrototypeOf(this), {
              $$: { value: shallowCopyInternalPointer(this.$$) }
            })
          );
          clone2.$$.count.value += 1;
          clone2.$$.deleteScheduled = false;
          return clone2;
        }
        function ClassHandle_delete() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
          }
          detachFinalizer(this);
          releaseClassHandle(this.$$);
          if (!this.$$.preservePointerOnDelete) {
            this.$$.smartPtr = void 0;
            this.$$.ptr = void 0;
          }
        }
        function ClassHandle_isDeleted() {
          return !this.$$.ptr;
        }
        let delayFunction = void 0;
        const deletionQueue = [];
        function flushPendingDeletes() {
          while (deletionQueue.length) {
            const obj = deletionQueue.pop();
            obj.$$.deleteScheduled = false;
            obj.delete();
          }
        }
        function ClassHandle_deleteLater() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
          }
          deletionQueue.push(this);
          if (deletionQueue.length === 1 && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
          this.$$.deleteScheduled = true;
          return this;
        }
        function init_ClassHandle() {
          ClassHandle.prototype.isAliasOf = ClassHandle_isAliasOf;
          ClassHandle.prototype.clone = ClassHandle_clone;
          ClassHandle.prototype.delete = ClassHandle_delete;
          ClassHandle.prototype.isDeleted = ClassHandle_isDeleted;
          ClassHandle.prototype.deleteLater = ClassHandle_deleteLater;
        }
        function ClassHandle() {
        }
        const registeredPointers = {};
        function ensureOverloadTable(proto, methodName, humanName) {
          if (void 0 === proto[methodName].overloadTable) {
            const prevFunc = proto[methodName];
            proto[methodName] = function() {
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError(
                  `Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`
                );
              }
              return proto[methodName].overloadTable[arguments.length].apply(
                this,
                arguments
              );
            };
            proto[methodName].overloadTable = [];
            proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
          }
        }
        function exposePublicSymbol(name, value, numArguments) {
          if (Module2.hasOwnProperty(name)) {
            if (void 0 === numArguments || void 0 !== Module2[name].overloadTable && void 0 !== Module2[name].overloadTable[numArguments]) {
              throwBindingError(`Cannot register public name '${name}' twice`);
            }
            ensureOverloadTable(Module2, name, name);
            if (Module2.hasOwnProperty(numArguments)) {
              throwBindingError(
                `Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`
              );
            }
            Module2[name].overloadTable[numArguments] = value;
          } else {
            Module2[name] = value;
            if (void 0 !== numArguments) {
              Module2[name].numArguments = numArguments;
            }
          }
        }
        function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
          this.name = name;
          this.constructor = constructor;
          this.instancePrototype = instancePrototype;
          this.rawDestructor = rawDestructor;
          this.baseClass = baseClass;
          this.getActualType = getActualType;
          this.upcast = upcast;
          this.downcast = downcast;
          this.pureVirtualFunctions = [];
        }
        function upcastPointer(ptr, ptrClass, desiredClass) {
          while (ptrClass !== desiredClass) {
            if (!ptrClass.upcast) {
              throwBindingError(
                `Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`
              );
            }
            ptr = ptrClass.upcast(ptr);
            ptrClass = ptrClass.baseClass;
          }
          return ptr;
        }
        function constNoSmartPtrRawPointerToWireType(destructors, handle) {
          if (handle === null) {
            if (this.isReference) {
              throwBindingError(`null is not a valid ${this.name}`);
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError(
              `Cannot pass "${_embind_repr(handle)}" as a ${this.name}`
            );
          }
          if (!handle.$$.ptr) {
            throwBindingError(
              `Cannot pass deleted object as a pointer of type ${this.name}`
            );
          }
          const handleClass = handle.$$.ptrType.registeredClass;
          const ptr = upcastPointer(
            handle.$$.ptr,
            handleClass,
            this.registeredClass
          );
          return ptr;
        }
        function genericPointerToWireType(destructors, handle) {
          let ptr;
          if (handle === null) {
            if (this.isReference) {
              throwBindingError(`null is not a valid ${this.name}`);
            }
            if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError(
              `Cannot pass "${_embind_repr(handle)}" as a ${this.name}`
            );
          }
          if (!handle.$$.ptr) {
            throwBindingError(
              `Cannot pass deleted object as a pointer of type ${this.name}`
            );
          }
          if (!this.isConst && handle.$$.ptrType.isConst) {
            throwBindingError(
              `Cannot convert argument of type ${handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name} to parameter type ${this.name}`
            );
          }
          const handleClass = handle.$$.ptrType.registeredClass;
          ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          if (this.isSmartPointer) {
            if (void 0 === handle.$$.smartPtr) {
              throwBindingError("Passing raw pointer to smart pointer is illegal");
            }
            switch (this.sharingPolicy) {
              case 0:
                if (handle.$$.smartPtrType === this) {
                  ptr = handle.$$.smartPtr;
                } else {
                  throwBindingError(
                    `Cannot convert argument of type ${handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name} to parameter type ${this.name}`
                  );
                }
                break;
              case 1:
                ptr = handle.$$.smartPtr;
                break;
              case 2:
                if (handle.$$.smartPtrType === this) {
                  ptr = handle.$$.smartPtr;
                } else {
                  const clonedHandle = handle.clone();
                  ptr = this.rawShare(
                    ptr,
                    __emval_register(() => {
                      clonedHandle.delete();
                    })
                  );
                  if (destructors !== null) {
                    destructors.push(this.rawDestructor, ptr);
                  }
                }
                break;
              default:
                throwBindingError("Unsupporting sharing policy");
            }
          }
          return ptr;
        }
        function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
          if (handle === null) {
            if (this.isReference) {
              throwBindingError(`null is not a valid ${this.name}`);
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError(
              `Cannot pass "${_embind_repr(handle)}" as a ${this.name}`
            );
          }
          if (!handle.$$.ptr) {
            throwBindingError(
              `Cannot pass deleted object as a pointer of type ${this.name}`
            );
          }
          if (handle.$$.ptrType.isConst) {
            throwBindingError(
              `Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`
            );
          }
          const handleClass = handle.$$.ptrType.registeredClass;
          const ptr = upcastPointer(
            handle.$$.ptr,
            handleClass,
            this.registeredClass
          );
          return ptr;
        }
        function simpleReadValueFromPointer(pointer) {
          return this.fromWireType(HEAPU32[pointer >> 2]);
        }
        function RegisteredPointer_getPointee(ptr) {
          if (this.rawGetPointee) {
            ptr = this.rawGetPointee(ptr);
          }
          return ptr;
        }
        function RegisteredPointer_destructor(ptr) {
          if (this.rawDestructor) {
            this.rawDestructor(ptr);
          }
        }
        function RegisteredPointer_deleteObject(handle) {
          if (handle !== null) {
            handle.delete();
          }
        }
        function downcastPointer(ptr, ptrClass, desiredClass) {
          if (ptrClass === desiredClass) {
            return ptr;
          }
          if (void 0 === desiredClass.baseClass) {
            return null;
          }
          const rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
          if (rv === null) {
            return null;
          }
          return desiredClass.downcast(rv);
        }
        function getInheritedInstanceCount() {
          return Object.keys(registeredInstances).length;
        }
        function getLiveInheritedInstances() {
          const rv = [];
          for (const k in registeredInstances) {
            if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
            }
          }
          return rv;
        }
        function setDelayFunction(fn) {
          delayFunction = fn;
          if (deletionQueue.length && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
        }
        function init_embind() {
          Module2.getInheritedInstanceCount = getInheritedInstanceCount;
          Module2.getLiveInheritedInstances = getLiveInheritedInstances;
          Module2.flushPendingDeletes = flushPendingDeletes;
          Module2.setDelayFunction = setDelayFunction;
        }
        var registeredInstances = {};
        function getBasestPointer(class_, ptr) {
          if (ptr === void 0) {
            throwBindingError("ptr should not be undefined");
          }
          while (class_.baseClass) {
            ptr = class_.upcast(ptr);
            class_ = class_.baseClass;
          }
          return ptr;
        }
        function getInheritedInstance(class_, ptr) {
          ptr = getBasestPointer(class_, ptr);
          return registeredInstances[ptr];
        }
        function makeClassHandle(prototype, record) {
          if (!record.ptrType || !record.ptr) {
            throwInternalError("makeClassHandle requires ptr and ptrType");
          }
          const hasSmartPtrType = !!record.smartPtrType;
          const hasSmartPtr = !!record.smartPtr;
          if (hasSmartPtrType !== hasSmartPtr) {
            throwInternalError("Both smartPtrType and smartPtr must be specified");
          }
          record.count = { value: 1 };
          return attachFinalizer(
            Object.create(prototype, { $$: { value: record } })
          );
        }
        function RegisteredPointer_fromWireType(ptr) {
          const rawPointer = this.getPointee(ptr);
          if (!rawPointer) {
            this.destructor(ptr);
            return null;
          }
          const registeredInstance = getInheritedInstance(
            this.registeredClass,
            rawPointer
          );
          if (void 0 !== registeredInstance) {
            if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance.clone();
            }
            const rv = registeredInstance.clone();
            this.destructor(ptr);
            return rv;
          }
          function makeDefaultHandle() {
            if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr
              });
            }
            return makeClassHandle(this.registeredClass.instancePrototype, {
              ptrType: this,
              ptr
            });
          }
          const actualType = this.registeredClass.getActualType(rawPointer);
          const registeredPointerRecord = registeredPointers[actualType];
          if (!registeredPointerRecord) {
            return makeDefaultHandle.call(this);
          }
          let toType;
          if (this.isConst) {
            toType = registeredPointerRecord.constPointerType;
          } else {
            toType = registeredPointerRecord.pointerType;
          }
          const dp = downcastPointer(
            rawPointer,
            this.registeredClass,
            toType.registeredClass
          );
          if (dp === null) {
            return makeDefaultHandle.call(this);
          }
          if (this.isSmartPointer) {
            return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr
            });
          }
          return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp
          });
        }
        function init_RegisteredPointer() {
          RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
          RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
          RegisteredPointer.prototype.argPackAdvance = 8;
          RegisteredPointer.prototype.readValueFromPointer = simpleReadValueFromPointer;
          RegisteredPointer.prototype.deleteObject = RegisteredPointer_deleteObject;
          RegisteredPointer.prototype.fromWireType = RegisteredPointer_fromWireType;
        }
        function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
          this.name = name;
          this.registeredClass = registeredClass;
          this.isReference = isReference;
          this.isConst = isConst;
          this.isSmartPointer = isSmartPointer;
          this.pointeeType = pointeeType;
          this.sharingPolicy = sharingPolicy;
          this.rawGetPointee = rawGetPointee;
          this.rawConstructor = rawConstructor;
          this.rawShare = rawShare;
          this.rawDestructor = rawDestructor;
          if (!isSmartPointer && registeredClass.baseClass === void 0) {
            if (isConst) {
              this.toWireType = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
            } else {
              this.toWireType = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
            }
          } else {
            this.toWireType = genericPointerToWireType;
          }
        }
        function replacePublicSymbol(name, value, numArguments) {
          if (!Module2.hasOwnProperty(name)) {
            throwInternalError("Replacing nonexistant public symbol");
          }
          if (void 0 !== Module2[name].overloadTable && void 0 !== numArguments) {
            Module2[name].overloadTable[numArguments] = value;
          } else {
            Module2[name] = value;
            Module2[name].argCount = numArguments;
          }
        }
        function embind__requireFunction(signature, rawFunction) {
          signature = readLatin1String(signature);
          function makeDynCaller(dynCall) {
            const args = [];
            for (let i = 1; i < signature.length; ++i) {
              args.push(`a${i}`);
            }
            const name = `dynCall_${signature}_${rawFunction}`;
            let body = `return function ${name}(${args.join(", ")}) {
`;
            body += `    return dynCall(rawFunction${args.length ? ", " : ""}${args.join(", ")});
`;
            body += "};\n";
            return new Function("dynCall", "rawFunction", body)(
              dynCall,
              rawFunction
            );
          }
          let fp;
          if (Module2[`FUNCTION_TABLE_${signature}`] !== void 0) {
            fp = Module2[`FUNCTION_TABLE_${signature}`][rawFunction];
          } else if (typeof FUNCTION_TABLE !== "undefined") {
            fp = FUNCTION_TABLE[rawFunction];
          } else {
            let dc = Module2[`dynCall_${signature}`];
            if (dc === void 0) {
              dc = Module2[`dynCall_${signature.replace(/f/g, "d")}`];
              if (dc === void 0) {
                throwBindingError(`No dynCall invoker for signature: ${signature}`);
              }
            }
            fp = makeDynCaller(dc);
          }
          if (typeof fp !== "function") {
            throwBindingError(
              `unknown function pointer with signature ${signature}: ${rawFunction}`
            );
          }
          return fp;
        }
        let UnboundTypeError = void 0;
        function getTypeName(type) {
          const ptr = ___getTypeName(type);
          const rv = readLatin1String(ptr);
          _free(ptr);
          return rv;
        }
        function throwUnboundTypeError(message, types) {
          const unboundTypes = [];
          const seen = {};
          function visit(type) {
            if (seen[type]) {
              return;
            }
            if (registeredTypes[type]) {
              return;
            }
            if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
            }
            unboundTypes.push(type);
            seen[type] = true;
          }
          types.forEach(visit);
          throw new UnboundTypeError(
            `${message}: ${unboundTypes.map(getTypeName).join([", "])}`
          );
        }
        function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
          name = readLatin1String(name);
          getActualType = embind__requireFunction(
            getActualTypeSignature,
            getActualType
          );
          if (upcast) {
            upcast = embind__requireFunction(upcastSignature, upcast);
          }
          if (downcast) {
            downcast = embind__requireFunction(downcastSignature, downcast);
          }
          rawDestructor = embind__requireFunction(
            destructorSignature,
            rawDestructor
          );
          const legalFunctionName = makeLegalFunctionName(name);
          exposePublicSymbol(legalFunctionName, () => {
            throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [
              baseClassRawType
            ]);
          });
          whenDependentTypesAreResolved(
            [rawType, rawPointerType, rawConstPointerType],
            baseClassRawType ? [baseClassRawType] : [],
            (base) => {
              base = base[0];
              let baseClass;
              let basePrototype;
              if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
              } else {
                basePrototype = ClassHandle.prototype;
              }
              const constructor = createNamedFunction(
                legalFunctionName,
                function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError(`Use 'new' to construct ${name}`);
                  }
                  if (void 0 === registeredClass.constructor_body) {
                    throw new BindingError(`${name} has no accessible constructor`);
                  }
                  const body = registeredClass.constructor_body[arguments.length];
                  if (void 0 === body) {
                    throw new BindingError(
                      `Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(
                        registeredClass.constructor_body
                      ).toString()}) parameters instead!`
                    );
                  }
                  return body.apply(this, arguments);
                }
              );
              var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor }
              });
              constructor.prototype = instancePrototype;
              var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast
              );
              const referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false
              );
              const pointerConverter = new RegisteredPointer(
                `${name}*`,
                registeredClass,
                false,
                false,
                false
              );
              const constPointerConverter = new RegisteredPointer(
                `${name} const*`,
                registeredClass,
                false,
                true,
                false
              );
              registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
              };
              replacePublicSymbol(legalFunctionName, constructor);
              return [referenceConverter, pointerConverter, constPointerConverter];
            }
          );
        }
        function heap32VectorToArray(count, firstElement) {
          const array = [];
          for (let i = 0; i < count; i++) {
            array.push(HEAP32[(firstElement >> 2) + i]);
          }
          return array;
        }
        function runDestructors(destructors) {
          while (destructors.length) {
            const ptr = destructors.pop();
            const del = destructors.pop();
            del(ptr);
          }
        }
        function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
          const rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          invoker = embind__requireFunction(invokerSignature, invoker);
          whenDependentTypesAreResolved([], [rawClassType], (classType) => {
            classType = classType[0];
            const humanName = `constructor ${classType.name}`;
            if (void 0 === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
            }
            if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError(
                `Cannot register multiple constructors with identical number of parameters (${argCount - 1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`
              );
            }
            classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError(
                `Cannot construct ${classType.name} due to unbound types`,
                rawArgTypes
              );
            };
            whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                if (arguments.length !== argCount - 1) {
                  throwBindingError(
                    `${humanName} called with ${arguments.length} arguments, expected ${argCount - 1}`
                  );
                }
                const destructors = [];
                const args = new Array(argCount);
                args[0] = rawConstructor;
                for (let i = 1; i < argCount; ++i) {
                  args[i] = argTypes[i].toWireType(destructors, arguments[i - 1]);
                }
                const ptr = invoker.apply(null, args);
                runDestructors(destructors);
                return argTypes[0].fromWireType(ptr);
              };
              return [];
            });
            return [];
          });
        }
        function new_(constructor, argumentList) {
          if (!(constructor instanceof Function)) {
            throw new TypeError(
              `new_ called with constructor type ${typeof constructor} which is not a function`
            );
          }
          const dummy = createNamedFunction(
            constructor.name || "unknownFunctionName",
            () => {
            }
          );
          dummy.prototype = constructor.prototype;
          const obj = new dummy();
          const r = constructor.apply(obj, argumentList);
          return r instanceof Object ? r : obj;
        }
        function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
          const argCount = argTypes.length;
          if (argCount < 2) {
            throwBindingError(
              "argTypes array size mismatch! Must at least get return value and 'this' types!"
            );
          }
          const isClassMethodFunc = argTypes[1] !== null && classType !== null;
          let needsDestructorStack = false;
          for (var i = 1; i < argTypes.length; ++i) {
            if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
              needsDestructorStack = true;
              break;
            }
          }
          const returns = argTypes[0].name !== "void";
          let argsList = "";
          let argsListWired = "";
          for (var i = 0; i < argCount - 2; ++i) {
            argsList += `${i !== 0 ? ", " : ""}arg${i}`;
            argsListWired += `${i !== 0 ? ", " : ""}arg${i}Wired`;
          }
          let invokerFnBody = `return function ${makeLegalFunctionName(humanName)}(${argsList}) {
if (arguments.length !== ${argCount - 2}) {
throwBindingError('function ${humanName} called with ' + arguments.length + ' arguments, expected ${argCount - 2} args!');
}
`;
          if (needsDestructorStack) {
            invokerFnBody += "var destructors = [];\n";
          }
          const dtorStack = needsDestructorStack ? "destructors" : "null";
          const args1 = [
            "throwBindingError",
            "invoker",
            "fn",
            "runDestructors",
            "retType",
            "classParam"
          ];
          const args2 = [
            throwBindingError,
            cppInvokerFunc,
            cppTargetFunc,
            runDestructors,
            argTypes[0],
            argTypes[1]
          ];
          if (isClassMethodFunc) {
            invokerFnBody += `var thisWired = classParam.toWireType(${dtorStack}, this);
`;
          }
          for (var i = 0; i < argCount - 2; ++i) {
            invokerFnBody += `var arg${i}Wired = argType${i}.toWireType(${dtorStack}, arg${i}); // ${argTypes[i + 2].name}
`;
            args1.push(`argType${i}`);
            args2.push(argTypes[i + 2]);
          }
          if (isClassMethodFunc) {
            argsListWired = `thisWired${argsListWired.length > 0 ? ", " : ""}${argsListWired}`;
          }
          invokerFnBody += `${returns ? "var rv = " : ""}invoker(fn${argsListWired.length > 0 ? ", " : ""}${argsListWired});
`;
          if (needsDestructorStack) {
            invokerFnBody += "runDestructors(destructors);\n";
          } else {
            for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
              const paramName = i === 1 ? "thisWired" : `arg${i - 2}Wired`;
              if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += `${paramName}_dtor(${paramName}); // ${argTypes[i].name}
`;
                args1.push(`${paramName}_dtor`);
                args2.push(argTypes[i].destructorFunction);
              }
            }
          }
          if (returns) {
            invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
          } else {
          }
          invokerFnBody += "}\n";
          args1.push(invokerFnBody);
          const invokerFunction = new_(Function, args1).apply(null, args2);
          return invokerFunction;
        }
        function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
          const rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          methodName = readLatin1String(methodName);
          rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
          whenDependentTypesAreResolved([], [rawClassType], (classType) => {
            classType = classType[0];
            const humanName = `${classType.name}.${methodName}`;
            if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
            }
            function unboundTypesHandler() {
              throwUnboundTypeError(
                `Cannot call ${humanName} due to unbound types`,
                rawArgTypes
              );
            }
            const proto = classType.registeredClass.instancePrototype;
            const method = proto[methodName];
            if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
            } else {
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
            }
            whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
              const memberFunction = craftInvokerFunction(
                humanName,
                argTypes,
                classType,
                rawInvoker,
                context
              );
              if (void 0 === proto[methodName].overloadTable) {
                memberFunction.argCount = argCount - 2;
                proto[methodName] = memberFunction;
              } else {
                proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
              return [];
            });
            return [];
          });
        }
        const emval_free_list = [];
        const emval_handle_array = [
          {},
          { value: void 0 },
          { value: null },
          { value: true },
          { value: false }
        ];
        function __emval_decref(handle) {
          if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
            emval_handle_array[handle] = void 0;
            emval_free_list.push(handle);
          }
        }
        function count_emval_handles() {
          let count = 0;
          for (let i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== void 0) {
              ++count;
            }
          }
          return count;
        }
        function get_first_emval() {
          for (let i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== void 0) {
              return emval_handle_array[i];
            }
          }
          return null;
        }
        function init_emval() {
          Module2.count_emval_handles = count_emval_handles;
          Module2.get_first_emval = get_first_emval;
        }
        function __emval_register(value) {
          switch (value) {
            case void 0: {
              return 1;
            }
            case null: {
              return 2;
            }
            case true: {
              return 3;
            }
            case false: {
              return 4;
            }
            default: {
              const handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
              emval_handle_array[handle] = { refcount: 1, value };
              return handle;
            }
          }
        }
        function __embind_register_emval(rawType, name) {
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            fromWireType(handle) {
              const rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
            },
            toWireType(destructors, value) {
              return __emval_register(value);
            },
            argPackAdvance: 8,
            readValueFromPointer: simpleReadValueFromPointer,
            destructorFunction: null
          });
        }
        function _embind_repr(v) {
          if (v === null) {
            return "null";
          }
          const t2 = typeof v;
          if (t2 === "object" || t2 === "array" || t2 === "function") {
            return v.toString();
          }
          return `${v}`;
        }
        function floatReadValueFromPointer(name, shift) {
          switch (shift) {
            case 2:
              return function(pointer) {
                return this.fromWireType(HEAPF32[pointer >> 2]);
              };
            case 3:
              return function(pointer) {
                return this.fromWireType(HEAPF64[pointer >> 3]);
              };
            default:
              throw new TypeError(`Unknown float type: ${name}`);
          }
        }
        function __embind_register_float(rawType, name, size) {
          const shift = getShiftFromSize(size);
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            fromWireType(value) {
              return value;
            },
            toWireType(destructors, value) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError(
                  `Cannot convert "${_embind_repr(value)}" to ${this.name}`
                );
              }
              return value;
            },
            argPackAdvance: 8,
            readValueFromPointer: floatReadValueFromPointer(name, shift),
            destructorFunction: null
          });
        }
        function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
          const argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          name = readLatin1String(name);
          rawInvoker = embind__requireFunction(signature, rawInvoker);
          exposePublicSymbol(
            name,
            () => {
              throwUnboundTypeError(
                `Cannot call ${name} due to unbound types`,
                argTypes
              );
            },
            argCount - 1
          );
          whenDependentTypesAreResolved([], argTypes, (argTypes2) => {
            const invokerArgsArray = [argTypes2[0], null].concat(argTypes2.slice(1));
            replacePublicSymbol(
              name,
              craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn),
              argCount - 1
            );
            return [];
          });
        }
        function integerReadValueFromPointer(name, shift, signed) {
          switch (shift) {
            case 0:
              return signed ? function readS8FromPointer(pointer) {
                return HEAP8[pointer];
              } : function readU8FromPointer(pointer) {
                return HEAPU8[pointer];
              };
            case 1:
              return signed ? function readS16FromPointer(pointer) {
                return HEAP16[pointer >> 1];
              } : function readU16FromPointer(pointer) {
                return HEAPU16[pointer >> 1];
              };
            case 2:
              return signed ? function readS32FromPointer(pointer) {
                return HEAP32[pointer >> 2];
              } : function readU32FromPointer(pointer) {
                return HEAPU32[pointer >> 2];
              };
            default:
              throw new TypeError(`Unknown integer type: ${name}`);
          }
        }
        function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
          name = readLatin1String(name);
          if (maxRange === -1) {
            maxRange = 4294967295;
          }
          const shift = getShiftFromSize(size);
          let fromWireType = function(value) {
            return value;
          };
          if (minRange === 0) {
            const bitshift = 32 - 8 * size;
            fromWireType = function(value) {
              return value << bitshift >>> bitshift;
            };
          }
          const isUnsignedType = name.indexOf("unsigned") != -1;
          registerType(primitiveType, {
            name,
            fromWireType,
            toWireType(destructors, value) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError(
                  `Cannot convert "${_embind_repr(value)}" to ${this.name}`
                );
              }
              if (value < minRange || value > maxRange) {
                throw new TypeError(
                  `Passing a number "${_embind_repr(
                    value
                  )}" from JS side to C/C++ side to an argument of type "${name}", which is outside the valid range [${minRange}, ${maxRange}]!`
                );
              }
              return isUnsignedType ? value >>> 0 : value | 0;
            },
            argPackAdvance: 8,
            readValueFromPointer: integerReadValueFromPointer(
              name,
              shift,
              minRange !== 0
            ),
            destructorFunction: null
          });
        }
        function __embind_register_memory_view(rawType, dataTypeIndex, name) {
          const typeMapping = [
            Int8Array,
            Uint8Array,
            Int16Array,
            Uint16Array,
            Int32Array,
            Uint32Array,
            Float32Array,
            Float64Array
          ];
          const TA = typeMapping[dataTypeIndex];
          function decodeMemoryView(handle) {
            handle = handle >> 2;
            const heap = HEAPU32;
            const size = heap[handle];
            const data = heap[handle + 1];
            return new TA(heap.buffer, data, size);
          }
          name = readLatin1String(name);
          registerType(
            rawType,
            {
              name,
              fromWireType: decodeMemoryView,
              argPackAdvance: 8,
              readValueFromPointer: decodeMemoryView
            },
            { ignoreDuplicateRegistrations: true }
          );
        }
        function __embind_register_std_string(rawType, name) {
          name = readLatin1String(name);
          const stdStringIsUTF8 = name === "std::string";
          registerType(rawType, {
            name,
            fromWireType(value) {
              const length = HEAPU32[value >> 2];
              let str;
              if (stdStringIsUTF8) {
                const endChar = HEAPU8[value + 4 + length];
                let endCharSwap = 0;
                if (endChar != 0) {
                  endCharSwap = endChar;
                  HEAPU8[value + 4 + length] = 0;
                }
                let decodeStartPtr = value + 4;
                for (var i = 0; i <= length; ++i) {
                  const currentBytePtr = value + 4 + i;
                  if (HEAPU8[currentBytePtr] == 0) {
                    const stringSegment = UTF8ToString(decodeStartPtr);
                    if (str === void 0) {
                      str = stringSegment;
                    } else {
                      str += String.fromCharCode(0);
                      str += stringSegment;
                    }
                    decodeStartPtr = currentBytePtr + 1;
                  }
                }
                if (endCharSwap != 0) {
                  HEAPU8[value + 4 + length] = endCharSwap;
                }
              } else {
                const a = new Array(length);
                for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                }
                str = a.join("");
              }
              _free(value);
              return str;
            },
            toWireType(destructors, value) {
              if (Object.prototype.toString.call(value) === "[object ArrayBuffer]") {
                value = new Uint8Array(value);
              }
              let getLength;
              const valueIsOfTypeString = typeof value === "string";
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                throwBindingError("Cannot pass non-string to std::string");
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                getLength = function() {
                  return lengthBytesUTF8(value);
                };
              } else {
                getLength = function() {
                  return value.length;
                };
              }
              const length = getLength();
              const ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                stringToUTF8(value, ptr + 4, length + 1);
              } else if (valueIsOfTypeString) {
                for (var i = 0; i < length; ++i) {
                  const charCode = value.charCodeAt(i);
                  if (charCode > 255) {
                    _free(ptr);
                    throwBindingError(
                      "String has UTF-16 code units that do not fit in 8 bits"
                    );
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
                }
              } else {
                for (var i = 0; i < length; ++i) {
                  HEAPU8[ptr + 4 + i] = value[i];
                }
              }
              if (destructors !== null) {
                destructors.push(_free, ptr);
              }
              return ptr;
            },
            argPackAdvance: 8,
            readValueFromPointer: simpleReadValueFromPointer,
            destructorFunction(ptr) {
              _free(ptr);
            }
          });
        }
        function __embind_register_std_wstring(rawType, charSize, name) {
          name = readLatin1String(name);
          let getHeap;
          let shift;
          if (charSize === 2) {
            getHeap = function() {
              return HEAPU16;
            };
            shift = 1;
          } else if (charSize === 4) {
            getHeap = function() {
              return HEAPU32;
            };
            shift = 2;
          }
          registerType(rawType, {
            name,
            fromWireType(value) {
              const HEAP = getHeap();
              const length = HEAPU32[value >> 2];
              const a = new Array(length);
              const start2 = value + 4 >> shift;
              for (let i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start2 + i]);
              }
              _free(value);
              return a.join("");
            },
            toWireType(destructors, value) {
              const length = value.length;
              const ptr = _malloc(4 + length * charSize);
              const HEAP = getHeap();
              HEAPU32[ptr >> 2] = length;
              const start2 = ptr + 4 >> shift;
              for (let i = 0; i < length; ++i) {
                HEAP[start2 + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                destructors.push(_free, ptr);
              }
              return ptr;
            },
            argPackAdvance: 8,
            readValueFromPointer: simpleReadValueFromPointer,
            destructorFunction(ptr) {
              _free(ptr);
            }
          });
        }
        function __embind_register_void(rawType, name) {
          name = readLatin1String(name);
          registerType(rawType, {
            isVoid: true,
            name,
            argPackAdvance: 0,
            fromWireType() {
              return void 0;
            },
            toWireType(destructors, o) {
              return void 0;
            }
          });
        }
        function __emval_incref(handle) {
          if (handle > 4) {
            emval_handle_array[handle].refcount += 1;
          }
        }
        function requireRegisteredType(rawType, humanName) {
          const impl = registeredTypes[rawType];
          if (void 0 === impl) {
            throwBindingError(
              `${humanName} has unknown type ${getTypeName(rawType)}`
            );
          }
          return impl;
        }
        function __emval_take_value(type, argv) {
          type = requireRegisteredType(type, "_emval_take_value");
          const v = type.readValueFromPointer(argv);
          return __emval_register(v);
        }
        function _abort() {
          abort();
        }
        function _emscripten_get_heap_size() {
          return HEAP8.length;
        }
        function emscripten_realloc_buffer(size) {
          try {
            wasmMemory.grow(size - buffer.byteLength + 65535 >> 16);
            updateGlobalBufferAndViews(wasmMemory.buffer);
            return 1;
          } catch (e) {
            console.error(
              `emscripten_realloc_buffer: Attempted to grow heap from ${buffer.byteLength} bytes to ${size} bytes, but got error: ${e}`
            );
          }
        }
        function _emscripten_resize_heap(requestedSize) {
          const oldSize = _emscripten_get_heap_size();
          assert(requestedSize > oldSize);
          const PAGE_MULTIPLE = 65536;
          const LIMIT = 2147483648 - PAGE_MULTIPLE;
          if (requestedSize > LIMIT) {
            err(
              `Cannot enlarge memory, asked to go up to ${requestedSize} bytes, but the limit is ${LIMIT} bytes!`
            );
            return false;
          }
          const MIN_TOTAL_MEMORY = 16777216;
          let newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
          while (newSize < requestedSize) {
            if (newSize <= 536870912) {
              newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
            } else {
              newSize = Math.min(
                alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE),
                LIMIT
              );
            }
            if (newSize === oldSize) {
              warnOnce(
                `Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ${HEAP8.length}`
              );
            }
          }
          const replacement = emscripten_realloc_buffer(newSize);
          if (!replacement) {
            err(
              `Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`
            );
            return false;
          }
          return true;
        }
        function _exit(status) {
          exit(status);
        }
        function _llvm_log2_f32(x) {
          return Math.log(x) / Math.LN2;
        }
        function _llvm_log2_f64(a0) {
          return _llvm_log2_f32(a0);
        }
        function _llvm_trap() {
          abort("trap!");
        }
        function _emscripten_memcpy_big(dest, src, num) {
          HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
        }
        embind_init_charCodes();
        BindingError = Module2.BindingError = extendError(Error, "BindingError");
        InternalError = Module2.InternalError = extendError(Error, "InternalError");
        init_ClassHandle();
        init_RegisteredPointer();
        init_embind();
        UnboundTypeError = Module2.UnboundTypeError = extendError(
          Error,
          "UnboundTypeError"
        );
        init_emval();
        function nullFunc_i(x) {
          abortFnPtrError(x, "i");
        }
        function nullFunc_ii(x) {
          abortFnPtrError(x, "ii");
        }
        function nullFunc_iidiiii(x) {
          abortFnPtrError(x, "iidiiii");
        }
        function nullFunc_iii(x) {
          abortFnPtrError(x, "iii");
        }
        function nullFunc_iiii(x) {
          abortFnPtrError(x, "iiii");
        }
        function nullFunc_iiiii(x) {
          abortFnPtrError(x, "iiiii");
        }
        function nullFunc_jiji(x) {
          abortFnPtrError(x, "jiji");
        }
        function nullFunc_v(x) {
          abortFnPtrError(x, "v");
        }
        function nullFunc_vi(x) {
          abortFnPtrError(x, "vi");
        }
        function nullFunc_vii(x) {
          abortFnPtrError(x, "vii");
        }
        function nullFunc_viii(x) {
          abortFnPtrError(x, "viii");
        }
        function nullFunc_viiii(x) {
          abortFnPtrError(x, "viiii");
        }
        function nullFunc_viiiii(x) {
          abortFnPtrError(x, "viiiii");
        }
        function nullFunc_viiiiii(x) {
          abortFnPtrError(x, "viiiiii");
        }
        const asmGlobalArg = {};
        var asmLibraryArg = {
          ___assert_fail,
          ___cxa_allocate_exception,
          ___cxa_throw,
          ___lock,
          ___unlock,
          ___wasi_fd_close,
          ___wasi_fd_seek,
          ___wasi_fd_write,
          __embind_register_bool,
          __embind_register_class,
          __embind_register_class_constructor,
          __embind_register_class_function,
          __embind_register_emval,
          __embind_register_float,
          __embind_register_function,
          __embind_register_integer,
          __embind_register_memory_view,
          __embind_register_std_string,
          __embind_register_std_wstring,
          __embind_register_void,
          __emval_decref,
          __emval_incref,
          __emval_take_value,
          __memory_base: 1024,
          __table_base: 0,
          _abort,
          _emscripten_get_heap_size,
          _emscripten_memcpy_big,
          _emscripten_resize_heap,
          _exit,
          _llvm_log2_f64,
          _llvm_trap,
          abortStackOverflow,
          memory: wasmMemory,
          nullFunc_i,
          nullFunc_ii,
          nullFunc_iidiiii,
          nullFunc_iii,
          nullFunc_iiii,
          nullFunc_iiiii,
          nullFunc_jiji,
          nullFunc_v,
          nullFunc_vi,
          nullFunc_vii,
          nullFunc_viii,
          nullFunc_viiii,
          nullFunc_viiiii,
          nullFunc_viiiiii,
          setTempRet0,
          table: wasmTable
        };
        const asm = Module2.asm(asmGlobalArg, asmLibraryArg, buffer);
        Module2.asm = asm;
        var __ZSt18uncaught_exceptionv = Module2.__ZSt18uncaught_exceptionv = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.__ZSt18uncaught_exceptionv.apply(null, arguments);
        };
        const ___cxa_demangle = Module2.___cxa_demangle = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.___cxa_demangle.apply(null, arguments);
        };
        const ___embind_register_native_and_builtin_types = Module2.___embind_register_native_and_builtin_types = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.___embind_register_native_and_builtin_types.apply(
            null,
            arguments
          );
        };
        var ___getTypeName = Module2.___getTypeName = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.___getTypeName.apply(null, arguments);
        };
        const _fflush = Module2._fflush = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm._fflush.apply(null, arguments);
        };
        var _free = Module2._free = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm._free.apply(null, arguments);
        };
        var _malloc = Module2._malloc = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm._malloc.apply(null, arguments);
        };
        const establishStackSpace = Module2.establishStackSpace = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.establishStackSpace.apply(null, arguments);
        };
        var globalCtors = Module2.globalCtors = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.globalCtors.apply(null, arguments);
        };
        var stackAlloc = Module2.stackAlloc = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.stackAlloc.apply(null, arguments);
        };
        var stackRestore = Module2.stackRestore = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.stackRestore.apply(null, arguments);
        };
        var stackSave = Module2.stackSave = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.stackSave.apply(null, arguments);
        };
        const dynCall_i = Module2.dynCall_i = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_i.apply(null, arguments);
        };
        const dynCall_ii = Module2.dynCall_ii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_ii.apply(null, arguments);
        };
        const dynCall_iidiiii = Module2.dynCall_iidiiii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_iidiiii.apply(null, arguments);
        };
        const dynCall_iii = Module2.dynCall_iii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_iii.apply(null, arguments);
        };
        const dynCall_iiii = Module2.dynCall_iiii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_iiii.apply(null, arguments);
        };
        const dynCall_iiiii = Module2.dynCall_iiiii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_iiiii.apply(null, arguments);
        };
        const dynCall_jiji = Module2.dynCall_jiji = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_jiji.apply(null, arguments);
        };
        const dynCall_v = Module2.dynCall_v = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_v.apply(null, arguments);
        };
        const dynCall_vi = Module2.dynCall_vi = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_vi.apply(null, arguments);
        };
        const dynCall_vii = Module2.dynCall_vii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_vii.apply(null, arguments);
        };
        const dynCall_viii = Module2.dynCall_viii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_viii.apply(null, arguments);
        };
        const dynCall_viiii = Module2.dynCall_viiii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_viiii.apply(null, arguments);
        };
        const dynCall_viiiii = Module2.dynCall_viiiii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_viiiii.apply(null, arguments);
        };
        const dynCall_viiiiii = Module2.dynCall_viiiiii = function() {
          assert(
            runtimeInitialized,
            "you need to wait for the runtime to be ready (e.g. wait for main() to be called)"
          );
          assert(
            !runtimeExited,
            "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)"
          );
          return Module2.asm.dynCall_viiiiii.apply(null, arguments);
        };
        Module2.asm = asm;
        if (!Object.getOwnPropertyDescriptor(Module2, "intArrayFromString")) {
          Module2.intArrayFromString = function() {
            abort(
              "'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "intArrayToString")) {
          Module2.intArrayToString = function() {
            abort(
              "'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        Module2.ccall = ccall;
        Module2.cwrap = cwrap;
        if (!Object.getOwnPropertyDescriptor(Module2, "setValue")) {
          Module2.setValue = function() {
            abort(
              "'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getValue")) {
          Module2.getValue = function() {
            abort(
              "'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "allocate")) {
          Module2.allocate = function() {
            abort(
              "'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getMemory")) {
          Module2.getMemory = function() {
            abort(
              "'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "AsciiToString")) {
          Module2.AsciiToString = function() {
            abort(
              "'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stringToAscii")) {
          Module2.stringToAscii = function() {
            abort(
              "'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "UTF8ArrayToString")) {
          Module2.UTF8ArrayToString = function() {
            abort(
              "'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "UTF8ToString")) {
          Module2.UTF8ToString = function() {
            abort(
              "'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stringToUTF8Array")) {
          Module2.stringToUTF8Array = function() {
            abort(
              "'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        Module2.stringToUTF8 = stringToUTF8;
        if (!Object.getOwnPropertyDescriptor(Module2, "lengthBytesUTF8")) {
          Module2.lengthBytesUTF8 = function() {
            abort(
              "'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "UTF16ToString")) {
          Module2.UTF16ToString = function() {
            abort(
              "'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stringToUTF16")) {
          Module2.stringToUTF16 = function() {
            abort(
              "'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "lengthBytesUTF16")) {
          Module2.lengthBytesUTF16 = function() {
            abort(
              "'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "UTF32ToString")) {
          Module2.UTF32ToString = function() {
            abort(
              "'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stringToUTF32")) {
          Module2.stringToUTF32 = function() {
            abort(
              "'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "lengthBytesUTF32")) {
          Module2.lengthBytesUTF32 = function() {
            abort(
              "'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "allocateUTF8")) {
          Module2.allocateUTF8 = function() {
            abort(
              "'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stackTrace")) {
          Module2.stackTrace = function() {
            abort(
              "'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addOnPreRun")) {
          Module2.addOnPreRun = function() {
            abort(
              "'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addOnInit")) {
          Module2.addOnInit = function() {
            abort(
              "'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addOnPreMain")) {
          Module2.addOnPreMain = function() {
            abort(
              "'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addOnExit")) {
          Module2.addOnExit = function() {
            abort(
              "'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addOnPostRun")) {
          Module2.addOnPostRun = function() {
            abort(
              "'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "writeStringToMemory")) {
          Module2.writeStringToMemory = function() {
            abort(
              "'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "writeArrayToMemory")) {
          Module2.writeArrayToMemory = function() {
            abort(
              "'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "writeAsciiToMemory")) {
          Module2.writeAsciiToMemory = function() {
            abort(
              "'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addRunDependency")) {
          Module2.addRunDependency = function() {
            abort(
              "'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "removeRunDependency")) {
          Module2.removeRunDependency = function() {
            abort(
              "'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "ENV")) {
          Module2.ENV = function() {
            abort(
              "'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS")) {
          Module2.FS = function() {
            abort(
              "'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createFolder")) {
          Module2.FS_createFolder = function() {
            abort(
              "'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createPath")) {
          Module2.FS_createPath = function() {
            abort(
              "'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createDataFile")) {
          Module2.FS_createDataFile = function() {
            abort(
              "'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createPreloadedFile")) {
          Module2.FS_createPreloadedFile = function() {
            abort(
              "'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createLazyFile")) {
          Module2.FS_createLazyFile = function() {
            abort(
              "'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createLink")) {
          Module2.FS_createLink = function() {
            abort(
              "'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_createDevice")) {
          Module2.FS_createDevice = function() {
            abort(
              "'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "FS_unlink")) {
          Module2.FS_unlink = function() {
            abort(
              "'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "GL")) {
          Module2.GL = function() {
            abort(
              "'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "dynamicAlloc")) {
          Module2.dynamicAlloc = function() {
            abort(
              "'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "loadDynamicLibrary")) {
          Module2.loadDynamicLibrary = function() {
            abort(
              "'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "loadWebAssemblyModule")) {
          Module2.loadWebAssemblyModule = function() {
            abort(
              "'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getLEB")) {
          Module2.getLEB = function() {
            abort(
              "'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getFunctionTables")) {
          Module2.getFunctionTables = function() {
            abort(
              "'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "alignFunctionTables")) {
          Module2.alignFunctionTables = function() {
            abort(
              "'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "registerFunctions")) {
          Module2.registerFunctions = function() {
            abort(
              "'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "addFunction")) {
          Module2.addFunction = function() {
            abort(
              "'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "removeFunction")) {
          Module2.removeFunction = function() {
            abort(
              "'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getFuncWrapper")) {
          Module2.getFuncWrapper = function() {
            abort(
              "'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "prettyPrint")) {
          Module2.prettyPrint = function() {
            abort(
              "'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "makeBigInt")) {
          Module2.makeBigInt = function() {
            abort(
              "'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "dynCall")) {
          Module2.dynCall = function() {
            abort(
              "'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getCompilerSetting")) {
          Module2.getCompilerSetting = function() {
            abort(
              "'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stackSave")) {
          Module2.stackSave = function() {
            abort(
              "'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stackRestore")) {
          Module2.stackRestore = function() {
            abort(
              "'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "stackAlloc")) {
          Module2.stackAlloc = function() {
            abort(
              "'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "establishStackSpace")) {
          Module2.establishStackSpace = function() {
            abort(
              "'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "print")) {
          Module2.print = function() {
            abort(
              "'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "printErr")) {
          Module2.printErr = function() {
            abort(
              "'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "getTempRet0")) {
          Module2.getTempRet0 = function() {
            abort(
              "'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "setTempRet0")) {
          Module2.setTempRet0 = function() {
            abort(
              "'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "callMain")) {
          Module2.callMain = function() {
            abort(
              "'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "abort")) {
          Module2.abort = function() {
            abort(
              "'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "Pointer_stringify")) {
          Module2.Pointer_stringify = function() {
            abort(
              "'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "warnOnce")) {
          Module2.warnOnce = function() {
            abort(
              "'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
            );
          };
        }
        Module2.writeStackCookie = writeStackCookie;
        Module2.checkStackCookie = checkStackCookie;
        Module2.abortStackOverflow = abortStackOverflow;
        if (!Object.getOwnPropertyDescriptor(Module2, "ALLOC_NORMAL")) {
          Object.defineProperty(Module2, "ALLOC_NORMAL", {
            configurable: true,
            get() {
              abort(
                "'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
              );
            }
          });
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "ALLOC_STACK")) {
          Object.defineProperty(Module2, "ALLOC_STACK", {
            configurable: true,
            get() {
              abort(
                "'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
              );
            }
          });
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "ALLOC_DYNAMIC")) {
          Object.defineProperty(Module2, "ALLOC_DYNAMIC", {
            configurable: true,
            get() {
              abort(
                "'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
              );
            }
          });
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "ALLOC_NONE")) {
          Object.defineProperty(Module2, "ALLOC_NONE", {
            configurable: true,
            get() {
              abort(
                "'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
              );
            }
          });
        }
        if (!Object.getOwnPropertyDescriptor(Module2, "calledRun")) {
          Object.defineProperty(Module2, "calledRun", {
            configurable: true,
            get() {
              abort(
                "'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
              );
            }
          });
        }
        let calledRun;
        Module2.then = function(func) {
          if (calledRun) {
            func(Module2);
          } else {
            const old = Module2.onRuntimeInitialized;
            Module2.onRuntimeInitialized = function() {
              if (old) {
                old();
              }
              func(Module2);
            };
          }
          return Module2;
        };
        function ExitStatus(status) {
          this.name = "ExitStatus";
          this.message = `Program terminated with exit(${status})`;
          this.status = status;
        }
        dependenciesFulfilled = function runCaller() {
          if (!calledRun) {
            run();
          }
          if (!calledRun) {
            dependenciesFulfilled = runCaller;
          }
        };
        function run(args) {
          args = args || arguments_;
          if (runDependencies > 0) {
            return;
          }
          writeStackCookie();
          preRun();
          if (runDependencies > 0) {
            return;
          }
          function doRun() {
            if (calledRun) {
              return;
            }
            calledRun = true;
            if (ABORT) {
              return;
            }
            initRuntime();
            preMain();
            if (Module2.onRuntimeInitialized) {
              Module2.onRuntimeInitialized();
            }
            assert(
              !Module2._main,
              'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]'
            );
            postRun();
          }
          if (Module2.setStatus) {
            Module2.setStatus("Running...");
            setTimeout(() => {
              setTimeout(() => {
                Module2.setStatus("");
              }, 1);
              doRun();
            }, 1);
          } else {
            doRun();
          }
          checkStackCookie();
        }
        Module2.run = run;
        function checkUnflushedContent() {
          const print2 = out;
          const printErr2 = err;
          let has = false;
          out = err = function(x) {
            has = true;
          };
          try {
            const flush = flush_NO_FILESYSTEM;
            if (flush) {
              flush(0);
            }
          } catch (e) {
          }
          out = print2;
          err = printErr2;
          if (has) {
            warnOnce(
              "stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."
            );
            warnOnce(
              "(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)"
            );
          }
        }
        function exit(status, implicit) {
          checkUnflushedContent();
          if (implicit && noExitRuntime && status === 0) {
            return;
          }
          if (noExitRuntime) {
            if (!implicit) {
              err(
                `program exited (with status: ${status}), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)`
              );
            }
          } else {
            ABORT = true;
            EXITSTATUS = status;
            exitRuntime();
            if (Module2.onExit) {
              Module2.onExit(status);
            }
          }
          quit_(status, new ExitStatus(status));
        }
        if (Module2.preInit) {
          if (typeof Module2.preInit == "function") {
            Module2.preInit = [Module2.preInit];
          }
          while (Module2.preInit.length > 0) {
            Module2.preInit.pop()();
          }
        }
        noExitRuntime = true;
        run();
        return Module2;
      };
    }();
    woff2_bindings_default = Module;
  }
});

// fonts/wasm/woff2.loader.ts
var loadedWasm, load, woff2_loader_default;
var init_woff2_loader = __esm({
  "fonts/wasm/woff2.loader.ts"() {
    "use strict";
    init_define_import_meta_env();
    loadedWasm = null;
    load = () => {
      return new Promise(async (resolve, reject) => {
        try {
          const [binary, bindings] = await Promise.all([
            Promise.resolve().then(() => (init_woff2_wasm(), woff2_wasm_exports)),
            Promise.resolve().then(() => (init_woff2_bindings(), woff2_bindings_exports))
          ]);
          bindings.default({ wasmBinary: binary.default }).then(
            (module) => {
              try {
                let convertFromVecToUint8Array2 = function(vector2) {
                  const arr = [];
                  for (let i = 0, l = vector2.size(); i < l; i++) {
                    arr.push(vector2.get(i));
                  }
                  return new Uint8Array(arr);
                };
                var convertFromVecToUint8Array = convertFromVecToUint8Array2;
                const woff2 = {
                  compress: (buffer) => convertFromVecToUint8Array2(
                    module.woff2Enc(buffer, buffer.byteLength)
                  ),
                  decompress: (buffer) => convertFromVecToUint8Array2(
                    module.woff2Dec(buffer, buffer.byteLength)
                  )
                };
                resolve(woff2);
              } catch (e) {
                reject(e);
              }
            }
          );
        } catch (e) {
          reject(e);
        }
      });
    };
    woff2_loader_default = () => {
      if (!loadedWasm) {
        loadedWasm = load();
      }
      return loadedWasm;
    };
  }
});

// fonts/wasm/hb-subset.wasm.ts
var hb_subset_wasm_exports = {};
__export(hb_subset_wasm_exports, {
  default: () => hb_subset_wasm_default
});
var __toBinary2, hb_subset_wasm_default;
var init_hb_subset_wasm = __esm({
  "fonts/wasm/hb-subset.wasm.ts"() {
    "use strict";
    init_define_import_meta_env();
    __toBinary2 = /* @__PURE__ */ (() => {
      const table = new Uint8Array(128);
      for (let i = 0; i < 64; i++) {
        table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
      }
      return (base64) => {
        const n = base64.length;
        const bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
        for (let i2 = 0, j = 0; i2 < n; ) {
          const c0 = table[base64.charCodeAt(i2++)];
          const c1 = table[base64.charCodeAt(i2++)];
          const c2 = table[base64.charCodeAt(i2++)];
          const c3 = table[base64.charCodeAt(i2++)];
          bytes[j++] = c0 << 2 | c1 >> 4;
          bytes[j++] = c1 << 4 | c2 >> 2;
          bytes[j++] = c2 << 6 | c3;
        }
        return bytes;
      };
    })();
    hb_subset_wasm_default = __toBinary2(``);
  }
});

// fonts/wasm/hb-subset.bindings.ts
var hb_subset_bindings_exports = {};
__export(hb_subset_bindings_exports, {
  default: () => hb_subset_bindings_default
});
function subset(hbSubsetWasm, heapu8, font, codePoints) {
  const input = hbSubsetWasm.hb_subset_input_create_or_fail();
  if (input === 0) {
    throw new Error(
      "hb_subset_input_create_or_fail (harfbuzz) returned zero, indicating failure"
    );
  }
  const fontBuffer = hbSubsetWasm.malloc(font.byteLength);
  heapu8.set(new Uint8Array(font), fontBuffer);
  const blob = hbSubsetWasm.hb_blob_create(
    fontBuffer,
    font.byteLength,
    2,
    // HB_MEMORY_MODE_WRITABLE
    0,
    0
  );
  const face = hbSubsetWasm.hb_face_create(blob, 0);
  hbSubsetWasm.hb_blob_destroy(blob);
  const layoutFeatures = hbSubsetWasm.hb_subset_input_set(
    input,
    6
    // HB_SUBSET_SETS_LAYOUT_FEATURE_TAG
  );
  hbSubsetWasm.hb_set_clear(layoutFeatures);
  hbSubsetWasm.hb_set_invert(layoutFeatures);
  const inputUnicodes = hbSubsetWasm.hb_subset_input_unicode_set(input);
  for (const c of codePoints) {
    hbSubsetWasm.hb_set_add(inputUnicodes, c);
  }
  let subset2;
  try {
    subset2 = hbSubsetWasm.hb_subset_or_fail(face, input);
    if (subset2 === 0) {
      hbSubsetWasm.hb_face_destroy(face);
      hbSubsetWasm.free(fontBuffer);
      throw new Error(
        "hb_subset_or_fail (harfbuzz) returned zero, indicating failure. Maybe the input file is corrupted?"
      );
    }
  } finally {
    hbSubsetWasm.hb_subset_input_destroy(input);
  }
  const result = hbSubsetWasm.hb_face_reference_blob(subset2);
  const offset2 = hbSubsetWasm.hb_blob_get_data(result, 0);
  const subsetByteLength = hbSubsetWasm.hb_blob_get_length(result);
  if (subsetByteLength === 0) {
    hbSubsetWasm.hb_blob_destroy(result);
    hbSubsetWasm.hb_face_destroy(subset2);
    hbSubsetWasm.hb_face_destroy(face);
    hbSubsetWasm.free(fontBuffer);
    throw new Error(
      "Failed to create subset font, maybe the input file is corrupted?"
    );
  }
  const subsetFont = new Uint8Array(
    heapu8.subarray(offset2, offset2 + subsetByteLength)
  );
  hbSubsetWasm.hb_blob_destroy(result);
  hbSubsetWasm.hb_face_destroy(subset2);
  hbSubsetWasm.hb_face_destroy(face);
  hbSubsetWasm.free(fontBuffer);
  return subsetFont;
}
var hb_subset_bindings_default;
var init_hb_subset_bindings = __esm({
  "fonts/wasm/hb-subset.bindings.ts"() {
    "use strict";
    init_define_import_meta_env();
    hb_subset_bindings_default = {
      subset
    };
  }
});

// fonts/wasm/hb-subset.loader.ts
var loadedWasm2, load2, hb_subset_loader_default;
var init_hb_subset_loader = __esm({
  "fonts/wasm/hb-subset.loader.ts"() {
    "use strict";
    init_define_import_meta_env();
    loadedWasm2 = null;
    load2 = () => {
      return new Promise(async (resolve, reject) => {
        try {
          const [binary, bindings] = await Promise.all([
            Promise.resolve().then(() => (init_hb_subset_wasm(), hb_subset_wasm_exports)),
            Promise.resolve().then(() => (init_hb_subset_bindings(), hb_subset_bindings_exports))
          ]);
          WebAssembly.instantiate(binary.default).then((module) => {
            try {
              const harfbuzzJsWasm = module.instance.exports;
              const heapu8 = new Uint8Array(harfbuzzJsWasm.memory.buffer);
              const hbSubset = {
                subset: (fontBuffer, codePoints) => {
                  return bindings.default.subset(
                    harfbuzzJsWasm,
                    heapu8,
                    fontBuffer,
                    codePoints
                  );
                }
              };
              resolve(hbSubset);
            } catch (e) {
              reject(e);
            }
          });
        } catch (error) {
          reject(error);
        }
      });
    };
    hb_subset_loader_default = () => {
      if (!loadedWasm2) {
        loadedWasm2 = load2();
      }
      return loadedWasm2;
    };
  }
});

// fonts/ExcalidrawFont.ts
var UNPKG_FALLBACK_URL, ExcalidrawFont;
var init_ExcalidrawFont = __esm({
  "fonts/ExcalidrawFont.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_encode();
    init_metadata();
    init_woff2_loader();
    init_hb_subset_loader();
    UNPKG_FALLBACK_URL = `https://unpkg.com/${define_import_meta_env_default.VITE_PKG_NAME ? `${define_import_meta_env_default.VITE_PKG_NAME}@${define_import_meta_env_default.PKG_VERSION}` : "@excalidraw/excalidraw"}/dist/prod/`;
    ExcalidrawFont = class _ExcalidrawFont {
      urls;
      fontFace;
      constructor(family, uri, descriptors) {
        this.urls = _ExcalidrawFont.createUrls(uri);
        const sources = this.urls.map((url) => `url(${url}) ${_ExcalidrawFont.getFormat(url)}`).join(", ");
        this.fontFace = new FontFace(family, sources, {
          display: "swap",
          style: "normal",
          weight: "400",
          ...descriptors
        });
      }
      /**
       * Tries to fetch woff2 content, based on the registered urls (from first to last, treated as fallbacks).
       *
       * NOTE: assumes usage of `dataurl` outside the browser environment
       *
       * @returns base64 with subsetted glyphs based on the passed codepoint, last defined url otherwise
       */
      async getContent(codePoints) {
        let i = 0;
        const errorMessages = [];
        while (i < this.urls.length) {
          const url = this.urls[i];
          if (url.protocol === "data:") {
            const arrayBuffer = base64ToArrayBuffer(url.toString().split(",")[1]);
            const base64 = await _ExcalidrawFont.subsetGlyphsByCodePoints(
              arrayBuffer,
              codePoints
            );
            return base64;
          }
          try {
            const response = await fetch(url, {
              headers: {
                Accept: "font/woff2"
              }
            });
            if (response.ok) {
              const arrayBuffer = await response.arrayBuffer();
              const base64 = await _ExcalidrawFont.subsetGlyphsByCodePoints(
                arrayBuffer,
                codePoints
              );
              return base64;
            }
            errorMessages.push(
              `"${url.toString()}" returned status "${response.status}"`
            );
          } catch (e) {
            errorMessages.push(`"${url.toString()}" returned error "${e}"`);
          }
          i++;
        }
        console.error(
          `Failed to fetch font "${this.fontFace.family}" from urls "${this.urls.toString()}`,
          JSON.stringify(errorMessages, void 0, 2)
        );
        return this.urls.length ? this.urls[this.urls.length - 1].toString() : "";
      }
      /**
       * Tries to subset glyphs in a font based on the used codepoints, returning the font as daturl.
       *
       * @param arrayBuffer font data buffer, preferrably in the woff2 format, though others should work as well
       * @param codePoints codepoints used to subset the glyphs
       *
       * @returns font with subsetted glyphs (all glyphs in case of errors) converted into a dataurl
       */
      static async subsetGlyphsByCodePoints(arrayBuffer, codePoints) {
        try {
          const { compress, decompress } = await woff2_loader_default();
          const { subset: subset2 } = await hb_subset_loader_default();
          const decompressedBinary = decompress(arrayBuffer).buffer;
          const subsetSnft = subset2(decompressedBinary, codePoints);
          const compressedBinary = compress(subsetSnft.buffer);
          return _ExcalidrawFont.toBase64(compressedBinary.buffer);
        } catch (e) {
          console.error("Skipped glyph subsetting", e);
          return _ExcalidrawFont.toBase64(arrayBuffer);
        }
      }
      static async toBase64(arrayBuffer) {
        let base64;
        if (typeof Buffer !== "undefined") {
          base64 = Buffer.from(arrayBuffer).toString("base64");
        } else {
          base64 = await stringToBase64(await toByteString(arrayBuffer), true);
        }
        return `data:font/woff2;base64,${base64}`;
      }
      static createUrls(uri) {
        if (uri.startsWith(LOCAL_FONT_PROTOCOL)) {
          return [];
        }
        if (uri.startsWith("http") || uri.startsWith("data")) {
          return [new URL(uri)];
        }
        const assetUrl = uri.replace(/^\/+/, "");
        const urls = [];
        if (typeof window.EXCALIDRAW_ASSET_PATH === "string") {
          const normalizedBaseUrl = this.normalizeBaseUrl(
            window.EXCALIDRAW_ASSET_PATH
          );
          urls.push(new URL(assetUrl, normalizedBaseUrl));
        } else if (Array.isArray(window.EXCALIDRAW_ASSET_PATH)) {
          window.EXCALIDRAW_ASSET_PATH.forEach((path) => {
            const normalizedBaseUrl = this.normalizeBaseUrl(path);
            urls.push(new URL(assetUrl, normalizedBaseUrl));
          });
        }
        urls.push(new URL(assetUrl, UNPKG_FALLBACK_URL));
        return urls;
      }
      static getFormat(url) {
        try {
          const parts = new URL(url).pathname.split(".");
          if (parts.length === 1) {
            return "";
          }
          return `format('${parts.pop()}')`;
        } catch (error) {
          return "";
        }
      }
      static normalizeBaseUrl(baseUrl) {
        let result = baseUrl;
        if (/^\.?\//.test(result)) {
          result = new URL(
            result.replace(/^\.?\/+/, ""),
            window?.location?.origin
          ).toString();
        }
        result = `${result.replace(/\/+$/, "")}/`;
        return result;
      }
    };
  }
});

// fonts/assets/Virgil-Regular.woff2
var Virgil_Regular_default;
var init_Virgil_Regular = __esm({
  "fonts/assets/Virgil-Regular.woff2"() {
    Virgil_Regular_default = "./Virgil-Regular-YHAB2VGJ.woff2";
  }
});

// fonts/assets/Excalifont-Regular.woff2
var Excalifont_Regular_default;
var init_Excalifont_Regular = __esm({
  "fonts/assets/Excalifont-Regular.woff2"() {
    Excalifont_Regular_default = "./Excalifont-Regular-CPKEUDVM.woff2";
  }
});

// fonts/assets/CascadiaCode-Regular.woff2
var CascadiaCode_Regular_default;
var init_CascadiaCode_Regular = __esm({
  "fonts/assets/CascadiaCode-Regular.woff2"() {
    CascadiaCode_Regular_default = "./CascadiaCode-Regular-TMZI7IJ5.woff2";
  }
});

// fonts/assets/ComicShanns-Regular.woff2
var ComicShanns_Regular_default;
var init_ComicShanns_Regular = __esm({
  "fonts/assets/ComicShanns-Regular.woff2"() {
    ComicShanns_Regular_default = "./ComicShanns-Regular-6TOETDFT.woff2";
  }
});

// fonts/assets/LiberationSans-Regular.woff2
var LiberationSans_Regular_default;
var init_LiberationSans_Regular = __esm({
  "fonts/assets/LiberationSans-Regular.woff2"() {
    LiberationSans_Regular_default = "./LiberationSans-Regular-ZQD73GJM.woff2";
  }
});

// fonts/assets/Lilita-Regular-i7dPIFZ9Zz-WBtRtedDbYEF8RXi4EwQ.woff2
var Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYEF8RXi4EwQ_default;
var init_Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYEF8RXi4EwQ = __esm({
  "fonts/assets/Lilita-Regular-i7dPIFZ9Zz-WBtRtedDbYEF8RXi4EwQ.woff2"() {
    Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYEF8RXi4EwQ_default = "./Lilita-Regular-i7dPIFZ9Zz-WBtRtedDbYEF8RXi4EwQ-AQ4UK4L6.woff2";
  }
});

// fonts/assets/Lilita-Regular-i7dPIFZ9Zz-WBtRtedDbYE98RXi4EwSsbg.woff2
var Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYE98RXi4EwSsbg_default;
var init_Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYE98RXi4EwSsbg = __esm({
  "fonts/assets/Lilita-Regular-i7dPIFZ9Zz-WBtRtedDbYE98RXi4EwSsbg.woff2"() {
    Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYE98RXi4EwSsbg_default = "./Lilita-Regular-i7dPIFZ9Zz-WBtRtedDbYE98RXi4EwSsbg-YICRZMBJ.woff2";
  }
});

// fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg.woff2
var Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg_default;
var init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg = __esm({
  "fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg.woff2"() {
    Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg_default = "./Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg-S2BZMVTH.woff2";
  }
});

// fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5.woff2
var Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5_default;
var init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5 = __esm({
  "fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5.woff2"() {
    Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5_default = "./Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5-PWTUGLZK.woff2";
  }
});

// fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5.woff2
var Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5_default;
var init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5 = __esm({
  "fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5.woff2"() {
    Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5_default = "./Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5-P2CSI5V6.woff2";
  }
});

// fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5.woff2
var Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5_default;
var init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5 = __esm({
  "fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5.woff2"() {
    Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5_default = "./Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5-F252BD3S.woff2";
  }
});

// fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5.woff2
var Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5_default;
var init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5 = __esm({
  "fonts/assets/Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5.woff2"() {
    Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5_default = "./Nunito-Regular-XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5-YZLWO63P.woff2";
  }
});

// fonts/index.ts
function register2(family, metadata, ...params) {
  const familyId = FONT_FAMILY[family];
  const registeredFamily = this.registered.get(familyId);
  if (!registeredFamily) {
    this.registered.set(familyId, {
      metadata,
      fonts: params.map(
        ({ uri, descriptors }) => new ExcalidrawFont(family, uri, descriptors)
      )
    });
  }
  return this.registered;
}
var Fonts, getVerticalOffset, getLineHeight;
var init_fonts = __esm({
  "fonts/index.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_ShapeCache();
    init_element();
    init_utils2();
    init_constants();
    init_metadata();
    init_ExcalidrawFont();
    init_textElement();
    init_Virgil_Regular();
    init_Excalifont_Regular();
    init_CascadiaCode_Regular();
    init_ComicShanns_Regular();
    init_LiberationSans_Regular();
    init_Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYEF8RXi4EwQ();
    init_Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYE98RXi4EwSsbg();
    init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg();
    init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5();
    init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5();
    init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5();
    init_Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5();
    Fonts = class _Fonts {
      // it's ok to track fonts across multiple instances only once, so let's use
      // a static member to reduce memory footprint
      static loadedFontsCache = /* @__PURE__ */ new Set();
      static _registered;
      static _initialized = false;
      static get registered() {
        if (!_Fonts._registered) {
          _Fonts._registered = _Fonts.init();
        } else if (!_Fonts._initialized) {
          _Fonts._registered = new Map([
            ..._Fonts.init().entries(),
            ..._Fonts._registered.entries()
          ]);
        }
        return _Fonts._registered;
      }
      get registered() {
        return _Fonts.registered;
      }
      scene;
      constructor({ scene }) {
        this.scene = scene;
      }
      /**
       * if we load a (new) font, it's likely that text elements using it have
       * already been rendered using a fallback font. Thus, we want invalidate
       * their shapes and rerender. See #637.
       *
       * Invalidates text elements and rerenders scene, provided that at least one
       * of the supplied fontFaces has not already been processed.
       */
      onLoaded = (fontFaces) => {
        if (
          // bail if all fonts with have been processed. We're checking just a
          // subset of the font properties (though it should be enough), so it
          // can technically bail on a false positive.
          fontFaces.every((fontFace) => {
            const sig = `${fontFace.family}-${fontFace.style}-${fontFace.weight}-${fontFace.unicodeRange}`;
            if (_Fonts.loadedFontsCache.has(sig)) {
              return true;
            }
            _Fonts.loadedFontsCache.add(sig);
            return false;
          })
        ) {
          return false;
        }
        let didUpdate = false;
        const elementsMap = this.scene.getNonDeletedElementsMap();
        for (const element of this.scene.getNonDeletedElements()) {
          if (isTextElement(element)) {
            didUpdate = true;
            ShapeCache.delete(element);
            const container = getContainerElement(element, elementsMap);
            if (container) {
              ShapeCache.delete(container);
            }
          }
        }
        if (didUpdate) {
          this.scene.triggerUpdate();
        }
      };
      /**
       * Load font faces for a given scene and trigger scene update.
       */
      loadSceneFonts = async () => {
        const sceneFamilies = this.getSceneFontFamilies();
        const loaded = await _Fonts.loadFontFaces(sceneFamilies);
        this.onLoaded(loaded);
        return loaded;
      };
      /**
       * Gets all the font families for the given scene.
       */
      getSceneFontFamilies = () => {
        return _Fonts.getFontFamilies(this.scene.getNonDeletedElements());
      };
      /**
       * Load font faces for passed elements - use when the scene is unavailable (i.e. export).
       */
      static loadFontsForElements = async (elements) => {
        const fontFamilies = _Fonts.getFontFamilies(elements);
        return await _Fonts.loadFontFaces(fontFamilies);
      };
      static async loadFontFaces(fontFamilies) {
        for (const { fonts, metadata } of _Fonts.registered.values()) {
          if (metadata.local) {
            continue;
          }
          for (const { fontFace } of fonts) {
            if (!window.document.fonts.has(fontFace)) {
              window.document.fonts.add(fontFace);
            }
          }
        }
        const loadedFontFaces = await Promise.all(
          fontFamilies.map(async (fontFamily) => {
            const fontString = getFontString({
              fontFamily,
              fontSize: 16
            });
            if (!window.document.fonts.check(fontString)) {
              try {
                return await window.document.fonts.load(fontString);
              } catch (e) {
                console.error(
                  `Failed to load font "${fontString}" from urls "${_Fonts.registered.get(fontFamily)?.fonts.map((x) => x.urls)}"`,
                  e
                );
              }
            }
            return Promise.resolve();
          })
        );
        return loadedFontFaces.flat().filter(Boolean);
      }
      /**
       * WARN: should be called just once on init, even across multiple instances.
       */
      static init() {
        const fonts = {
          registered: /* @__PURE__ */ new Map()
        };
        const _register = register2.bind(fonts);
        _register("Virgil", FONT_METADATA[FONT_FAMILY.Virgil], {
          uri: Virgil_Regular_default
        });
        _register("Excalifont", FONT_METADATA[FONT_FAMILY.Excalifont], {
          uri: Excalifont_Regular_default
        });
        _register("Helvetica", FONT_METADATA[FONT_FAMILY.Helvetica], {
          uri: LOCAL_FONT_PROTOCOL
        });
        _register(
          "Liberation Sans",
          FONT_METADATA[FONT_FAMILY["Liberation Sans"]],
          {
            uri: LiberationSans_Regular_default
          }
        );
        _register("Cascadia", FONT_METADATA[FONT_FAMILY.Cascadia], {
          uri: CascadiaCode_Regular_default
        });
        _register("Comic Shanns", FONT_METADATA[FONT_FAMILY["Comic Shanns"]], {
          uri: ComicShanns_Regular_default
        });
        _register(
          "Lilita One",
          FONT_METADATA[FONT_FAMILY["Lilita One"]],
          { uri: Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYE98RXi4EwSsbg_default, descriptors: { unicodeRange: RANGES.LATIN_EXT } },
          { uri: Lilita_Regular_i7dPIFZ9Zz_WBtRtedDbYEF8RXi4EwQ_default, descriptors: { unicodeRange: RANGES.LATIN } }
        );
        _register(
          "Nunito",
          FONT_METADATA[FONT_FAMILY.Nunito],
          {
            uri: Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTk3j6zbXWjgevT5_default,
            descriptors: { unicodeRange: RANGES.CYRILIC_EXT, weight: "500" }
          },
          {
            uri: Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTA3j6zbXWjgevT5_default,
            descriptors: { unicodeRange: RANGES.CYRILIC, weight: "500" }
          },
          {
            uri: Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTs3j6zbXWjgevT5_default,
            descriptors: { unicodeRange: RANGES.VIETNAMESE, weight: "500" }
          },
          {
            uri: Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTo3j6zbXWjgevT5_default,
            descriptors: { unicodeRange: RANGES.LATIN_EXT, weight: "500" }
          },
          {
            uri: Nunito_Regular_XRXI3I6Li01BKofiOc5wtlZ2di8HDIkhdTQ3j6zbXWjgeg_default,
            descriptors: { unicodeRange: RANGES.LATIN, weight: "500" }
          }
        );
        _Fonts._initialized = true;
        return fonts.registered;
      }
      static getFontFamilies(elements) {
        return Array.from(
          elements.reduce((families, element) => {
            if (isTextElement(element)) {
              families.add(element.fontFamily);
            }
            return families;
          }, /* @__PURE__ */ new Set())
        );
      }
    };
    getVerticalOffset = (fontFamily, fontSize, lineHeightPx) => {
      const { unitsPerEm, ascender, descender } = Fonts.registered.get(fontFamily)?.metadata.metrics || FONT_METADATA[FONT_FAMILY.Virgil].metrics;
      const fontSizeEm = fontSize / unitsPerEm;
      const lineGap = (lineHeightPx - fontSizeEm * ascender + fontSizeEm * descender) / 2;
      const verticalOffset = fontSizeEm * ascender + lineGap;
      return verticalOffset;
    };
    getLineHeight = (fontFamily) => {
      const { lineHeight } = Fonts.registered.get(fontFamily)?.metadata.metrics || FONT_METADATA[FONT_FAMILY.Excalifont].metrics;
      return lineHeight;
    };
  }
});

// element/newElement.ts
var _newElementBase, newElement, newEmbeddableElement, newIframeElement, newFrameElement, newMagicFrameElement, getTextElementPositionOffsets, newTextElement, getAdjustedDimensions, adjustXYWithRotation, refreshTextDimensions, newFreeDrawElement, newLinearElement, newArrowElement, newImageElement, _deepCopyElement, deepCopyElement, regenerateId, duplicateElement, duplicateElements;
var init_newElement = __esm({
  "element/newElement.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_utils2();
    init_random();
    init_mutateElement();
    init_groups();
    init_element();
    init_bounds();
    init_textElement();
    init_constants();
    init_fonts();
    _newElementBase = (type, {
      x,
      y,
      strokeColor = DEFAULT_ELEMENT_PROPS.strokeColor,
      backgroundColor = DEFAULT_ELEMENT_PROPS.backgroundColor,
      fillStyle = DEFAULT_ELEMENT_PROPS.fillStyle,
      strokeWidth = DEFAULT_ELEMENT_PROPS.strokeWidth,
      strokeStyle = DEFAULT_ELEMENT_PROPS.strokeStyle,
      roughness = DEFAULT_ELEMENT_PROPS.roughness,
      opacity = DEFAULT_ELEMENT_PROPS.opacity,
      width = 0,
      height = 0,
      angle = 0,
      groupIds = [],
      frameId = null,
      index = null,
      roundness = null,
      boundElements = null,
      link = null,
      locked = DEFAULT_ELEMENT_PROPS.locked,
      ...rest
    }) => {
      const element = {
        id: rest.id || randomId(),
        type,
        x,
        y,
        width,
        height,
        angle,
        strokeColor,
        backgroundColor,
        fillStyle,
        strokeWidth,
        strokeStyle,
        roughness,
        opacity,
        groupIds,
        frameId,
        index,
        roundness,
        seed: rest.seed ?? randomInteger(),
        version: rest.version || 1,
        versionNonce: rest.versionNonce ?? 0,
        isDeleted: false,
        boundElements,
        updated: getUpdatedTimestamp(),
        link,
        locked,
        customData: rest.customData
      };
      return element;
    };
    newElement = (opts) => _newElementBase(opts.type, opts);
    newEmbeddableElement = (opts) => {
      return _newElementBase("embeddable", opts);
    };
    newIframeElement = (opts) => {
      return {
        ..._newElementBase("iframe", opts)
      };
    };
    newFrameElement = (opts) => {
      const frameElement = newElementWith(
        {
          ..._newElementBase("frame", opts),
          type: "frame",
          name: opts?.name || null
        },
        {}
      );
      return frameElement;
    };
    newMagicFrameElement = (opts) => {
      const frameElement = newElementWith(
        {
          ..._newElementBase("magicframe", opts),
          type: "magicframe",
          name: opts?.name || null
        },
        {}
      );
      return frameElement;
    };
    getTextElementPositionOffsets = (opts, metrics) => {
      return {
        x: opts.textAlign === "center" ? metrics.width / 2 : opts.textAlign === "right" ? metrics.width : 0,
        y: opts.verticalAlign === "middle" ? metrics.height / 2 : 0
      };
    };
    newTextElement = (opts) => {
      const fontFamily = opts.fontFamily || DEFAULT_FONT_FAMILY;
      const fontSize = opts.fontSize || DEFAULT_FONT_SIZE;
      const lineHeight = opts.lineHeight || getLineHeight(fontFamily);
      const text = normalizeText(opts.text);
      const metrics = measureText(
        text,
        getFontString({ fontFamily, fontSize }),
        lineHeight
      );
      const textAlign = opts.textAlign || DEFAULT_TEXT_ALIGN;
      const verticalAlign = opts.verticalAlign || DEFAULT_VERTICAL_ALIGN;
      const offsets = getTextElementPositionOffsets(
        { textAlign, verticalAlign },
        metrics
      );
      const textElementProps = {
        ..._newElementBase("text", opts),
        text,
        fontSize,
        fontFamily,
        textAlign,
        verticalAlign,
        x: opts.x - offsets.x,
        y: opts.y - offsets.y,
        width: metrics.width,
        height: metrics.height,
        containerId: opts.containerId || null,
        originalText: opts.originalText ?? text,
        autoResize: opts.autoResize ?? true,
        lineHeight
      };
      const textElement = newElementWith(
        textElementProps,
        {}
      );
      return textElement;
    };
    getAdjustedDimensions = (element, elementsMap, nextText) => {
      let { width: nextWidth, height: nextHeight } = measureText(
        nextText,
        getFontString(element),
        element.lineHeight
      );
      if (!element.autoResize) {
        nextWidth = element.width;
      }
      const { textAlign, verticalAlign } = element;
      let x;
      let y;
      if (textAlign === "center" && verticalAlign === VERTICAL_ALIGN.MIDDLE && !element.containerId && element.autoResize) {
        const prevMetrics = measureText(
          element.text,
          getFontString(element),
          element.lineHeight
        );
        const offsets = getTextElementPositionOffsets(element, {
          width: nextWidth - prevMetrics.width,
          height: nextHeight - prevMetrics.height
        });
        x = element.x - offsets.x;
        y = element.y - offsets.y;
      } else {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const [nextX1, nextY1, nextX2, nextY2] = getResizedElementAbsoluteCoords(
          element,
          nextWidth,
          nextHeight,
          false
        );
        const deltaX1 = (x1 - nextX1) / 2;
        const deltaY1 = (y1 - nextY1) / 2;
        const deltaX2 = (x2 - nextX2) / 2;
        const deltaY2 = (y2 - nextY2) / 2;
        [x, y] = adjustXYWithRotation(
          {
            s: true,
            e: textAlign === "center" || textAlign === "left",
            w: textAlign === "center" || textAlign === "right"
          },
          element.x,
          element.y,
          element.angle,
          deltaX1,
          deltaY1,
          deltaX2,
          deltaY2
        );
      }
      return {
        width: nextWidth,
        height: nextHeight,
        x: Number.isFinite(x) ? x : element.x,
        y: Number.isFinite(y) ? y : element.y
      };
    };
    adjustXYWithRotation = (sides, x, y, angle, deltaX1, deltaY1, deltaX2, deltaY2) => {
      const cos = Math.cos(angle);
      const sin = Math.sin(angle);
      if (sides.e && sides.w) {
        x += deltaX1 + deltaX2;
      } else if (sides.e) {
        x += deltaX1 * (1 + cos);
        y += deltaX1 * sin;
        x += deltaX2 * (1 - cos);
        y += deltaX2 * -sin;
      } else if (sides.w) {
        x += deltaX1 * (1 - cos);
        y += deltaX1 * -sin;
        x += deltaX2 * (1 + cos);
        y += deltaX2 * sin;
      }
      if (sides.n && sides.s) {
        y += deltaY1 + deltaY2;
      } else if (sides.n) {
        x += deltaY1 * sin;
        y += deltaY1 * (1 - cos);
        x += deltaY2 * -sin;
        y += deltaY2 * (1 + cos);
      } else if (sides.s) {
        x += deltaY1 * -sin;
        y += deltaY1 * (1 + cos);
        x += deltaY2 * sin;
        y += deltaY2 * (1 - cos);
      }
      return [x, y];
    };
    refreshTextDimensions = (textElement, container, elementsMap, text = textElement.text) => {
      if (textElement.isDeleted) {
        return;
      }
      if (container || !textElement.autoResize) {
        text = wrapText(
          text,
          getFontString(textElement),
          container ? getBoundTextMaxWidth(container, textElement) : textElement.width
        );
      }
      const dimensions = getAdjustedDimensions(textElement, elementsMap, text);
      return { text, ...dimensions };
    };
    newFreeDrawElement = (opts) => {
      return {
        ..._newElementBase(opts.type, opts),
        points: opts.points || [],
        pressures: opts.pressures || [],
        simulatePressure: opts.simulatePressure,
        lastCommittedPoint: null
      };
    };
    newLinearElement = (opts) => {
      return {
        ..._newElementBase(opts.type, opts),
        points: opts.points || [],
        lastCommittedPoint: null,
        startBinding: null,
        endBinding: null,
        startArrowhead: null,
        endArrowhead: null
      };
    };
    newArrowElement = (opts) => {
      return {
        ..._newElementBase(opts.type, opts),
        points: opts.points || [],
        lastCommittedPoint: null,
        startBinding: null,
        endBinding: null,
        startArrowhead: opts.startArrowhead || null,
        endArrowhead: opts.endArrowhead || null,
        elbowed: opts.elbowed || false
      };
    };
    newImageElement = (opts) => {
      return {
        ..._newElementBase("image", opts),
        // in the future we'll support changing stroke color for some SVG elements,
        // and `transparent` will likely mean "use original colors of the image"
        strokeColor: "transparent",
        status: opts.status ?? "pending",
        fileId: opts.fileId ?? null,
        scale: opts.scale ?? [1, 1]
      };
    };
    _deepCopyElement = (val, depth = 0) => {
      if (val == null || typeof val !== "object") {
        return val;
      }
      const objectType = Object.prototype.toString.call(val);
      if (objectType === "[object Object]") {
        const tmp = typeof val.constructor === "function" ? Object.create(Object.getPrototypeOf(val)) : {};
        for (const key in val) {
          if (val.hasOwnProperty(key)) {
            if (depth === 0 && (key === "shape" || key === "canvas")) {
              continue;
            }
            tmp[key] = _deepCopyElement(val[key], depth + 1);
          }
        }
        return tmp;
      }
      if (Array.isArray(val)) {
        let k = val.length;
        const arr = new Array(k);
        while (k--) {
          arr[k] = _deepCopyElement(val[k], depth + 1);
        }
        return arr;
      }
      if (define_import_meta_env_default.DEV) {
        if (objectType !== "[object Object]" && objectType !== "[object Array]" && objectType.startsWith("[object ")) {
          console.warn(
            `_deepCloneElement: unexpected object type ${objectType}. This value will not be cloned!`
          );
        }
      }
      return val;
    };
    deepCopyElement = (val) => {
      return _deepCopyElement(val);
    };
    regenerateId = (previousId) => {
      if (isTestEnv() && previousId) {
        let nextId = `${previousId}_copy`;
        if (window.h?.app?.getSceneElementsIncludingDeleted().find((el) => el.id === nextId)) {
          nextId += "_copy";
        }
        return nextId;
      }
      return randomId();
    };
    duplicateElement = (editingGroupId, groupIdMapForOperation, element, overrides) => {
      let copy = deepCopyElement(element);
      copy.id = regenerateId(copy.id);
      copy.boundElements = null;
      copy.updated = getUpdatedTimestamp();
      copy.seed = randomInteger();
      copy.groupIds = getNewGroupIdsForDuplication(
        copy.groupIds,
        editingGroupId,
        (groupId) => {
          if (!groupIdMapForOperation.has(groupId)) {
            groupIdMapForOperation.set(groupId, regenerateId(groupId));
          }
          return groupIdMapForOperation.get(groupId);
        }
      );
      if (overrides) {
        copy = Object.assign(copy, overrides);
      }
      return copy;
    };
    duplicateElements = (elements, opts) => {
      const clonedElements = [];
      const origElementsMap = arrayToMap(elements);
      const elementNewIdsMap = /* @__PURE__ */ new Map();
      const maybeGetNewId = (id) => {
        if (elementNewIdsMap.has(id)) {
          return elementNewIdsMap.get(id);
        }
        if (origElementsMap.has(id)) {
          const newId = regenerateId(id);
          elementNewIdsMap.set(id, newId);
          return newId;
        }
        return null;
      };
      const groupNewIdsMap = /* @__PURE__ */ new Map();
      for (const element of elements) {
        const clonedElement = _deepCopyElement(element);
        clonedElement.id = maybeGetNewId(element.id);
        if (opts?.randomizeSeed) {
          clonedElement.seed = randomInteger();
          bumpVersion(clonedElement);
        }
        if (clonedElement.groupIds) {
          clonedElement.groupIds = clonedElement.groupIds.map((groupId) => {
            if (!groupNewIdsMap.has(groupId)) {
              groupNewIdsMap.set(groupId, regenerateId(groupId));
            }
            return groupNewIdsMap.get(groupId);
          });
        }
        if ("containerId" in clonedElement && clonedElement.containerId) {
          const newContainerId = maybeGetNewId(clonedElement.containerId);
          clonedElement.containerId = newContainerId;
        }
        if ("boundElements" in clonedElement && clonedElement.boundElements) {
          clonedElement.boundElements = clonedElement.boundElements.reduce(
            (acc, binding) => {
              const newBindingId = maybeGetNewId(binding.id);
              if (newBindingId) {
                acc.push({ ...binding, id: newBindingId });
              }
              return acc;
            },
            []
          );
        }
        if ("endBinding" in clonedElement && clonedElement.endBinding) {
          const newEndBindingId = maybeGetNewId(clonedElement.endBinding.elementId);
          clonedElement.endBinding = newEndBindingId ? {
            ...clonedElement.endBinding,
            elementId: newEndBindingId
          } : null;
        }
        if ("startBinding" in clonedElement && clonedElement.startBinding) {
          const newEndBindingId = maybeGetNewId(
            clonedElement.startBinding.elementId
          );
          clonedElement.startBinding = newEndBindingId ? {
            ...clonedElement.startBinding,
            elementId: newEndBindingId
          } : null;
        }
        if (clonedElement.frameId) {
          clonedElement.frameId = maybeGetNewId(clonedElement.frameId);
        }
        clonedElements.push(clonedElement);
      }
      return clonedElements;
    };
  }
});

// change.ts
var Delta, AppStateChange, ElementsChange;
var init_change = __esm({
  "change.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_binding();
    init_linearElementEditor();
    init_mutateElement();
    init_textElement();
    init_typeChecks();
    init_fractionalIndex();
    init_groups();
    init_store();
    init_utils2();
    Delta = class _Delta {
      constructor(deleted, inserted) {
        this.deleted = deleted;
        this.inserted = inserted;
      }
      static create(deleted, inserted, modifier, modifierOptions) {
        const modifiedDeleted = modifier && modifierOptions !== "inserted" ? modifier(deleted) : deleted;
        const modifiedInserted = modifier && modifierOptions !== "deleted" ? modifier(inserted) : inserted;
        return new _Delta(modifiedDeleted, modifiedInserted);
      }
      /**
       * Calculates the delta between two objects.
       *
       * @param prevObject - The previous state of the object.
       * @param nextObject - The next state of the object.
       *
       * @returns new delta instance.
       */
      static calculate(prevObject, nextObject, modifier, postProcess) {
        if (prevObject === nextObject) {
          return _Delta.empty();
        }
        const deleted = {};
        const inserted = {};
        for (const key of this.distinctKeysIterator(
          "full",
          prevObject,
          nextObject
        )) {
          deleted[key] = prevObject[key];
          inserted[key] = nextObject[key];
        }
        const [processedDeleted, processedInserted] = postProcess ? postProcess(deleted, inserted) : [deleted, inserted];
        return _Delta.create(processedDeleted, processedInserted, modifier);
      }
      static empty() {
        return new _Delta({}, {});
      }
      static isEmpty(delta) {
        return !Object.keys(delta.deleted).length && !Object.keys(delta.inserted).length;
      }
      /**
       * Merges deleted and inserted object partials.
       */
      static mergeObjects(prev, added, removed) {
        const cloned = { ...prev };
        for (const key of Object.keys(removed)) {
          delete cloned[key];
        }
        return { ...cloned, ...added };
      }
      /**
       * Merges deleted and inserted array partials.
       */
      static mergeArrays(prev, added, removed, predicate) {
        return Object.values(
          _Delta.mergeObjects(
            arrayToObject(prev ?? [], predicate),
            arrayToObject(added ?? [], predicate),
            arrayToObject(removed ?? [], predicate)
          )
        );
      }
      /**
       * Diff object partials as part of the `postProcess`.
       */
      static diffObjects(deleted, inserted, property, setValue) {
        if (!deleted[property] && !inserted[property]) {
          return;
        }
        if (typeof deleted[property] === "object" || typeof inserted[property] === "object") {
          const deletedObject = deleted[property] ?? {};
          const insertedObject = inserted[property] ?? {};
          const deletedDifferences = _Delta.getLeftDifferences(
            deletedObject,
            insertedObject
          ).reduce((acc, curr) => {
            acc[curr] = setValue(deletedObject[curr]);
            return acc;
          }, {});
          const insertedDifferences = _Delta.getRightDifferences(
            deletedObject,
            insertedObject
          ).reduce((acc, curr) => {
            acc[curr] = setValue(insertedObject[curr]);
            return acc;
          }, {});
          if (Object.keys(deletedDifferences).length || Object.keys(insertedDifferences).length) {
            Reflect.set(deleted, property, deletedDifferences);
            Reflect.set(inserted, property, insertedDifferences);
          } else {
            Reflect.deleteProperty(deleted, property);
            Reflect.deleteProperty(inserted, property);
          }
        }
      }
      /**
       * Diff array partials as part of the `postProcess`.
       */
      static diffArrays(deleted, inserted, property, groupBy) {
        if (!deleted[property] && !inserted[property]) {
          return;
        }
        if (Array.isArray(deleted[property]) || Array.isArray(inserted[property])) {
          const deletedArray = Array.isArray(deleted[property]) ? deleted[property] : [];
          const insertedArray = Array.isArray(inserted[property]) ? inserted[property] : [];
          const deletedDifferences = arrayToObject(
            _Delta.getLeftDifferences(
              arrayToObject(deletedArray, groupBy),
              arrayToObject(insertedArray, groupBy)
            )
          );
          const insertedDifferences = arrayToObject(
            _Delta.getRightDifferences(
              arrayToObject(deletedArray, groupBy),
              arrayToObject(insertedArray, groupBy)
            )
          );
          if (Object.keys(deletedDifferences).length || Object.keys(insertedDifferences).length) {
            const deletedValue = deletedArray.filter(
              (x) => deletedDifferences[groupBy ? groupBy(x) : String(x)]
            );
            const insertedValue = insertedArray.filter(
              (x) => insertedDifferences[groupBy ? groupBy(x) : String(x)]
            );
            Reflect.set(deleted, property, deletedValue);
            Reflect.set(inserted, property, insertedValue);
          } else {
            Reflect.deleteProperty(deleted, property);
            Reflect.deleteProperty(inserted, property);
          }
        }
      }
      /**
       * Compares if object1 contains any different value compared to the object2.
       */
      static isLeftDifferent(object1, object2, skipShallowCompare = false) {
        const anyDistinctKey = this.distinctKeysIterator(
          "left",
          object1,
          object2,
          skipShallowCompare
        ).next().value;
        return !!anyDistinctKey;
      }
      /**
       * Compares if object2 contains any different value compared to the object1.
       */
      static isRightDifferent(object1, object2, skipShallowCompare = false) {
        const anyDistinctKey = this.distinctKeysIterator(
          "right",
          object1,
          object2,
          skipShallowCompare
        ).next().value;
        return !!anyDistinctKey;
      }
      /**
       * Returns all the object1 keys that have distinct values.
       */
      static getLeftDifferences(object1, object2, skipShallowCompare = false) {
        return Array.from(
          this.distinctKeysIterator("left", object1, object2, skipShallowCompare)
        );
      }
      /**
       * Returns all the object2 keys that have distinct values.
       */
      static getRightDifferences(object1, object2, skipShallowCompare = false) {
        return Array.from(
          this.distinctKeysIterator("right", object1, object2, skipShallowCompare)
        );
      }
      /**
       * Iterator comparing values of object properties based on the passed joining strategy.
       *
       * @yields keys of properties with different values
       *
       * WARN: it's based on shallow compare performed only on the first level and doesn't go deeper than that.
       */
      static *distinctKeysIterator(join2, object1, object2, skipShallowCompare = false) {
        if (object1 === object2) {
          return;
        }
        let keys = [];
        if (join2 === "left") {
          keys = Object.keys(object1);
        } else if (join2 === "right") {
          keys = Object.keys(object2);
        } else if (join2 === "full") {
          keys = Array.from(
            /* @__PURE__ */ new Set([...Object.keys(object1), ...Object.keys(object2)])
          );
        } else {
          assertNever(
            join2,
            `Unknown distinctKeysIterator's join param "${join2}"`,
            true
          );
        }
        for (const key of keys) {
          const object1Value = object1[key];
          const object2Value = object2[key];
          if (object1Value !== object2Value) {
            if (!skipShallowCompare && typeof object1Value === "object" && typeof object2Value === "object" && object1Value !== null && object2Value !== null && isShallowEqual(object1Value, object2Value)) {
              continue;
            }
            yield key;
          }
        }
      }
    };
    AppStateChange = class _AppStateChange {
      constructor(delta) {
        this.delta = delta;
      }
      static calculate(prevAppState, nextAppState) {
        const delta = Delta.calculate(
          prevAppState,
          nextAppState,
          void 0,
          _AppStateChange.postProcess
        );
        return new _AppStateChange(delta);
      }
      static empty() {
        return new _AppStateChange(Delta.create({}, {}));
      }
      inverse() {
        const inversedDelta = Delta.create(this.delta.inserted, this.delta.deleted);
        return new _AppStateChange(inversedDelta);
      }
      applyTo(appState, nextElements) {
        try {
          const {
            selectedElementIds: removedSelectedElementIds = {},
            selectedGroupIds: removedSelectedGroupIds = {}
          } = this.delta.deleted;
          const {
            selectedElementIds: addedSelectedElementIds = {},
            selectedGroupIds: addedSelectedGroupIds = {},
            selectedLinearElementId,
            editingLinearElementId,
            ...directlyApplicablePartial
          } = this.delta.inserted;
          const mergedSelectedElementIds = Delta.mergeObjects(
            appState.selectedElementIds,
            addedSelectedElementIds,
            removedSelectedElementIds
          );
          const mergedSelectedGroupIds = Delta.mergeObjects(
            appState.selectedGroupIds,
            addedSelectedGroupIds,
            removedSelectedGroupIds
          );
          const selectedLinearElement = selectedLinearElementId && nextElements.has(selectedLinearElementId) ? new LinearElementEditor(
            nextElements.get(
              selectedLinearElementId
            )
          ) : null;
          const editingLinearElement = editingLinearElementId && nextElements.has(editingLinearElementId) ? new LinearElementEditor(
            nextElements.get(
              editingLinearElementId
            )
          ) : null;
          const nextAppState = {
            ...appState,
            ...directlyApplicablePartial,
            selectedElementIds: mergedSelectedElementIds,
            selectedGroupIds: mergedSelectedGroupIds,
            selectedLinearElement: typeof selectedLinearElementId !== "undefined" ? selectedLinearElement : appState.selectedLinearElement,
            // otherwise assign what we had before
            editingLinearElement: typeof editingLinearElementId !== "undefined" ? editingLinearElement : appState.editingLinearElement
            // otherwise assign what we had before
          };
          const constainsVisibleChanges = this.filterInvisibleChanges(
            appState,
            nextAppState,
            nextElements
          );
          return [nextAppState, constainsVisibleChanges];
        } catch (e) {
          console.error(`Couldn't apply appstate change`, e);
          if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
            throw e;
          }
          return [appState, false];
        }
      }
      isEmpty() {
        return Delta.isEmpty(this.delta);
      }
      /**
       * It is necessary to post process the partials in case of reference values,
       * for which we need to calculate the real diff between `deleted` and `inserted`.
       */
      static postProcess(deleted, inserted) {
        try {
          Delta.diffObjects(
            deleted,
            inserted,
            "selectedElementIds",
            // ts language server has a bit trouble resolving this, so we are giving it a little push
            (_) => true
          );
          Delta.diffObjects(
            deleted,
            inserted,
            "selectedGroupIds",
            (prevValue) => prevValue ?? false
          );
        } catch (e) {
          console.error(`Couldn't postprocess appstate change deltas.`);
          if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
            throw e;
          }
        } finally {
          return [deleted, inserted];
        }
      }
      /**
       * Mutates `nextAppState` be filtering out state related to deleted elements.
       *
       * @returns `true` if a visible change is found, `false` otherwise.
       */
      filterInvisibleChanges(prevAppState, nextAppState, nextElements) {
        const prevObservedAppState = getObservedAppState(prevAppState);
        const nextObservedAppState = getObservedAppState(nextAppState);
        const containsStandaloneDifference = Delta.isRightDifferent(
          _AppStateChange.stripElementsProps(prevObservedAppState),
          _AppStateChange.stripElementsProps(nextObservedAppState)
        );
        const containsElementsDifference = Delta.isRightDifferent(
          _AppStateChange.stripStandaloneProps(prevObservedAppState),
          _AppStateChange.stripStandaloneProps(nextObservedAppState)
        );
        if (!containsStandaloneDifference && !containsElementsDifference) {
          return false;
        }
        const visibleDifferenceFlag = {
          value: containsStandaloneDifference
        };
        if (containsElementsDifference) {
          const changedElementsProps = Delta.getRightDifferences(
            _AppStateChange.stripStandaloneProps(prevObservedAppState),
            _AppStateChange.stripStandaloneProps(nextObservedAppState)
          );
          let nonDeletedGroupIds = /* @__PURE__ */ new Set();
          if (changedElementsProps.includes("editingGroupId") || changedElementsProps.includes("selectedGroupIds")) {
            nonDeletedGroupIds = getNonDeletedGroupIds(nextElements);
          }
          for (const key of changedElementsProps) {
            switch (key) {
              case "selectedElementIds":
                nextAppState[key] = _AppStateChange.filterSelectedElements(
                  nextAppState[key],
                  nextElements,
                  visibleDifferenceFlag
                );
                break;
              case "selectedGroupIds":
                nextAppState[key] = _AppStateChange.filterSelectedGroups(
                  nextAppState[key],
                  nonDeletedGroupIds,
                  visibleDifferenceFlag
                );
                break;
              case "editingGroupId":
                const editingGroupId = nextAppState[key];
                if (!editingGroupId) {
                  visibleDifferenceFlag.value = true;
                } else if (nonDeletedGroupIds.has(editingGroupId)) {
                  visibleDifferenceFlag.value = true;
                } else {
                  nextAppState[key] = null;
                }
                break;
              case "selectedLinearElementId":
              case "editingLinearElementId":
                const appStateKey = _AppStateChange.convertToAppStateKey(key);
                const linearElement = nextAppState[appStateKey];
                if (!linearElement) {
                  visibleDifferenceFlag.value = true;
                } else {
                  const element = nextElements.get(linearElement.elementId);
                  if (element && !element.isDeleted) {
                    visibleDifferenceFlag.value = true;
                  } else {
                    nextAppState[appStateKey] = null;
                  }
                }
                break;
              default: {
                assertNever(
                  key,
                  `Unknown ObservedElementsAppState's key "${key}"`,
                  true
                );
              }
            }
          }
        }
        return visibleDifferenceFlag.value;
      }
      static convertToAppStateKey(key) {
        switch (key) {
          case "selectedLinearElementId":
            return "selectedLinearElement";
          case "editingLinearElementId":
            return "editingLinearElement";
        }
      }
      static filterSelectedElements(selectedElementIds, elements, visibleDifferenceFlag) {
        const ids = Object.keys(selectedElementIds);
        if (!ids.length) {
          visibleDifferenceFlag.value = true;
          return selectedElementIds;
        }
        const nextSelectedElementIds = { ...selectedElementIds };
        for (const id of ids) {
          const element = elements.get(id);
          if (element && !element.isDeleted) {
            visibleDifferenceFlag.value = true;
          } else {
            delete nextSelectedElementIds[id];
          }
        }
        return nextSelectedElementIds;
      }
      static filterSelectedGroups(selectedGroupIds, nonDeletedGroupIds, visibleDifferenceFlag) {
        const ids = Object.keys(selectedGroupIds);
        if (!ids.length) {
          visibleDifferenceFlag.value = true;
          return selectedGroupIds;
        }
        const nextSelectedGroupIds = { ...selectedGroupIds };
        for (const id of Object.keys(nextSelectedGroupIds)) {
          if (nonDeletedGroupIds.has(id)) {
            visibleDifferenceFlag.value = true;
          } else {
            delete nextSelectedGroupIds[id];
          }
        }
        return nextSelectedGroupIds;
      }
      static stripElementsProps(delta) {
        const {
          editingGroupId,
          selectedGroupIds,
          selectedElementIds,
          editingLinearElementId,
          selectedLinearElementId,
          ...standaloneProps
        } = delta;
        return standaloneProps;
      }
      static stripStandaloneProps(delta) {
        const { name, viewBackgroundColor, ...elementsProps } = delta;
        return elementsProps;
      }
    };
    ElementsChange = class _ElementsChange {
      constructor(added, removed, updated) {
        this.added = added;
        this.removed = removed;
        this.updated = updated;
      }
      static create(added, removed, updated, options = { shouldRedistribute: false }) {
        let change;
        if (options.shouldRedistribute) {
          const nextAdded = /* @__PURE__ */ new Map();
          const nextRemoved = /* @__PURE__ */ new Map();
          const nextUpdated = /* @__PURE__ */ new Map();
          const deltas = [...added, ...removed, ...updated];
          for (const [id, delta] of deltas) {
            if (this.satisfiesAddition(delta)) {
              nextAdded.set(id, delta);
            } else if (this.satisfiesRemoval(delta)) {
              nextRemoved.set(id, delta);
            } else {
              nextUpdated.set(id, delta);
            }
          }
          change = new _ElementsChange(nextAdded, nextRemoved, nextUpdated);
        } else {
          change = new _ElementsChange(added, removed, updated);
        }
        if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
          _ElementsChange.validate(change, "added", this.satisfiesAddition);
          _ElementsChange.validate(change, "removed", this.satisfiesRemoval);
          _ElementsChange.validate(change, "updated", this.satisfiesUpdate);
        }
        return change;
      }
      static satisfiesAddition = ({
        deleted,
        inserted
      }) => (
        // dissallowing added as "deleted", which could cause issues when resolving conflicts
        deleted.isDeleted === true && !inserted.isDeleted
      );
      static satisfiesRemoval = ({
        deleted,
        inserted
      }) => !deleted.isDeleted && inserted.isDeleted === true;
      static satisfiesUpdate = ({
        deleted,
        inserted
      }) => !!deleted.isDeleted === !!inserted.isDeleted;
      static validate(change, type, satifies) {
        for (const [id, delta] of change[type].entries()) {
          if (!satifies(delta)) {
            console.error(
              `Broken invariant for "${type}" delta, element "${id}", delta:`,
              delta
            );
            throw new Error(`ElementsChange invariant broken for element "${id}".`);
          }
        }
      }
      /**
       * Calculates the `Delta`s between the previous and next set of elements.
       *
       * @param prevElements - Map representing the previous state of elements.
       * @param nextElements - Map representing the next state of elements.
       *
       * @returns `ElementsChange` instance representing the `Delta` changes between the two sets of elements.
       */
      static calculate(prevElements, nextElements) {
        if (prevElements === nextElements) {
          return _ElementsChange.empty();
        }
        const added = /* @__PURE__ */ new Map();
        const removed = /* @__PURE__ */ new Map();
        const updated = /* @__PURE__ */ new Map();
        for (const prevElement of prevElements.values()) {
          const nextElement = nextElements.get(prevElement.id);
          if (!nextElement) {
            const deleted = { ...prevElement, isDeleted: false };
            const inserted = { isDeleted: true };
            const delta = Delta.create(
              deleted,
              inserted,
              _ElementsChange.stripIrrelevantProps
            );
            removed.set(prevElement.id, delta);
          }
        }
        for (const nextElement of nextElements.values()) {
          const prevElement = prevElements.get(nextElement.id);
          if (!prevElement) {
            const deleted = { isDeleted: true };
            const inserted = {
              ...nextElement,
              isDeleted: false
            };
            const delta = Delta.create(
              deleted,
              inserted,
              _ElementsChange.stripIrrelevantProps
            );
            added.set(nextElement.id, delta);
            continue;
          }
          if (prevElement.versionNonce !== nextElement.versionNonce) {
            const delta = Delta.calculate(
              prevElement,
              nextElement,
              _ElementsChange.stripIrrelevantProps,
              _ElementsChange.postProcess
            );
            if (
              // making sure we don't get here some non-boolean values (i.e. undefined, null, etc.)
              typeof prevElement.isDeleted === "boolean" && typeof nextElement.isDeleted === "boolean" && prevElement.isDeleted !== nextElement.isDeleted
            ) {
              if (prevElement.isDeleted && !nextElement.isDeleted) {
                added.set(nextElement.id, delta);
              } else {
                removed.set(nextElement.id, delta);
              }
              continue;
            }
            if (!Delta.isEmpty(delta)) {
              updated.set(nextElement.id, delta);
            }
          }
        }
        return _ElementsChange.create(added, removed, updated);
      }
      static empty() {
        return _ElementsChange.create(/* @__PURE__ */ new Map(), /* @__PURE__ */ new Map(), /* @__PURE__ */ new Map());
      }
      inverse() {
        const inverseInternal = (deltas) => {
          const inversedDeltas = /* @__PURE__ */ new Map();
          for (const [id, delta] of deltas.entries()) {
            inversedDeltas.set(id, Delta.create(delta.inserted, delta.deleted));
          }
          return inversedDeltas;
        };
        const added = inverseInternal(this.added);
        const removed = inverseInternal(this.removed);
        const updated = inverseInternal(this.updated);
        return _ElementsChange.create(removed, added, updated);
      }
      isEmpty() {
        return this.added.size === 0 && this.removed.size === 0 && this.updated.size === 0;
      }
      /**
       * Update delta/s based on the existing elements.
       *
       * @param elements current elements
       * @param modifierOptions defines which of the delta (`deleted` or `inserted`) will be updated
       * @returns new instance with modified delta/s
       */
      applyLatestChanges(elements) {
        const modifier = (element) => (partial) => {
          const latestPartial = {};
          for (const key of Object.keys(partial)) {
            switch (key) {
              case "boundElements":
                latestPartial[key] = partial[key];
                break;
              default:
                latestPartial[key] = element[key];
            }
          }
          return latestPartial;
        };
        const applyLatestChangesInternal = (deltas) => {
          const modifiedDeltas = /* @__PURE__ */ new Map();
          for (const [id, delta] of deltas.entries()) {
            const existingElement = elements.get(id);
            if (existingElement) {
              const modifiedDelta = Delta.create(
                delta.deleted,
                delta.inserted,
                modifier(existingElement),
                "inserted"
              );
              modifiedDeltas.set(id, modifiedDelta);
            } else {
              modifiedDeltas.set(id, delta);
            }
          }
          return modifiedDeltas;
        };
        const added = applyLatestChangesInternal(this.added);
        const removed = applyLatestChangesInternal(this.removed);
        const updated = applyLatestChangesInternal(this.updated);
        return _ElementsChange.create(added, removed, updated, {
          shouldRedistribute: true
          // redistribute the deltas as `isDeleted` could have been updated
        });
      }
      applyTo(elements, snapshot) {
        let nextElements = toBrandedType(new Map(elements));
        let changedElements;
        const flags = {
          containsVisibleDifference: false,
          containsZindexDifference: false
        };
        try {
          const applyDeltas = _ElementsChange.createApplier(
            nextElements,
            snapshot,
            flags
          );
          const addedElements = applyDeltas(this.added);
          const removedElements = applyDeltas(this.removed);
          const updatedElements = applyDeltas(this.updated);
          const affectedElements = this.resolveConflicts(elements, nextElements);
          changedElements = new Map([
            ...addedElements,
            ...removedElements,
            ...updatedElements,
            ...affectedElements
          ]);
        } catch (e) {
          console.error(`Couldn't apply elements change`, e);
          if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
            throw e;
          }
          return [elements, true];
        }
        try {
          _ElementsChange.redrawTextBoundingBoxes(nextElements, changedElements);
          nextElements = _ElementsChange.reorderElements(
            nextElements,
            changedElements,
            flags
          );
          _ElementsChange.redrawBoundArrows(nextElements, changedElements);
        } catch (e) {
          console.error(
            `Couldn't mutate elements after applying elements change`,
            e
          );
          if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
            throw e;
          }
        } finally {
          return [nextElements, flags.containsVisibleDifference];
        }
      }
      static createApplier = (nextElements, snapshot, flags) => {
        const getElement = _ElementsChange.createGetter(
          nextElements,
          snapshot,
          flags
        );
        return (deltas) => Array.from(deltas.entries()).reduce((acc, [id, delta]) => {
          const element = getElement(id, delta.inserted);
          if (element) {
            const newElement2 = _ElementsChange.applyDelta(element, delta, flags);
            nextElements.set(newElement2.id, newElement2);
            acc.set(newElement2.id, newElement2);
          }
          return acc;
        }, /* @__PURE__ */ new Map());
      };
      static createGetter = (elements, snapshot, flags) => (id, partial) => {
        let element = elements.get(id);
        if (!element) {
          element = snapshot.get(id);
          if (element) {
            flags.containsZindexDifference = true;
            if (partial.isDeleted === false || partial.isDeleted !== true && element.isDeleted === false) {
              flags.containsVisibleDifference = true;
            }
          }
        }
        return element;
      };
      static applyDelta(element, delta, flags = {
        // by default we don't care about about the flags
        containsVisibleDifference: true,
        containsZindexDifference: true
      }) {
        const { boundElements, ...directlyApplicablePartial } = delta.inserted;
        if (delta.deleted.boundElements?.length || delta.inserted.boundElements?.length) {
          const mergedBoundElements = Delta.mergeArrays(
            element.boundElements,
            delta.inserted.boundElements,
            delta.deleted.boundElements,
            (x) => x.id
          );
          Object.assign(directlyApplicablePartial, {
            boundElements: mergedBoundElements
          });
        }
        if (!flags.containsVisibleDifference) {
          const { index, ...rest } = directlyApplicablePartial;
          const containsVisibleDifference = _ElementsChange.checkForVisibleDifference(element, rest);
          flags.containsVisibleDifference = containsVisibleDifference;
        }
        if (!flags.containsZindexDifference) {
          flags.containsZindexDifference = delta.deleted.index !== delta.inserted.index;
        }
        return newElementWith(element, directlyApplicablePartial);
      }
      /**
       * Check for visible changes regardless of whether they were removed, added or updated.
       */
      static checkForVisibleDifference(element, partial) {
        if (element.isDeleted && partial.isDeleted !== false) {
          return false;
        }
        if (element.isDeleted && partial.isDeleted === false) {
          return true;
        }
        if (element.isDeleted === false && partial.isDeleted) {
          return true;
        }
        return Delta.isRightDifferent(element, partial);
      }
      /**
       * Resolves conflicts for all previously added, removed and updated elements.
       * Updates the previous deltas with all the changes after conflict resolution.
       *
       * @returns all elements affected by the conflict resolution
       */
      resolveConflicts(prevElements, nextElements) {
        const nextAffectedElements = /* @__PURE__ */ new Map();
        const updater = (element, updates) => {
          const nextElement = nextElements.get(element.id);
          if (!nextElement) {
            return;
          }
          let affectedElement;
          if (prevElements.get(element.id) === nextElement) {
            affectedElement = newElementWith(
              nextElement,
              updates
            );
          } else {
            affectedElement = mutateElement(
              nextElement,
              updates
            );
          }
          nextAffectedElements.set(affectedElement.id, affectedElement);
          nextElements.set(affectedElement.id, affectedElement);
        };
        for (const [id] of this.removed) {
          _ElementsChange.unbindAffected(prevElements, nextElements, id, updater);
        }
        for (const [id] of this.added) {
          _ElementsChange.rebindAffected(prevElements, nextElements, id, updater);
        }
        for (const [id] of Array.from(this.updated).filter(
          ([_, delta]) => Object.keys({ ...delta.deleted, ...delta.inserted }).find(
            (prop) => bindingProperties.has(prop)
          )
        )) {
          const updatedElement = nextElements.get(id);
          if (!updatedElement || updatedElement.isDeleted) {
            continue;
          }
          _ElementsChange.rebindAffected(prevElements, nextElements, id, updater);
        }
        const prevAffectedElements = new Map(
          Array.from(prevElements).filter(([id]) => nextAffectedElements.has(id))
        );
        const { added, removed, updated } = _ElementsChange.calculate(
          prevAffectedElements,
          nextAffectedElements
        );
        for (const [id, delta] of added) {
          this.added.set(id, delta);
        }
        for (const [id, delta] of removed) {
          this.removed.set(id, delta);
        }
        for (const [id, delta] of updated) {
          this.updated.set(id, delta);
        }
        return nextAffectedElements;
      }
      /**
       * Non deleted affected elements of removed elements (before and after applying delta),
       * should be unbound ~ bindings should not point from non deleted into the deleted element/s.
       */
      static unbindAffected(prevElements, nextElements, id, updater) {
        const prevElement = () => prevElements.get(id);
        const nextElement = () => nextElements.get(id);
        BoundElement.unbindAffected(nextElements, prevElement(), updater);
        BoundElement.unbindAffected(nextElements, nextElement(), updater);
        BindableElement.unbindAffected(nextElements, prevElement(), updater);
        BindableElement.unbindAffected(nextElements, nextElement(), updater);
      }
      /**
       * Non deleted affected elements of added or updated element/s (before and after applying delta),
       * should be rebound (if possible) with the current element ~ bindings should be bidirectional.
       */
      static rebindAffected(prevElements, nextElements, id, updater) {
        const prevElement = () => prevElements.get(id);
        const nextElement = () => nextElements.get(id);
        BoundElement.unbindAffected(nextElements, prevElement(), updater);
        BoundElement.rebindAffected(nextElements, nextElement(), updater);
        BindableElement.unbindAffected(
          nextElements,
          prevElement(),
          (element, updates) => {
            if (isTextElement(element)) {
              updater(element, updates);
            }
          }
        );
        BindableElement.rebindAffected(nextElements, nextElement(), updater);
      }
      static redrawTextBoundingBoxes(elements, changed) {
        const boxesToRedraw = /* @__PURE__ */ new Map();
        for (const element of changed.values()) {
          if (isBoundToContainer(element)) {
            const { containerId } = element;
            const container = containerId ? elements.get(containerId) : void 0;
            if (container) {
              boxesToRedraw.set(container.id, {
                container,
                boundText: element
              });
            }
          }
          if (hasBoundTextElement(element)) {
            const boundTextElementId = getBoundTextElementId(element);
            const boundText = boundTextElementId ? elements.get(boundTextElementId) : void 0;
            if (boundText) {
              boxesToRedraw.set(element.id, {
                container: element,
                boundText
              });
            }
          }
        }
        for (const { container, boundText } of boxesToRedraw.values()) {
          if (container.isDeleted || boundText.isDeleted) {
            continue;
          }
          redrawTextBoundingBox(boundText, container, elements, false);
        }
      }
      static redrawBoundArrows(elements, changed) {
        for (const element of changed.values()) {
          if (!element.isDeleted && isBindableElement(element)) {
            updateBoundElements(element, elements, {
              changedElements: changed
            });
          }
        }
      }
      static reorderElements(elements, changed, flags) {
        if (!flags.containsZindexDifference) {
          return elements;
        }
        const unordered = Array.from(elements.values());
        const ordered = orderByFractionalIndex([...unordered]);
        const moved = Delta.getRightDifferences(unordered, ordered, true).reduce(
          (acc, arrayIndex) => {
            const candidate = unordered[Number(arrayIndex)];
            if (candidate && changed.has(candidate.id)) {
              acc.set(candidate.id, candidate);
            }
            return acc;
          },
          /* @__PURE__ */ new Map()
        );
        if (!flags.containsVisibleDifference && moved.size) {
          flags.containsVisibleDifference = true;
        }
        return arrayToMap(syncMovedIndices(ordered, moved));
      }
      /**
       * It is necessary to post process the partials in case of reference values,
       * for which we need to calculate the real diff between `deleted` and `inserted`.
       */
      static postProcess(deleted, inserted) {
        try {
          Delta.diffArrays(deleted, inserted, "boundElements", (x) => x.id);
        } catch (e) {
          console.error(`Couldn't postprocess elements change deltas.`);
          if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
            throw e;
          }
        } finally {
          return [deleted, inserted];
        }
      }
      static stripIrrelevantProps(partial) {
        const { id, updated, version, versionNonce, seed, ...strippedPartial } = partial;
        return strippedPartial;
      }
    };
  }
});

// emitter.ts
var Emitter;
var init_emitter = __esm({
  "emitter.ts"() {
    "use strict";
    init_define_import_meta_env();
    Emitter = class {
      subscribers = [];
      /**
       * Attaches subscriber
       *
       * @returns unsubscribe function
       */
      on(...handlers) {
        const _handlers = handlers.flat().filter((item) => typeof item === "function");
        this.subscribers.push(..._handlers);
        return () => this.off(_handlers);
      }
      once(...handlers) {
        const _handlers = handlers.flat().filter((item) => typeof item === "function");
        _handlers.push(() => detach());
        const detach = this.on(..._handlers);
        return detach;
      }
      off(...handlers) {
        const _handlers = handlers.flat();
        this.subscribers = this.subscribers.filter(
          (handler) => !_handlers.includes(handler)
        );
      }
      trigger(...payload) {
        for (const handler of this.subscribers) {
          handler(...payload);
        }
        return this;
      }
      clear() {
        this.subscribers = [];
      }
    };
  }
});

// store.ts
var hiddenObservedAppStateProp, getObservedAppState, isObservedAppState, StoreAction, StoreIncrementEvent, Store, Snapshot;
var init_store = __esm({
  "store.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_appState();
    init_change();
    init_constants();
    init_mutateElement();
    init_newElement();
    init_emitter();
    init_utils2();
    hiddenObservedAppStateProp = "__observedAppState";
    getObservedAppState = (appState) => {
      const observedAppState = {
        name: appState.name,
        editingGroupId: appState.editingGroupId,
        viewBackgroundColor: appState.viewBackgroundColor,
        selectedElementIds: appState.selectedElementIds,
        selectedGroupIds: appState.selectedGroupIds,
        editingLinearElementId: appState.editingLinearElement?.elementId || null,
        selectedLinearElementId: appState.selectedLinearElement?.elementId || null
      };
      Reflect.defineProperty(observedAppState, hiddenObservedAppStateProp, {
        value: true,
        enumerable: false
      });
      return observedAppState;
    };
    isObservedAppState = (appState) => !!Reflect.get(appState, hiddenObservedAppStateProp);
    StoreAction = {
      /**
       * Immediately undoable.
       *
       * Use for updates which should be captured.
       * Should be used for most of the local updates.
       *
       * These updates will _immediately_ make it to the local undo / redo stacks.
       */
      CAPTURE: "capture",
      /**
       * Never undoable.
       *
       * Use for updates which should never be recorded, such as remote updates
       * or scene initialization.
       *
       * These updates will _never_ make it to the local undo / redo stacks.
       */
      UPDATE: "update",
      /**
       * Eventually undoable.
       *
       * Use for updates which should not be captured immediately - likely
       * exceptions which are part of some async multi-step process. Otherwise, all
       * such updates would end up being captured with the next
       * `StoreAction.CAPTURE` - triggered either by the next `updateScene`
       * or internally by the editor.
       *
       * These updates will _eventually_ make it to the local undo / redo stacks.
       */
      NONE: "none"
    };
    StoreIncrementEvent = class {
      constructor(elementsChange, appStateChange) {
        this.elementsChange = elementsChange;
        this.appStateChange = appStateChange;
      }
    };
    Store = class {
      onStoreIncrementEmitter = new Emitter();
      scheduledActions = /* @__PURE__ */ new Set();
      _snapshot = Snapshot.empty();
      get snapshot() {
        return this._snapshot;
      }
      set snapshot(snapshot) {
        this._snapshot = snapshot;
      }
      // TODO: Suspicious that this is called so many places. Seems error-prone.
      shouldCaptureIncrement = () => {
        this.scheduleAction(StoreAction.CAPTURE);
      };
      shouldUpdateSnapshot = () => {
        this.scheduleAction(StoreAction.UPDATE);
      };
      scheduleAction = (action) => {
        this.scheduledActions.add(action);
        this.satisfiesScheduledActionsInvariant();
      };
      commit = (elements, appState) => {
        try {
          if (this.scheduledActions.has(StoreAction.CAPTURE)) {
            this.captureIncrement(elements, appState);
          } else if (this.scheduledActions.has(StoreAction.UPDATE)) {
            this.updateSnapshot(elements, appState);
          }
        } finally {
          this.satisfiesScheduledActionsInvariant();
          this.scheduledActions = /* @__PURE__ */ new Set();
        }
      };
      captureIncrement = (elements, appState) => {
        const prevSnapshot = this.snapshot;
        const nextSnapshot = this.snapshot.maybeClone(elements, appState);
        if (prevSnapshot !== nextSnapshot) {
          const elementsChange = nextSnapshot.meta.didElementsChange ? ElementsChange.calculate(prevSnapshot.elements, nextSnapshot.elements) : ElementsChange.empty();
          const appStateChange = nextSnapshot.meta.didAppStateChange ? AppStateChange.calculate(prevSnapshot.appState, nextSnapshot.appState) : AppStateChange.empty();
          if (!elementsChange.isEmpty() || !appStateChange.isEmpty()) {
            this.onStoreIncrementEmitter.trigger(
              new StoreIncrementEvent(elementsChange, appStateChange)
            );
          }
          this.snapshot = nextSnapshot;
        }
      };
      updateSnapshot = (elements, appState) => {
        const nextSnapshot = this.snapshot.maybeClone(elements, appState);
        if (this.snapshot !== nextSnapshot) {
          this.snapshot = nextSnapshot;
        }
      };
      filterUncomittedElements = (prevElements, nextElements) => {
        for (const [id, prevElement] of prevElements.entries()) {
          const nextElement = nextElements.get(id);
          if (!nextElement) {
            continue;
          }
          const elementSnapshot = this.snapshot.elements.get(id);
          if (!elementSnapshot) {
            nextElements.delete(id);
          } else if (elementSnapshot.version < prevElement.version) {
            nextElements.set(id, elementSnapshot);
          }
        }
        return nextElements;
      };
      clear = () => {
        this.snapshot = Snapshot.empty();
        this.scheduledActions = /* @__PURE__ */ new Set();
      };
      satisfiesScheduledActionsInvariant = () => {
        if (!(this.scheduledActions.size >= 0 && this.scheduledActions.size <= 3)) {
          const message = `There can be at most three store actions scheduled at the same time, but there are "${this.scheduledActions.size}".`;
          console.error(message, this.scheduledActions.values());
          if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST) {
            throw new Error(message);
          }
        }
      };
    };
    Snapshot = class _Snapshot {
      constructor(elements, appState, meta = {
        didElementsChange: false,
        didAppStateChange: false,
        isEmpty: false
      }) {
        this.elements = elements;
        this.appState = appState;
        this.meta = meta;
      }
      static empty() {
        return new _Snapshot(
          /* @__PURE__ */ new Map(),
          getObservedAppState(getDefaultAppState()),
          { didElementsChange: false, didAppStateChange: false, isEmpty: true }
        );
      }
      isEmpty() {
        return this.meta.isEmpty;
      }
      /**
       * Efficiently clone the existing snapshot, only if we detected changes.
       *
       * @returns same instance if there are no changes detected, new instance otherwise.
       */
      maybeClone(elements, appState) {
        const nextElementsSnapshot = this.maybeCreateElementsSnapshot(elements);
        const nextAppStateSnapshot = this.maybeCreateAppStateSnapshot(appState);
        let didElementsChange = false;
        let didAppStateChange = false;
        if (this.elements !== nextElementsSnapshot) {
          didElementsChange = true;
        }
        if (this.appState !== nextAppStateSnapshot) {
          didAppStateChange = true;
        }
        if (!didElementsChange && !didAppStateChange) {
          return this;
        }
        const snapshot = new _Snapshot(nextElementsSnapshot, nextAppStateSnapshot, {
          didElementsChange,
          didAppStateChange
        });
        return snapshot;
      }
      maybeCreateAppStateSnapshot(appState) {
        if (!appState) {
          return this.appState;
        }
        const nextAppStateSnapshot = !isObservedAppState(appState) ? getObservedAppState(appState) : appState;
        const didAppStateChange = this.detectChangedAppState(nextAppStateSnapshot);
        if (!didAppStateChange) {
          return this.appState;
        }
        return nextAppStateSnapshot;
      }
      detectChangedAppState(nextObservedAppState) {
        return !isShallowEqual(this.appState, nextObservedAppState, {
          selectedElementIds: isShallowEqual,
          selectedGroupIds: isShallowEqual
        });
      }
      maybeCreateElementsSnapshot(elements) {
        if (!elements) {
          return this.elements;
        }
        const didElementsChange = this.detectChangedElements(elements);
        if (!didElementsChange) {
          return this.elements;
        }
        const elementsSnapshot = this.createElementsSnapshot(elements);
        return elementsSnapshot;
      }
      /**
       * Detect if there any changed elements.
       *
       * NOTE: we shouldn't just use `sceneVersionNonce` instead, as we need to call this before the scene updates.
       */
      detectChangedElements(nextElements) {
        if (this.elements === nextElements) {
          return false;
        }
        if (this.elements.size !== nextElements.size) {
          return true;
        }
        const keys = Array.from(nextElements.keys());
        for (let i = keys.length - 1; i >= 0; i--) {
          const prev = this.elements.get(keys[i]);
          const next = nextElements.get(keys[i]);
          if (!prev || !next || prev.id !== next.id || prev.versionNonce !== next.versionNonce) {
            return true;
          }
        }
        return false;
      }
      /**
       * Perform structural clone, cloning only elements that changed.
       */
      createElementsSnapshot(nextElements) {
        const clonedElements = /* @__PURE__ */ new Map();
        for (const [id, prevElement] of this.elements.entries()) {
          if (!nextElements.get(id)) {
            clonedElements.set(
              id,
              newElementWith(prevElement, { isDeleted: true })
            );
          } else {
            clonedElements.set(id, prevElement);
          }
        }
        for (const [id, nextElement] of nextElements.entries()) {
          const prevElement = clonedElements.get(id);
          if (!prevElement || // element was added
          prevElement && prevElement.versionNonce !== nextElement.versionNonce) {
            clonedElements.set(id, deepCopyElement(nextElement));
          }
        }
        return clonedElements;
      }
    };
  }
});

// element/embeddable.ts
var embeddedLinkCache, RE_YOUTUBE, RE_VIMEO, RE_FIGMA, RE_GH_GIST, RE_GH_GIST_EMBED, RE_TWITTER, RE_TWITTER_EMBED, RE_VALTOWN, RE_GENERIC_EMBED, RE_GIPHY, RE_REDDIT, RE_REDDIT_EMBED, ALLOWED_DOMAINS, ALLOW_SAME_ORIGIN, createSrcDoc, getEmbedLink, createPlaceholderEmbeddableLabel, actionSetEmbeddableAsActiveTool, matchHostname, maybeParseEmbedSrc, embeddableURLValidator;
var init_embeddable = __esm({
  "element/embeddable.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_register();
    init_constants();
    init_utils2();
    init_cursor();
    init_newElement();
    init_textElement();
    init_typeChecks();
    init_url();
    init_store();
    embeddedLinkCache = /* @__PURE__ */ new Map();
    RE_YOUTUBE = /^(?:http(?:s)?:\/\/)?(?:www\.)?youtu(?:be\.com|\.be)\/(embed\/|watch\?v=|shorts\/|playlist\?list=|embed\/videoseries\?list=)?([a-zA-Z0-9_-]+)(?:\?t=|&t=|\?start=|&start=)?([a-zA-Z0-9_-]+)?[^\s]*$/;
    RE_VIMEO = /^(?:http(?:s)?:\/\/)?(?:(?:w){3}\.)?(?:player\.)?vimeo\.com\/(?:video\/)?([^?\s]+)(?:\?.*)?$/;
    RE_FIGMA = /^https:\/\/(?:www\.)?figma\.com/;
    RE_GH_GIST = /^https:\/\/gist\.github\.com\/([\w_-]+)\/([\w_-]+)/;
    RE_GH_GIST_EMBED = /^<script[\s\S]*?\ssrc=["'](https:\/\/gist\.github\.com\/.*?)\.js["']/i;
    RE_TWITTER = /(?:https?:\/\/)?(?:(?:w){3}\.)?(?:twitter|x)\.com\/[^/]+\/status\/(\d+)/;
    RE_TWITTER_EMBED = /^<blockquote[\s\S]*?\shref=["'](https?:\/\/(?:twitter|x)\.com\/[^"']*)/i;
    RE_VALTOWN = /^https:\/\/(?:www\.)?val\.town\/(v|embed)\/[a-zA-Z_$][0-9a-zA-Z_$]+\.[a-zA-Z_$][0-9a-zA-Z_$]+/;
    RE_GENERIC_EMBED = /^<(?:iframe|blockquote)[\s\S]*?\s(?:src|href)=["']([^"']*)["'][\s\S]*?>$/i;
    RE_GIPHY = /giphy.com\/(?:clips|embed|gifs)\/[a-zA-Z0-9]*?-?([a-zA-Z0-9]+)(?:[^a-zA-Z0-9]|$)/;
    RE_REDDIT = /^(?:http(?:s)?:\/\/)?(?:www\.)?reddit\.com\/r\/([a-zA-Z0-9_]+)\/comments\/([a-zA-Z0-9_]+)\/([a-zA-Z0-9_]+)\/?(?:\?[^#\s]*)?(?:#[^\s]*)?$/;
    RE_REDDIT_EMBED = /^<blockquote[\s\S]*?\shref=["'](https?:\/\/(?:www\.)?reddit\.com\/[^"']*)/i;
    ALLOWED_DOMAINS = /* @__PURE__ */ new Set([
      "youtube.com",
      "youtu.be",
      "vimeo.com",
      "player.vimeo.com",
      "figma.com",
      "link.excalidraw.com",
      "gist.github.com",
      "twitter.com",
      "x.com",
      "*.simplepdf.eu",
      "stackblitz.com",
      "val.town",
      "giphy.com",
      "reddit.com"
    ]);
    ALLOW_SAME_ORIGIN = /* @__PURE__ */ new Set([
      "youtube.com",
      "youtu.be",
      "vimeo.com",
      "player.vimeo.com",
      "figma.com",
      "twitter.com",
      "x.com",
      "*.simplepdf.eu",
      "stackblitz.com",
      "reddit.com"
    ]);
    createSrcDoc = (body) => {
      return `<html><body>${body}</body></html>`;
    };
    getEmbedLink = (link) => {
      if (!link) {
        return null;
      }
      if (embeddedLinkCache.has(link)) {
        return embeddedLinkCache.get(link);
      }
      const originalLink = link;
      const allowSameOrigin = ALLOW_SAME_ORIGIN.has(
        matchHostname(link, ALLOW_SAME_ORIGIN) || ""
      );
      let type = "generic";
      let aspectRatio = { w: 560, h: 840 };
      const ytLink = link.match(RE_YOUTUBE);
      if (ytLink?.[2]) {
        const time = ytLink[3] ? `&start=${ytLink[3]}` : ``;
        const isPortrait = link.includes("shorts");
        type = "video";
        switch (ytLink[1]) {
          case "embed/":
          case "watch?v=":
          case "shorts/":
            link = `https://www.youtube.com/embed/${ytLink[2]}?enablejsapi=1${time}`;
            break;
          case "playlist?list=":
          case "embed/videoseries?list=":
            link = `https://www.youtube.com/embed/videoseries?list=${ytLink[2]}&enablejsapi=1${time}`;
            break;
          default:
            link = `https://www.youtube.com/embed/${ytLink[2]}?enablejsapi=1${time}`;
            break;
        }
        aspectRatio = isPortrait ? { w: 315, h: 560 } : { w: 560, h: 315 };
        embeddedLinkCache.set(originalLink, {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        });
        return {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        };
      }
      const vimeoLink = link.match(RE_VIMEO);
      if (vimeoLink?.[1]) {
        const target = vimeoLink?.[1];
        const error = !/^\d+$/.test(target) ? new URIError("Invalid embed link format") : void 0;
        type = "video";
        link = `https://player.vimeo.com/video/${target}?api=1`;
        aspectRatio = { w: 560, h: 315 };
        embeddedLinkCache.set(originalLink, {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        });
        return {
          link,
          intrinsicSize: aspectRatio,
          type,
          error,
          sandbox: { allowSameOrigin }
        };
      }
      const figmaLink = link.match(RE_FIGMA);
      if (figmaLink) {
        type = "generic";
        link = `https://www.figma.com/embed?embed_host=share&url=${encodeURIComponent(
          link
        )}`;
        aspectRatio = { w: 550, h: 550 };
        embeddedLinkCache.set(originalLink, {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        });
        return {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        };
      }
      const valLink = link.match(RE_VALTOWN);
      if (valLink) {
        link = valLink[1] === "embed" ? valLink[0] : valLink[0].replace("/v", "/embed");
        embeddedLinkCache.set(originalLink, {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        });
        return {
          link,
          intrinsicSize: aspectRatio,
          type,
          sandbox: { allowSameOrigin }
        };
      }
      if (RE_TWITTER.test(link)) {
        const postId = link.match(RE_TWITTER)[1];
        const safeURL = sanitizeHTMLAttribute(
          `https://twitter.com/x/status/${postId}`
        );
        const ret = {
          type: "document",
          srcdoc: (theme) => createSrcDoc(
            `<blockquote class="twitter-tweet" data-dnt="true" data-theme="${theme}"><a href="${safeURL}"></a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>`
          ),
          intrinsicSize: { w: 480, h: 480 },
          sandbox: { allowSameOrigin }
        };
        embeddedLinkCache.set(originalLink, ret);
        return ret;
      }
      if (RE_REDDIT.test(link)) {
        const [, page, postId, title] = link.match(RE_REDDIT);
        const safeURL = sanitizeHTMLAttribute(
          `https://reddit.com/r/${page}/comments/${postId}/${title}`
        );
        const ret = {
          type: "document",
          srcdoc: (theme) => createSrcDoc(
            `<blockquote class="reddit-embed-bq" data-embed-theme="${theme}"><a href="${safeURL}"></a><br></blockquote><script async="" src="https://embed.reddit.com/widgets.js" charset="UTF-8"><\/script>`
          ),
          intrinsicSize: { w: 480, h: 480 },
          sandbox: { allowSameOrigin }
        };
        embeddedLinkCache.set(originalLink, ret);
        return ret;
      }
      if (RE_GH_GIST.test(link)) {
        const [, user, gistId] = link.match(RE_GH_GIST);
        const safeURL = sanitizeHTMLAttribute(
          `https://gist.github.com/${user}/${gistId}`
        );
        const ret = {
          type: "document",
          srcdoc: () => createSrcDoc(`
          <script src="${safeURL}.js"><\/script>
          <style type="text/css">
            * { margin: 0px; }
            table, .gist { height: 100%; }
            .gist .gist-file { height: calc(100vh - 2px); padding: 0px; display: grid; grid-template-rows: 1fr auto; }
          </style>
        `),
          intrinsicSize: { w: 550, h: 720 },
          sandbox: { allowSameOrigin }
        };
        embeddedLinkCache.set(link, ret);
        return ret;
      }
      embeddedLinkCache.set(link, {
        link,
        intrinsicSize: aspectRatio,
        type,
        sandbox: { allowSameOrigin }
      });
      return {
        link,
        intrinsicSize: aspectRatio,
        type,
        sandbox: { allowSameOrigin }
      };
    };
    createPlaceholderEmbeddableLabel = (element) => {
      let text;
      if (isIframeElement(element)) {
        text = "IFrame element";
      } else {
        text = !element.link || element?.link === "" ? "Empty Web-Embed" : element.link;
      }
      const fontSize = Math.max(
        Math.min(element.width / 2, element.width / text.length),
        element.width / 30
      );
      const fontFamily = FONT_FAMILY.Helvetica;
      const fontString = getFontString({
        fontSize,
        fontFamily
      });
      return newTextElement({
        x: element.x + element.width / 2,
        y: element.y + element.height / 2,
        strokeColor: element.strokeColor !== "transparent" ? element.strokeColor : "black",
        backgroundColor: "transparent",
        fontFamily,
        fontSize,
        text: wrapText(text, fontString, element.width - 20),
        textAlign: "center",
        verticalAlign: VERTICAL_ALIGN.MIDDLE,
        angle: element.angle ?? 0
      });
    };
    actionSetEmbeddableAsActiveTool = register({
      name: "setEmbeddableAsActiveTool",
      trackEvent: { category: "toolbar" },
      target: "Tool",
      label: "toolBar.embeddable",
      perform: (elements, appState, _, app) => {
        const nextActiveTool = updateActiveTool(appState, {
          type: "embeddable"
        });
        setCursorForShape(app.canvas, {
          ...appState,
          activeTool: nextActiveTool
        });
        return {
          elements,
          appState: {
            ...appState,
            activeTool: updateActiveTool(appState, {
              type: "embeddable"
            })
          },
          storeAction: StoreAction.NONE
        };
      }
    });
    matchHostname = (url, allowedHostnames) => {
      try {
        const { hostname } = new URL(url);
        const bareDomain = hostname.replace(/^www\./, "");
        if (allowedHostnames instanceof Set) {
          if (ALLOWED_DOMAINS.has(bareDomain)) {
            return bareDomain;
          }
          const bareDomainWithFirstSubdomainWildcarded = bareDomain.replace(
            /^([^.]+)/,
            "*"
          );
          if (ALLOWED_DOMAINS.has(bareDomainWithFirstSubdomainWildcarded)) {
            return bareDomainWithFirstSubdomainWildcarded;
          }
          return null;
        }
        const bareAllowedHostname = allowedHostnames.replace(/^www\./, "");
        if (bareDomain === bareAllowedHostname) {
          return bareAllowedHostname;
        }
      } catch (error) {
      }
      return null;
    };
    maybeParseEmbedSrc = (str) => {
      const twitterMatch = str.match(RE_TWITTER_EMBED);
      if (twitterMatch && twitterMatch.length === 2) {
        return twitterMatch[1];
      }
      const redditMatch = str.match(RE_REDDIT_EMBED);
      if (redditMatch && redditMatch.length === 2) {
        return redditMatch[1];
      }
      const gistMatch = str.match(RE_GH_GIST_EMBED);
      if (gistMatch && gistMatch.length === 2) {
        return gistMatch[1];
      }
      if (RE_GIPHY.test(str)) {
        return `https://giphy.com/embed/${RE_GIPHY.exec(str)[1]}`;
      }
      const match = str.match(RE_GENERIC_EMBED);
      if (match && match.length === 2) {
        return match[1];
      }
      return str;
    };
    embeddableURLValidator = (url, validateEmbeddable) => {
      if (!url) {
        return false;
      }
      if (validateEmbeddable != null) {
        if (typeof validateEmbeddable === "function") {
          const ret = validateEmbeddable(url);
          if (typeof ret === "boolean") {
            return ret;
          }
        } else if (typeof validateEmbeddable === "boolean") {
          return validateEmbeddable;
        } else if (validateEmbeddable instanceof RegExp) {
          return validateEmbeddable.test(url);
        } else if (Array.isArray(validateEmbeddable)) {
          for (const domain of validateEmbeddable) {
            if (domain instanceof RegExp) {
              if (url.match(domain)) {
                return true;
              }
            } else if (matchHostname(url, domain)) {
              return true;
            }
          }
          return false;
        }
      }
      return !!matchHostname(url, ALLOWED_DOMAINS);
    };
  }
});

// renderer/staticSvgScene.ts
var roughSVGDrawWithPrecision, maybeWrapNodesInFrameClipPath, renderElementToSvg, renderSceneToSvg;
var init_staticSvgScene = __esm({
  "renderer/staticSvgScene.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_url();
    init_element();
    init_embeddable();
    init_linearElementEditor();
    init_textElement();
    init_typeChecks();
    init_frame();
    init_ShapeCache();
    init_utils2();
    init_renderElement();
    init_fonts();
    init_shapes();
    roughSVGDrawWithPrecision = (rsvg, drawable, precision) => {
      if (typeof precision === "undefined") {
        return rsvg.draw(drawable);
      }
      const pshape = {
        sets: drawable.sets,
        shape: drawable.shape,
        options: { ...drawable.options, fixedDecimalPlaceDigits: precision }
      };
      return rsvg.draw(pshape);
    };
    maybeWrapNodesInFrameClipPath = (element, root, nodes, frameRendering, elementsMap) => {
      if (!frameRendering.enabled || !frameRendering.clip) {
        return null;
      }
      const frame = getContainingFrame(element, elementsMap);
      if (frame) {
        const g = root.ownerDocument.createElementNS(SVG_NS, "g");
        g.setAttributeNS(SVG_NS, "clip-path", `url(#${frame.id})`);
        nodes.forEach((node) => g.appendChild(node));
        return g;
      }
      return null;
    };
    renderElementToSvg = (element, elementsMap, rsvg, svgRoot, files, offsetX, offsetY, renderConfig) => {
      const offset2 = { x: offsetX, y: offsetY };
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
      let cx = (x2 - x1) / 2 - (element.x - x1);
      let cy = (y2 - y1) / 2 - (element.y - y1);
      if (isTextElement(element)) {
        const container = getContainerElement(element, elementsMap);
        if (isArrowElement(container)) {
          const [x12, y12, x22, y22] = getElementAbsoluteCoords(container, elementsMap);
          const boundTextCoords = LinearElementEditor.getBoundTextElementPosition(
            container,
            element,
            elementsMap
          );
          cx = (x22 - x12) / 2 - (boundTextCoords.x - x12);
          cy = (y22 - y12) / 2 - (boundTextCoords.y - y12);
          offsetX = offsetX + boundTextCoords.x - element.x;
          offsetY = offsetY + boundTextCoords.y - element.y;
        }
      }
      const degree = 180 * element.angle / Math.PI;
      let root = svgRoot;
      if (element.link) {
        const anchorTag = svgRoot.ownerDocument.createElementNS(SVG_NS, "a");
        anchorTag.setAttribute("href", normalizeLink(element.link));
        root.appendChild(anchorTag);
        root = anchorTag;
      }
      const addToRoot = (node, element2) => {
        if (isTestEnv()) {
          node.setAttribute("data-id", element2.id);
        }
        root.appendChild(node);
      };
      const opacity = (getContainingFrame(element, elementsMap)?.opacity ?? 100) * element.opacity / 1e4;
      switch (element.type) {
        case "selection": {
          throw new Error("Selection rendering is not supported for SVG");
        }
        case "rectangle":
        case "diamond":
        case "ellipse": {
          const shape = ShapeCache.generateElementShape(element, null);
          const node = roughSVGDrawWithPrecision(
            rsvg,
            shape,
            MAX_DECIMALS_FOR_SVG_EXPORT
          );
          if (opacity !== 1) {
            node.setAttribute("stroke-opacity", `${opacity}`);
            node.setAttribute("fill-opacity", `${opacity}`);
          }
          node.setAttribute("stroke-linecap", "round");
          node.setAttribute(
            "transform",
            `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
          );
          const g = maybeWrapNodesInFrameClipPath(
            element,
            root,
            [node],
            renderConfig.frameRendering,
            elementsMap
          );
          addToRoot(g || node, element);
          break;
        }
        case "iframe":
        case "embeddable": {
          const shape = ShapeCache.generateElementShape(element, renderConfig);
          const node = roughSVGDrawWithPrecision(
            rsvg,
            shape,
            MAX_DECIMALS_FOR_SVG_EXPORT
          );
          const opacity2 = element.opacity / 100;
          if (opacity2 !== 1) {
            node.setAttribute("stroke-opacity", `${opacity2}`);
            node.setAttribute("fill-opacity", `${opacity2}`);
          }
          node.setAttribute("stroke-linecap", "round");
          node.setAttribute(
            "transform",
            `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
          );
          addToRoot(node, element);
          const label = createPlaceholderEmbeddableLabel(element);
          renderElementToSvg(
            label,
            elementsMap,
            rsvg,
            root,
            files,
            label.x + offset2.x - element.x,
            label.y + offset2.y - element.y,
            renderConfig
          );
          const embeddableNode = roughSVGDrawWithPrecision(
            rsvg,
            shape,
            MAX_DECIMALS_FOR_SVG_EXPORT
          );
          embeddableNode.setAttribute("stroke-linecap", "round");
          embeddableNode.setAttribute(
            "transform",
            `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
          );
          while (embeddableNode.firstChild) {
            embeddableNode.removeChild(embeddableNode.firstChild);
          }
          const radius = getCornerRadius(
            Math.min(element.width, element.height),
            element
          );
          const embedLink = getEmbedLink(toValidURL(element.link || ""));
          if (renderConfig.renderEmbeddables === false || embedLink?.type === "document") {
            const anchorTag = svgRoot.ownerDocument.createElementNS(SVG_NS, "a");
            anchorTag.setAttribute("href", normalizeLink(element.link || ""));
            anchorTag.setAttribute("target", "_blank");
            anchorTag.setAttribute("rel", "noopener noreferrer");
            anchorTag.style.borderRadius = `${radius}px`;
            embeddableNode.appendChild(anchorTag);
          } else {
            const foreignObject = svgRoot.ownerDocument.createElementNS(
              SVG_NS,
              "foreignObject"
            );
            foreignObject.style.width = `${element.width}px`;
            foreignObject.style.height = `${element.height}px`;
            foreignObject.style.border = "none";
            const div = foreignObject.ownerDocument.createElementNS(SVG_NS, "div");
            div.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
            div.style.width = "100%";
            div.style.height = "100%";
            const iframe = div.ownerDocument.createElement("iframe");
            iframe.src = embedLink?.link ?? "";
            iframe.style.width = "100%";
            iframe.style.height = "100%";
            iframe.style.border = "none";
            iframe.style.borderRadius = `${radius}px`;
            iframe.style.top = "0";
            iframe.style.left = "0";
            iframe.allowFullscreen = true;
            div.appendChild(iframe);
            foreignObject.appendChild(div);
            embeddableNode.appendChild(foreignObject);
          }
          addToRoot(embeddableNode, element);
          break;
        }
        case "line":
        case "arrow": {
          const boundText = getBoundTextElement(element, elementsMap);
          const maskPath = svgRoot.ownerDocument.createElementNS(SVG_NS, "mask");
          if (boundText) {
            maskPath.setAttribute("id", `mask-${element.id}`);
            const maskRectVisible = svgRoot.ownerDocument.createElementNS(
              SVG_NS,
              "rect"
            );
            offsetX = offsetX || 0;
            offsetY = offsetY || 0;
            maskRectVisible.setAttribute("x", "0");
            maskRectVisible.setAttribute("y", "0");
            maskRectVisible.setAttribute("fill", "#fff");
            maskRectVisible.setAttribute(
              "width",
              `${element.width + 100 + offsetX}`
            );
            maskRectVisible.setAttribute(
              "height",
              `${element.height + 100 + offsetY}`
            );
            maskPath.appendChild(maskRectVisible);
            const maskRectInvisible = svgRoot.ownerDocument.createElementNS(
              SVG_NS,
              "rect"
            );
            const boundTextCoords = LinearElementEditor.getBoundTextElementPosition(
              element,
              boundText,
              elementsMap
            );
            const maskX = offsetX + boundTextCoords.x - element.x;
            const maskY = offsetY + boundTextCoords.y - element.y;
            maskRectInvisible.setAttribute("x", maskX.toString());
            maskRectInvisible.setAttribute("y", maskY.toString());
            maskRectInvisible.setAttribute("fill", "#000");
            maskRectInvisible.setAttribute("width", `${boundText.width}`);
            maskRectInvisible.setAttribute("height", `${boundText.height}`);
            maskRectInvisible.setAttribute("opacity", "1");
            maskPath.appendChild(maskRectInvisible);
          }
          const group = svgRoot.ownerDocument.createElementNS(SVG_NS, "g");
          if (boundText) {
            group.setAttribute("mask", `url(#mask-${element.id})`);
          }
          group.setAttribute("stroke-linecap", "round");
          const shapes = ShapeCache.generateElementShape(element, renderConfig);
          shapes.forEach((shape) => {
            const node = roughSVGDrawWithPrecision(
              rsvg,
              shape,
              MAX_DECIMALS_FOR_SVG_EXPORT
            );
            if (opacity !== 1) {
              node.setAttribute("stroke-opacity", `${opacity}`);
              node.setAttribute("fill-opacity", `${opacity}`);
            }
            node.setAttribute(
              "transform",
              `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
            );
            if (element.type === "line" && isPathALoop(element.points) && element.backgroundColor !== "transparent") {
              node.setAttribute("fill-rule", "evenodd");
            }
            group.appendChild(node);
          });
          const g = maybeWrapNodesInFrameClipPath(
            element,
            root,
            [group, maskPath],
            renderConfig.frameRendering,
            elementsMap
          );
          if (g) {
            addToRoot(g, element);
            root.appendChild(g);
          } else {
            addToRoot(group, element);
            root.append(maskPath);
          }
          break;
        }
        case "freedraw": {
          const backgroundFillShape = ShapeCache.generateElementShape(
            element,
            renderConfig
          );
          const node = backgroundFillShape ? roughSVGDrawWithPrecision(
            rsvg,
            backgroundFillShape,
            MAX_DECIMALS_FOR_SVG_EXPORT
          ) : svgRoot.ownerDocument.createElementNS(SVG_NS, "g");
          if (opacity !== 1) {
            node.setAttribute("stroke-opacity", `${opacity}`);
            node.setAttribute("fill-opacity", `${opacity}`);
          }
          node.setAttribute(
            "transform",
            `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
          );
          node.setAttribute("stroke", "none");
          const path = svgRoot.ownerDocument.createElementNS(SVG_NS, "path");
          path.setAttribute("fill", element.strokeColor);
          path.setAttribute("d", getFreeDrawSvgPath(element));
          node.appendChild(path);
          const g = maybeWrapNodesInFrameClipPath(
            element,
            root,
            [node],
            renderConfig.frameRendering,
            elementsMap
          );
          addToRoot(g || node, element);
          break;
        }
        case "image": {
          const width = Math.round(element.width);
          const height = Math.round(element.height);
          const fileData = isInitializedImageElement(element) && files[element.fileId];
          if (fileData) {
            const symbolId = `image-${fileData.id}`;
            let symbol = svgRoot.querySelector(`#${symbolId}`);
            if (!symbol) {
              symbol = svgRoot.ownerDocument.createElementNS(SVG_NS, "symbol");
              symbol.id = symbolId;
              const image = svgRoot.ownerDocument.createElementNS(SVG_NS, "image");
              image.setAttribute("width", "100%");
              image.setAttribute("height", "100%");
              image.setAttribute("href", fileData.dataURL);
              image.setAttribute("preserveAspectRatio", "none");
              symbol.appendChild(image);
              root.prepend(symbol);
            }
            const use = svgRoot.ownerDocument.createElementNS(SVG_NS, "use");
            use.setAttribute("href", `#${symbolId}`);
            if (renderConfig.exportWithDarkMode && fileData.mimeType !== MIME_TYPES.svg) {
              use.setAttribute("filter", IMAGE_INVERT_FILTER);
            }
            use.setAttribute("width", `${width}`);
            use.setAttribute("height", `${height}`);
            use.setAttribute("opacity", `${opacity}`);
            if (element.scale[0] !== 1 || element.scale[1] !== 1) {
              const translateX = element.scale[0] !== 1 ? -width : 0;
              const translateY = element.scale[1] !== 1 ? -height : 0;
              use.setAttribute(
                "transform",
                `scale(${element.scale[0]}, ${element.scale[1]}) translate(${translateX} ${translateY})`
              );
            }
            const g = svgRoot.ownerDocument.createElementNS(SVG_NS, "g");
            g.appendChild(use);
            g.setAttribute(
              "transform",
              `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
            );
            if (element.roundness) {
              const clipPath = svgRoot.ownerDocument.createElementNS(
                SVG_NS,
                "clipPath"
              );
              clipPath.id = `image-clipPath-${element.id}`;
              const clipRect = svgRoot.ownerDocument.createElementNS(
                SVG_NS,
                "rect"
              );
              const radius = getCornerRadius(
                Math.min(element.width, element.height),
                element
              );
              clipRect.setAttribute("width", `${element.width}`);
              clipRect.setAttribute("height", `${element.height}`);
              clipRect.setAttribute("rx", `${radius}`);
              clipRect.setAttribute("ry", `${radius}`);
              clipPath.appendChild(clipRect);
              addToRoot(clipPath, element);
              g.setAttributeNS(SVG_NS, "clip-path", `url(#${clipPath.id})`);
            }
            const clipG = maybeWrapNodesInFrameClipPath(
              element,
              root,
              [g],
              renderConfig.frameRendering,
              elementsMap
            );
            addToRoot(clipG || g, element);
          }
          break;
        }
        case "frame":
        case "magicframe": {
          if (renderConfig.frameRendering.enabled && renderConfig.frameRendering.outline) {
            const rect = document.createElementNS(SVG_NS, "rect");
            rect.setAttribute(
              "transform",
              `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
            );
            rect.setAttribute("width", `${element.width}px`);
            rect.setAttribute("height", `${element.height}px`);
            rect.setAttribute("rx", FRAME_STYLE.radius.toString());
            rect.setAttribute("ry", FRAME_STYLE.radius.toString());
            rect.setAttribute("fill", "none");
            rect.setAttribute("stroke", FRAME_STYLE.strokeColor);
            rect.setAttribute("stroke-width", FRAME_STYLE.strokeWidth.toString());
            addToRoot(rect, element);
          }
          break;
        }
        default: {
          if (isTextElement(element)) {
            const node = svgRoot.ownerDocument.createElementNS(SVG_NS, "g");
            if (opacity !== 1) {
              node.setAttribute("stroke-opacity", `${opacity}`);
              node.setAttribute("fill-opacity", `${opacity}`);
            }
            node.setAttribute(
              "transform",
              `translate(${offsetX || 0} ${offsetY || 0}) rotate(${degree} ${cx} ${cy})`
            );
            const lines = element.text.replace(/\r\n?/g, "\n").split("\n");
            const lineHeightPx = getLineHeightInPx(
              element.fontSize,
              element.lineHeight
            );
            const horizontalOffset = element.textAlign === "center" ? element.width / 2 : element.textAlign === "right" ? element.width : 0;
            const verticalOffset = getVerticalOffset(
              element.fontFamily,
              element.fontSize,
              lineHeightPx
            );
            const direction = isRTL(element.text) ? "rtl" : "ltr";
            const textAnchor = element.textAlign === "center" ? "middle" : element.textAlign === "right" || direction === "rtl" ? "end" : "start";
            for (let i = 0; i < lines.length; i++) {
              const text = svgRoot.ownerDocument.createElementNS(SVG_NS, "text");
              text.textContent = lines[i];
              text.setAttribute("x", `${horizontalOffset}`);
              text.setAttribute("y", `${i * lineHeightPx + verticalOffset}`);
              text.setAttribute("font-family", getFontFamilyString(element));
              text.setAttribute("font-size", `${element.fontSize}px`);
              text.setAttribute("fill", element.strokeColor);
              text.setAttribute("text-anchor", textAnchor);
              text.setAttribute("style", "white-space: pre;");
              text.setAttribute("direction", direction);
              text.setAttribute("dominant-baseline", "alphabetic");
              node.appendChild(text);
            }
            const g = maybeWrapNodesInFrameClipPath(
              element,
              root,
              [node],
              renderConfig.frameRendering,
              elementsMap
            );
            addToRoot(g || node, element);
          } else {
            throw new Error(`Unimplemented type ${element.type}`);
          }
        }
      }
    };
    renderSceneToSvg = (elements, elementsMap, rsvg, svgRoot, files, renderConfig) => {
      if (!svgRoot) {
        return;
      }
      elements.filter((el) => !isIframeLikeElement(el)).forEach((element) => {
        if (!element.isDeleted) {
          if (isTextElement(element) && element.containerId && elementsMap.has(element.containerId)) {
            return;
          }
          try {
            renderElementToSvg(
              element,
              elementsMap,
              rsvg,
              svgRoot,
              files,
              element.x + renderConfig.offsetX,
              element.y + renderConfig.offsetY,
              renderConfig
            );
            const boundTextElement = getBoundTextElement(element, elementsMap);
            if (boundTextElement) {
              renderElementToSvg(
                boundTextElement,
                elementsMap,
                rsvg,
                svgRoot,
                files,
                boundTextElement.x + renderConfig.offsetX,
                boundTextElement.y + renderConfig.offsetY,
                renderConfig
              );
            }
          } catch (error) {
            console.error(error);
          }
        }
      });
      elements.filter((el) => isIframeLikeElement(el)).forEach((element) => {
        if (!element.isDeleted) {
          try {
            renderElementToSvg(
              element,
              elementsMap,
              rsvg,
              svgRoot,
              files,
              element.x + renderConfig.offsetX,
              element.y + renderConfig.offsetY,
              renderConfig
            );
          } catch (error) {
            console.error(error);
          }
        }
      });
    };
  }
});

// element/image.ts
var loadHTMLImageElement, updateImageCache, getInitializedImageElements, isHTMLSVGElement, normalizeSVG;
var init_image2 = __esm({
  "element/image.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_typeChecks();
    loadHTMLImageElement = (dataURL) => {
      return new Promise((resolve, reject) => {
        const image = new Image();
        image.onload = () => {
          resolve(image);
        };
        image.onerror = (error) => {
          reject(error);
        };
        image.src = dataURL;
      });
    };
    updateImageCache = async ({
      fileIds,
      files,
      imageCache
    }) => {
      const updatedFiles = /* @__PURE__ */ new Map();
      const erroredFiles = /* @__PURE__ */ new Map();
      await Promise.all(
        fileIds.reduce((promises, fileId) => {
          const fileData = files[fileId];
          if (fileData && !updatedFiles.has(fileId)) {
            updatedFiles.set(fileId, true);
            return promises.concat(
              (async () => {
                try {
                  if (fileData.mimeType === MIME_TYPES.binary) {
                    throw new Error("Only images can be added to ImageCache");
                  }
                  const imagePromise = loadHTMLImageElement(fileData.dataURL);
                  const data = {
                    image: imagePromise,
                    mimeType: fileData.mimeType
                  };
                  imageCache.set(fileId, data);
                  const image = await imagePromise;
                  imageCache.set(fileId, { ...data, image });
                } catch (error) {
                  erroredFiles.set(fileId, true);
                }
              })()
            );
          }
          return promises;
        }, [])
      );
      return {
        imageCache,
        /** includes errored files because they cache was updated nonetheless */
        updatedFiles,
        /** files that failed when creating HTMLImageElement */
        erroredFiles
      };
    };
    getInitializedImageElements = (elements) => elements.filter(
      (element) => isInitializedImageElement(element)
    );
    isHTMLSVGElement = (node) => {
      return node?.nodeName.toLowerCase() === "svg";
    };
    normalizeSVG = async (SVGString) => {
      const doc = new DOMParser().parseFromString(SVGString, MIME_TYPES.svg);
      const svg = doc.querySelector("svg");
      const errorNode = doc.querySelector("parsererror");
      if (errorNode || !isHTMLSVGElement(svg)) {
        throw new Error("Invalid SVG");
      } else {
        if (!svg.hasAttribute("xmlns")) {
          svg.setAttribute("xmlns", SVG_NS);
        }
        if (!svg.hasAttribute("width") || !svg.hasAttribute("height")) {
          const viewBox = svg.getAttribute("viewBox");
          let width = svg.getAttribute("width") || "50";
          let height = svg.getAttribute("height") || "50";
          if (viewBox) {
            const match = viewBox.match(/\d+ +\d+ +(\d+) +(\d+)/);
            if (match) {
              [, width, height] = match;
            }
          }
          svg.setAttribute("width", width);
          svg.setAttribute("height", height);
        }
        return svg.outerHTML;
      }
    };
  }
});

// components/hyperlink/helpers.ts
var EXTERNAL_LINK_IMG, getLinkHandleFromCoords, isPointHittingLinkIcon, isPointHittingLink;
var init_helpers = __esm({
  "components/hyperlink/helpers.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_constants();
    init_bounds();
    init_collision2();
    init_renderElement();
    EXTERNAL_LINK_IMG = document.createElement("img");
    EXTERNAL_LINK_IMG.src = `data:${MIME_TYPES.svg}, ${encodeURIComponent(
      `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#1971c2" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>`
    )}`;
    getLinkHandleFromCoords = ([x1, y1, x2, y2], angle, appState) => {
      const size = DEFAULT_LINK_SIZE;
      const linkWidth = size / appState.zoom.value;
      const linkHeight = size / appState.zoom.value;
      const linkMarginY = size / appState.zoom.value;
      const centerX = (x1 + x2) / 2;
      const centerY = (y1 + y2) / 2;
      const centeringOffset = (size - 8) / (2 * appState.zoom.value);
      const dashedLineMargin = 4 / appState.zoom.value;
      const x = x2 + dashedLineMargin - centeringOffset;
      const y = y1 - dashedLineMargin - linkMarginY + centeringOffset;
      const [rotatedX, rotatedY] = pointRotateRads(
        pointFrom(x + linkWidth / 2, y + linkHeight / 2),
        pointFrom(centerX, centerY),
        angle
      );
      return [
        rotatedX - linkWidth / 2,
        rotatedY - linkHeight / 2,
        linkWidth,
        linkHeight
      ];
    };
    isPointHittingLinkIcon = (element, elementsMap, appState, [x, y]) => {
      const threshold = 4 / appState.zoom.value;
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
      const [linkX, linkY, linkWidth, linkHeight] = getLinkHandleFromCoords(
        [x1, y1, x2, y2],
        element.angle,
        appState
      );
      const hitLink = x > linkX - threshold && x < linkX + threshold + linkWidth && y > linkY - threshold && y < linkY + linkHeight + threshold;
      return hitLink;
    };
    isPointHittingLink = (element, elementsMap, appState, [x, y], isMobile) => {
      if (!element.link || appState.selectedElementIds[element.id]) {
        return false;
      }
      if (!isMobile && appState.viewModeEnabled && hitElementBoundingBox(x, y, element, elementsMap)) {
        return true;
      }
      return isPointHittingLinkIcon(
        element,
        elementsMap,
        appState,
        pointFrom(x, y)
      );
    };
  }
});

// renderer/helpers.ts
var fillCircle, getNormalizedCanvasDimensions, bootstrapCanvas;
var init_helpers2 = __esm({
  "renderer/helpers.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    fillCircle = (context, cx, cy, radius, stroke = true) => {
      context.beginPath();
      context.arc(cx, cy, radius, 0, Math.PI * 2);
      context.fill();
      if (stroke) {
        context.stroke();
      }
    };
    getNormalizedCanvasDimensions = (canvas2, scale) => {
      return [canvas2.width / scale, canvas2.height / scale];
    };
    bootstrapCanvas = ({
      canvas: canvas2,
      scale,
      normalizedWidth,
      normalizedHeight,
      theme,
      isExporting,
      viewBackgroundColor
    }) => {
      const context = canvas2.getContext("2d");
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.scale(scale, scale);
      if (isExporting && theme === THEME.DARK) {
        context.filter = THEME_FILTER;
      }
      if (typeof viewBackgroundColor === "string") {
        const hasTransparence = viewBackgroundColor === "transparent" || viewBackgroundColor.length === 5 || // #RGBA
        viewBackgroundColor.length === 9 || // #RRGGBBA
        /(hsla|rgba)\(/.test(viewBackgroundColor);
        if (hasTransparence) {
          context.clearRect(0, 0, normalizedWidth, normalizedHeight);
        }
        context.save();
        context.fillStyle = viewBackgroundColor;
        context.fillRect(0, 0, normalizedWidth, normalizedHeight);
        context.restore();
      } else {
        context.clearRect(0, 0, normalizedWidth, normalizedHeight);
      }
      return context;
    };
  }
});

// renderer/staticScene.ts
var GridLineColor, strokeGrid, frameClip, linkCanvasCache, renderLinkIcon, _renderStaticScene, renderStaticSceneThrottled, renderStaticScene;
var init_staticScene = __esm({
  "renderer/staticScene.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_element();
    init_frame();
    init_typeChecks();
    init_renderElement();
    init_embeddable();
    init_helpers();
    init_helpers2();
    init_utils2();
    init_textElement();
    GridLineColor = {
      Bold: "#dddddd",
      Regular: "#e5e5e5"
    };
    strokeGrid = (context, gridSize, gridStep, scrollX, scrollY, zoom, width, height) => {
      const offsetX = scrollX % gridSize - gridSize;
      const offsetY = scrollY % gridSize - gridSize;
      const actualGridSize = gridSize * zoom.value;
      const spaceWidth = 1 / zoom.value;
      context.save();
      if (zoom.value === 1) {
        context.translate(offsetX % 1 ? 0 : 0.5, offsetY % 1 ? 0 : 0.5);
      }
      for (let x = offsetX; x < offsetX + width + gridSize * 2; x += gridSize) {
        const isBold = gridStep > 1 && Math.round(x - scrollX) % (gridStep * gridSize) === 0;
        if (!isBold && actualGridSize < 10) {
          continue;
        }
        const lineWidth = Math.min(1 / zoom.value, isBold ? 4 : 1);
        context.lineWidth = lineWidth;
        const lineDash = [lineWidth * 3, spaceWidth + (lineWidth + spaceWidth)];
        context.beginPath();
        context.setLineDash(isBold ? [] : lineDash);
        context.strokeStyle = isBold ? GridLineColor.Bold : GridLineColor.Regular;
        context.moveTo(x, offsetY - gridSize);
        context.lineTo(x, Math.ceil(offsetY + height + gridSize * 2));
        context.stroke();
      }
      for (let y = offsetY; y < offsetY + height + gridSize * 2; y += gridSize) {
        const isBold = gridStep > 1 && Math.round(y - scrollY) % (gridStep * gridSize) === 0;
        if (!isBold && actualGridSize < 10) {
          continue;
        }
        const lineWidth = Math.min(1 / zoom.value, isBold ? 4 : 1);
        context.lineWidth = lineWidth;
        const lineDash = [lineWidth * 3, spaceWidth + (lineWidth + spaceWidth)];
        context.beginPath();
        context.setLineDash(isBold ? [] : lineDash);
        context.strokeStyle = isBold ? GridLineColor.Bold : GridLineColor.Regular;
        context.moveTo(offsetX - gridSize, y);
        context.lineTo(Math.ceil(offsetX + width + gridSize * 2), y);
        context.stroke();
      }
      context.restore();
    };
    frameClip = (frame, context, renderConfig, appState) => {
      context.translate(frame.x + appState.scrollX, frame.y + appState.scrollY);
      context.beginPath();
      if (context.roundRect) {
        context.roundRect(
          0,
          0,
          frame.width,
          frame.height,
          FRAME_STYLE.radius / appState.zoom.value
        );
      } else {
        context.rect(0, 0, frame.width, frame.height);
      }
      context.clip();
      context.translate(
        -(frame.x + appState.scrollX),
        -(frame.y + appState.scrollY)
      );
    };
    renderLinkIcon = (element, context, appState, elementsMap) => {
      if (element.link && !appState.selectedElementIds[element.id]) {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const [x, y, width, height] = getLinkHandleFromCoords(
          [x1, y1, x2, y2],
          element.angle,
          appState
        );
        const centerX = x + width / 2;
        const centerY = y + height / 2;
        context.save();
        context.translate(appState.scrollX + centerX, appState.scrollY + centerY);
        context.rotate(element.angle);
        if (!linkCanvasCache || linkCanvasCache.zoom !== appState.zoom.value) {
          linkCanvasCache = document.createElement("canvas");
          linkCanvasCache.zoom = appState.zoom.value;
          linkCanvasCache.width = width * window.devicePixelRatio * appState.zoom.value;
          linkCanvasCache.height = height * window.devicePixelRatio * appState.zoom.value;
          const linkCanvasCacheContext = linkCanvasCache.getContext("2d");
          linkCanvasCacheContext.scale(
            window.devicePixelRatio * appState.zoom.value,
            window.devicePixelRatio * appState.zoom.value
          );
          linkCanvasCacheContext.fillStyle = "#fff";
          linkCanvasCacheContext.fillRect(0, 0, width, height);
          linkCanvasCacheContext.drawImage(EXTERNAL_LINK_IMG, 0, 0, width, height);
          linkCanvasCacheContext.restore();
          context.drawImage(
            linkCanvasCache,
            x - centerX,
            y - centerY,
            width,
            height
          );
        } else {
          context.drawImage(
            linkCanvasCache,
            x - centerX,
            y - centerY,
            width,
            height
          );
        }
        context.restore();
      }
    };
    _renderStaticScene = ({
      canvas: canvas2,
      rc,
      elementsMap,
      allElementsMap,
      visibleElements,
      scale,
      appState,
      renderConfig
    }) => {
      if (canvas2 === null) {
        return;
      }
      const { renderGrid = true, isExporting } = renderConfig;
      const [normalizedWidth, normalizedHeight] = getNormalizedCanvasDimensions(
        canvas2,
        scale
      );
      const context = bootstrapCanvas({
        canvas: canvas2,
        scale,
        normalizedWidth,
        normalizedHeight,
        theme: appState.theme,
        isExporting,
        viewBackgroundColor: appState.viewBackgroundColor
      });
      context.scale(appState.zoom.value, appState.zoom.value);
      if (renderGrid) {
        strokeGrid(
          context,
          appState.gridSize,
          appState.gridStep,
          appState.scrollX,
          appState.scrollY,
          appState.zoom,
          normalizedWidth / appState.zoom.value,
          normalizedHeight / appState.zoom.value
        );
      }
      const groupsToBeAddedToFrame = /* @__PURE__ */ new Set();
      visibleElements.forEach((element) => {
        if (element.groupIds.length > 0 && appState.frameToHighlight && appState.selectedElementIds[element.id] && (elementOverlapsWithFrame(
          element,
          appState.frameToHighlight,
          elementsMap
        ) || element.groupIds.find((groupId) => groupsToBeAddedToFrame.has(groupId)))) {
          element.groupIds.forEach(
            (groupId) => groupsToBeAddedToFrame.add(groupId)
          );
        }
      });
      visibleElements.filter((el) => !isIframeLikeElement(el)).forEach((element) => {
        try {
          const frameId = element.frameId || appState.frameToHighlight?.id;
          if (isTextElement(element) && element.containerId && elementsMap.has(element.containerId)) {
            return;
          }
          context.save();
          if (frameId && appState.frameRendering.enabled && appState.frameRendering.clip) {
            const frame = getTargetFrame(element, elementsMap, appState);
            if (frame && isElementInFrame(element, elementsMap, appState)) {
              frameClip(frame, context, renderConfig, appState);
            }
            renderElement(
              element,
              elementsMap,
              allElementsMap,
              rc,
              context,
              renderConfig,
              appState
            );
          } else {
            renderElement(
              element,
              elementsMap,
              allElementsMap,
              rc,
              context,
              renderConfig,
              appState
            );
          }
          const boundTextElement = getBoundTextElement(element, elementsMap);
          if (boundTextElement) {
            renderElement(
              boundTextElement,
              elementsMap,
              allElementsMap,
              rc,
              context,
              renderConfig,
              appState
            );
          }
          context.restore();
          if (!isExporting) {
            renderLinkIcon(element, context, appState, elementsMap);
          }
        } catch (error) {
          console.error(error);
        }
      });
      visibleElements.filter((el) => isIframeLikeElement(el)).forEach((element) => {
        try {
          const render = () => {
            renderElement(
              element,
              elementsMap,
              allElementsMap,
              rc,
              context,
              renderConfig,
              appState
            );
            if (isIframeLikeElement(element) && (isExporting || isEmbeddableElement(element) && renderConfig.embedsValidationStatus.get(element.id) !== true) && element.width && element.height) {
              const label = createPlaceholderEmbeddableLabel(element);
              renderElement(
                label,
                elementsMap,
                allElementsMap,
                rc,
                context,
                renderConfig,
                appState
              );
            }
            if (!isExporting) {
              renderLinkIcon(element, context, appState, elementsMap);
            }
          };
          const frameId = element.frameId || appState.frameToHighlight?.id;
          if (frameId && appState.frameRendering.enabled && appState.frameRendering.clip) {
            context.save();
            const frame = getTargetFrame(element, elementsMap, appState);
            if (frame && isElementInFrame(element, elementsMap, appState)) {
              frameClip(frame, context, renderConfig, appState);
            }
            render();
            context.restore();
          } else {
            render();
          }
        } catch (error) {
          console.error(error);
        }
      });
      renderConfig.pendingFlowchartNodes?.forEach((element) => {
        try {
          renderElement(
            element,
            elementsMap,
            allElementsMap,
            rc,
            context,
            renderConfig,
            appState
          );
        } catch (error) {
          console.error(error);
        }
      });
    };
    renderStaticSceneThrottled = throttleRAF(
      (config) => {
        _renderStaticScene(config);
      },
      { trailing: true }
    );
    renderStaticScene = (renderConfig, throttle6) => {
      if (throttle6) {
        renderStaticSceneThrottled(renderConfig);
        return;
      }
      _renderStaticScene(renderConfig);
    };
  }
});

// scene/export.ts
import rough from "roughjs/bin/rough";
var SVG_EXPORT_TAG, truncateText, addFrameLabelsAsTextElements, getFrameRenderingConfig, prepareElementsForRender, exportToCanvas, exportToSvg, getCanvasSize, getExportSize, getFontFaces;
var init_export = __esm({
  "scene/export.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_bounds();
    init_staticSvgScene();
    init_utils2();
    init_constants();
    init_appState();
    init_json();
    init_image2();
    init_frame();
    init_element();
    init_mutateElement();
    init_typeChecks();
    init_fractionalIndex();
    init_staticScene();
    init_fonts();
    SVG_EXPORT_TAG = `<!-- svg-source:excalidraw -->`;
    truncateText = (element, maxWidth) => {
      if (element.width <= maxWidth) {
        return element;
      }
      const canvas2 = document.createElement("canvas");
      const ctx = canvas2.getContext("2d");
      ctx.font = getFontString({
        fontFamily: element.fontFamily,
        fontSize: element.fontSize
      });
      let text = element.text;
      const metrics = ctx.measureText(text);
      if (metrics.width > maxWidth) {
        for (let i = text.length; i > 0; i--) {
          const newText = `${text.slice(0, i)}...`;
          if (ctx.measureText(newText).width <= maxWidth) {
            text = newText;
            break;
          }
        }
      }
      return newElementWith(element, { text, width: maxWidth });
    };
    addFrameLabelsAsTextElements = (elements, opts) => {
      const nextElements = [];
      for (const element of elements) {
        if (isFrameLikeElement(element)) {
          let textElement = newTextElement({
            x: element.x,
            y: element.y - FRAME_STYLE.nameOffsetY,
            fontFamily: FONT_FAMILY.Helvetica,
            fontSize: FRAME_STYLE.nameFontSize,
            lineHeight: FRAME_STYLE.nameLineHeight,
            strokeColor: opts.exportWithDarkMode ? FRAME_STYLE.nameColorDarkTheme : FRAME_STYLE.nameColorLightTheme,
            text: getFrameLikeTitle(element)
          });
          textElement.y -= textElement.height;
          textElement = truncateText(textElement, element.width);
          nextElements.push(textElement);
        }
        nextElements.push(element);
      }
      return nextElements;
    };
    getFrameRenderingConfig = (exportingFrame, frameRendering) => {
      frameRendering = frameRendering || getDefaultAppState().frameRendering;
      return {
        enabled: exportingFrame ? true : frameRendering.enabled,
        outline: exportingFrame ? false : frameRendering.outline,
        name: exportingFrame ? false : frameRendering.name,
        clip: exportingFrame ? true : frameRendering.clip
      };
    };
    prepareElementsForRender = ({
      elements,
      exportingFrame,
      frameRendering,
      exportWithDarkMode
    }) => {
      let nextElements;
      if (exportingFrame) {
        nextElements = getElementsOverlappingFrame(elements, exportingFrame);
      } else if (frameRendering.enabled && frameRendering.name) {
        nextElements = addFrameLabelsAsTextElements(elements, {
          exportWithDarkMode
        });
      } else {
        nextElements = elements;
      }
      return nextElements;
    };
    exportToCanvas = async (elements, appState, files, {
      exportBackground,
      exportPadding = DEFAULT_EXPORT_PADDING,
      viewBackgroundColor,
      exportingFrame
    }, createCanvas = (width, height) => {
      const canvas2 = document.createElement("canvas");
      canvas2.width = width * appState.exportScale;
      canvas2.height = height * appState.exportScale;
      return { canvas: canvas2, scale: appState.exportScale };
    }, loadFonts = async () => {
      await Fonts.loadFontsForElements(elements);
    }) => {
      await loadFonts();
      const frameRendering = getFrameRenderingConfig(
        exportingFrame ?? null,
        appState.frameRendering ?? null
      );
      if (exportingFrame) {
        frameRendering.clip = false;
      }
      const elementsForRender = prepareElementsForRender({
        elements,
        exportingFrame,
        exportWithDarkMode: appState.exportWithDarkMode,
        frameRendering
      });
      if (exportingFrame) {
        exportPadding = 0;
      }
      const [minX, minY, width, height] = getCanvasSize(
        exportingFrame ? [exportingFrame] : getRootElements(elementsForRender),
        exportPadding
      );
      const { canvas: canvas2, scale = 1 } = createCanvas(width, height);
      const defaultAppState2 = getDefaultAppState();
      const { imageCache } = await updateImageCache({
        imageCache: /* @__PURE__ */ new Map(),
        fileIds: getInitializedImageElements(elementsForRender).map(
          (element) => element.fileId
        ),
        files
      });
      renderStaticScene({
        canvas: canvas2,
        rc: rough.canvas(canvas2),
        elementsMap: toBrandedType(
          arrayToMap(elementsForRender)
        ),
        allElementsMap: toBrandedType(
          arrayToMap(syncInvalidIndices(elements))
        ),
        visibleElements: elementsForRender,
        scale,
        appState: {
          ...appState,
          frameRendering,
          viewBackgroundColor: exportBackground ? viewBackgroundColor : null,
          scrollX: -minX + exportPadding,
          scrollY: -minY + exportPadding,
          zoom: defaultAppState2.zoom,
          shouldCacheIgnoreZoom: false,
          theme: appState.exportWithDarkMode ? THEME.DARK : THEME.LIGHT
        },
        renderConfig: {
          canvasBackgroundColor: viewBackgroundColor,
          imageCache,
          renderGrid: false,
          isExporting: true,
          // empty disables embeddable rendering
          embedsValidationStatus: /* @__PURE__ */ new Map(),
          elementsPendingErasure: /* @__PURE__ */ new Set(),
          pendingFlowchartNodes: null
        }
      });
      return canvas2;
    };
    exportToSvg = async (elements, appState, files, opts) => {
      const frameRendering = getFrameRenderingConfig(
        opts?.exportingFrame ?? null,
        appState.frameRendering ?? null
      );
      let {
        exportPadding = DEFAULT_EXPORT_PADDING,
        exportWithDarkMode = false,
        viewBackgroundColor,
        exportScale = 1,
        exportEmbedScene
      } = appState;
      const { exportingFrame = null } = opts || {};
      const elementsForRender = prepareElementsForRender({
        elements,
        exportingFrame,
        exportWithDarkMode,
        frameRendering
      });
      if (exportingFrame) {
        exportPadding = 0;
      }
      let metadata = "";
      if (exportEmbedScene) {
        try {
          metadata = await (await Promise.resolve().then(() => (init_image(), image_exports))).encodeSvgMetadata({
            // when embedding scene, we want to embed the origionally supplied
            // elements which don't contain the temp frame labels.
            // But it also requires that the exportToSvg is being supplied with
            // only the elements that we're exporting, and no extra.
            text: serializeAsJSON(elements, appState, files || {}, "local")
          });
        } catch (error) {
          console.error(error);
        }
      }
      const [minX, minY, width, height] = getCanvasSize(
        exportingFrame ? [exportingFrame] : getRootElements(elementsForRender),
        exportPadding
      );
      const svgRoot = document.createElementNS(SVG_NS, "svg");
      svgRoot.setAttribute("version", "1.1");
      svgRoot.setAttribute("xmlns", SVG_NS);
      svgRoot.setAttribute("viewBox", `0 0 ${width} ${height}`);
      svgRoot.setAttribute("width", `${width * exportScale}`);
      svgRoot.setAttribute("height", `${height * exportScale}`);
      if (exportWithDarkMode) {
        svgRoot.setAttribute("filter", THEME_FILTER);
      }
      const offsetX = -minX + exportPadding;
      const offsetY = -minY + exportPadding;
      const frameElements = getFrameLikeElements(elements);
      let exportingFrameClipPath = "";
      const elementsMap = arrayToMap(elements);
      for (const frame of frameElements) {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(frame, elementsMap);
        const cx = (x2 - x1) / 2 - (frame.x - x1);
        const cy = (y2 - y1) / 2 - (frame.y - y1);
        exportingFrameClipPath += `<clipPath id=${frame.id}>
            <rect transform="translate(${frame.x + offsetX} ${frame.y + offsetY}) rotate(${frame.angle} ${cx} ${cy})"
          width="${frame.width}"
          height="${frame.height}"
          ${exportingFrame ? "" : `rx=${FRAME_STYLE.radius} ry=${FRAME_STYLE.radius}`}
          >
          </rect>
        </clipPath>`;
      }
      const fontFaces = opts?.skipInliningFonts ? [] : await getFontFaces(elements);
      svgRoot.innerHTML = `
  ${SVG_EXPORT_TAG}
  ${metadata}
  <defs>
    <style class="style-fonts">
      ${fontFaces.join("\n")}
    </style>
    ${exportingFrameClipPath}
  </defs>
  `;
      if (appState.exportBackground && viewBackgroundColor) {
        const rect = svgRoot.ownerDocument.createElementNS(SVG_NS, "rect");
        rect.setAttribute("x", "0");
        rect.setAttribute("y", "0");
        rect.setAttribute("width", `${width}`);
        rect.setAttribute("height", `${height}`);
        rect.setAttribute("fill", viewBackgroundColor);
        svgRoot.appendChild(rect);
      }
      const rsvg = rough.svg(svgRoot);
      const renderEmbeddables = opts?.renderEmbeddables ?? false;
      renderSceneToSvg(
        elementsForRender,
        toBrandedType(arrayToMap(elementsForRender)),
        rsvg,
        svgRoot,
        files || {},
        {
          offsetX,
          offsetY,
          isExporting: true,
          exportWithDarkMode,
          renderEmbeddables,
          frameRendering,
          canvasBackgroundColor: viewBackgroundColor,
          embedsValidationStatus: renderEmbeddables ? new Map(
            elementsForRender.filter((element) => isFrameLikeElement(element)).map((element) => [element.id, true])
          ) : /* @__PURE__ */ new Map()
        }
      );
      return svgRoot;
    };
    getCanvasSize = (elements, exportPadding) => {
      const [minX, minY, maxX, maxY] = getCommonBounds(elements);
      const width = distance(minX, maxX) + exportPadding * 2;
      const height = distance(minY, maxY) + exportPadding * 2;
      return [minX, minY, width, height];
    };
    getExportSize = (elements, exportPadding, scale) => {
      const [, , width, height] = getCanvasSize(elements, exportPadding).map(
        (dimension) => Math.trunc(dimension * scale)
      );
      return [width, height];
    };
    getFontFaces = async (elements) => {
      const fontFamilies = /* @__PURE__ */ new Set();
      const codePoints = /* @__PURE__ */ new Set();
      for (const element of elements) {
        if (!isTextElement(element)) {
          continue;
        }
        fontFamilies.add(element.fontFamily);
        for (const codePoint of Array.from(
          element.originalText,
          (u) => u.codePointAt(0)
        )) {
          if (codePoint) {
            codePoints.add(codePoint);
          }
        }
      }
      const getSource = (font) => {
        try {
          return font.getContent(codePoints);
        } catch {
          return font.urls[0].toString();
        }
      };
      const fontFaces = await Promise.all(
        Array.from(fontFamilies).map(async (x) => {
          const { fonts, metadata } = Fonts.registered.get(x) ?? {};
          if (!Array.isArray(fonts)) {
            console.error(
              `Couldn't find registered fonts for font-family "${x}"`,
              Fonts.registered
            );
            return [];
          }
          if (metadata?.local) {
            return [];
          }
          return Promise.all(
            fonts.map(
              async (font) => `@font-face {
        font-family: ${font.fontFace.family};
        src: url(${await getSource(font)});
          }`
            )
          );
        })
      );
      return fontFaces.flat();
    };
  }
});

// charts.ts
var BAR_WIDTH, BAR_GAP, BAR_HEIGHT, GRID_OPACITY, NOT_SPREADSHEET, VALID_SPREADSHEET, tryParseNumber, isNumericColumn, tryParseCells, transposeCells, tryParseSpreadsheet, bgColors, commonProps, getChartDimensions, chartXLabels, chartYLabels, chartLines, chartBaseElements, chartTypeBar, chartTypeLine, renderSpreadsheet;
var init_charts = __esm({
  "charts.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_colors();
    init_constants();
    init_element();
    init_random();
    BAR_WIDTH = 32;
    BAR_GAP = 12;
    BAR_HEIGHT = 256;
    GRID_OPACITY = 50;
    NOT_SPREADSHEET = "NOT_SPREADSHEET";
    VALID_SPREADSHEET = "VALID_SPREADSHEET";
    tryParseNumber = (s) => {
      const match = /^([-+]?)[$€£¥₩]?([-+]?)([\d.,]+)[%]?$/.exec(s);
      if (!match) {
        return null;
      }
      return parseFloat(`${(match[1] || match[2]) + match[3]}`.replace(/,/g, ""));
    };
    isNumericColumn = (lines, columnIndex) => lines.slice(1).every((line) => tryParseNumber(line[columnIndex]) !== null);
    tryParseCells = (cells) => {
      const numCols = cells[0].length;
      if (numCols > 2) {
        return { type: NOT_SPREADSHEET, reason: "More than 2 columns" };
      }
      if (numCols === 1) {
        if (!isNumericColumn(cells, 0)) {
          return { type: NOT_SPREADSHEET, reason: "Value is not numeric" };
        }
        const hasHeader2 = tryParseNumber(cells[0][0]) === null;
        const values = (hasHeader2 ? cells.slice(1) : cells).map(
          (line) => tryParseNumber(line[0])
        );
        if (values.length < 2) {
          return { type: NOT_SPREADSHEET, reason: "Less than two rows" };
        }
        return {
          type: VALID_SPREADSHEET,
          spreadsheet: {
            title: hasHeader2 ? cells[0][0] : null,
            labels: null,
            values
          }
        };
      }
      const labelColumnNumeric = isNumericColumn(cells, 0);
      const valueColumnNumeric = isNumericColumn(cells, 1);
      if (!labelColumnNumeric && !valueColumnNumeric) {
        return { type: NOT_SPREADSHEET, reason: "Value is not numeric" };
      }
      const [labelColumnIndex, valueColumnIndex] = valueColumnNumeric ? [0, 1] : [1, 0];
      const hasHeader = tryParseNumber(cells[0][valueColumnIndex]) === null;
      const rows = hasHeader ? cells.slice(1) : cells;
      if (rows.length < 2) {
        return { type: NOT_SPREADSHEET, reason: "Less than 2 rows" };
      }
      return {
        type: VALID_SPREADSHEET,
        spreadsheet: {
          title: hasHeader ? cells[0][valueColumnIndex] : null,
          labels: rows.map((row) => row[labelColumnIndex]),
          values: rows.map((row) => tryParseNumber(row[valueColumnIndex]))
        }
      };
    };
    transposeCells = (cells) => {
      const nextCells = [];
      for (let col = 0; col < cells[0].length; col++) {
        const nextCellRow = [];
        for (let row = 0; row < cells.length; row++) {
          nextCellRow.push(cells[row][col]);
        }
        nextCells.push(nextCellRow);
      }
      return nextCells;
    };
    tryParseSpreadsheet = (text) => {
      let lines = text.trim().split("\n").map((line) => line.trim().split("	"));
      if (lines.length && lines[0].length !== 2) {
        lines = text.trim().split("\n").map((line) => line.trim().split(","));
      }
      if (lines.length === 0) {
        return { type: NOT_SPREADSHEET, reason: "No values" };
      }
      const numColsFirstLine = lines[0].length;
      const isSpreadsheet = lines.every((line) => line.length === numColsFirstLine);
      if (!isSpreadsheet) {
        return {
          type: NOT_SPREADSHEET,
          reason: "All rows don't have same number of columns"
        };
      }
      const result = tryParseCells(lines);
      if (result.type !== VALID_SPREADSHEET) {
        const transposedResults = tryParseCells(transposeCells(lines));
        if (transposedResults.type === VALID_SPREADSHEET) {
          return transposedResults;
        }
      }
      return result;
    };
    bgColors = getAllColorsSpecificShade(DEFAULT_CHART_COLOR_INDEX);
    commonProps = {
      fillStyle: "hachure",
      fontFamily: DEFAULT_FONT_FAMILY,
      fontSize: DEFAULT_FONT_SIZE,
      opacity: 100,
      roughness: 1,
      strokeColor: COLOR_PALETTE.black,
      roundness: null,
      strokeStyle: "solid",
      strokeWidth: 1,
      verticalAlign: VERTICAL_ALIGN.MIDDLE,
      locked: false
    };
    getChartDimensions = (spreadsheet) => {
      const chartWidth = (BAR_WIDTH + BAR_GAP) * spreadsheet.values.length + BAR_GAP;
      const chartHeight = BAR_HEIGHT + BAR_GAP * 2;
      return { chartWidth, chartHeight };
    };
    chartXLabels = (spreadsheet, x, y, groupId, backgroundColor) => {
      return spreadsheet.labels?.map((label, index) => {
        return newTextElement({
          groupIds: [groupId],
          backgroundColor,
          ...commonProps,
          text: label.length > 8 ? `${label.slice(0, 5)}...` : label,
          x: x + index * (BAR_WIDTH + BAR_GAP) + BAR_GAP * 2,
          y: y + BAR_GAP / 2,
          width: BAR_WIDTH,
          angle: 5.87,
          fontSize: 16,
          textAlign: "center",
          verticalAlign: "top"
        });
      }) || [];
    };
    chartYLabels = (spreadsheet, x, y, groupId, backgroundColor) => {
      const minYLabel = newTextElement({
        groupIds: [groupId],
        backgroundColor,
        ...commonProps,
        x: x - BAR_GAP,
        y: y - BAR_GAP,
        text: "0",
        textAlign: "right"
      });
      const maxYLabel = newTextElement({
        groupIds: [groupId],
        backgroundColor,
        ...commonProps,
        x: x - BAR_GAP,
        y: y - BAR_HEIGHT - minYLabel.height / 2,
        text: Math.max(...spreadsheet.values).toLocaleString(),
        textAlign: "right"
      });
      return [minYLabel, maxYLabel];
    };
    chartLines = (spreadsheet, x, y, groupId, backgroundColor) => {
      const { chartWidth, chartHeight } = getChartDimensions(spreadsheet);
      const xLine = newLinearElement({
        backgroundColor,
        groupIds: [groupId],
        ...commonProps,
        type: "line",
        x,
        y,
        width: chartWidth,
        points: [pointFrom(0, 0), pointFrom(chartWidth, 0)]
      });
      const yLine = newLinearElement({
        backgroundColor,
        groupIds: [groupId],
        ...commonProps,
        type: "line",
        x,
        y,
        height: chartHeight,
        points: [pointFrom(0, 0), pointFrom(0, -chartHeight)]
      });
      const maxLine = newLinearElement({
        backgroundColor,
        groupIds: [groupId],
        ...commonProps,
        type: "line",
        x,
        y: y - BAR_HEIGHT - BAR_GAP,
        strokeStyle: "dotted",
        width: chartWidth,
        opacity: GRID_OPACITY,
        points: [pointFrom(0, 0), pointFrom(chartWidth, 0)]
      });
      return [xLine, yLine, maxLine];
    };
    chartBaseElements = (spreadsheet, x, y, groupId, backgroundColor, debug) => {
      const { chartWidth, chartHeight } = getChartDimensions(spreadsheet);
      const title = spreadsheet.title ? newTextElement({
        backgroundColor,
        groupIds: [groupId],
        ...commonProps,
        text: spreadsheet.title,
        x: x + chartWidth / 2,
        y: y - BAR_HEIGHT - BAR_GAP * 2 - DEFAULT_FONT_SIZE,
        roundness: null,
        textAlign: "center"
      }) : null;
      const debugRect = debug ? newElement({
        backgroundColor,
        groupIds: [groupId],
        ...commonProps,
        type: "rectangle",
        x,
        y: y - chartHeight,
        width: chartWidth,
        height: chartHeight,
        strokeColor: COLOR_PALETTE.black,
        fillStyle: "solid",
        opacity: 6
      }) : null;
      return [
        ...debugRect ? [debugRect] : [],
        ...title ? [title] : [],
        ...chartXLabels(spreadsheet, x, y, groupId, backgroundColor),
        ...chartYLabels(spreadsheet, x, y, groupId, backgroundColor),
        ...chartLines(spreadsheet, x, y, groupId, backgroundColor)
      ];
    };
    chartTypeBar = (spreadsheet, x, y) => {
      const max = Math.max(...spreadsheet.values);
      const groupId = randomId();
      const backgroundColor = bgColors[Math.floor(Math.random() * bgColors.length)];
      const bars = spreadsheet.values.map((value, index) => {
        const barHeight = value / max * BAR_HEIGHT;
        return newElement({
          backgroundColor,
          groupIds: [groupId],
          ...commonProps,
          type: "rectangle",
          x: x + index * (BAR_WIDTH + BAR_GAP) + BAR_GAP,
          y: y - barHeight - BAR_GAP,
          width: BAR_WIDTH,
          height: barHeight
        });
      });
      return [
        ...bars,
        ...chartBaseElements(
          spreadsheet,
          x,
          y,
          groupId,
          backgroundColor,
          define_import_meta_env_default.DEV
        )
      ];
    };
    chartTypeLine = (spreadsheet, x, y) => {
      const max = Math.max(...spreadsheet.values);
      const groupId = randomId();
      const backgroundColor = bgColors[Math.floor(Math.random() * bgColors.length)];
      let index = 0;
      const points = [];
      for (const value of spreadsheet.values) {
        const cx = index * (BAR_WIDTH + BAR_GAP);
        const cy = -(value / max) * BAR_HEIGHT;
        points.push([cx, cy]);
        index++;
      }
      const maxX = Math.max(...points.map((element) => element[0]));
      const maxY = Math.max(...points.map((element) => element[1]));
      const minX = Math.min(...points.map((element) => element[0]));
      const minY = Math.min(...points.map((element) => element[1]));
      const line = newLinearElement({
        backgroundColor,
        groupIds: [groupId],
        ...commonProps,
        type: "line",
        x: x + BAR_GAP + BAR_WIDTH / 2,
        y: y - BAR_GAP,
        height: maxY - minY,
        width: maxX - minX,
        strokeWidth: 2,
        points
      });
      const dots = spreadsheet.values.map((value, index2) => {
        const cx = index2 * (BAR_WIDTH + BAR_GAP) + BAR_GAP / 2;
        const cy = -(value / max) * BAR_HEIGHT + BAR_GAP / 2;
        return newElement({
          backgroundColor,
          groupIds: [groupId],
          ...commonProps,
          fillStyle: "solid",
          strokeWidth: 2,
          type: "ellipse",
          x: x + cx + BAR_WIDTH / 2,
          y: y + cy - BAR_GAP * 2,
          width: BAR_GAP,
          height: BAR_GAP
        });
      });
      const lines = spreadsheet.values.map((value, index2) => {
        const cx = index2 * (BAR_WIDTH + BAR_GAP) + BAR_GAP / 2;
        const cy = value / max * BAR_HEIGHT + BAR_GAP / 2 + BAR_GAP;
        return newLinearElement({
          backgroundColor,
          groupIds: [groupId],
          ...commonProps,
          type: "line",
          x: x + cx + BAR_WIDTH / 2 + BAR_GAP / 2,
          y: y - cy,
          height: cy,
          strokeStyle: "dotted",
          opacity: GRID_OPACITY,
          points: [pointFrom(0, 0), pointFrom(0, cy)]
        });
      });
      return [
        ...chartBaseElements(
          spreadsheet,
          x,
          y,
          groupId,
          backgroundColor,
          define_import_meta_env_default.DEV
        ),
        line,
        ...lines,
        ...dots
      ];
    };
    renderSpreadsheet = (chartType, spreadsheet, x, y) => {
      if (chartType === "line") {
        return chartTypeLine(spreadsheet, x, y);
      }
      return chartTypeBar(spreadsheet, x, y);
    };
  }
});

// clipboard.ts
function parseHTMLTree(el) {
  let result = [];
  for (const node of el.childNodes) {
    if (node.nodeType === 3) {
      const text = node.textContent?.trim();
      if (text) {
        result.push({ type: "text", value: text });
      }
    } else if (node instanceof HTMLImageElement) {
      const url = node.getAttribute("src");
      if (url && url.startsWith("http")) {
        result.push({ type: "imageUrl", value: url });
      }
    } else {
      result = result.concat(parseHTMLTree(node));
    }
  }
  return result;
}
var probablySupportsClipboardReadText, probablySupportsClipboardWriteText, probablySupportsClipboardBlob, clipboardContainsElements, createPasteEvent, serializeAsClipboardJSON, copyToClipboard, parsePotentialSpreadsheet, maybeParseHTMLPaste, readSystemClipboard, parseClipboardEvent, parseClipboard, copyBlobToClipboardAsPng, copyTextToSystemClipboard, copyTextViaExecCommand;
var init_clipboard = __esm({
  "clipboard.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_charts();
    init_constants();
    init_typeChecks();
    init_newElement();
    init_mutateElement();
    init_frame();
    init_utils2();
    probablySupportsClipboardReadText = "clipboard" in navigator && "readText" in navigator.clipboard;
    probablySupportsClipboardWriteText = "clipboard" in navigator && "writeText" in navigator.clipboard;
    probablySupportsClipboardBlob = "clipboard" in navigator && "write" in navigator.clipboard && "ClipboardItem" in window && "toBlob" in HTMLCanvasElement.prototype;
    clipboardContainsElements = (contents) => {
      if ([
        EXPORT_DATA_TYPES.excalidraw,
        EXPORT_DATA_TYPES.excalidrawClipboard,
        EXPORT_DATA_TYPES.excalidrawClipboardWithAPI
      ].includes(contents?.type) && Array.isArray(contents.elements)) {
        return true;
      }
      return false;
    };
    createPasteEvent = ({
      types,
      files
    }) => {
      if (!types && !files) {
        console.warn("createPasteEvent: no types or files provided");
      }
      const event = new ClipboardEvent("paste", {
        clipboardData: new DataTransfer()
      });
      if (types) {
        for (const [type, value] of Object.entries(types)) {
          try {
            event.clipboardData?.setData(type, value);
            if (event.clipboardData?.getData(type) !== value) {
              throw new Error(`Failed to set "${type}" as clipboardData item`);
            }
          } catch (error) {
            throw new Error(error.message);
          }
        }
      }
      if (files) {
        let idx = -1;
        for (const file2 of files) {
          idx++;
          try {
            event.clipboardData?.items.add(file2);
            if (event.clipboardData?.files[idx] !== file2) {
              throw new Error(
                `Failed to set file "${file2.name}" as clipboardData item`
              );
            }
          } catch (error) {
            throw new Error(error.message);
          }
        }
      }
      return event;
    };
    serializeAsClipboardJSON = ({
      elements,
      files
    }) => {
      const elementsMap = arrayToMap(elements);
      const framesToCopy = new Set(
        elements.filter((element) => isFrameLikeElement(element))
      );
      let foundFile = false;
      const _files = elements.reduce((acc, element) => {
        if (isInitializedImageElement(element)) {
          foundFile = true;
          if (files && files[element.fileId]) {
            acc[element.fileId] = files[element.fileId];
          }
        }
        return acc;
      }, {});
      if (foundFile && !files) {
        console.warn(
          "copyToClipboard: attempting to file element(s) without providing associated `files` object."
        );
      }
      const contents = {
        type: EXPORT_DATA_TYPES.excalidrawClipboard,
        elements: elements.map((element) => {
          if (getContainingFrame(element, elementsMap) && !framesToCopy.has(getContainingFrame(element, elementsMap))) {
            const copiedElement = deepCopyElement(element);
            mutateElement(copiedElement, {
              frameId: null
            });
            return copiedElement;
          }
          return element;
        }),
        files: files ? _files : void 0
      };
      return JSON.stringify(contents);
    };
    copyToClipboard = async (elements, files, clipboardEvent) => {
      await copyTextToSystemClipboard(
        serializeAsClipboardJSON({ elements, files }),
        clipboardEvent
      );
    };
    parsePotentialSpreadsheet = (text) => {
      const result = tryParseSpreadsheet(text);
      if (result.type === VALID_SPREADSHEET) {
        return { spreadsheet: result.spreadsheet };
      }
      return null;
    };
    maybeParseHTMLPaste = (event) => {
      const html = event.clipboardData?.getData("text/html");
      if (!html) {
        return null;
      }
      try {
        const doc = new DOMParser().parseFromString(html, "text/html");
        const content = parseHTMLTree(doc.body);
        if (content.length) {
          return { type: "mixedContent", value: content };
        }
      } catch (error) {
        console.error(`error in parseHTMLFromPaste: ${error.message}`);
      }
      return null;
    };
    readSystemClipboard = async () => {
      const types = {};
      try {
        if (navigator.clipboard?.readText) {
          return { "text/plain": await navigator.clipboard?.readText() };
        }
      } catch (error) {
        if (navigator.clipboard?.read) {
          console.warn(
            `navigator.clipboard.readText() failed (${error.message}). Failling back to navigator.clipboard.read()`
          );
        } else {
          throw error;
        }
      }
      let clipboardItems;
      try {
        clipboardItems = await navigator.clipboard?.read();
      } catch (error) {
        if (error.name === "DataError") {
          console.warn(
            `navigator.clipboard.read() error, clipboard is probably empty: ${error.message}`
          );
          return types;
        }
        throw error;
      }
      for (const item of clipboardItems) {
        for (const type of item.types) {
          if (!isMemberOf(ALLOWED_PASTE_MIME_TYPES, type)) {
            continue;
          }
          try {
            types[type] = await (await item.getType(type)).text();
          } catch (error) {
            console.warn(
              `Cannot retrieve ${type} from clipboardItem: ${error.message}`
            );
          }
        }
      }
      if (Object.keys(types).length === 0) {
        console.warn("No clipboard data found from clipboard.read().");
        return types;
      }
      return types;
    };
    parseClipboardEvent = async (event, isPlainPaste = false) => {
      try {
        const mixedContent = !isPlainPaste && event && maybeParseHTMLPaste(event);
        if (mixedContent) {
          if (mixedContent.value.every((item) => item.type === "text")) {
            return {
              type: "text",
              value: event.clipboardData?.getData("text/plain") || mixedContent.value.map((item) => item.value).join("\n").trim()
            };
          }
          return mixedContent;
        }
        const text = event.clipboardData?.getData("text/plain");
        return { type: "text", value: (text || "").trim() };
      } catch {
        return { type: "text", value: "" };
      }
    };
    parseClipboard = async (event, isPlainPaste = false) => {
      const parsedEventData = await parseClipboardEvent(event, isPlainPaste);
      if (parsedEventData.type === "mixedContent") {
        return {
          mixedContent: parsedEventData.value
        };
      }
      try {
        const spreadsheetResult = !isPlainPaste && parsePotentialSpreadsheet(parsedEventData.value);
        if (spreadsheetResult) {
          return spreadsheetResult;
        }
      } catch (error) {
        console.error(error);
      }
      try {
        const systemClipboardData = JSON.parse(parsedEventData.value);
        const programmaticAPI = systemClipboardData.type === EXPORT_DATA_TYPES.excalidrawClipboardWithAPI;
        if (clipboardContainsElements(systemClipboardData)) {
          return {
            elements: systemClipboardData.elements,
            files: systemClipboardData.files,
            text: isPlainPaste ? JSON.stringify(systemClipboardData.elements, null, 2) : void 0,
            programmaticAPI
          };
        }
      } catch {
      }
      return { text: parsedEventData.value };
    };
    copyBlobToClipboardAsPng = async (blob) => {
      try {
        await navigator.clipboard.write([
          new window.ClipboardItem({
            [MIME_TYPES.png]: blob
          })
        ]);
      } catch (error) {
        if (isPromiseLike(blob)) {
          await navigator.clipboard.write([
            new window.ClipboardItem({
              [MIME_TYPES.png]: await blob
            })
          ]);
        } else {
          throw error;
        }
      }
    };
    copyTextToSystemClipboard = async (text, clipboardEvent) => {
      if (probablySupportsClipboardWriteText) {
        try {
          await navigator.clipboard.writeText(text || "");
          return;
        } catch (error) {
          console.error(error);
        }
      }
      try {
        if (clipboardEvent) {
          clipboardEvent.clipboardData?.setData("text/plain", text || "");
          if (clipboardEvent.clipboardData?.getData("text/plain") !== text) {
            throw new Error("Failed to setData on clipboardEvent");
          }
          return;
        }
      } catch (error) {
        console.error(error);
      }
      if (!copyTextViaExecCommand(text)) {
        throw new Error("Error copying to clipboard.");
      }
    };
    copyTextViaExecCommand = (text) => {
      if (!text) {
        text = " ";
      }
      const isRTL2 = document.documentElement.getAttribute("dir") === "rtl";
      const textarea = document.createElement("textarea");
      textarea.style.border = "0";
      textarea.style.padding = "0";
      textarea.style.margin = "0";
      textarea.style.position = "absolute";
      textarea.style[isRTL2 ? "right" : "left"] = "-9999px";
      const yPosition = window.pageYOffset || document.documentElement.scrollTop;
      textarea.style.top = `${yPosition}px`;
      textarea.style.fontSize = "12pt";
      textarea.setAttribute("readonly", "");
      textarea.value = text;
      document.body.appendChild(textarea);
      let success = false;
      try {
        textarea.select();
        textarea.setSelectionRange(0, textarea.value.length);
        success = document.execCommand("copy");
      } catch (error) {
        console.error(error);
      }
      textarea.remove();
      return success;
    };
  }
});

// ../utils/export.ts
var exportToCanvas2, exportToBlob, exportToSvg2, exportToClipboard;
var init_export2 = __esm({
  "../utils/export.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_export();
    init_appState();
    init_restore();
    init_constants();
    init_image();
    init_json();
    init_clipboard();
    exportToCanvas2 = ({
      elements,
      appState,
      files,
      maxWidthOrHeight,
      getDimensions,
      exportPadding,
      exportingFrame
    }) => {
      const { elements: restoredElements, appState: restoredAppState } = restore(
        { elements, appState },
        null,
        null
      );
      const { exportBackground, viewBackgroundColor } = restoredAppState;
      return exportToCanvas(
        restoredElements,
        { ...restoredAppState, offsetTop: 0, offsetLeft: 0, width: 0, height: 0 },
        files || {},
        { exportBackground, exportPadding, viewBackgroundColor, exportingFrame },
        (width, height) => {
          const canvas2 = document.createElement("canvas");
          if (maxWidthOrHeight) {
            if (typeof getDimensions === "function") {
              console.warn(
                "`getDimensions()` is ignored when `maxWidthOrHeight` is supplied."
              );
            }
            const max = Math.max(width, height);
            const scale = maxWidthOrHeight < max ? maxWidthOrHeight / max : appState?.exportScale ?? 1;
            canvas2.width = width * scale;
            canvas2.height = height * scale;
            return {
              canvas: canvas2,
              scale
            };
          }
          const ret = getDimensions?.(width, height) || { width, height };
          canvas2.width = ret.width;
          canvas2.height = ret.height;
          return {
            canvas: canvas2,
            scale: ret.scale ?? 1
          };
        }
      );
    };
    exportToBlob = async (opts) => {
      let { mimeType = MIME_TYPES.png, quality } = opts;
      if (mimeType === MIME_TYPES.png && typeof quality === "number") {
        console.warn(`"quality" will be ignored for "${MIME_TYPES.png}" mimeType`);
      }
      if (mimeType === "image/jpg") {
        mimeType = MIME_TYPES.jpg;
      }
      if (mimeType === MIME_TYPES.jpg && !opts.appState?.exportBackground) {
        console.warn(
          `Defaulting "exportBackground" to "true" for "${MIME_TYPES.jpg}" mimeType`
        );
        opts = {
          ...opts,
          appState: { ...opts.appState, exportBackground: true }
        };
      }
      const canvas2 = await exportToCanvas2(opts);
      quality = quality ? quality : /image\/jpe?g/.test(mimeType) ? 0.92 : 0.8;
      return new Promise((resolve, reject) => {
        canvas2.toBlob(
          async (blob) => {
            if (!blob) {
              return reject(new Error("couldn't export to blob"));
            }
            if (blob && mimeType === MIME_TYPES.png && opts.appState?.exportEmbedScene) {
              blob = await encodePngMetadata({
                blob,
                metadata: serializeAsJSON(
                  // NOTE as long as we're using the Scene hack, we need to ensure
                  // we pass the original, uncloned elements when serializing
                  // so that we keep ids stable
                  opts.elements,
                  opts.appState,
                  opts.files || {},
                  "local"
                )
              });
            }
            resolve(blob);
          },
          mimeType,
          quality
        );
      });
    };
    exportToSvg2 = async ({
      elements,
      appState = getDefaultAppState(),
      files = {},
      exportPadding,
      renderEmbeddables,
      exportingFrame,
      skipInliningFonts
    }) => {
      const { elements: restoredElements, appState: restoredAppState } = restore(
        { elements, appState },
        null,
        null
      );
      const exportAppState = {
        ...restoredAppState,
        exportPadding
      };
      return exportToSvg(restoredElements, exportAppState, files, {
        exportingFrame,
        renderEmbeddables,
        skipInliningFonts
      });
    };
    exportToClipboard = async (opts) => {
      if (opts.type === "svg") {
        const svg = await exportToSvg2(opts);
        await copyTextToSystemClipboard(svg.outerHTML);
      } else if (opts.type === "png") {
        await copyBlobToClipboardAsPng(exportToBlob(opts));
      } else if (opts.type === "json") {
        await copyToClipboard(opts.elements, opts.files);
      } else {
        throw new Error("Invalid export type");
      }
    };
  }
});

// ../utils/withinBounds.ts
var getNonLinearElementRelativePoints, getElementRelativePoints, getMinMaxPoints, getRotatedBBox, isElementInsideBBox, elementPartiallyOverlapsWithOrContainsBBox, elementsOverlappingBBox;
var init_withinBounds = __esm({
  "../utils/withinBounds.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_typeChecks();
    init_bounds();
    init_utils2();
    init_math();
    getNonLinearElementRelativePoints = (element) => {
      if (element.type === "diamond") {
        return [
          pointFrom(element.width / 2, 0),
          pointFrom(element.width, element.height / 2),
          pointFrom(element.width / 2, element.height),
          pointFrom(0, element.height / 2)
        ];
      }
      return [
        pointFrom(0, 0),
        pointFrom(0 + element.width, 0),
        pointFrom(0 + element.width, element.height),
        pointFrom(0, element.height)
      ];
    };
    getElementRelativePoints = (element) => {
      if (isLinearElement(element) || isFreeDrawElement(element)) {
        return element.points;
      }
      return getNonLinearElementRelativePoints(element);
    };
    getMinMaxPoints = (points) => {
      const ret = points.reduce(
        (limits, [x, y]) => {
          limits.minY = Math.min(limits.minY, y);
          limits.minX = Math.min(limits.minX, x);
          limits.maxX = Math.max(limits.maxX, x);
          limits.maxY = Math.max(limits.maxY, y);
          return limits;
        },
        {
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity,
          cx: 0,
          cy: 0
        }
      );
      ret.cx = (ret.maxX + ret.minX) / 2;
      ret.cy = (ret.maxY + ret.minY) / 2;
      return ret;
    };
    getRotatedBBox = (element) => {
      const points = getElementRelativePoints(element);
      const { cx, cy } = getMinMaxPoints(points);
      const centerPoint = pointFrom(cx, cy);
      const rotatedPoints = points.map(
        (p) => pointRotateRads(p, centerPoint, element.angle)
      );
      const { minX, minY, maxX, maxY } = getMinMaxPoints(rotatedPoints);
      return [
        minX + element.x,
        minY + element.y,
        maxX + element.x,
        maxY + element.y
      ];
    };
    isElementInsideBBox = (element, bbox, eitherDirection = false) => {
      const elementBBox = getRotatedBBox(element);
      const elementInsideBbox = bbox[0] <= elementBBox[0] && bbox[2] >= elementBBox[2] && bbox[1] <= elementBBox[1] && bbox[3] >= elementBBox[3];
      if (!eitherDirection) {
        return elementInsideBbox;
      }
      if (elementInsideBbox) {
        return true;
      }
      return elementBBox[0] <= bbox[0] && elementBBox[2] >= bbox[2] && elementBBox[1] <= bbox[1] && elementBBox[3] >= bbox[3];
    };
    elementPartiallyOverlapsWithOrContainsBBox = (element, bbox) => {
      const elementBBox = getRotatedBBox(element);
      return (rangeIncludesValue(elementBBox[0], rangeInclusive(bbox[0], bbox[2])) || rangeIncludesValue(
        bbox[0],
        rangeInclusive(elementBBox[0], elementBBox[2])
      )) && (rangeIncludesValue(elementBBox[1], rangeInclusive(bbox[1], bbox[3])) || rangeIncludesValue(
        bbox[1],
        rangeInclusive(elementBBox[1], elementBBox[3])
      ));
    };
    elementsOverlappingBBox = ({
      elements,
      bounds,
      type,
      errorMargin = 0
    }) => {
      if (isExcalidrawElement(bounds)) {
        bounds = getElementBounds(bounds, arrayToMap(elements));
      }
      const adjustedBBox = [
        bounds[0] - errorMargin,
        bounds[1] - errorMargin,
        bounds[2] + errorMargin,
        bounds[3] + errorMargin
      ];
      const includedElementSet = /* @__PURE__ */ new Set();
      for (const element of elements) {
        if (includedElementSet.has(element.id)) {
          continue;
        }
        const isOverlaping = type === "overlap" ? elementPartiallyOverlapsWithOrContainsBBox(element, adjustedBBox) : type === "inside" ? isElementInsideBBox(element, adjustedBBox) : isElementInsideBBox(element, adjustedBBox, true);
        if (isOverlaping) {
          includedElementSet.add(element.id);
          if (element.boundElements) {
            for (const boundElement of element.boundElements) {
              includedElementSet.add(boundElement.id);
            }
          }
          if (isTextElement(element) && element.containerId) {
            includedElementSet.add(element.containerId);
          }
          if (isArrowElement(element)) {
            if (element.startBinding) {
              includedElementSet.add(element.startBinding.elementId);
            }
            if (element.endBinding) {
              includedElementSet.add(element.endBinding?.elementId);
            }
          }
        }
      }
      return elements.filter((element) => includedElementSet.has(element.id));
    };
  }
});

// ../utils/bbox.ts
function getBBox(line) {
  return [
    Math.min(line[0][0], line[1][0]),
    Math.min(line[0][1], line[1][1]),
    Math.max(line[0][0], line[1][0]),
    Math.max(line[0][1], line[1][1])
  ];
}
function doBBoxesIntersect(a, b) {
  return a[0] <= b[2] && a[2] >= b[0] && a[1] <= b[3] && a[3] >= b[1];
}
function isPointOnLine(l, p) {
  const p1 = vectorFromPoint(l[1], l[0]);
  const p2 = vectorFromPoint(p, l[0]);
  const r = vectorCross(p1, p2);
  return Math.abs(r) < EPSILON2;
}
function isPointRightOfLine(l, p) {
  const p1 = vectorFromPoint(l[1], l[0]);
  const p2 = vectorFromPoint(p, l[0]);
  return vectorCross(p1, p2) < 0;
}
function isLineSegmentTouchingOrCrossingLine(a, b) {
  return isPointOnLine(a, b[0]) || isPointOnLine(a, b[1]) || (isPointRightOfLine(a, b[0]) ? !isPointRightOfLine(a, b[1]) : isPointRightOfLine(a, b[1]));
}
function doLineSegmentsIntersect(a, b) {
  return doBBoxesIntersect(getBBox(a), getBBox(b)) && isLineSegmentTouchingOrCrossingLine(a, b) && isLineSegmentTouchingOrCrossingLine(b, a);
}
var EPSILON2;
var init_bbox = __esm({
  "../utils/bbox.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    EPSILON2 = 1e-6;
  }
});

// ../utils/index.ts
var init_utils3 = __esm({
  "../utils/index.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_export2();
    init_withinBounds();
    init_bbox();
    init_bounds();
  }
});

// frame.ts
function isElementIntersectingFrame(element, frame, elementsMap) {
  const frameLineSegments = getElementLineSegments(frame, elementsMap);
  const elementLineSegments = getElementLineSegments(element, elementsMap);
  const intersecting = frameLineSegments.some(
    (frameLineSegment) => elementLineSegments.some(
      (elementLineSegment) => doLineSegmentsIntersect(frameLineSegment, elementLineSegment)
    )
  );
  return intersecting;
}
var bindElementsToFramesAfterDuplication, getElementsCompletelyInFrame, isElementContainingFrame, elementsAreInFrameBounds, elementOverlapsWithFrame, isCursorInFrame, groupByFrameLikes, getFrameChildren, getFrameLikeElements, getRootElements, getElementsInResizingFrame, getElementsInNewFrame, getContainingFrame, filterElementsEligibleAsFrameChildren, addElementsToFrame, removeElementsFromFrame, removeAllElementsFromFrame, replaceAllElementsInFrame, updateFrameMembershipOfSelectedElements, omitGroupsContainingFrameLikes, getTargetFrame, isElementInFrame, getFrameLikeTitle, getElementsOverlappingFrame;
var init_frame = __esm({
  "frame.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_textElement();
    init_utils2();
    init_mutateElement();
    init_scene();
    init_groups();
    init_bounds();
    init_utils3();
    init_typeChecks();
    init_math();
    bindElementsToFramesAfterDuplication = (nextElements, oldElements, oldIdToDuplicatedId) => {
      const nextElementMap = arrayToMap(nextElements);
      for (const element of oldElements) {
        if (element.frameId) {
          const nextElementId = oldIdToDuplicatedId.get(element.id);
          const nextFrameId = oldIdToDuplicatedId.get(element.frameId);
          if (nextElementId) {
            const nextElement = nextElementMap.get(nextElementId);
            if (nextElement) {
              mutateElement(
                nextElement,
                {
                  frameId: nextFrameId ?? element.frameId
                },
                false
              );
            }
          }
        }
      }
    };
    getElementsCompletelyInFrame = (elements, frame, elementsMap) => omitGroupsContainingFrameLikes(
      getElementsWithinSelection(elements, frame, elementsMap, false)
    ).filter(
      (element) => !isFrameLikeElement(element) && !element.frameId || element.frameId === frame.id
    );
    isElementContainingFrame = (elements, element, frame, elementsMap) => {
      return getElementsWithinSelection(elements, element, elementsMap).some(
        (e) => e.id === frame.id
      );
    };
    elementsAreInFrameBounds = (elements, frame, elementsMap) => {
      const [frameX1, frameY1, frameX2, frameY2] = getElementAbsoluteCoords(
        frame,
        elementsMap
      );
      const [elementX1, elementY1, elementX2, elementY2] = getCommonBounds(elements);
      return frameX1 <= elementX1 && frameY1 <= elementY1 && frameX2 >= elementX2 && frameY2 >= elementY2;
    };
    elementOverlapsWithFrame = (element, frame, elementsMap) => {
      return elementsAreInFrameBounds([element], frame, elementsMap) || isElementIntersectingFrame(element, frame, elementsMap) || isElementContainingFrame([frame], element, frame, elementsMap);
    };
    isCursorInFrame = (cursorCoords, frame, elementsMap) => {
      const [fx1, fy1, fx2, fy2] = getElementAbsoluteCoords(frame, elementsMap);
      return isPointWithinBounds(
        pointFrom(fx1, fy1),
        pointFrom(cursorCoords.x, cursorCoords.y),
        pointFrom(fx2, fy2)
      );
    };
    groupByFrameLikes = (elements) => {
      const frameElementsMap = /* @__PURE__ */ new Map();
      for (const element of elements) {
        const frameId = isFrameLikeElement(element) ? element.id : element.frameId;
        if (frameId && !frameElementsMap.has(frameId)) {
          frameElementsMap.set(frameId, getFrameChildren(elements, frameId));
        }
      }
      return frameElementsMap;
    };
    getFrameChildren = (allElements, frameId) => {
      const frameChildren = [];
      for (const element of allElements.values()) {
        if (element.frameId === frameId) {
          frameChildren.push(element);
        }
      }
      return frameChildren;
    };
    getFrameLikeElements = (allElements) => {
      return allElements.filter(
        (element) => isFrameLikeElement(element)
      );
    };
    getRootElements = (allElements) => {
      const frameElements = arrayToMap(getFrameLikeElements(allElements));
      return allElements.filter(
        (element) => frameElements.has(element.id) || !element.frameId || !frameElements.has(element.frameId)
      );
    };
    getElementsInResizingFrame = (allElements, frame, appState, elementsMap) => {
      const prevElementsInFrame = getFrameChildren(allElements, frame.id);
      const nextElementsInFrame = new Set(prevElementsInFrame);
      const elementsCompletelyInFrame = /* @__PURE__ */ new Set([
        ...getElementsCompletelyInFrame(allElements, frame, elementsMap),
        ...prevElementsInFrame.filter(
          (element) => isElementContainingFrame(allElements, element, frame, elementsMap)
        )
      ]);
      const elementsNotCompletelyInFrame = prevElementsInFrame.filter(
        (element) => !elementsCompletelyInFrame.has(element)
      );
      const groupsToKeep = new Set(
        Array.from(elementsCompletelyInFrame).flatMap(
          (element) => element.groupIds
        )
      );
      for (const element of elementsNotCompletelyInFrame) {
        if (!isElementIntersectingFrame(element, frame, elementsMap)) {
          if (element.groupIds.length === 0) {
            nextElementsInFrame.delete(element);
          }
        } else if (element.groupIds.length > 0) {
          for (const id of element.groupIds) {
            groupsToKeep.add(id);
          }
        }
      }
      for (const element of elementsNotCompletelyInFrame) {
        if (element.groupIds.length > 0) {
          let shouldRemoveElement = true;
          for (const id of element.groupIds) {
            if (groupsToKeep.has(id)) {
              shouldRemoveElement = false;
            }
          }
          if (shouldRemoveElement) {
            nextElementsInFrame.delete(element);
          }
        }
      }
      const individualElementsCompletelyInFrame = Array.from(
        elementsCompletelyInFrame
      ).filter((element) => element.groupIds.length === 0);
      for (const element of individualElementsCompletelyInFrame) {
        nextElementsInFrame.add(element);
      }
      const newGroupElementsCompletelyInFrame = Array.from(
        elementsCompletelyInFrame
      ).filter((element) => element.groupIds.length > 0);
      const groupIds = selectGroupsFromGivenElements(
        newGroupElementsCompletelyInFrame,
        appState
      );
      for (const [id, isSelected] of Object.entries(groupIds)) {
        if (isSelected) {
          const elementsInGroup = getElementsInGroup(allElements, id);
          if (elementsAreInFrameBounds(elementsInGroup, frame, elementsMap)) {
            for (const element of elementsInGroup) {
              nextElementsInFrame.add(element);
            }
          }
        }
      }
      return [...nextElementsInFrame].filter((element) => {
        return !(isTextElement(element) && element.containerId);
      });
    };
    getElementsInNewFrame = (elements, frame, elementsMap) => {
      return omitGroupsContainingFrameLikes(
        elements,
        getElementsCompletelyInFrame(elements, frame, elementsMap)
      );
    };
    getContainingFrame = (element, elementsMap) => {
      if (!element.frameId) {
        return null;
      }
      return elementsMap.get(element.frameId) || null;
    };
    filterElementsEligibleAsFrameChildren = (elements, frame) => {
      const otherFrames = /* @__PURE__ */ new Set();
      const elementsMap = arrayToMap(elements);
      elements = omitGroupsContainingFrameLikes(elements);
      for (const element of elements) {
        if (isFrameLikeElement(element) && element.id !== frame.id) {
          otherFrames.add(element.id);
        }
      }
      const processedGroups = /* @__PURE__ */ new Set();
      const eligibleElements = [];
      for (const element of elements) {
        if (isFrameLikeElement(element) || element.frameId && otherFrames.has(element.frameId)) {
          continue;
        }
        if (element.groupIds.length) {
          const shallowestGroupId = element.groupIds.at(-1);
          if (!processedGroups.has(shallowestGroupId)) {
            processedGroups.add(shallowestGroupId);
            const groupElements = getElementsInGroup(elements, shallowestGroupId);
            if (groupElements.some(
              (el) => elementOverlapsWithFrame(el, frame, elementsMap)
            )) {
              for (const child of groupElements) {
                eligibleElements.push(child);
              }
            }
          }
        } else {
          const overlaps = elementOverlapsWithFrame(element, frame, elementsMap);
          if (overlaps) {
            eligibleElements.push(element);
          }
        }
      }
      return eligibleElements;
    };
    addElementsToFrame = (allElements, elementsToAdd, frame) => {
      const elementsMap = arrayToMap(allElements);
      const currTargetFrameChildrenMap = /* @__PURE__ */ new Map();
      for (const element of allElements.values()) {
        if (element.frameId === frame.id) {
          currTargetFrameChildrenMap.set(element.id, true);
        }
      }
      const suppliedElementsToAddSet = new Set(elementsToAdd.map((el) => el.id));
      const finalElementsToAdd = [];
      const otherFrames = /* @__PURE__ */ new Set();
      for (const element of elementsToAdd) {
        if (isFrameLikeElement(element) && element.id !== frame.id) {
          otherFrames.add(element.id);
        }
      }
      for (const element of omitGroupsContainingFrameLikes(
        allElements,
        elementsToAdd
      )) {
        if (isFrameLikeElement(element) || element.frameId && otherFrames.has(element.frameId)) {
          continue;
        }
        if (!currTargetFrameChildrenMap.has(element.id)) {
          finalElementsToAdd.push(element);
        }
        const boundTextElement = getBoundTextElement(element, elementsMap);
        if (boundTextElement && !suppliedElementsToAddSet.has(boundTextElement.id) && !currTargetFrameChildrenMap.has(boundTextElement.id)) {
          finalElementsToAdd.push(boundTextElement);
        }
      }
      for (const element of finalElementsToAdd) {
        mutateElement(
          element,
          {
            frameId: frame.id
          },
          false
        );
      }
      return allElements;
    };
    removeElementsFromFrame = (elementsToRemove, elementsMap) => {
      const _elementsToRemove = /* @__PURE__ */ new Map();
      const toRemoveElementsByFrame = /* @__PURE__ */ new Map();
      for (const element of elementsToRemove) {
        if (element.frameId) {
          _elementsToRemove.set(element.id, element);
          const arr = toRemoveElementsByFrame.get(element.frameId) || [];
          arr.push(element);
          const boundTextElement = getBoundTextElement(element, elementsMap);
          if (boundTextElement) {
            _elementsToRemove.set(boundTextElement.id, boundTextElement);
            arr.push(boundTextElement);
          }
          toRemoveElementsByFrame.set(element.frameId, arr);
        }
      }
      for (const [, element] of _elementsToRemove) {
        mutateElement(
          element,
          {
            frameId: null
          },
          false
        );
      }
    };
    removeAllElementsFromFrame = (allElements, frame) => {
      const elementsInFrame = getFrameChildren(allElements, frame.id);
      removeElementsFromFrame(elementsInFrame, arrayToMap(allElements));
      return allElements;
    };
    replaceAllElementsInFrame = (allElements, nextElementsInFrame, frame, app) => {
      return addElementsToFrame(
        removeAllElementsFromFrame(allElements, frame),
        nextElementsInFrame,
        frame
      ).slice();
    };
    updateFrameMembershipOfSelectedElements = (allElements, appState, app) => {
      const selectedElements = app.scene.getSelectedElements({
        selectedElementIds: appState.selectedElementIds,
        // supplying elements explicitly in case we're passed non-state elements
        elements: allElements
      });
      const elementsToFilter = new Set(selectedElements);
      if (appState.editingGroupId) {
        for (const element of selectedElements) {
          if (element.groupIds.length === 0) {
            elementsToFilter.add(element);
          } else {
            element.groupIds.flatMap((gid) => getElementsInGroup(allElements, gid)).forEach((element2) => elementsToFilter.add(element2));
          }
        }
      }
      const elementsToRemove = /* @__PURE__ */ new Set();
      const elementsMap = arrayToMap(allElements);
      elementsToFilter.forEach((element) => {
        if (element.frameId && !isFrameLikeElement(element) && !isElementInFrame(element, elementsMap, appState)) {
          elementsToRemove.add(element);
        }
      });
      if (elementsToRemove.size > 0) {
        removeElementsFromFrame(elementsToRemove, elementsMap);
      }
      return allElements;
    };
    omitGroupsContainingFrameLikes = (allElements, selectedElements) => {
      const uniqueGroupIds = /* @__PURE__ */ new Set();
      const elements = selectedElements || allElements;
      for (const el of elements.values()) {
        const topMostGroupId = el.groupIds[el.groupIds.length - 1];
        if (topMostGroupId) {
          uniqueGroupIds.add(topMostGroupId);
        }
      }
      const rejectedGroupIds = /* @__PURE__ */ new Set();
      for (const groupId of uniqueGroupIds) {
        if (getElementsInGroup(allElements, groupId).some(
          (el) => isFrameLikeElement(el)
        )) {
          rejectedGroupIds.add(groupId);
        }
      }
      const ret = [];
      for (const element of elements.values()) {
        if (!rejectedGroupIds.has(element.groupIds[element.groupIds.length - 1])) {
          ret.push(element);
        }
      }
      return ret;
    };
    getTargetFrame = (element, elementsMap, appState) => {
      const _element = isTextElement(element) ? getContainerElement(element, elementsMap) || element : element;
      return appState.selectedElementIds[_element.id] && appState.selectedElementsAreBeingDragged ? appState.frameToHighlight : getContainingFrame(_element, elementsMap);
    };
    isElementInFrame = (element, allElementsMap, appState) => {
      const frame = getTargetFrame(element, allElementsMap, appState);
      const _element = isTextElement(element) ? getContainerElement(element, allElementsMap) || element : element;
      if (frame) {
        if (!appState.selectedElementIds[element.id] || !appState.selectedElementsAreBeingDragged) {
          return true;
        }
        if (_element.groupIds.length === 0) {
          return elementOverlapsWithFrame(_element, frame, allElementsMap);
        }
        const allElementsInGroup = new Set(
          _element.groupIds.flatMap(
            (gid) => getElementsInGroup(allElementsMap, gid)
          )
        );
        if (appState.editingGroupId && appState.selectedElementsAreBeingDragged) {
          const selectedElements = new Set(
            getSelectedElements(allElementsMap, appState)
          );
          const editingGroupOverlapsFrame = appState.frameToHighlight !== null;
          if (editingGroupOverlapsFrame) {
            return true;
          }
          selectedElements.forEach((selectedElement) => {
            allElementsInGroup.delete(selectedElement);
          });
        }
        for (const elementInGroup of allElementsInGroup) {
          if (isFrameLikeElement(elementInGroup)) {
            return false;
          }
        }
        for (const elementInGroup of allElementsInGroup) {
          if (elementOverlapsWithFrame(elementInGroup, frame, allElementsMap)) {
            return true;
          }
        }
      }
      return false;
    };
    getFrameLikeTitle = (element) => {
      return element.name === null ? isFrameElement(element) ? "Frame" : "AI Frame" : element.name;
    };
    getElementsOverlappingFrame = (elements, frame) => {
      return elementsOverlappingBBox({
        elements,
        bounds: frame,
        type: "overlap"
      }).filter((el) => !el.frameId || el.frameId === frame.id);
    };
  }
});

// renderer/renderElement.ts
import rough2 from "roughjs/bin/rough";
import { getStroke } from "perfect-freehand";
function generateFreeDrawShape(element) {
  const svgPathData = getFreeDrawSvgPath(element);
  const path = new Path2D(svgPathData);
  pathsCache.set(element, path);
  return path;
}
function getFreeDrawPath2D(element) {
  return pathsCache.get(element);
}
function getFreeDrawSvgPath(element) {
  const inputPoints = element.simulatePressure ? element.points : element.points.length ? element.points.map(([x, y], i) => [x, y, element.pressures[i]]) : [[0, 0, 0.5]];
  const options = {
    simulatePressure: element.simulatePressure,
    size: element.strokeWidth * 4.25,
    thinning: 0.6,
    smoothing: 0.5,
    streamline: 0.5,
    easing: (t2) => Math.sin(t2 * Math.PI / 2),
    // https://easings.net/#easeOutSine
    last: !!element.lastCommittedPoint
    // LastCommittedPoint is added on pointerup
  };
  return getSvgPathFromStroke2(getStroke(inputPoints, options));
}
function med(A, B) {
  return [(A[0] + B[0]) / 2, (A[1] + B[1]) / 2];
}
function getSvgPathFromStroke2(points) {
  if (!points.length) {
    return "";
  }
  const max = points.length - 1;
  return points.reduce(
    (acc, point2, i, arr) => {
      if (i === max) {
        acc.push(point2, med(point2, arr[0]), "L", arr[0], "Z");
      } else {
        acc.push(point2, med(point2, arr[i + 1]));
      }
      return acc;
    },
    ["M", points[0], "Q"]
  ).join(" ").replace(TO_FIXED_PRECISION, "$1");
}
var IMAGE_INVERT_FILTER, defaultAppState, isPendingImageElement, shouldResetImageFilter, getCanvasPadding, getRenderOpacity, cappedElementCanvasSize, generateElementCanvas, DEFAULT_LINK_SIZE, IMAGE_PLACEHOLDER_IMG, IMAGE_ERROR_PLACEHOLDER_IMG, drawImagePlaceholder, drawElementOnCanvas, elementWithCanvasCache, generateElementWithCanvas, drawElementFromCanvas, renderSelectionElement, renderElement, pathsCache, TO_FIXED_PRECISION;
var init_renderElement = __esm({
  "renderer/renderElement.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_typeChecks();
    init_bounds();
    init_utils2();
    init_appState();
    init_constants();
    init_textElement();
    init_linearElementEditor();
    init_frame();
    init_ShapeCache();
    init_fonts();
    init_math();
    init_shapes();
    IMAGE_INVERT_FILTER = "invert(100%) hue-rotate(180deg) saturate(1.25)";
    defaultAppState = getDefaultAppState();
    isPendingImageElement = (element, renderConfig) => isInitializedImageElement(element) && !renderConfig.imageCache.has(element.fileId);
    shouldResetImageFilter = (element, renderConfig, appState) => {
      return appState.theme === THEME.DARK && isInitializedImageElement(element) && !isPendingImageElement(element, renderConfig) && renderConfig.imageCache.get(element.fileId)?.mimeType !== MIME_TYPES.svg;
    };
    getCanvasPadding = (element) => {
      switch (element.type) {
        case "freedraw":
          return element.strokeWidth * 12;
        case "text":
          return element.fontSize / 2;
        default:
          return 20;
      }
    };
    getRenderOpacity = (element, containingFrame, elementsPendingErasure, pendingNodes) => {
      let opacity = (containingFrame?.opacity ?? 100) * element.opacity / 1e4;
      if (elementsPendingErasure.has(element.id) || pendingNodes && pendingNodes.some((node) => node.id === element.id) || containingFrame && elementsPendingErasure.has(containingFrame.id)) {
        opacity *= ELEMENT_READY_TO_ERASE_OPACITY / 100;
      }
      return opacity;
    };
    cappedElementCanvasSize = (element, elementsMap, zoom) => {
      const AREA_LIMIT = 16777216;
      const WIDTH_HEIGHT_LIMIT = 32767;
      const padding = getCanvasPadding(element);
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
      const elementWidth = isLinearElement(element) || isFreeDrawElement(element) ? distance(x1, x2) : element.width;
      const elementHeight = isLinearElement(element) || isFreeDrawElement(element) ? distance(y1, y2) : element.height;
      let width = elementWidth * window.devicePixelRatio + padding * 2;
      let height = elementHeight * window.devicePixelRatio + padding * 2;
      let scale = zoom.value;
      if (width * scale > WIDTH_HEIGHT_LIMIT || height * scale > WIDTH_HEIGHT_LIMIT) {
        scale = Math.min(WIDTH_HEIGHT_LIMIT / width, WIDTH_HEIGHT_LIMIT / height);
      }
      if (width * height * scale * scale > AREA_LIMIT) {
        scale = Math.sqrt(AREA_LIMIT / (width * height));
      }
      width = Math.floor(width * scale);
      height = Math.floor(height * scale);
      return { width, height, scale };
    };
    generateElementCanvas = (element, elementsMap, zoom, renderConfig, appState) => {
      const canvas2 = document.createElement("canvas");
      const context = canvas2.getContext("2d");
      const padding = getCanvasPadding(element);
      const { width, height, scale } = cappedElementCanvasSize(
        element,
        elementsMap,
        zoom
      );
      if (!width || !height) {
        return null;
      }
      canvas2.width = width;
      canvas2.height = height;
      let canvasOffsetX = -100;
      let canvasOffsetY = 0;
      if (isLinearElement(element) || isFreeDrawElement(element)) {
        const [x1, y1] = getElementAbsoluteCoords(element, elementsMap);
        canvasOffsetX = element.x > x1 ? distance(element.x, x1) * window.devicePixelRatio * scale : 0;
        canvasOffsetY = element.y > y1 ? distance(element.y, y1) * window.devicePixelRatio * scale : 0;
        context.translate(canvasOffsetX, canvasOffsetY);
      }
      context.save();
      context.translate(padding * scale, padding * scale);
      context.scale(
        window.devicePixelRatio * scale,
        window.devicePixelRatio * scale
      );
      const rc = rough2.canvas(canvas2);
      if (shouldResetImageFilter(element, renderConfig, appState)) {
        context.filter = IMAGE_INVERT_FILTER;
      }
      drawElementOnCanvas(element, rc, context, renderConfig, appState);
      context.restore();
      const boundTextElement = getBoundTextElement(element, elementsMap);
      const boundTextCanvas = document.createElement("canvas");
      const boundTextCanvasContext = boundTextCanvas.getContext("2d");
      if (isArrowElement(element) && boundTextElement) {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const maxDim = Math.max(distance(x1, x2), distance(y1, y2));
        boundTextCanvas.width = maxDim * window.devicePixelRatio * scale + padding * scale * 10;
        boundTextCanvas.height = maxDim * window.devicePixelRatio * scale + padding * scale * 10;
        boundTextCanvasContext.translate(
          boundTextCanvas.width / 2,
          boundTextCanvas.height / 2
        );
        boundTextCanvasContext.rotate(element.angle);
        boundTextCanvasContext.drawImage(
          canvas2,
          -canvas2.width / 2,
          -canvas2.height / 2,
          canvas2.width,
          canvas2.height
        );
        const [, , , , boundTextCx, boundTextCy] = getElementAbsoluteCoords(
          boundTextElement,
          elementsMap
        );
        boundTextCanvasContext.rotate(-element.angle);
        const offsetX = (boundTextCanvas.width - canvas2.width) / 2;
        const offsetY = (boundTextCanvas.height - canvas2.height) / 2;
        const shiftX = boundTextCanvas.width / 2 - (boundTextCx - x1) * window.devicePixelRatio * scale - offsetX - padding * scale;
        const shiftY = boundTextCanvas.height / 2 - (boundTextCy - y1) * window.devicePixelRatio * scale - offsetY - padding * scale;
        boundTextCanvasContext.translate(-shiftX, -shiftY);
        boundTextCanvasContext.clearRect(
          -(boundTextElement.width / 2 + BOUND_TEXT_PADDING) * window.devicePixelRatio * scale,
          -(boundTextElement.height / 2 + BOUND_TEXT_PADDING) * window.devicePixelRatio * scale,
          (boundTextElement.width + BOUND_TEXT_PADDING * 2) * window.devicePixelRatio * scale,
          (boundTextElement.height + BOUND_TEXT_PADDING * 2) * window.devicePixelRatio * scale
        );
      }
      return {
        element,
        canvas: canvas2,
        theme: appState.theme,
        scale,
        zoomValue: zoom.value,
        canvasOffsetX,
        canvasOffsetY,
        boundTextElementVersion: getBoundTextElement(element, elementsMap)?.version || null,
        containingFrameOpacity: getContainingFrame(element, elementsMap)?.opacity || 100,
        boundTextCanvas,
        angle: element.angle
      };
    };
    DEFAULT_LINK_SIZE = 14;
    IMAGE_PLACEHOLDER_IMG = document.createElement("img");
    IMAGE_PLACEHOLDER_IMG.src = `data:${MIME_TYPES.svg},${encodeURIComponent(
      `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="image" class="svg-inline--fa fa-image fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="#888" d="M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z"></path></svg>`
    )}`;
    IMAGE_ERROR_PLACEHOLDER_IMG = document.createElement("img");
    IMAGE_ERROR_PLACEHOLDER_IMG.src = `data:${MIME_TYPES.svg},${encodeURIComponent(
      `<svg viewBox="0 0 668 668" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48ZM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56ZM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48Z" style="fill:#888;fill-rule:nonzero" transform="matrix(.81709 0 0 .81709 124.825 145.825)"/><path d="M256 8C119.034 8 8 119.033 8 256c0 136.967 111.034 248 248 248s248-111.034 248-248S392.967 8 256 8Zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676ZM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676Z" style="fill:#888;fill-rule:nonzero" transform="matrix(.30366 0 0 .30366 506.822 60.065)"/></svg>`
    )}`;
    drawImagePlaceholder = (element, context) => {
      context.fillStyle = "#E7E7E7";
      context.fillRect(0, 0, element.width, element.height);
      const imageMinWidthOrHeight = Math.min(element.width, element.height);
      const size = Math.min(
        imageMinWidthOrHeight,
        Math.min(imageMinWidthOrHeight * 0.4, 100)
      );
      context.drawImage(
        element.status === "error" ? IMAGE_ERROR_PLACEHOLDER_IMG : IMAGE_PLACEHOLDER_IMG,
        element.width / 2 - size / 2,
        element.height / 2 - size / 2,
        size,
        size
      );
    };
    drawElementOnCanvas = (element, rc, context, renderConfig, appState) => {
      switch (element.type) {
        case "rectangle":
        case "iframe":
        case "embeddable":
        case "diamond":
        case "ellipse": {
          context.lineJoin = "round";
          context.lineCap = "round";
          rc.draw(ShapeCache.get(element));
          break;
        }
        case "arrow":
        case "line": {
          context.lineJoin = "round";
          context.lineCap = "round";
          ShapeCache.get(element).forEach((shape) => {
            rc.draw(shape);
          });
          break;
        }
        case "freedraw": {
          context.save();
          context.fillStyle = element.strokeColor;
          const path = getFreeDrawPath2D(element);
          const fillShape = ShapeCache.get(element);
          if (fillShape) {
            rc.draw(fillShape);
          }
          context.fillStyle = element.strokeColor;
          context.fill(path);
          context.restore();
          break;
        }
        case "image": {
          const img = isInitializedImageElement(element) ? renderConfig.imageCache.get(element.fileId)?.image : void 0;
          if (img != null && !(img instanceof Promise)) {
            if (element.roundness && context.roundRect) {
              context.beginPath();
              context.roundRect(
                0,
                0,
                element.width,
                element.height,
                getCornerRadius(Math.min(element.width, element.height), element)
              );
              context.clip();
            }
            context.drawImage(
              img,
              0,
              0,
              element.width,
              element.height
            );
          } else {
            drawImagePlaceholder(element, context);
          }
          break;
        }
        default: {
          if (isTextElement(element)) {
            const rtl = isRTL(element.text);
            const shouldTemporarilyAttach = rtl && !context.canvas.isConnected;
            if (shouldTemporarilyAttach) {
              document.body.appendChild(context.canvas);
            }
            context.canvas.setAttribute("dir", rtl ? "rtl" : "ltr");
            context.save();
            context.font = getFontString(element);
            context.fillStyle = element.strokeColor;
            context.textAlign = element.textAlign;
            const lines = element.text.replace(/\r\n?/g, "\n").split("\n");
            const horizontalOffset = element.textAlign === "center" ? element.width / 2 : element.textAlign === "right" ? element.width : 0;
            const lineHeightPx = getLineHeightInPx(
              element.fontSize,
              element.lineHeight
            );
            const verticalOffset = getVerticalOffset(
              element.fontFamily,
              element.fontSize,
              lineHeightPx
            );
            for (let index = 0; index < lines.length; index++) {
              context.fillText(
                lines[index],
                horizontalOffset,
                index * lineHeightPx + verticalOffset
              );
            }
            context.restore();
            if (shouldTemporarilyAttach) {
              context.canvas.remove();
            }
          } else {
            throw new Error(`Unimplemented type ${element.type}`);
          }
        }
      }
    };
    elementWithCanvasCache = /* @__PURE__ */ new WeakMap();
    generateElementWithCanvas = (element, elementsMap, renderConfig, appState) => {
      const zoom = renderConfig ? appState.zoom : defaultAppState.zoom;
      const prevElementWithCanvas = elementWithCanvasCache.get(element);
      const shouldRegenerateBecauseZoom = prevElementWithCanvas && prevElementWithCanvas.zoomValue !== zoom.value && !appState?.shouldCacheIgnoreZoom;
      const boundTextElement = getBoundTextElement(element, elementsMap);
      const boundTextElementVersion = boundTextElement?.version || null;
      const containingFrameOpacity = getContainingFrame(element, elementsMap)?.opacity || 100;
      if (!prevElementWithCanvas || shouldRegenerateBecauseZoom || prevElementWithCanvas.theme !== appState.theme || prevElementWithCanvas.boundTextElementVersion !== boundTextElementVersion || prevElementWithCanvas.containingFrameOpacity !== containingFrameOpacity || // since we rotate the canvas when copying from cached canvas, we don't
      // regenerate the cached canvas. But we need to in case of labels which are
      // cached alongside the arrow, and we want the labels to remain unrotated
      // with respect to the arrow.
      isArrowElement(element) && boundTextElement && element.angle !== prevElementWithCanvas.angle) {
        const elementWithCanvas = generateElementCanvas(
          element,
          elementsMap,
          zoom,
          renderConfig,
          appState
        );
        if (!elementWithCanvas) {
          return null;
        }
        elementWithCanvasCache.set(element, elementWithCanvas);
        return elementWithCanvas;
      }
      return prevElementWithCanvas;
    };
    drawElementFromCanvas = (elementWithCanvas, context, renderConfig, appState, allElementsMap) => {
      const element = elementWithCanvas.element;
      const padding = getCanvasPadding(element);
      const zoom = elementWithCanvas.scale;
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, allElementsMap);
      const cx = ((x1 + x2) / 2 + appState.scrollX) * window.devicePixelRatio;
      const cy = ((y1 + y2) / 2 + appState.scrollY) * window.devicePixelRatio;
      context.save();
      context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);
      const boundTextElement = getBoundTextElement(element, allElementsMap);
      if (isArrowElement(element) && boundTextElement) {
        const offsetX = (elementWithCanvas.boundTextCanvas.width - elementWithCanvas.canvas.width) / 2;
        const offsetY = (elementWithCanvas.boundTextCanvas.height - elementWithCanvas.canvas.height) / 2;
        context.translate(cx, cy);
        context.drawImage(
          elementWithCanvas.boundTextCanvas,
          -(x2 - x1) / 2 * window.devicePixelRatio - offsetX / zoom - padding,
          -(y2 - y1) / 2 * window.devicePixelRatio - offsetY / zoom - padding,
          elementWithCanvas.boundTextCanvas.width / zoom,
          elementWithCanvas.boundTextCanvas.height / zoom
        );
      } else {
        context.translate(cx, cy);
        context.rotate(element.angle);
        if ("scale" in elementWithCanvas.element && !isPendingImageElement(element, renderConfig)) {
          context.scale(
            elementWithCanvas.element.scale[0],
            elementWithCanvas.element.scale[1]
          );
        }
        context.translate(-cx, -cy);
        context.drawImage(
          elementWithCanvas.canvas,
          (x1 + appState.scrollX) * window.devicePixelRatio - padding * elementWithCanvas.scale / elementWithCanvas.scale,
          (y1 + appState.scrollY) * window.devicePixelRatio - padding * elementWithCanvas.scale / elementWithCanvas.scale,
          elementWithCanvas.canvas.width / elementWithCanvas.scale,
          elementWithCanvas.canvas.height / elementWithCanvas.scale
        );
        if (define_import_meta_env_default.VITE_APP_DEBUG_ENABLE_TEXT_CONTAINER_BOUNDING_BOX === "true" && hasBoundTextElement(element)) {
          const textElement = getBoundTextElement(
            element,
            allElementsMap
          );
          const coords = getContainerCoords(element);
          context.strokeStyle = "#c92a2a";
          context.lineWidth = 3;
          context.strokeRect(
            (coords.x + appState.scrollX) * window.devicePixelRatio,
            (coords.y + appState.scrollY) * window.devicePixelRatio,
            getBoundTextMaxWidth(element, textElement) * window.devicePixelRatio,
            getBoundTextMaxHeight(element, textElement) * window.devicePixelRatio
          );
        }
      }
      context.restore();
    };
    renderSelectionElement = (element, context, appState, selectionColor) => {
      context.save();
      context.translate(element.x + appState.scrollX, element.y + appState.scrollY);
      context.fillStyle = "rgba(0, 0, 200, 0.04)";
      const offset2 = 0.5 / appState.zoom.value;
      context.fillRect(offset2, offset2, element.width, element.height);
      context.lineWidth = 1 / appState.zoom.value;
      context.strokeStyle = selectionColor;
      context.strokeRect(offset2, offset2, element.width, element.height);
      context.restore();
    };
    renderElement = (element, elementsMap, allElementsMap, rc, context, renderConfig, appState) => {
      context.globalAlpha = getRenderOpacity(
        element,
        getContainingFrame(element, elementsMap),
        renderConfig.elementsPendingErasure,
        renderConfig.pendingFlowchartNodes
      );
      switch (element.type) {
        case "magicframe":
        case "frame": {
          if (appState.frameRendering.enabled && appState.frameRendering.outline) {
            context.save();
            context.translate(
              element.x + appState.scrollX,
              element.y + appState.scrollY
            );
            context.fillStyle = "rgba(0, 0, 200, 0.04)";
            context.lineWidth = FRAME_STYLE.strokeWidth / appState.zoom.value;
            context.strokeStyle = FRAME_STYLE.strokeColor;
            if (isMagicFrameElement(element)) {
              context.strokeStyle = appState.theme === THEME.LIGHT ? "#7affd7" : "#1d8264";
            }
            if (FRAME_STYLE.radius && context.roundRect) {
              context.beginPath();
              context.roundRect(
                0,
                0,
                element.width,
                element.height,
                FRAME_STYLE.radius / appState.zoom.value
              );
              context.stroke();
              context.closePath();
            } else {
              context.strokeRect(0, 0, element.width, element.height);
            }
            context.restore();
          }
          break;
        }
        case "freedraw": {
          ShapeCache.generateElementShape(element, null);
          if (renderConfig.isExporting) {
            const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
            const cx = (x1 + x2) / 2 + appState.scrollX;
            const cy = (y1 + y2) / 2 + appState.scrollY;
            const shiftX = (x2 - x1) / 2 - (element.x - x1);
            const shiftY = (y2 - y1) / 2 - (element.y - y1);
            context.save();
            context.translate(cx, cy);
            context.rotate(element.angle);
            context.translate(-shiftX, -shiftY);
            drawElementOnCanvas(element, rc, context, renderConfig, appState);
            context.restore();
          } else {
            const elementWithCanvas = generateElementWithCanvas(
              element,
              allElementsMap,
              renderConfig,
              appState
            );
            if (!elementWithCanvas) {
              return;
            }
            drawElementFromCanvas(
              elementWithCanvas,
              context,
              renderConfig,
              appState,
              allElementsMap
            );
          }
          break;
        }
        case "rectangle":
        case "diamond":
        case "ellipse":
        case "line":
        case "arrow":
        case "image":
        case "text":
        case "iframe":
        case "embeddable": {
          ShapeCache.generateElementShape(element, renderConfig);
          if (renderConfig.isExporting) {
            const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
            const cx = (x1 + x2) / 2 + appState.scrollX;
            const cy = (y1 + y2) / 2 + appState.scrollY;
            let shiftX = (x2 - x1) / 2 - (element.x - x1);
            let shiftY = (y2 - y1) / 2 - (element.y - y1);
            if (isTextElement(element)) {
              const container = getContainerElement(element, elementsMap);
              if (isArrowElement(container)) {
                const boundTextCoords = LinearElementEditor.getBoundTextElementPosition(
                  container,
                  element,
                  elementsMap
                );
                shiftX = (x2 - x1) / 2 - (boundTextCoords.x - x1);
                shiftY = (y2 - y1) / 2 - (boundTextCoords.y - y1);
              }
            }
            context.save();
            context.translate(cx, cy);
            if (shouldResetImageFilter(element, renderConfig, appState)) {
              context.filter = "none";
            }
            const boundTextElement = getBoundTextElement(element, elementsMap);
            if (isArrowElement(element) && boundTextElement) {
              const tempCanvas = document.createElement("canvas");
              const tempCanvasContext = tempCanvas.getContext("2d");
              const maxDim = Math.max(distance(x1, x2), distance(y1, y2));
              const padding = getCanvasPadding(element);
              tempCanvas.width = maxDim * appState.exportScale + padding * 10 * appState.exportScale;
              tempCanvas.height = maxDim * appState.exportScale + padding * 10 * appState.exportScale;
              tempCanvasContext.translate(
                tempCanvas.width / 2,
                tempCanvas.height / 2
              );
              tempCanvasContext.scale(appState.exportScale, appState.exportScale);
              shiftX = element.width / 2 - (element.x - x1);
              shiftY = element.height / 2 - (element.y - y1);
              tempCanvasContext.rotate(element.angle);
              const tempRc = rough2.canvas(tempCanvas);
              tempCanvasContext.translate(-shiftX, -shiftY);
              drawElementOnCanvas(
                element,
                tempRc,
                tempCanvasContext,
                renderConfig,
                appState
              );
              tempCanvasContext.translate(shiftX, shiftY);
              tempCanvasContext.rotate(-element.angle);
              const [, , , , boundTextCx, boundTextCy] = getElementAbsoluteCoords(
                boundTextElement,
                elementsMap
              );
              const boundTextShiftX = (x1 + x2) / 2 - boundTextCx;
              const boundTextShiftY = (y1 + y2) / 2 - boundTextCy;
              tempCanvasContext.translate(-boundTextShiftX, -boundTextShiftY);
              tempCanvasContext.clearRect(
                -boundTextElement.width / 2,
                -boundTextElement.height / 2,
                boundTextElement.width,
                boundTextElement.height
              );
              context.scale(1 / appState.exportScale, 1 / appState.exportScale);
              context.drawImage(
                tempCanvas,
                -tempCanvas.width / 2,
                -tempCanvas.height / 2,
                tempCanvas.width,
                tempCanvas.height
              );
            } else {
              context.rotate(element.angle);
              if (element.type === "image") {
                context.scale(element.scale[0], element.scale[1]);
              }
              context.translate(-shiftX, -shiftY);
              drawElementOnCanvas(element, rc, context, renderConfig, appState);
            }
            context.restore();
          } else {
            const elementWithCanvas = generateElementWithCanvas(
              element,
              allElementsMap,
              renderConfig,
              appState
            );
            if (!elementWithCanvas) {
              return;
            }
            const currentImageSmoothingStatus = context.imageSmoothingEnabled;
            if (
              // do not disable smoothing during zoom as blurry shapes look better
              // on low resolution (while still zooming in) than sharp ones
              !appState?.shouldCacheIgnoreZoom && // angle is 0 -> always disable smoothing
              (!element.angle || // or check if angle is a right angle in which case we can still
              // disable smoothing without adversely affecting the result
              // We need less-than comparison because of FP artihmetic
              isRightAngleRads(element.angle))
            ) {
              context.imageSmoothingEnabled = false;
            }
            drawElementFromCanvas(
              elementWithCanvas,
              context,
              renderConfig,
              appState,
              allElementsMap
            );
            context.imageSmoothingEnabled = currentImageSmoothingStatus;
          }
          break;
        }
        default: {
          throw new Error(`Unimplemented type ${element.type}`);
        }
      }
      context.globalAlpha = 1;
    };
    pathsCache = /* @__PURE__ */ new WeakMap([]);
    TO_FIXED_PRECISION = /(\s?[A-Z]?,?-?[0-9]*\.[0-9]{0,2})(([0-9]|e|-)*)/g;
  }
});

// scene/comparisons.ts
var hasBackground, hasStrokeColor, hasStrokeWidth, hasStrokeStyle, canChangeRoundness, toolIsArrow, canHaveArrowheads, getElementAtPosition;
var init_comparisons = __esm({
  "scene/comparisons.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_typeChecks();
    hasBackground = (type) => type === "rectangle" || type === "iframe" || type === "embeddable" || type === "ellipse" || type === "diamond" || type === "line" || type === "freedraw";
    hasStrokeColor = (type) => type !== "image" && type !== "frame" && type !== "magicframe";
    hasStrokeWidth = (type) => type === "rectangle" || type === "iframe" || type === "embeddable" || type === "ellipse" || type === "diamond" || type === "freedraw" || type === "arrow" || type === "line";
    hasStrokeStyle = (type) => type === "rectangle" || type === "iframe" || type === "embeddable" || type === "ellipse" || type === "diamond" || type === "arrow" || type === "line";
    canChangeRoundness = (type) => type === "rectangle" || type === "iframe" || type === "embeddable" || type === "line" || type === "diamond" || type === "image";
    toolIsArrow = (type) => type === "arrow";
    canHaveArrowheads = (type) => type === "arrow";
    getElementAtPosition = (elements, isAtPositionFn) => {
      let hitElement = null;
      for (let index = elements.length - 1; index >= 0; --index) {
        const element = elements[index];
        if (element.isDeleted) {
          continue;
        }
        if (isAtPositionFn(element)) {
          hitElement = element;
          break;
        }
      }
      return hitElement;
    };
  }
});

// scene/Shape.ts
import { simplify } from "points-on-curve";
function adjustRoughness(element) {
  const roughness = element.roughness;
  const maxSize = Math.max(element.width, element.height);
  const minSize = Math.min(element.width, element.height);
  if (
    // both sides relatively big
    minSize >= 20 && maxSize >= 50 || // is round & both sides above 15px
    minSize >= 15 && !!element.roundness && canChangeRoundness(element.type) || // relatively long linear element
    isLinearElement(element) && maxSize >= 50
  ) {
    return roughness;
  }
  return Math.min(roughness / (maxSize < 10 ? 3 : 2), 2.5);
}
var getDashArrayDashed, getDashArrayDotted, generateRoughOptions, modifyIframeLikeForRoughOptions, getArrowheadShapes, _generateElementShape, generateElbowArrowShape;
var init_Shape = __esm({
  "scene/Shape.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_renderElement();
    init_utils2();
    init_constants();
    init_typeChecks();
    init_comparisons();
    init_math();
    init_shapes();
    getDashArrayDashed = (strokeWidth) => [8, 8 + strokeWidth];
    getDashArrayDotted = (strokeWidth) => [1.5, 6 + strokeWidth];
    generateRoughOptions = (element, continuousPath = false) => {
      const options = {
        seed: element.seed,
        strokeLineDash: element.strokeStyle === "dashed" ? getDashArrayDashed(element.strokeWidth) : element.strokeStyle === "dotted" ? getDashArrayDotted(element.strokeWidth) : void 0,
        // for non-solid strokes, disable multiStroke because it tends to make
        // dashes/dots overlay each other
        disableMultiStroke: element.strokeStyle !== "solid",
        // for non-solid strokes, increase the width a bit to make it visually
        // similar to solid strokes, because we're also disabling multiStroke
        strokeWidth: element.strokeStyle !== "solid" ? element.strokeWidth + 0.5 : element.strokeWidth,
        // when increasing strokeWidth, we must explicitly set fillWeight and
        // hachureGap because if not specified, roughjs uses strokeWidth to
        // calculate them (and we don't want the fills to be modified)
        fillWeight: element.strokeWidth / 2,
        hachureGap: element.strokeWidth * 4,
        roughness: adjustRoughness(element),
        stroke: element.strokeColor,
        preserveVertices: continuousPath || element.roughness < ROUGHNESS.cartoonist
      };
      switch (element.type) {
        case "rectangle":
        case "iframe":
        case "embeddable":
        case "diamond":
        case "ellipse": {
          options.fillStyle = element.fillStyle;
          options.fill = isTransparent(element.backgroundColor) ? void 0 : element.backgroundColor;
          if (element.type === "ellipse") {
            options.curveFitting = 1;
          }
          return options;
        }
        case "line":
        case "freedraw": {
          if (isPathALoop(element.points)) {
            options.fillStyle = element.fillStyle;
            options.fill = element.backgroundColor === "transparent" ? void 0 : element.backgroundColor;
          }
          return options;
        }
        case "arrow":
          return options;
        default: {
          throw new Error(`Unimplemented type ${element.type}`);
        }
      }
    };
    modifyIframeLikeForRoughOptions = (element, isExporting, embedsValidationStatus) => {
      if (isIframeLikeElement(element) && (isExporting || isEmbeddableElement(element) && embedsValidationStatus?.get(element.id) !== true) && isTransparent(element.backgroundColor) && isTransparent(element.strokeColor)) {
        return {
          ...element,
          roughness: 0,
          backgroundColor: "#d3d3d3",
          fillStyle: "solid"
        };
      } else if (isIframeElement(element)) {
        return {
          ...element,
          strokeColor: isTransparent(element.strokeColor) ? "#000000" : element.strokeColor,
          backgroundColor: isTransparent(element.backgroundColor) ? "#f4f4f6" : element.backgroundColor
        };
      }
      return element;
    };
    getArrowheadShapes = (element, shape, position, arrowhead, generator, options, canvasBackgroundColor) => {
      const arrowheadPoints = getArrowheadPoints(
        element,
        shape,
        position,
        arrowhead
      );
      if (arrowheadPoints === null) {
        return [];
      }
      switch (arrowhead) {
        case "dot":
        case "circle":
        case "circle_outline": {
          const [x, y, diameter] = arrowheadPoints;
          delete options.strokeLineDash;
          return [
            generator.circle(x, y, diameter, {
              ...options,
              fill: arrowhead === "circle_outline" ? canvasBackgroundColor : element.strokeColor,
              fillStyle: "solid",
              stroke: element.strokeColor,
              roughness: Math.min(0.5, options.roughness || 0)
            })
          ];
        }
        case "triangle":
        case "triangle_outline": {
          const [x, y, x2, y2, x3, y3] = arrowheadPoints;
          delete options.strokeLineDash;
          return [
            generator.polygon(
              [
                [x, y],
                [x2, y2],
                [x3, y3],
                [x, y]
              ],
              {
                ...options,
                fill: arrowhead === "triangle_outline" ? canvasBackgroundColor : element.strokeColor,
                fillStyle: "solid",
                roughness: Math.min(1, options.roughness || 0)
              }
            )
          ];
        }
        case "diamond":
        case "diamond_outline": {
          const [x, y, x2, y2, x3, y3, x4, y4] = arrowheadPoints;
          delete options.strokeLineDash;
          return [
            generator.polygon(
              [
                [x, y],
                [x2, y2],
                [x3, y3],
                [x4, y4],
                [x, y]
              ],
              {
                ...options,
                fill: arrowhead === "diamond_outline" ? canvasBackgroundColor : element.strokeColor,
                fillStyle: "solid",
                roughness: Math.min(1, options.roughness || 0)
              }
            )
          ];
        }
        case "bar":
        case "arrow":
        default: {
          const [x2, y2, x3, y3, x4, y4] = arrowheadPoints;
          if (element.strokeStyle === "dotted") {
            const dash = getDashArrayDotted(element.strokeWidth - 1);
            options.strokeLineDash = [dash[0], dash[1] - 1];
          } else {
            delete options.strokeLineDash;
          }
          options.roughness = Math.min(1, options.roughness || 0);
          return [
            generator.line(x3, y3, x2, y2, options),
            generator.line(x4, y4, x2, y2, options)
          ];
        }
      }
    };
    _generateElementShape = (element, generator, {
      isExporting,
      canvasBackgroundColor,
      embedsValidationStatus
    }) => {
      switch (element.type) {
        case "rectangle":
        case "iframe":
        case "embeddable": {
          let shape;
          if (element.roundness) {
            const w = element.width;
            const h = element.height;
            const r = getCornerRadius(Math.min(w, h), element);
            shape = generator.path(
              `M ${r} 0 L ${w - r} 0 Q ${w} 0, ${w} ${r} L ${w} ${h - r} Q ${w} ${h}, ${w - r} ${h} L ${r} ${h} Q 0 ${h}, 0 ${h - r} L 0 ${r} Q 0 0, ${r} 0`,
              generateRoughOptions(
                modifyIframeLikeForRoughOptions(
                  element,
                  isExporting,
                  embedsValidationStatus
                ),
                true
              )
            );
          } else {
            shape = generator.rectangle(
              0,
              0,
              element.width,
              element.height,
              generateRoughOptions(
                modifyIframeLikeForRoughOptions(
                  element,
                  isExporting,
                  embedsValidationStatus
                ),
                false
              )
            );
          }
          return shape;
        }
        case "diamond": {
          let shape;
          const [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY] = getDiamondPoints(element);
          if (element.roundness) {
            const verticalRadius = getCornerRadius(Math.abs(topX - leftX), element);
            const horizontalRadius = getCornerRadius(
              Math.abs(rightY - topY),
              element
            );
            shape = generator.path(
              `M ${topX + verticalRadius} ${topY + horizontalRadius} L ${rightX - verticalRadius} ${rightY - horizontalRadius}
            C ${rightX} ${rightY}, ${rightX} ${rightY}, ${rightX - verticalRadius} ${rightY + horizontalRadius}
            L ${bottomX + verticalRadius} ${bottomY - horizontalRadius}
            C ${bottomX} ${bottomY}, ${bottomX} ${bottomY}, ${bottomX - verticalRadius} ${bottomY - horizontalRadius}
            L ${leftX + verticalRadius} ${leftY + horizontalRadius}
            C ${leftX} ${leftY}, ${leftX} ${leftY}, ${leftX + verticalRadius} ${leftY - horizontalRadius}
            L ${topX - verticalRadius} ${topY + horizontalRadius}
            C ${topX} ${topY}, ${topX} ${topY}, ${topX + verticalRadius} ${topY + horizontalRadius}`,
              generateRoughOptions(element, true)
            );
          } else {
            shape = generator.polygon(
              [
                [topX, topY],
                [rightX, rightY],
                [bottomX, bottomY],
                [leftX, leftY]
              ],
              generateRoughOptions(element)
            );
          }
          return shape;
        }
        case "ellipse": {
          const shape = generator.ellipse(
            element.width / 2,
            element.height / 2,
            element.width,
            element.height,
            generateRoughOptions(element)
          );
          return shape;
        }
        case "line":
        case "arrow": {
          let shape;
          const options = generateRoughOptions(element);
          const points = element.points.length ? element.points : [pointFrom(0, 0)];
          if (isElbowArrow(element)) {
            shape = [
              generator.path(
                generateElbowArrowShape(points, 16),
                generateRoughOptions(element, true)
              )
            ];
          } else if (!element.roundness) {
            if (options.fill) {
              shape = [
                generator.polygon(points, options)
              ];
            } else {
              shape = [
                generator.linearPath(points, options)
              ];
            }
          } else {
            shape = [generator.curve(points, options)];
          }
          if (element.type === "arrow") {
            const { startArrowhead = null, endArrowhead = "arrow" } = element;
            if (startArrowhead !== null) {
              const shapes = getArrowheadShapes(
                element,
                shape,
                "start",
                startArrowhead,
                generator,
                options,
                canvasBackgroundColor
              );
              shape.push(...shapes);
            }
            if (endArrowhead !== null) {
              if (endArrowhead === void 0) {
              }
              const shapes = getArrowheadShapes(
                element,
                shape,
                "end",
                endArrowhead,
                generator,
                options,
                canvasBackgroundColor
              );
              shape.push(...shapes);
            }
          }
          return shape;
        }
        case "freedraw": {
          let shape;
          generateFreeDrawShape(element);
          if (isPathALoop(element.points)) {
            const simplifiedPoints = simplify(element.points, 0.75);
            shape = generator.curve(simplifiedPoints, {
              ...generateRoughOptions(element),
              stroke: "none"
            });
          } else {
            shape = null;
          }
          return shape;
        }
        case "frame":
        case "magicframe":
        case "text":
        case "image": {
          const shape = null;
          return shape;
        }
        default: {
          assertNever(
            element,
            `generateElementShape(): Unimplemented type ${element?.type}`
          );
          return null;
        }
      }
    };
    generateElbowArrowShape = (points, radius) => {
      const subpoints = [];
      for (let i = 1; i < points.length - 1; i += 1) {
        const prev = points[i - 1];
        const next = points[i + 1];
        const corner = Math.min(
          radius,
          pointDistance(points[i], next) / 2,
          pointDistance(points[i], prev) / 2
        );
        if (prev[0] < points[i][0] && prev[1] === points[i][1]) {
          subpoints.push([points[i][0] - corner, points[i][1]]);
        } else if (prev[0] === points[i][0] && prev[1] < points[i][1]) {
          subpoints.push([points[i][0], points[i][1] - corner]);
        } else if (prev[0] > points[i][0] && prev[1] === points[i][1]) {
          subpoints.push([points[i][0] + corner, points[i][1]]);
        } else {
          subpoints.push([points[i][0], points[i][1] + corner]);
        }
        subpoints.push(points[i]);
        if (next[0] < points[i][0] && next[1] === points[i][1]) {
          subpoints.push([points[i][0] - corner, points[i][1]]);
        } else if (next[0] === points[i][0] && next[1] < points[i][1]) {
          subpoints.push([points[i][0], points[i][1] - corner]);
        } else if (next[0] > points[i][0] && next[1] === points[i][1]) {
          subpoints.push([points[i][0] + corner, points[i][1]]);
        } else {
          subpoints.push([points[i][0], points[i][1] + corner]);
        }
      }
      const d = [`M ${points[0][0]} ${points[0][1]}`];
      for (let i = 0; i < subpoints.length; i += 3) {
        d.push(`L ${subpoints[i][0]} ${subpoints[i][1]}`);
        d.push(
          `Q ${subpoints[i + 1][0]} ${subpoints[i + 1][1]}, ${subpoints[i + 2][0]} ${subpoints[i + 2][1]}`
        );
      }
      d.push(`L ${points[points.length - 1][0]} ${points[points.length - 1][1]}`);
      return d.join(" ");
    };
  }
});

// element/bounds.ts
import rough3 from "roughjs/bin/rough";
var ElementBounds, getElementAbsoluteCoords, getElementLineSegments, getDiamondPoints, getCurvePathOps2, getBezierValueForT, solveQuadratic, getCubicBezierCurveBound, getMinMaxXYFromCurvePathOps, getBoundsFromPoints, getFreeDrawElementAbsoluteCoords, getArrowheadSize, getArrowheadAngle, getArrowheadPoints, generateLinearElementShape, getLinearElementRotatedBounds, getElementBounds, getCommonBounds, getDraggedElementsBounds, getResizedElementAbsoluteCoords, getElementPointsCoords, getClosestElementBounds, getCommonBoundingBox, getVisibleSceneBounds, getCenterForBounds;
var init_bounds = __esm({
  "element/bounds.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_Shape();
    init_typeChecks();
    init_points();
    init_textElement();
    init_linearElementEditor();
    init_ShapeCache();
    init_utils2();
    init_math();
    ElementBounds = class _ElementBounds {
      static boundsCache = /* @__PURE__ */ new WeakMap();
      static getBounds(element, elementsMap) {
        const cachedBounds = _ElementBounds.boundsCache.get(element);
        if (cachedBounds?.version && cachedBounds.version === element.version && // we don't invalidate cache when we update containers and not labels,
        // which is causing problems down the line. Fix TBA.
        !isBoundToContainer(element)) {
          return cachedBounds.bounds;
        }
        const bounds = _ElementBounds.calculateBounds(element, elementsMap);
        _ElementBounds.boundsCache.set(element, {
          version: element.version,
          bounds
        });
        return bounds;
      }
      static calculateBounds(element, elementsMap) {
        let bounds;
        const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(
          element,
          elementsMap
        );
        if (isFreeDrawElement(element)) {
          const [minX, minY, maxX, maxY] = getBoundsFromPoints(
            element.points.map(
              ([x, y]) => pointRotateRads(
                pointFrom(x, y),
                pointFrom(cx - element.x, cy - element.y),
                element.angle
              )
            )
          );
          return [
            minX + element.x,
            minY + element.y,
            maxX + element.x,
            maxY + element.y
          ];
        } else if (isLinearElement(element)) {
          bounds = getLinearElementRotatedBounds(element, cx, cy, elementsMap);
        } else if (element.type === "diamond") {
          const [x11, y11] = pointRotateRads(
            pointFrom(cx, y1),
            pointFrom(cx, cy),
            element.angle
          );
          const [x12, y12] = pointRotateRads(
            pointFrom(cx, y2),
            pointFrom(cx, cy),
            element.angle
          );
          const [x22, y22] = pointRotateRads(
            pointFrom(x1, cy),
            pointFrom(cx, cy),
            element.angle
          );
          const [x21, y21] = pointRotateRads(
            pointFrom(x2, cy),
            pointFrom(cx, cy),
            element.angle
          );
          const minX = Math.min(x11, x12, x22, x21);
          const minY = Math.min(y11, y12, y22, y21);
          const maxX = Math.max(x11, x12, x22, x21);
          const maxY = Math.max(y11, y12, y22, y21);
          bounds = [minX, minY, maxX, maxY];
        } else if (element.type === "ellipse") {
          const w = (x2 - x1) / 2;
          const h = (y2 - y1) / 2;
          const cos = Math.cos(element.angle);
          const sin = Math.sin(element.angle);
          const ww = Math.hypot(w * cos, h * sin);
          const hh = Math.hypot(h * cos, w * sin);
          bounds = [cx - ww, cy - hh, cx + ww, cy + hh];
        } else {
          const [x11, y11] = pointRotateRads(
            pointFrom(x1, y1),
            pointFrom(cx, cy),
            element.angle
          );
          const [x12, y12] = pointRotateRads(
            pointFrom(x1, y2),
            pointFrom(cx, cy),
            element.angle
          );
          const [x22, y22] = pointRotateRads(
            pointFrom(x2, y2),
            pointFrom(cx, cy),
            element.angle
          );
          const [x21, y21] = pointRotateRads(
            pointFrom(x2, y1),
            pointFrom(cx, cy),
            element.angle
          );
          const minX = Math.min(x11, x12, x22, x21);
          const minY = Math.min(y11, y12, y22, y21);
          const maxX = Math.max(x11, x12, x22, x21);
          const maxY = Math.max(y11, y12, y22, y21);
          bounds = [minX, minY, maxX, maxY];
        }
        return bounds;
      }
    };
    getElementAbsoluteCoords = (element, elementsMap, includeBoundText = false) => {
      if (isFreeDrawElement(element)) {
        return getFreeDrawElementAbsoluteCoords(element);
      } else if (isLinearElement(element)) {
        return LinearElementEditor.getElementAbsoluteCoords(
          element,
          elementsMap,
          includeBoundText
        );
      } else if (isTextElement(element)) {
        const container = elementsMap ? getContainerElement(element, elementsMap) : null;
        if (isArrowElement(container)) {
          const { x, y } = LinearElementEditor.getBoundTextElementPosition(
            container,
            element,
            elementsMap
          );
          return [
            x,
            y,
            x + element.width,
            y + element.height,
            x + element.width / 2,
            y + element.height / 2
          ];
        }
      }
      return [
        element.x,
        element.y,
        element.x + element.width,
        element.y + element.height,
        element.x + element.width / 2,
        element.y + element.height / 2
      ];
    };
    getElementLineSegments = (element, elementsMap) => {
      const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(
        element,
        elementsMap
      );
      const center = pointFrom(cx, cy);
      if (isLinearElement(element) || isFreeDrawElement(element)) {
        const segments = [];
        let i = 0;
        while (i < element.points.length - 1) {
          segments.push(
            lineSegment(
              pointRotateRads(
                pointFrom(
                  element.points[i][0] + element.x,
                  element.points[i][1] + element.y
                ),
                center,
                element.angle
              ),
              pointRotateRads(
                pointFrom(
                  element.points[i + 1][0] + element.x,
                  element.points[i + 1][1] + element.y
                ),
                center,
                element.angle
              )
            )
          );
          i++;
        }
        return segments;
      }
      const [nw, ne, sw, se, n, s, w, e] = [
        [x1, y1],
        [x2, y1],
        [x1, y2],
        [x2, y2],
        [cx, y1],
        [cx, y2],
        [x1, cy],
        [x2, cy]
      ].map((point2) => pointRotateRads(point2, center, element.angle));
      if (element.type === "diamond") {
        return [
          lineSegment(n, w),
          lineSegment(n, e),
          lineSegment(s, w),
          lineSegment(s, e)
        ];
      }
      if (element.type === "ellipse") {
        return [
          lineSegment(n, w),
          lineSegment(n, e),
          lineSegment(s, w),
          lineSegment(s, e),
          lineSegment(n, w),
          lineSegment(n, e),
          lineSegment(s, w),
          lineSegment(s, e)
        ];
      }
      return [
        lineSegment(nw, ne),
        lineSegment(sw, se),
        lineSegment(nw, sw),
        lineSegment(ne, se),
        lineSegment(nw, e),
        lineSegment(sw, e),
        lineSegment(ne, w),
        lineSegment(se, w)
      ];
    };
    getDiamondPoints = (element) => {
      const topX = Math.floor(element.width / 2) + 1;
      const topY = 0;
      const rightX = element.width;
      const rightY = Math.floor(element.height / 2) + 1;
      const bottomX = topX;
      const bottomY = element.height;
      const leftX = 0;
      const leftY = rightY;
      return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];
    };
    getCurvePathOps2 = (shape) => {
      for (const set of shape.sets) {
        if (set.type === "path") {
          return set.ops;
        }
      }
      return shape.sets[0].ops;
    };
    getBezierValueForT = (t2, p0, p1, p2, p3) => {
      const oneMinusT = 1 - t2;
      return Math.pow(oneMinusT, 3) * p0 + 3 * Math.pow(oneMinusT, 2) * t2 * p1 + 3 * oneMinusT * Math.pow(t2, 2) * p2 + Math.pow(t2, 3) * p3;
    };
    solveQuadratic = (p0, p1, p2, p3) => {
      const i = p1 - p0;
      const j = p2 - p1;
      const k = p3 - p2;
      const a = 3 * i - 6 * j + 3 * k;
      const b = 6 * j - 6 * i;
      const c = 3 * i;
      const sqrtPart = b * b - 4 * a * c;
      const hasSolution = sqrtPart >= 0;
      if (!hasSolution) {
        return false;
      }
      let s1 = null;
      let s2 = null;
      let t1 = Infinity;
      let t2 = Infinity;
      if (a === 0) {
        t1 = t2 = -c / b;
      } else {
        t1 = (-b + Math.sqrt(sqrtPart)) / (2 * a);
        t2 = (-b - Math.sqrt(sqrtPart)) / (2 * a);
      }
      if (t1 >= 0 && t1 <= 1) {
        s1 = getBezierValueForT(t1, p0, p1, p2, p3);
      }
      if (t2 >= 0 && t2 <= 1) {
        s2 = getBezierValueForT(t2, p0, p1, p2, p3);
      }
      return [s1, s2];
    };
    getCubicBezierCurveBound = (p0, p1, p2, p3) => {
      const solX = solveQuadratic(p0[0], p1[0], p2[0], p3[0]);
      const solY = solveQuadratic(p0[1], p1[1], p2[1], p3[1]);
      let minX = Math.min(p0[0], p3[0]);
      let maxX = Math.max(p0[0], p3[0]);
      if (solX) {
        const xs = solX.filter((x) => x !== null);
        minX = Math.min(minX, ...xs);
        maxX = Math.max(maxX, ...xs);
      }
      let minY = Math.min(p0[1], p3[1]);
      let maxY = Math.max(p0[1], p3[1]);
      if (solY) {
        const ys = solY.filter((y) => y !== null);
        minY = Math.min(minY, ...ys);
        maxY = Math.max(maxY, ...ys);
      }
      return [minX, minY, maxX, maxY];
    };
    getMinMaxXYFromCurvePathOps = (ops, transformXY) => {
      let currentP = pointFrom(0, 0);
      const { minX, minY, maxX, maxY } = ops.reduce(
        (limits, { op, data }) => {
          if (op === "move") {
            const p = pointFromArray(data);
            invariant(p != null, "Op data is not a point");
            currentP = p;
          } else if (op === "bcurveTo") {
            const _p1 = pointFrom(data[0], data[1]);
            const _p2 = pointFrom(data[2], data[3]);
            const _p3 = pointFrom(data[4], data[5]);
            const p1 = transformXY ? transformXY(_p1) : _p1;
            const p2 = transformXY ? transformXY(_p2) : _p2;
            const p3 = transformXY ? transformXY(_p3) : _p3;
            const p0 = transformXY ? transformXY(currentP) : currentP;
            currentP = _p3;
            const [minX2, minY2, maxX2, maxY2] = getCubicBezierCurveBound(
              p0,
              p1,
              p2,
              p3
            );
            limits.minX = Math.min(limits.minX, minX2);
            limits.minY = Math.min(limits.minY, minY2);
            limits.maxX = Math.max(limits.maxX, maxX2);
            limits.maxY = Math.max(limits.maxY, maxY2);
          } else if (op === "lineTo") {
          } else if (op === "qcurveTo") {
          }
          return limits;
        },
        { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity }
      );
      return [minX, minY, maxX, maxY];
    };
    getBoundsFromPoints = (points) => {
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      for (const [x, y] of points) {
        minX = Math.min(minX, x);
        minY = Math.min(minY, y);
        maxX = Math.max(maxX, x);
        maxY = Math.max(maxY, y);
      }
      return [minX, minY, maxX, maxY];
    };
    getFreeDrawElementAbsoluteCoords = (element) => {
      const [minX, minY, maxX, maxY] = getBoundsFromPoints(element.points);
      const x1 = minX + element.x;
      const y1 = minY + element.y;
      const x2 = maxX + element.x;
      const y2 = maxY + element.y;
      return [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2];
    };
    getArrowheadSize = (arrowhead) => {
      switch (arrowhead) {
        case "arrow":
          return 25;
        case "diamond":
        case "diamond_outline":
          return 12;
        default:
          return 15;
      }
    };
    getArrowheadAngle = (arrowhead) => {
      switch (arrowhead) {
        case "bar":
          return 90;
        case "arrow":
          return 20;
        default:
          return 25;
      }
    };
    getArrowheadPoints = (element, shape, position, arrowhead) => {
      const ops = getCurvePathOps2(shape[0]);
      if (ops.length < 1) {
        return null;
      }
      const index = position === "start" ? 1 : ops.length - 1;
      const data = ops[index].data;
      invariant(data.length === 6, "Op data length is not 6");
      const p3 = pointFrom(data[4], data[5]);
      const p2 = pointFrom(data[2], data[3]);
      const p1 = pointFrom(data[0], data[1]);
      const prevOp = ops[index - 1];
      let p0 = pointFrom(0, 0);
      if (prevOp.op === "move") {
        const p = pointFromArray(prevOp.data);
        invariant(p != null, "Op data is not a point");
        p0 = p;
      } else if (prevOp.op === "bcurveTo") {
        p0 = pointFrom(prevOp.data[4], prevOp.data[5]);
      }
      const equation2 = (t2, idx) => Math.pow(1 - t2, 3) * p3[idx] + 3 * t2 * Math.pow(1 - t2, 2) * p2[idx] + 3 * Math.pow(t2, 2) * (1 - t2) * p1[idx] + p0[idx] * Math.pow(t2, 3);
      const [x2, y2] = position === "start" ? p0 : p3;
      const [x1, y1] = [equation2(0.3, 0), equation2(0.3, 1)];
      const distance3 = Math.hypot(x2 - x1, y2 - y1);
      const nx = (x2 - x1) / distance3;
      const ny = (y2 - y1) / distance3;
      const size = getArrowheadSize(arrowhead);
      let length = 0;
      {
        const [cx, cy] = position === "end" ? element.points[element.points.length - 1] : element.points[0];
        const [px, py] = element.points.length > 1 ? position === "end" ? element.points[element.points.length - 2] : element.points[1] : [0, 0];
        length = Math.hypot(cx - px, cy - py);
      }
      const lengthMultiplier = arrowhead === "diamond" || arrowhead === "diamond_outline" ? 0.25 : 0.5;
      const minSize = Math.min(size, length * lengthMultiplier);
      const xs = x2 - nx * minSize;
      const ys = y2 - ny * minSize;
      if (arrowhead === "dot" || arrowhead === "circle" || arrowhead === "circle_outline") {
        const diameter = Math.hypot(ys - y2, xs - x2) + element.strokeWidth - 2;
        return [x2, y2, diameter];
      }
      const angle = getArrowheadAngle(arrowhead);
      const [x3, y3] = pointRotateRads(
        pointFrom(xs, ys),
        pointFrom(x2, y2),
        -angle * Math.PI / 180
      );
      const [x4, y4] = pointRotateRads(
        pointFrom(xs, ys),
        pointFrom(x2, y2),
        degreesToRadians(angle)
      );
      if (arrowhead === "diamond" || arrowhead === "diamond_outline") {
        let ox;
        let oy;
        if (position === "start") {
          const [px, py] = element.points.length > 1 ? element.points[1] : [0, 0];
          [ox, oy] = pointRotateRads(
            pointFrom(x2 + minSize * 2, y2),
            pointFrom(x2, y2),
            Math.atan2(py - y2, px - x2)
          );
        } else {
          const [px, py] = element.points.length > 1 ? element.points[element.points.length - 2] : [0, 0];
          [ox, oy] = pointRotateRads(
            pointFrom(x2 - minSize * 2, y2),
            pointFrom(x2, y2),
            Math.atan2(y2 - py, x2 - px)
          );
        }
        return [x2, y2, x3, y3, ox, oy, x4, y4];
      }
      return [x2, y2, x3, y3, x4, y4];
    };
    generateLinearElementShape = (element) => {
      const generator = rough3.generator();
      const options = generateRoughOptions(element);
      const method = (() => {
        if (element.roundness) {
          return "curve";
        }
        if (options.fill) {
          return "polygon";
        }
        return "linearPath";
      })();
      return generator[method](
        element.points,
        options
      );
    };
    getLinearElementRotatedBounds = (element, cx, cy, elementsMap) => {
      const boundTextElement = getBoundTextElement(element, elementsMap);
      if (element.points.length < 2) {
        const [pointX, pointY] = element.points[0];
        const [x, y] = pointRotateRads(
          pointFrom(element.x + pointX, element.y + pointY),
          pointFrom(cx, cy),
          element.angle
        );
        let coords2 = [x, y, x, y];
        if (boundTextElement) {
          const coordsWithBoundText = LinearElementEditor.getMinMaxXYWithBoundText(
            element,
            elementsMap,
            [x, y, x, y],
            boundTextElement
          );
          coords2 = [
            coordsWithBoundText[0],
            coordsWithBoundText[1],
            coordsWithBoundText[2],
            coordsWithBoundText[3]
          ];
        }
        return coords2;
      }
      const cachedShape = ShapeCache.get(element)?.[0];
      const shape = cachedShape ?? generateLinearElementShape(element);
      const ops = getCurvePathOps2(shape);
      const transformXY = ([x, y]) => pointRotateRads(
        pointFrom(element.x + x, element.y + y),
        pointFrom(cx, cy),
        element.angle
      );
      const res = getMinMaxXYFromCurvePathOps(ops, transformXY);
      let coords = [res[0], res[1], res[2], res[3]];
      if (boundTextElement) {
        const coordsWithBoundText = LinearElementEditor.getMinMaxXYWithBoundText(
          element,
          elementsMap,
          coords,
          boundTextElement
        );
        coords = [
          coordsWithBoundText[0],
          coordsWithBoundText[1],
          coordsWithBoundText[2],
          coordsWithBoundText[3]
        ];
      }
      return coords;
    };
    getElementBounds = (element, elementsMap) => {
      return ElementBounds.getBounds(element, elementsMap);
    };
    getCommonBounds = (elements, elementsMap) => {
      if (!elements.length) {
        return [0, 0, 0, 0];
      }
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      const _elementsMap = elementsMap || arrayToMap(elements);
      elements.forEach((element) => {
        const [x1, y1, x2, y2] = getElementBounds(element, _elementsMap);
        minX = Math.min(minX, x1);
        minY = Math.min(minY, y1);
        maxX = Math.max(maxX, x2);
        maxY = Math.max(maxY, y2);
      });
      return [minX, minY, maxX, maxY];
    };
    getDraggedElementsBounds = (elements, dragOffset) => {
      const [minX, minY, maxX, maxY] = getCommonBounds(elements);
      return [
        minX + dragOffset.x,
        minY + dragOffset.y,
        maxX + dragOffset.x,
        maxY + dragOffset.y
      ];
    };
    getResizedElementAbsoluteCoords = (element, nextWidth, nextHeight, normalizePoints) => {
      if (!(isLinearElement(element) || isFreeDrawElement(element))) {
        return [
          element.x,
          element.y,
          element.x + nextWidth,
          element.y + nextHeight
        ];
      }
      const points = rescalePoints(
        0,
        nextWidth,
        rescalePoints(1, nextHeight, element.points, normalizePoints),
        normalizePoints
      );
      let bounds;
      if (isFreeDrawElement(element)) {
        bounds = getBoundsFromPoints(points);
      } else {
        const gen = rough3.generator();
        const curve2 = !element.roundness ? gen.linearPath(
          points,
          generateRoughOptions(element)
        ) : gen.curve(points, generateRoughOptions(element));
        const ops = getCurvePathOps2(curve2);
        bounds = getMinMaxXYFromCurvePathOps(ops);
      }
      const [minX, minY, maxX, maxY] = bounds;
      return [
        minX + element.x,
        minY + element.y,
        maxX + element.x,
        maxY + element.y
      ];
    };
    getElementPointsCoords = (element, points) => {
      const gen = rough3.generator();
      const curve2 = element.roundness == null ? gen.linearPath(
        points,
        generateRoughOptions(element)
      ) : gen.curve(points, generateRoughOptions(element));
      const ops = getCurvePathOps2(curve2);
      const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);
      return [
        minX + element.x,
        minY + element.y,
        maxX + element.x,
        maxY + element.y
      ];
    };
    getClosestElementBounds = (elements, from3) => {
      if (!elements.length) {
        return [0, 0, 0, 0];
      }
      let minDistance = Infinity;
      let closestElement = elements[0];
      const elementsMap = arrayToMap(elements);
      elements.forEach((element) => {
        const [x1, y1, x2, y2] = getElementBounds(element, elementsMap);
        const distance3 = pointDistance(
          pointFrom((x1 + x2) / 2, (y1 + y2) / 2),
          pointFrom(from3.x, from3.y)
        );
        if (distance3 < minDistance) {
          minDistance = distance3;
          closestElement = element;
        }
      });
      return getElementBounds(closestElement, elementsMap);
    };
    getCommonBoundingBox = (elements) => {
      const [minX, minY, maxX, maxY] = getCommonBounds(elements);
      return {
        minX,
        minY,
        maxX,
        maxY,
        width: maxX - minX,
        height: maxY - minY,
        midX: (minX + maxX) / 2,
        midY: (minY + maxY) / 2
      };
    };
    getVisibleSceneBounds = ({
      scrollX,
      scrollY,
      width,
      height,
      zoom
    }) => {
      return [
        -scrollX,
        -scrollY,
        -scrollX + width / zoom.value,
        -scrollY + height / zoom.value
      ];
    };
    getCenterForBounds = (bounds) => pointFrom(
      bounds[0] + (bounds[2] - bounds[0]) / 2,
      bounds[1] + (bounds[3] - bounds[1]) / 2
    );
  }
});

// binaryheap.ts
var BinaryHeap;
var init_binaryheap = __esm({
  "binaryheap.ts"() {
    "use strict";
    init_define_import_meta_env();
    BinaryHeap = class {
      constructor(scoreFunction) {
        this.scoreFunction = scoreFunction;
      }
      content = [];
      sinkDown(idx) {
        const node = this.content[idx];
        while (idx > 0) {
          const parentN = (idx + 1 >> 1) - 1;
          const parent = this.content[parentN];
          if (this.scoreFunction(node) < this.scoreFunction(parent)) {
            this.content[parentN] = node;
            this.content[idx] = parent;
            idx = parentN;
          } else {
            break;
          }
        }
      }
      bubbleUp(idx) {
        const length = this.content.length;
        const node = this.content[idx];
        const score = this.scoreFunction(node);
        while (true) {
          const child2N = idx + 1 << 1;
          const child1N = child2N - 1;
          let swap = null;
          let child1Score = 0;
          if (child1N < length) {
            const child1 = this.content[child1N];
            child1Score = this.scoreFunction(child1);
            if (child1Score < score) {
              swap = child1N;
            }
          }
          if (child2N < length) {
            const child2 = this.content[child2N];
            const child2Score = this.scoreFunction(child2);
            if (child2Score < (swap === null ? score : child1Score)) {
              swap = child2N;
            }
          }
          if (swap !== null) {
            this.content[idx] = this.content[swap];
            this.content[swap] = node;
            idx = swap;
          } else {
            break;
          }
        }
      }
      push(node) {
        this.content.push(node);
        this.sinkDown(this.content.length - 1);
      }
      pop() {
        if (this.content.length === 0) {
          return null;
        }
        const result = this.content[0];
        const end = this.content.pop();
        if (this.content.length > 0) {
          this.content[0] = end;
          this.bubbleUp(0);
        }
        return result;
      }
      remove(node) {
        if (this.content.length === 0) {
          return;
        }
        const i = this.content.indexOf(node);
        const end = this.content.pop();
        if (i < this.content.length) {
          this.content[i] = end;
          if (this.scoreFunction(end) < this.scoreFunction(node)) {
            this.sinkDown(i);
          } else {
            this.bubbleUp(i);
          }
        }
      }
      size() {
        return this.content.length;
      }
      rescoreElement(node) {
        this.sinkDown(this.content.indexOf(node));
      }
    };
  }
});

// element/routing.ts
var BASE_PADDING, mutateElbowArrow, updateElbowArrow, offsetFromHeading, astar, pathTo, m_dist, generateDynamicAABBs, calculateGrid, getDonglePosition, estimateSegmentCount, getNeighbors, gridNodeFromAddr, pointToGridNode, commonAABB, getBindableElementForId, normalizedArrowElementUpdate, simplifyElbowArrowPoints, neighborIndexToHeading, getGlobalPoint, getSnapPoint, getBindPointHeading, getHoveredElements, gridAddressesEqual;
var init_routing = __esm({
  "element/routing.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_binaryheap();
    init_points();
    init_shapes();
    init_utils2();
    init_binding();
    init_heading();
    init_mutateElement();
    init_typeChecks();
    BASE_PADDING = 40;
    mutateElbowArrow = (arrow, elementsMap, nextPoints, offset2, otherUpdates, options) => {
      const update = updateElbowArrow(
        arrow,
        elementsMap,
        nextPoints,
        offset2,
        options
      );
      if (update) {
        mutateElement(
          arrow,
          {
            ...otherUpdates,
            ...update,
            angle: 0
          },
          options?.informMutation
        );
      } else {
        console.error("Elbow arrow cannot find a route");
      }
    };
    updateElbowArrow = (arrow, elementsMap, nextPoints, offset2, options) => {
      const origStartGlobalPoint = pointTranslate(
        pointTranslate(
          nextPoints[0],
          vector(arrow.x, arrow.y)
        ),
        offset2
      );
      const origEndGlobalPoint = pointTranslate(
        pointTranslate(
          nextPoints[nextPoints.length - 1],
          vector(arrow.x, arrow.y)
        ),
        offset2
      );
      const startElement = arrow.startBinding && getBindableElementForId(arrow.startBinding.elementId, elementsMap);
      const endElement = arrow.endBinding && getBindableElementForId(arrow.endBinding.elementId, elementsMap);
      const [hoveredStartElement, hoveredEndElement] = options?.isDragging ? getHoveredElements(origStartGlobalPoint, origEndGlobalPoint, elementsMap) : [startElement, endElement];
      const startGlobalPoint = getGlobalPoint(
        arrow.startBinding?.fixedPoint,
        origStartGlobalPoint,
        origEndGlobalPoint,
        elementsMap,
        startElement,
        hoveredStartElement,
        options?.isDragging
      );
      const endGlobalPoint = getGlobalPoint(
        arrow.endBinding?.fixedPoint,
        origEndGlobalPoint,
        origStartGlobalPoint,
        elementsMap,
        endElement,
        hoveredEndElement,
        options?.isDragging
      );
      const startHeading = getBindPointHeading(
        startGlobalPoint,
        endGlobalPoint,
        elementsMap,
        hoveredStartElement,
        origStartGlobalPoint
      );
      const endHeading = getBindPointHeading(
        endGlobalPoint,
        startGlobalPoint,
        elementsMap,
        hoveredEndElement,
        origEndGlobalPoint
      );
      const startPointBounds = [
        startGlobalPoint[0] - 2,
        startGlobalPoint[1] - 2,
        startGlobalPoint[0] + 2,
        startGlobalPoint[1] + 2
      ];
      const endPointBounds = [
        endGlobalPoint[0] - 2,
        endGlobalPoint[1] - 2,
        endGlobalPoint[0] + 2,
        endGlobalPoint[1] + 2
      ];
      const startElementBounds = hoveredStartElement ? aabbForElement(
        hoveredStartElement,
        offsetFromHeading(
          startHeading,
          arrow.startArrowhead ? FIXED_BINDING_DISTANCE * 6 : FIXED_BINDING_DISTANCE * 2,
          1
        )
      ) : startPointBounds;
      const endElementBounds = hoveredEndElement ? aabbForElement(
        hoveredEndElement,
        offsetFromHeading(
          endHeading,
          arrow.endArrowhead ? FIXED_BINDING_DISTANCE * 6 : FIXED_BINDING_DISTANCE * 2,
          1
        )
      ) : endPointBounds;
      const boundsOverlap = pointInsideBounds(
        startGlobalPoint,
        hoveredEndElement ? aabbForElement(
          hoveredEndElement,
          offsetFromHeading(endHeading, BASE_PADDING, BASE_PADDING)
        ) : endPointBounds
      ) || pointInsideBounds(
        endGlobalPoint,
        hoveredStartElement ? aabbForElement(
          hoveredStartElement,
          offsetFromHeading(startHeading, BASE_PADDING, BASE_PADDING)
        ) : startPointBounds
      );
      const commonBounds = commonAABB(
        boundsOverlap ? [startPointBounds, endPointBounds] : [startElementBounds, endElementBounds]
      );
      const dynamicAABBs = generateDynamicAABBs(
        boundsOverlap ? startPointBounds : startElementBounds,
        boundsOverlap ? endPointBounds : endElementBounds,
        commonBounds,
        boundsOverlap ? offsetFromHeading(
          startHeading,
          !hoveredStartElement && !hoveredEndElement ? 0 : BASE_PADDING,
          0
        ) : offsetFromHeading(
          startHeading,
          !hoveredStartElement && !hoveredEndElement ? 0 : BASE_PADDING - (arrow.startArrowhead ? FIXED_BINDING_DISTANCE * 6 : FIXED_BINDING_DISTANCE * 2),
          BASE_PADDING
        ),
        boundsOverlap ? offsetFromHeading(
          endHeading,
          !hoveredStartElement && !hoveredEndElement ? 0 : BASE_PADDING,
          0
        ) : offsetFromHeading(
          endHeading,
          !hoveredStartElement && !hoveredEndElement ? 0 : BASE_PADDING - (arrow.endArrowhead ? FIXED_BINDING_DISTANCE * 6 : FIXED_BINDING_DISTANCE * 2),
          BASE_PADDING
        ),
        boundsOverlap,
        hoveredStartElement && aabbForElement(hoveredStartElement),
        hoveredEndElement && aabbForElement(hoveredEndElement)
      );
      const startDonglePosition = getDonglePosition(
        dynamicAABBs[0],
        startHeading,
        startGlobalPoint
      );
      const endDonglePosition = getDonglePosition(
        dynamicAABBs[1],
        endHeading,
        endGlobalPoint
      );
      const grid = calculateGrid(
        dynamicAABBs,
        startDonglePosition ? startDonglePosition : startGlobalPoint,
        startHeading,
        endDonglePosition ? endDonglePosition : endGlobalPoint,
        endHeading,
        commonBounds
      );
      const startDongle = startDonglePosition && pointToGridNode(startDonglePosition, grid);
      const endDongle = endDonglePosition && pointToGridNode(endDonglePosition, grid);
      const endNode = pointToGridNode(endGlobalPoint, grid);
      if (endNode && hoveredEndElement) {
        endNode.closed = true;
      }
      const startNode = pointToGridNode(startGlobalPoint, grid);
      if (startNode && arrow.startBinding) {
        startNode.closed = true;
      }
      const dongleOverlap = startDongle && endDongle && (pointInsideBounds(startDongle.pos, dynamicAABBs[1]) || pointInsideBounds(endDongle.pos, dynamicAABBs[0]));
      const path = astar(
        startDongle ? startDongle : startNode,
        endDongle ? endDongle : endNode,
        grid,
        startHeading ? startHeading : HEADING_RIGHT,
        endHeading ? endHeading : HEADING_RIGHT,
        dongleOverlap ? [] : dynamicAABBs
      );
      if (path) {
        const points = path.map((node) => [
          node.pos[0],
          node.pos[1]
        ]);
        startDongle && points.unshift(startGlobalPoint);
        endDongle && points.push(endGlobalPoint);
        return normalizedArrowElementUpdate(simplifyElbowArrowPoints(points), 0, 0);
      }
      return null;
    };
    offsetFromHeading = (heading, head, side) => {
      switch (heading) {
        case HEADING_UP:
          return [head, side, side, side];
        case HEADING_RIGHT:
          return [side, head, side, side];
        case HEADING_DOWN:
          return [side, side, head, side];
      }
      return [side, side, side, head];
    };
    astar = (start2, end, grid, startHeading, endHeading, aabbs) => {
      const bendMultiplier = m_dist(start2.pos, end.pos);
      const open = new BinaryHeap((node) => node.f);
      open.push(start2);
      while (open.size() > 0) {
        const current = open.pop();
        if (!current || current.closed) {
          continue;
        }
        if (current === end) {
          return pathTo(start2, current);
        }
        current.closed = true;
        const neighbors = getNeighbors(current.addr, grid);
        for (let i = 0; i < 4; i++) {
          const neighbor = neighbors[i];
          if (!neighbor || neighbor.closed) {
            continue;
          }
          const neighborHalfPoint = pointScaleFromOrigin(
            neighbor.pos,
            current.pos,
            0.5
          );
          if (isAnyTrue(
            ...aabbs.map((aabb) => pointInsideBounds(neighborHalfPoint, aabb))
          )) {
            continue;
          }
          const neighborHeading = neighborIndexToHeading(i);
          const previousDirection = current.parent ? vectorToHeading(vectorFromPoint(current.pos, current.parent.pos)) : startHeading;
          const reverseHeading = flipHeading(previousDirection);
          const neighborIsReverseRoute = compareHeading(reverseHeading, neighborHeading) || gridAddressesEqual(start2.addr, neighbor.addr) && compareHeading(neighborHeading, startHeading) || gridAddressesEqual(end.addr, neighbor.addr) && compareHeading(neighborHeading, endHeading);
          if (neighborIsReverseRoute) {
            continue;
          }
          const directionChange = previousDirection !== neighborHeading;
          const gScore = current.g + m_dist(neighbor.pos, current.pos) + (directionChange ? Math.pow(bendMultiplier, 3) : 0);
          const beenVisited = neighbor.visited;
          if (!beenVisited || gScore < neighbor.g) {
            const estBendCount = estimateSegmentCount(
              neighbor,
              end,
              neighborHeading,
              endHeading
            );
            neighbor.visited = true;
            neighbor.parent = current;
            neighbor.h = m_dist(end.pos, neighbor.pos) + estBendCount * Math.pow(bendMultiplier, 2);
            neighbor.g = gScore;
            neighbor.f = neighbor.g + neighbor.h;
            if (!beenVisited) {
              open.push(neighbor);
            } else {
              open.rescoreElement(neighbor);
            }
          }
        }
      }
      return null;
    };
    pathTo = (start2, node) => {
      let curr = node;
      const path = [];
      while (curr.parent) {
        path.unshift(curr);
        curr = curr.parent;
      }
      path.unshift(start2);
      return path;
    };
    m_dist = (a, b) => Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);
    generateDynamicAABBs = (a, b, common, startDifference, endDifference, disableSideHack, startElementBounds, endElementBounds) => {
      const startEl = startElementBounds ?? a;
      const endEl = endElementBounds ?? b;
      const [startUp, startRight, startDown, startLeft] = startDifference ?? [
        0,
        0,
        0,
        0
      ];
      const [endUp, endRight, endDown, endLeft] = endDifference ?? [0, 0, 0, 0];
      const first = [
        a[0] > b[2] ? a[1] > b[3] || a[3] < b[1] ? Math.min((startEl[0] + endEl[2]) / 2, a[0] - startLeft) : (startEl[0] + endEl[2]) / 2 : a[0] > b[0] ? a[0] - startLeft : common[0] - startLeft,
        a[1] > b[3] ? a[0] > b[2] || a[2] < b[0] ? Math.min((startEl[1] + endEl[3]) / 2, a[1] - startUp) : (startEl[1] + endEl[3]) / 2 : a[1] > b[1] ? a[1] - startUp : common[1] - startUp,
        a[2] < b[0] ? a[1] > b[3] || a[3] < b[1] ? Math.max((startEl[2] + endEl[0]) / 2, a[2] + startRight) : (startEl[2] + endEl[0]) / 2 : a[2] < b[2] ? a[2] + startRight : common[2] + startRight,
        a[3] < b[1] ? a[0] > b[2] || a[2] < b[0] ? Math.max((startEl[3] + endEl[1]) / 2, a[3] + startDown) : (startEl[3] + endEl[1]) / 2 : a[3] < b[3] ? a[3] + startDown : common[3] + startDown
      ];
      const second = [
        b[0] > a[2] ? b[1] > a[3] || b[3] < a[1] ? Math.min((endEl[0] + startEl[2]) / 2, b[0] - endLeft) : (endEl[0] + startEl[2]) / 2 : b[0] > a[0] ? b[0] - endLeft : common[0] - endLeft,
        b[1] > a[3] ? b[0] > a[2] || b[2] < a[0] ? Math.min((endEl[1] + startEl[3]) / 2, b[1] - endUp) : (endEl[1] + startEl[3]) / 2 : b[1] > a[1] ? b[1] - endUp : common[1] - endUp,
        b[2] < a[0] ? b[1] > a[3] || b[3] < a[1] ? Math.max((endEl[2] + startEl[0]) / 2, b[2] + endRight) : (endEl[2] + startEl[0]) / 2 : b[2] < a[2] ? b[2] + endRight : common[2] + endRight,
        b[3] < a[1] ? b[0] > a[2] || b[2] < a[0] ? Math.max((endEl[3] + startEl[1]) / 2, b[3] + endDown) : (endEl[3] + startEl[1]) / 2 : b[3] < a[3] ? b[3] + endDown : common[3] + endDown
      ];
      const c = commonAABB([first, second]);
      if (!disableSideHack && first[2] - first[0] + second[2] - second[0] > c[2] - c[0] + 1e-11 && first[3] - first[1] + second[3] - second[1] > c[3] - c[1] + 1e-11) {
        const [endCenterX, endCenterY] = [
          (second[0] + second[2]) / 2,
          (second[1] + second[3]) / 2
        ];
        if (b[0] > a[2] && a[1] > b[3]) {
          const cX = first[2] + (second[0] - first[2]) / 2;
          const cY = second[3] + (first[1] - second[3]) / 2;
          if (vectorCross(
            vector(a[2] - endCenterX, a[1] - endCenterY),
            vector(a[0] - endCenterX, a[3] - endCenterY)
          ) > 0) {
            return [
              [first[0], first[1], cX, first[3]],
              [cX, second[1], second[2], second[3]]
            ];
          }
          return [
            [first[0], cY, first[2], first[3]],
            [second[0], second[1], second[2], cY]
          ];
        } else if (a[2] < b[0] && a[3] < b[1]) {
          const cX = first[2] + (second[0] - first[2]) / 2;
          const cY = first[3] + (second[1] - first[3]) / 2;
          if (vectorCross(
            vector(a[0] - endCenterX, a[1] - endCenterY),
            vector(a[2] - endCenterX, a[3] - endCenterY)
          ) > 0) {
            return [
              [first[0], first[1], first[2], cY],
              [second[0], cY, second[2], second[3]]
            ];
          }
          return [
            [first[0], first[1], cX, first[3]],
            [cX, second[1], second[2], second[3]]
          ];
        } else if (a[0] > b[2] && a[3] < b[1]) {
          const cX = second[2] + (first[0] - second[2]) / 2;
          const cY = first[3] + (second[1] - first[3]) / 2;
          if (vectorCross(
            vector(a[2] - endCenterX, a[1] - endCenterY),
            vector(a[0] - endCenterX, a[3] - endCenterY)
          ) > 0) {
            return [
              [cX, first[1], first[2], first[3]],
              [second[0], second[1], cX, second[3]]
            ];
          }
          return [
            [first[0], first[1], first[2], cY],
            [second[0], cY, second[2], second[3]]
          ];
        } else if (a[0] > b[2] && a[1] > b[3]) {
          const cX = second[2] + (first[0] - second[2]) / 2;
          const cY = second[3] + (first[1] - second[3]) / 2;
          if (vectorCross(
            vector(a[0] - endCenterX, a[1] - endCenterY),
            vector(a[2] - endCenterX, a[3] - endCenterY)
          ) > 0) {
            return [
              [cX, first[1], first[2], first[3]],
              [second[0], second[1], cX, second[3]]
            ];
          }
          return [
            [first[0], cY, first[2], first[3]],
            [second[0], second[1], second[2], cY]
          ];
        }
      }
      return [first, second];
    };
    calculateGrid = (aabbs, start2, startHeading, end, endHeading, common) => {
      const horizontal = /* @__PURE__ */ new Set();
      const vertical = /* @__PURE__ */ new Set();
      if (startHeading === HEADING_LEFT || startHeading === HEADING_RIGHT) {
        vertical.add(start2[1]);
      } else {
        horizontal.add(start2[0]);
      }
      if (endHeading === HEADING_LEFT || endHeading === HEADING_RIGHT) {
        vertical.add(end[1]);
      } else {
        horizontal.add(end[0]);
      }
      aabbs.forEach((aabb) => {
        horizontal.add(aabb[0]);
        horizontal.add(aabb[2]);
        vertical.add(aabb[1]);
        vertical.add(aabb[3]);
      });
      horizontal.add(common[0]);
      horizontal.add(common[2]);
      vertical.add(common[1]);
      vertical.add(common[3]);
      const _vertical = Array.from(vertical).sort((a, b) => a - b);
      const _horizontal = Array.from(horizontal).sort((a, b) => a - b);
      return {
        row: _vertical.length,
        col: _horizontal.length,
        data: _vertical.flatMap(
          (y, row) => _horizontal.map(
            (x, col) => ({
              f: 0,
              g: 0,
              h: 0,
              closed: false,
              visited: false,
              parent: null,
              addr: [col, row],
              pos: [x, y]
            })
          )
        )
      };
    };
    getDonglePosition = (bounds, heading, p) => {
      switch (heading) {
        case HEADING_UP:
          return pointFrom(p[0], bounds[1]);
        case HEADING_RIGHT:
          return pointFrom(bounds[2], p[1]);
        case HEADING_DOWN:
          return pointFrom(p[0], bounds[3]);
      }
      return pointFrom(bounds[0], p[1]);
    };
    estimateSegmentCount = (start2, end, startHeading, endHeading) => {
      if (endHeading === HEADING_RIGHT) {
        switch (startHeading) {
          case HEADING_RIGHT: {
            if (start2.pos[0] >= end.pos[0]) {
              return 4;
            }
            if (start2.pos[1] === end.pos[1]) {
              return 0;
            }
            return 2;
          }
          case HEADING_UP:
            if (start2.pos[1] > end.pos[1] && start2.pos[0] < end.pos[0]) {
              return 1;
            }
            return 3;
          case HEADING_DOWN:
            if (start2.pos[1] < end.pos[1] && start2.pos[0] < end.pos[0]) {
              return 1;
            }
            return 3;
          case HEADING_LEFT:
            if (start2.pos[1] === end.pos[1]) {
              return 4;
            }
            return 2;
        }
      } else if (endHeading === HEADING_LEFT) {
        switch (startHeading) {
          case HEADING_RIGHT:
            if (start2.pos[1] === end.pos[1]) {
              return 4;
            }
            return 2;
          case HEADING_UP:
            if (start2.pos[1] > end.pos[1] && start2.pos[0] > end.pos[0]) {
              return 1;
            }
            return 3;
          case HEADING_DOWN:
            if (start2.pos[1] < end.pos[1] && start2.pos[0] > end.pos[0]) {
              return 1;
            }
            return 3;
          case HEADING_LEFT:
            if (start2.pos[0] <= end.pos[0]) {
              return 4;
            }
            if (start2.pos[1] === end.pos[1]) {
              return 0;
            }
            return 2;
        }
      } else if (endHeading === HEADING_UP) {
        switch (startHeading) {
          case HEADING_RIGHT:
            if (start2.pos[1] > end.pos[1] && start2.pos[0] < end.pos[0]) {
              return 1;
            }
            return 3;
          case HEADING_UP:
            if (start2.pos[1] >= end.pos[1]) {
              return 4;
            }
            if (start2.pos[0] === end.pos[0]) {
              return 0;
            }
            return 2;
          case HEADING_DOWN:
            if (start2.pos[0] === end.pos[0]) {
              return 4;
            }
            return 2;
          case HEADING_LEFT:
            if (start2.pos[1] > end.pos[1] && start2.pos[0] > end.pos[0]) {
              return 1;
            }
            return 3;
        }
      } else if (endHeading === HEADING_DOWN) {
        switch (startHeading) {
          case HEADING_RIGHT:
            if (start2.pos[1] < end.pos[1] && start2.pos[0] < end.pos[0]) {
              return 1;
            }
            return 3;
          case HEADING_UP:
            if (start2.pos[0] === end.pos[0]) {
              return 4;
            }
            return 2;
          case HEADING_DOWN:
            if (start2.pos[1] <= end.pos[1]) {
              return 4;
            }
            if (start2.pos[0] === end.pos[0]) {
              return 0;
            }
            return 2;
          case HEADING_LEFT:
            if (start2.pos[1] < end.pos[1] && start2.pos[0] > end.pos[0]) {
              return 1;
            }
            return 3;
        }
      }
      return 0;
    };
    getNeighbors = ([col, row], grid) => [
      gridNodeFromAddr([col, row - 1], grid),
      gridNodeFromAddr([col + 1, row], grid),
      gridNodeFromAddr([col, row + 1], grid),
      gridNodeFromAddr([col - 1, row], grid)
    ];
    gridNodeFromAddr = ([col, row], grid) => {
      if (col < 0 || col >= grid.col || row < 0 || row >= grid.row) {
        return null;
      }
      return grid.data[row * grid.col + col] ?? null;
    };
    pointToGridNode = (point2, grid) => {
      for (let col = 0; col < grid.col; col++) {
        for (let row = 0; row < grid.row; row++) {
          const candidate = gridNodeFromAddr([col, row], grid);
          if (candidate && point2[0] === candidate.pos[0] && point2[1] === candidate.pos[1]) {
            return candidate;
          }
        }
      }
      return null;
    };
    commonAABB = (aabbs) => [
      Math.min(...aabbs.map((aabb) => aabb[0])),
      Math.min(...aabbs.map((aabb) => aabb[1])),
      Math.max(...aabbs.map((aabb) => aabb[2])),
      Math.max(...aabbs.map((aabb) => aabb[3]))
    ];
    getBindableElementForId = (id, elementsMap) => {
      const element = elementsMap.get(id);
      if (element && isBindableElement(element)) {
        return element;
      }
      return null;
    };
    normalizedArrowElementUpdate = (global, externalOffsetX, externalOffsetY) => {
      const offsetX = global[0][0];
      const offsetY = global[0][1];
      const points = global.map(
        (p) => pointTranslate(
          p,
          vectorScale(vectorFromPoint(global[0]), -1)
        )
      );
      return {
        points,
        x: offsetX + (externalOffsetX ?? 0),
        y: offsetY + (externalOffsetY ?? 0),
        ...getSizeFromPoints(points)
      };
    };
    simplifyElbowArrowPoints = (points) => points.slice(2).reduce(
      (result, p) => compareHeading(
        vectorToHeading(
          vectorFromPoint(
            result[result.length - 1],
            result[result.length - 2]
          )
        ),
        vectorToHeading(vectorFromPoint(p, result[result.length - 1]))
      ) ? [...result.slice(0, -1), p] : [...result, p],
      [points[0] ?? [0, 0], points[1] ?? [1, 0]]
    );
    neighborIndexToHeading = (idx) => {
      switch (idx) {
        case 0:
          return HEADING_UP;
        case 1:
          return HEADING_RIGHT;
        case 2:
          return HEADING_DOWN;
      }
      return HEADING_LEFT;
    };
    getGlobalPoint = (fixedPointRatio, initialPoint, otherPoint, elementsMap, boundElement, hoveredElement, isDragging) => {
      if (isDragging) {
        if (hoveredElement) {
          const snapPoint = getSnapPoint(
            initialPoint,
            otherPoint,
            hoveredElement,
            elementsMap
          );
          return snapToMid(hoveredElement, snapPoint);
        }
        return initialPoint;
      }
      if (boundElement) {
        const fixedGlobalPoint = getGlobalFixedPointForBindableElement(
          fixedPointRatio || [0, 0],
          boundElement
        );
        return Math.abs(
          distanceToBindableElement(boundElement, fixedGlobalPoint, elementsMap) - FIXED_BINDING_DISTANCE
        ) > 0.01 ? getSnapPoint(initialPoint, otherPoint, boundElement, elementsMap) : fixedGlobalPoint;
      }
      return initialPoint;
    };
    getSnapPoint = (p, otherPoint, element, elementsMap) => bindPointToSnapToElementOutline(
      isRectanguloidElement(element) ? avoidRectangularCorner(element, p) : p,
      otherPoint,
      element,
      elementsMap
    );
    getBindPointHeading = (p, otherPoint, elementsMap, hoveredElement, origPoint) => getHeadingForElbowArrowSnap(
      p,
      otherPoint,
      hoveredElement,
      hoveredElement && aabbForElement(
        hoveredElement,
        Array(4).fill(
          distanceToBindableElement(hoveredElement, p, elementsMap)
        )
      ),
      elementsMap,
      origPoint
    );
    getHoveredElements = (origStartGlobalPoint, origEndGlobalPoint, elementsMap) => {
      const nonDeletedSceneElementsMap = toBrandedType(
        new Map([...elementsMap].filter((el) => !el[1].isDeleted))
      );
      const elements = Array.from(elementsMap.values());
      return [
        getHoveredElementForBinding(
          tupleToCoors(origStartGlobalPoint),
          elements,
          nonDeletedSceneElementsMap,
          true
        ),
        getHoveredElementForBinding(
          tupleToCoors(origEndGlobalPoint),
          elements,
          nonDeletedSceneElementsMap,
          true
        )
      ];
    };
    gridAddressesEqual = (a, b) => a[0] === b[0] && a[1] === b[1];
  }
});

// snapping.ts
var SNAP_DISTANCE, VISIBLE_GAPS_LIMIT_PER_AXIS, getSnapDistance, SnapCache, isGridModeEnabled, isSnappingEnabled, areRoughlyEqual, getElementsCorners, getReferenceElements, getVisibleGaps, getGapSnaps, getReferenceSnapPoints, getPointSnaps, snapDraggedElements, round2, dedupePoints, createPointSnapLines, dedupeGapSnapLines, createGapSnapLines, snapResizingElements, snapNewElement, getSnapLinesAtPointer, isActiveToolNonLinearSnappable, getGridPoint;
var init_snapping = __esm({
  "snapping.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_constants();
    init_bounds();
    init_typeChecks();
    init_groups();
    init_keys();
    init_selection();
    SNAP_DISTANCE = 8;
    VISIBLE_GAPS_LIMIT_PER_AXIS = 99999;
    getSnapDistance = (zoomValue) => {
      return SNAP_DISTANCE / zoomValue;
    };
    SnapCache = class _SnapCache {
      static referenceSnapPoints = null;
      static visibleGaps = null;
      static setReferenceSnapPoints = (snapPoints) => {
        _SnapCache.referenceSnapPoints = snapPoints;
      };
      static getReferenceSnapPoints = () => {
        return _SnapCache.referenceSnapPoints;
      };
      static setVisibleGaps = (gaps) => {
        _SnapCache.visibleGaps = gaps;
      };
      static getVisibleGaps = () => {
        return _SnapCache.visibleGaps;
      };
      static destroy = () => {
        _SnapCache.referenceSnapPoints = null;
        _SnapCache.visibleGaps = null;
      };
    };
    isGridModeEnabled = (app) => app.props.gridModeEnabled ?? app.state.gridModeEnabled;
    isSnappingEnabled = ({
      event,
      app,
      selectedElements
    }) => {
      if (event) {
        return app.state.objectsSnapModeEnabled && !event[KEYS.CTRL_OR_CMD] || !app.state.objectsSnapModeEnabled && event[KEYS.CTRL_OR_CMD] && !isGridModeEnabled(app);
      }
      if (selectedElements.length === 1 && selectedElements[0].type === "arrow") {
        return false;
      }
      return app.state.objectsSnapModeEnabled;
    };
    areRoughlyEqual = (a, b, precision = 0.01) => {
      return Math.abs(a - b) <= precision;
    };
    getElementsCorners = (elements, elementsMap, {
      omitCenter,
      boundingBoxCorners,
      dragOffset
    } = {
      omitCenter: false,
      boundingBoxCorners: false
    }) => {
      let result = [];
      if (elements.length === 1) {
        const element = elements[0];
        let [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(
          element,
          elementsMap
        );
        if (dragOffset) {
          x1 += dragOffset.x;
          x2 += dragOffset.x;
          cx += dragOffset.x;
          y1 += dragOffset.y;
          y2 += dragOffset.y;
          cy += dragOffset.y;
        }
        const halfWidth = (x2 - x1) / 2;
        const halfHeight = (y2 - y1) / 2;
        if ((element.type === "diamond" || element.type === "ellipse") && !boundingBoxCorners) {
          const leftMid = pointRotateRads(
            pointFrom(x1, y1 + halfHeight),
            pointFrom(cx, cy),
            element.angle
          );
          const topMid = pointRotateRads(
            pointFrom(x1 + halfWidth, y1),
            pointFrom(cx, cy),
            element.angle
          );
          const rightMid = pointRotateRads(
            pointFrom(x2, y1 + halfHeight),
            pointFrom(cx, cy),
            element.angle
          );
          const bottomMid = pointRotateRads(
            pointFrom(x1 + halfWidth, y2),
            pointFrom(cx, cy),
            element.angle
          );
          const center = pointFrom(cx, cy);
          result = omitCenter ? [leftMid, topMid, rightMid, bottomMid] : [leftMid, topMid, rightMid, bottomMid, center];
        } else {
          const topLeft = pointRotateRads(
            pointFrom(x1, y1),
            pointFrom(cx, cy),
            element.angle
          );
          const topRight = pointRotateRads(
            pointFrom(x2, y1),
            pointFrom(cx, cy),
            element.angle
          );
          const bottomLeft = pointRotateRads(
            pointFrom(x1, y2),
            pointFrom(cx, cy),
            element.angle
          );
          const bottomRight = pointRotateRads(
            pointFrom(x2, y2),
            pointFrom(cx, cy),
            element.angle
          );
          const center = pointFrom(cx, cy);
          result = omitCenter ? [topLeft, topRight, bottomLeft, bottomRight] : [topLeft, topRight, bottomLeft, bottomRight, center];
        }
      } else if (elements.length > 1) {
        const [minX, minY, maxX, maxY] = getDraggedElementsBounds(
          elements,
          dragOffset ?? { x: 0, y: 0 }
        );
        const width = maxX - minX;
        const height = maxY - minY;
        const topLeft = pointFrom(minX, minY);
        const topRight = pointFrom(maxX, minY);
        const bottomLeft = pointFrom(minX, maxY);
        const bottomRight = pointFrom(maxX, maxY);
        const center = pointFrom(minX + width / 2, minY + height / 2);
        result = omitCenter ? [topLeft, topRight, bottomLeft, bottomRight] : [topLeft, topRight, bottomLeft, bottomRight, center];
      }
      return result.map((p) => pointFrom(round2(p[0]), round2(p[1])));
    };
    getReferenceElements = (elements, selectedElements, appState, elementsMap) => {
      const selectedFrames = selectedElements.filter((element) => isFrameLikeElement(element)).map((frame) => frame.id);
      return getVisibleAndNonSelectedElements(
        elements,
        selectedElements,
        appState,
        elementsMap
      ).filter(
        (element) => !(element.frameId && selectedFrames.includes(element.frameId))
      );
    };
    getVisibleGaps = (elements, selectedElements, appState, elementsMap) => {
      const referenceElements = getReferenceElements(
        elements,
        selectedElements,
        appState,
        elementsMap
      );
      const referenceBounds = getMaximumGroups(referenceElements, elementsMap).filter(
        (elementsGroup) => !(elementsGroup.length === 1 && isBoundToContainer(elementsGroup[0]))
      ).map(
        (group) => getCommonBounds(group).map(
          (bound) => round2(bound)
        )
      );
      const horizontallySorted = referenceBounds.sort((a, b) => a[0] - b[0]);
      const horizontalGaps = [];
      let c = 0;
      horizontal:
        for (let i = 0; i < horizontallySorted.length; i++) {
          const startBounds = horizontallySorted[i];
          for (let j = i + 1; j < horizontallySorted.length; j++) {
            if (++c > VISIBLE_GAPS_LIMIT_PER_AXIS) {
              break horizontal;
            }
            const endBounds = horizontallySorted[j];
            const [, startMinY, startMaxX, startMaxY] = startBounds;
            const [endMinX, endMinY, , endMaxY] = endBounds;
            if (startMaxX < endMinX && rangesOverlap(
              rangeInclusive(startMinY, startMaxY),
              rangeInclusive(endMinY, endMaxY)
            )) {
              horizontalGaps.push({
                startBounds,
                endBounds,
                startSide: [
                  pointFrom(startMaxX, startMinY),
                  pointFrom(startMaxX, startMaxY)
                ],
                endSide: [pointFrom(endMinX, endMinY), pointFrom(endMinX, endMaxY)],
                length: endMinX - startMaxX,
                overlap: rangeIntersection(
                  rangeInclusive(startMinY, startMaxY),
                  rangeInclusive(endMinY, endMaxY)
                )
              });
            }
          }
        }
      const verticallySorted = referenceBounds.sort((a, b) => a[1] - b[1]);
      const verticalGaps = [];
      c = 0;
      vertical:
        for (let i = 0; i < verticallySorted.length; i++) {
          const startBounds = verticallySorted[i];
          for (let j = i + 1; j < verticallySorted.length; j++) {
            if (++c > VISIBLE_GAPS_LIMIT_PER_AXIS) {
              break vertical;
            }
            const endBounds = verticallySorted[j];
            const [startMinX, , startMaxX, startMaxY] = startBounds;
            const [endMinX, endMinY, endMaxX] = endBounds;
            if (startMaxY < endMinY && rangesOverlap(
              rangeInclusive(startMinX, startMaxX),
              rangeInclusive(endMinX, endMaxX)
            )) {
              verticalGaps.push({
                startBounds,
                endBounds,
                startSide: [
                  pointFrom(startMinX, startMaxY),
                  pointFrom(startMaxX, startMaxY)
                ],
                endSide: [pointFrom(endMinX, endMinY), pointFrom(endMaxX, endMinY)],
                length: endMinY - startMaxY,
                overlap: rangeIntersection(
                  rangeInclusive(startMinX, startMaxX),
                  rangeInclusive(endMinX, endMaxX)
                )
              });
            }
          }
        }
      return {
        horizontalGaps,
        verticalGaps
      };
    };
    getGapSnaps = (selectedElements, dragOffset, app, event, nearestSnapsX, nearestSnapsY, minOffset) => {
      if (!isSnappingEnabled({ app, event, selectedElements })) {
        return [];
      }
      if (selectedElements.length === 0) {
        return [];
      }
      const visibleGaps = SnapCache.getVisibleGaps();
      if (visibleGaps) {
        const { horizontalGaps, verticalGaps } = visibleGaps;
        const [minX, minY, maxX, maxY] = getDraggedElementsBounds(
          selectedElements,
          dragOffset
        ).map((bound) => round2(bound));
        const centerX = (minX + maxX) / 2;
        const centerY = (minY + maxY) / 2;
        for (const gap of horizontalGaps) {
          if (!rangesOverlap(rangeInclusive(minY, maxY), gap.overlap)) {
            continue;
          }
          const gapMidX = gap.startSide[0][0] + gap.length / 2;
          const centerOffset = round2(gapMidX - centerX);
          const gapIsLargerThanSelection = gap.length > maxX - minX;
          if (gapIsLargerThanSelection && Math.abs(centerOffset) <= minOffset.x) {
            if (Math.abs(centerOffset) < minOffset.x) {
              nearestSnapsX.length = 0;
            }
            minOffset.x = Math.abs(centerOffset);
            const snap = {
              type: "gap",
              direction: "center_horizontal",
              gap,
              offset: centerOffset
            };
            nearestSnapsX.push(snap);
            continue;
          }
          const [, , endMaxX] = gap.endBounds;
          const distanceToEndElementX = minX - endMaxX;
          const sideOffsetRight = round2(gap.length - distanceToEndElementX);
          if (Math.abs(sideOffsetRight) <= minOffset.x) {
            if (Math.abs(sideOffsetRight) < minOffset.x) {
              nearestSnapsX.length = 0;
            }
            minOffset.x = Math.abs(sideOffsetRight);
            const snap = {
              type: "gap",
              direction: "side_right",
              gap,
              offset: sideOffsetRight
            };
            nearestSnapsX.push(snap);
            continue;
          }
          const [startMinX, , ,] = gap.startBounds;
          const distanceToStartElementX = startMinX - maxX;
          const sideOffsetLeft = round2(distanceToStartElementX - gap.length);
          if (Math.abs(sideOffsetLeft) <= minOffset.x) {
            if (Math.abs(sideOffsetLeft) < minOffset.x) {
              nearestSnapsX.length = 0;
            }
            minOffset.x = Math.abs(sideOffsetLeft);
            const snap = {
              type: "gap",
              direction: "side_left",
              gap,
              offset: sideOffsetLeft
            };
            nearestSnapsX.push(snap);
            continue;
          }
        }
        for (const gap of verticalGaps) {
          if (!rangesOverlap(rangeInclusive(minX, maxX), gap.overlap)) {
            continue;
          }
          const gapMidY = gap.startSide[0][1] + gap.length / 2;
          const centerOffset = round2(gapMidY - centerY);
          const gapIsLargerThanSelection = gap.length > maxY - minY;
          if (gapIsLargerThanSelection && Math.abs(centerOffset) <= minOffset.y) {
            if (Math.abs(centerOffset) < minOffset.y) {
              nearestSnapsY.length = 0;
            }
            minOffset.y = Math.abs(centerOffset);
            const snap = {
              type: "gap",
              direction: "center_vertical",
              gap,
              offset: centerOffset
            };
            nearestSnapsY.push(snap);
            continue;
          }
          const [, startMinY, ,] = gap.startBounds;
          const distanceToStartElementY = startMinY - maxY;
          const sideOffsetTop = round2(distanceToStartElementY - gap.length);
          if (Math.abs(sideOffsetTop) <= minOffset.y) {
            if (Math.abs(sideOffsetTop) < minOffset.y) {
              nearestSnapsY.length = 0;
            }
            minOffset.y = Math.abs(sideOffsetTop);
            const snap = {
              type: "gap",
              direction: "side_top",
              gap,
              offset: sideOffsetTop
            };
            nearestSnapsY.push(snap);
            continue;
          }
          const [, , , endMaxY] = gap.endBounds;
          const distanceToEndElementY = round2(minY - endMaxY);
          const sideOffsetBottom = gap.length - distanceToEndElementY;
          if (Math.abs(sideOffsetBottom) <= minOffset.y) {
            if (Math.abs(sideOffsetBottom) < minOffset.y) {
              nearestSnapsY.length = 0;
            }
            minOffset.y = Math.abs(sideOffsetBottom);
            const snap = {
              type: "gap",
              direction: "side_bottom",
              gap,
              offset: sideOffsetBottom
            };
            nearestSnapsY.push(snap);
            continue;
          }
        }
      }
    };
    getReferenceSnapPoints = (elements, selectedElements, appState, elementsMap) => {
      const referenceElements = getReferenceElements(
        elements,
        selectedElements,
        appState,
        elementsMap
      );
      return getMaximumGroups(referenceElements, elementsMap).filter(
        (elementsGroup) => !(elementsGroup.length === 1 && isBoundToContainer(elementsGroup[0]))
      ).flatMap((elementGroup) => getElementsCorners(elementGroup, elementsMap));
    };
    getPointSnaps = (selectedElements, selectionSnapPoints, app, event, nearestSnapsX, nearestSnapsY, minOffset) => {
      if (!isSnappingEnabled({ app, event, selectedElements }) || selectedElements.length === 0 && selectionSnapPoints.length === 0) {
        return [];
      }
      const referenceSnapPoints = SnapCache.getReferenceSnapPoints();
      if (referenceSnapPoints) {
        for (const thisSnapPoint of selectionSnapPoints) {
          for (const otherSnapPoint of referenceSnapPoints) {
            const offsetX = otherSnapPoint[0] - thisSnapPoint[0];
            const offsetY = otherSnapPoint[1] - thisSnapPoint[1];
            if (Math.abs(offsetX) <= minOffset.x) {
              if (Math.abs(offsetX) < minOffset.x) {
                nearestSnapsX.length = 0;
              }
              nearestSnapsX.push({
                type: "point",
                points: [thisSnapPoint, otherSnapPoint],
                offset: offsetX
              });
              minOffset.x = Math.abs(offsetX);
            }
            if (Math.abs(offsetY) <= minOffset.y) {
              if (Math.abs(offsetY) < minOffset.y) {
                nearestSnapsY.length = 0;
              }
              nearestSnapsY.push({
                type: "point",
                points: [thisSnapPoint, otherSnapPoint],
                offset: offsetY
              });
              minOffset.y = Math.abs(offsetY);
            }
          }
        }
      }
    };
    snapDraggedElements = (elements, dragOffset, app, event, elementsMap) => {
      const appState = app.state;
      const selectedElements = getSelectedElements(elements, appState);
      if (!isSnappingEnabled({ app, event, selectedElements }) || selectedElements.length === 0) {
        return {
          snapOffset: {
            x: 0,
            y: 0
          },
          snapLines: []
        };
      }
      dragOffset.x = round2(dragOffset.x);
      dragOffset.y = round2(dragOffset.y);
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      const snapDistance = getSnapDistance(appState.zoom.value);
      const minOffset = {
        x: snapDistance,
        y: snapDistance
      };
      const selectionPoints = getElementsCorners(selectedElements, elementsMap, {
        dragOffset
      });
      getPointSnaps(
        selectedElements,
        selectionPoints,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      getGapSnaps(
        selectedElements,
        dragOffset,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      const snapOffset = {
        x: nearestSnapsX[0]?.offset ?? 0,
        y: nearestSnapsY[0]?.offset ?? 0
      };
      minOffset.x = 0;
      minOffset.y = 0;
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      const newDragOffset = {
        x: round2(dragOffset.x + snapOffset.x),
        y: round2(dragOffset.y + snapOffset.y)
      };
      getPointSnaps(
        selectedElements,
        getElementsCorners(selectedElements, elementsMap, {
          dragOffset: newDragOffset
        }),
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      getGapSnaps(
        selectedElements,
        newDragOffset,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      const pointSnapLines = createPointSnapLines(nearestSnapsX, nearestSnapsY);
      const gapSnapLines = createGapSnapLines(
        selectedElements,
        newDragOffset,
        [...nearestSnapsX, ...nearestSnapsY].filter(
          (snap) => snap.type === "gap"
        )
      );
      return {
        snapOffset,
        snapLines: [...pointSnapLines, ...gapSnapLines]
      };
    };
    round2 = (x) => {
      const decimalPlaces = 6;
      return Math.round(x * 10 ** decimalPlaces) / 10 ** decimalPlaces;
    };
    dedupePoints = (points) => {
      const map = /* @__PURE__ */ new Map();
      for (const point2 of points) {
        const key = point2.join(",");
        if (!map.has(key)) {
          map.set(key, point2);
        }
      }
      return Array.from(map.values());
    };
    createPointSnapLines = (nearestSnapsX, nearestSnapsY) => {
      const snapsX = {};
      const snapsY = {};
      if (nearestSnapsX.length > 0) {
        for (const snap of nearestSnapsX) {
          if (snap.type === "point") {
            const key = round2(snap.points[0][0]);
            if (!snapsX[key]) {
              snapsX[key] = [];
            }
            snapsX[key].push(
              ...snap.points.map(
                (p) => pointFrom(round2(p[0]), round2(p[1]))
              )
            );
          }
        }
      }
      if (nearestSnapsY.length > 0) {
        for (const snap of nearestSnapsY) {
          if (snap.type === "point") {
            const key = round2(snap.points[0][1]);
            if (!snapsY[key]) {
              snapsY[key] = [];
            }
            snapsY[key].push(
              ...snap.points.map(
                (p) => pointFrom(round2(p[0]), round2(p[1]))
              )
            );
          }
        }
      }
      return Object.entries(snapsX).map(([key, points]) => {
        return {
          type: "points",
          points: dedupePoints(
            points.map((p) => {
              return pointFrom(Number(key), p[1]);
            }).sort((a, b) => a[1] - b[1])
          )
        };
      }).concat(
        Object.entries(snapsY).map(([key, points]) => {
          return {
            type: "points",
            points: dedupePoints(
              points.map((p) => {
                return pointFrom(p[0], Number(key));
              }).sort((a, b) => a[0] - b[0])
            )
          };
        })
      );
    };
    dedupeGapSnapLines = (gapSnapLines) => {
      const map = /* @__PURE__ */ new Map();
      for (const gapSnapLine of gapSnapLines) {
        const key = gapSnapLine.points.flat().map((point2) => [round2(point2)]).join(",");
        if (!map.has(key)) {
          map.set(key, gapSnapLine);
        }
      }
      return Array.from(map.values());
    };
    createGapSnapLines = (selectedElements, dragOffset, gapSnaps) => {
      const [minX, minY, maxX, maxY] = getDraggedElementsBounds(
        selectedElements,
        dragOffset
      );
      const gapSnapLines = [];
      for (const gapSnap of gapSnaps) {
        const [startMinX, startMinY, startMaxX, startMaxY] = gapSnap.gap.startBounds;
        const [endMinX, endMinY, endMaxX, endMaxY] = gapSnap.gap.endBounds;
        const verticalIntersection = rangeIntersection(
          rangeInclusive(minY, maxY),
          gapSnap.gap.overlap
        );
        const horizontalGapIntersection = rangeIntersection(
          rangeInclusive(minX, maxX),
          gapSnap.gap.overlap
        );
        switch (gapSnap.direction) {
          case "center_horizontal": {
            if (verticalIntersection) {
              const gapLineY = (verticalIntersection[0] + verticalIntersection[1]) / 2;
              gapSnapLines.push(
                {
                  type: "gap",
                  direction: "horizontal",
                  points: [
                    pointFrom(gapSnap.gap.startSide[0][0], gapLineY),
                    pointFrom(minX, gapLineY)
                  ]
                },
                {
                  type: "gap",
                  direction: "horizontal",
                  points: [
                    pointFrom(maxX, gapLineY),
                    pointFrom(gapSnap.gap.endSide[0][0], gapLineY)
                  ]
                }
              );
            }
            break;
          }
          case "center_vertical": {
            if (horizontalGapIntersection) {
              const gapLineX = (horizontalGapIntersection[0] + horizontalGapIntersection[1]) / 2;
              gapSnapLines.push(
                {
                  type: "gap",
                  direction: "vertical",
                  points: [
                    pointFrom(gapLineX, gapSnap.gap.startSide[0][1]),
                    pointFrom(gapLineX, minY)
                  ]
                },
                {
                  type: "gap",
                  direction: "vertical",
                  points: [
                    pointFrom(gapLineX, maxY),
                    pointFrom(gapLineX, gapSnap.gap.endSide[0][1])
                  ]
                }
              );
            }
            break;
          }
          case "side_right": {
            if (verticalIntersection) {
              const gapLineY = (verticalIntersection[0] + verticalIntersection[1]) / 2;
              gapSnapLines.push(
                {
                  type: "gap",
                  direction: "horizontal",
                  points: [
                    pointFrom(startMaxX, gapLineY),
                    pointFrom(endMinX, gapLineY)
                  ]
                },
                {
                  type: "gap",
                  direction: "horizontal",
                  points: [pointFrom(endMaxX, gapLineY), pointFrom(minX, gapLineY)]
                }
              );
            }
            break;
          }
          case "side_left": {
            if (verticalIntersection) {
              const gapLineY = (verticalIntersection[0] + verticalIntersection[1]) / 2;
              gapSnapLines.push(
                {
                  type: "gap",
                  direction: "horizontal",
                  points: [
                    pointFrom(maxX, gapLineY),
                    pointFrom(startMinX, gapLineY)
                  ]
                },
                {
                  type: "gap",
                  direction: "horizontal",
                  points: [
                    pointFrom(startMaxX, gapLineY),
                    pointFrom(endMinX, gapLineY)
                  ]
                }
              );
            }
            break;
          }
          case "side_top": {
            if (horizontalGapIntersection) {
              const gapLineX = (horizontalGapIntersection[0] + horizontalGapIntersection[1]) / 2;
              gapSnapLines.push(
                {
                  type: "gap",
                  direction: "vertical",
                  points: [
                    pointFrom(gapLineX, maxY),
                    pointFrom(gapLineX, startMinY)
                  ]
                },
                {
                  type: "gap",
                  direction: "vertical",
                  points: [
                    pointFrom(gapLineX, startMaxY),
                    pointFrom(gapLineX, endMinY)
                  ]
                }
              );
            }
            break;
          }
          case "side_bottom": {
            if (horizontalGapIntersection) {
              const gapLineX = (horizontalGapIntersection[0] + horizontalGapIntersection[1]) / 2;
              gapSnapLines.push(
                {
                  type: "gap",
                  direction: "vertical",
                  points: [
                    pointFrom(gapLineX, startMaxY),
                    pointFrom(gapLineX, endMinY)
                  ]
                },
                {
                  type: "gap",
                  direction: "vertical",
                  points: [pointFrom(gapLineX, endMaxY), pointFrom(gapLineX, minY)]
                }
              );
            }
            break;
          }
        }
      }
      return dedupeGapSnapLines(
        gapSnapLines.map((gapSnapLine) => {
          return {
            ...gapSnapLine,
            points: gapSnapLine.points.map(
              (p) => pointFrom(round2(p[0]), round2(p[1]))
            )
          };
        })
      );
    };
    snapResizingElements = (selectedElements, selectedOriginalElements, app, event, dragOffset, transformHandle) => {
      if (!isSnappingEnabled({ event, selectedElements, app }) || selectedElements.length === 0 || selectedElements.length === 1 && !areRoughlyEqual(selectedElements[0].angle, 0)) {
        return {
          snapOffset: { x: 0, y: 0 },
          snapLines: []
        };
      }
      let [minX, minY, maxX, maxY] = getCommonBounds(selectedOriginalElements);
      if (transformHandle) {
        if (transformHandle.includes("e")) {
          maxX += dragOffset.x;
        } else if (transformHandle.includes("w")) {
          minX += dragOffset.x;
        }
        if (transformHandle.includes("n")) {
          minY += dragOffset.y;
        } else if (transformHandle.includes("s")) {
          maxY += dragOffset.y;
        }
      }
      const selectionSnapPoints = [];
      if (transformHandle) {
        switch (transformHandle) {
          case "e": {
            selectionSnapPoints.push(pointFrom(maxX, minY), pointFrom(maxX, maxY));
            break;
          }
          case "w": {
            selectionSnapPoints.push(pointFrom(minX, minY), pointFrom(minX, maxY));
            break;
          }
          case "n": {
            selectionSnapPoints.push(pointFrom(minX, minY), pointFrom(maxX, minY));
            break;
          }
          case "s": {
            selectionSnapPoints.push(pointFrom(minX, maxY), pointFrom(maxX, maxY));
            break;
          }
          case "ne": {
            selectionSnapPoints.push(pointFrom(maxX, minY));
            break;
          }
          case "nw": {
            selectionSnapPoints.push(pointFrom(minX, minY));
            break;
          }
          case "se": {
            selectionSnapPoints.push(pointFrom(maxX, maxY));
            break;
          }
          case "sw": {
            selectionSnapPoints.push(pointFrom(minX, maxY));
            break;
          }
        }
      }
      const snapDistance = getSnapDistance(app.state.zoom.value);
      const minOffset = {
        x: snapDistance,
        y: snapDistance
      };
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      getPointSnaps(
        selectedOriginalElements,
        selectionSnapPoints,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      const snapOffset = {
        x: nearestSnapsX[0]?.offset ?? 0,
        y: nearestSnapsY[0]?.offset ?? 0
      };
      minOffset.x = 0;
      minOffset.y = 0;
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      const [x1, y1, x2, y2] = getCommonBounds(selectedElements).map(
        (bound) => round2(bound)
      );
      const corners = [
        pointFrom(x1, y1),
        pointFrom(x1, y2),
        pointFrom(x2, y1),
        pointFrom(x2, y2)
      ];
      getPointSnaps(
        selectedElements,
        corners,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      const pointSnapLines = createPointSnapLines(nearestSnapsX, nearestSnapsY);
      return {
        snapOffset,
        snapLines: pointSnapLines
      };
    };
    snapNewElement = (newElement2, app, event, origin, dragOffset, elementsMap) => {
      if (!isSnappingEnabled({ event, selectedElements: [newElement2], app })) {
        return {
          snapOffset: { x: 0, y: 0 },
          snapLines: []
        };
      }
      const selectionSnapPoints = [
        pointFrom(origin.x + dragOffset.x, origin.y + dragOffset.y)
      ];
      const snapDistance = getSnapDistance(app.state.zoom.value);
      const minOffset = {
        x: snapDistance,
        y: snapDistance
      };
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      getPointSnaps(
        [newElement2],
        selectionSnapPoints,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      const snapOffset = {
        x: nearestSnapsX[0]?.offset ?? 0,
        y: nearestSnapsY[0]?.offset ?? 0
      };
      minOffset.x = 0;
      minOffset.y = 0;
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      const corners = getElementsCorners([newElement2], elementsMap, {
        boundingBoxCorners: true,
        omitCenter: true
      });
      getPointSnaps(
        [newElement2],
        corners,
        app,
        event,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      );
      const pointSnapLines = createPointSnapLines(nearestSnapsX, nearestSnapsY);
      return {
        snapOffset,
        snapLines: pointSnapLines
      };
    };
    getSnapLinesAtPointer = (elements, app, pointer, event, elementsMap) => {
      if (!isSnappingEnabled({ event, selectedElements: [], app })) {
        return {
          originOffset: { x: 0, y: 0 },
          snapLines: []
        };
      }
      const referenceElements = getVisibleAndNonSelectedElements(
        elements,
        [],
        app.state,
        elementsMap
      );
      const snapDistance = getSnapDistance(app.state.zoom.value);
      const minOffset = {
        x: snapDistance,
        y: snapDistance
      };
      const horizontalSnapLines = [];
      const verticalSnapLines = [];
      for (const referenceElement of referenceElements) {
        const corners = getElementsCorners([referenceElement], elementsMap);
        for (const corner of corners) {
          const offsetX = corner[0] - pointer.x;
          if (Math.abs(offsetX) <= Math.abs(minOffset.x)) {
            if (Math.abs(offsetX) < Math.abs(minOffset.x)) {
              verticalSnapLines.length = 0;
            }
            verticalSnapLines.push({
              type: "pointer",
              points: [corner, pointFrom(corner[0], pointer.y)],
              direction: "vertical"
            });
            minOffset.x = offsetX;
          }
          const offsetY = corner[1] - pointer.y;
          if (Math.abs(offsetY) <= Math.abs(minOffset.y)) {
            if (Math.abs(offsetY) < Math.abs(minOffset.y)) {
              horizontalSnapLines.length = 0;
            }
            horizontalSnapLines.push({
              type: "pointer",
              points: [corner, pointFrom(pointer.x, corner[1])],
              direction: "horizontal"
            });
            minOffset.y = offsetY;
          }
        }
      }
      return {
        originOffset: {
          x: verticalSnapLines.length > 0 ? verticalSnapLines[0].points[0][0] - pointer.x : 0,
          y: horizontalSnapLines.length > 0 ? horizontalSnapLines[0].points[0][1] - pointer.y : 0
        },
        snapLines: [...verticalSnapLines, ...horizontalSnapLines]
      };
    };
    isActiveToolNonLinearSnappable = (activeToolType) => {
      return activeToolType === TOOL_TYPE.rectangle || activeToolType === TOOL_TYPE.ellipse || activeToolType === TOOL_TYPE.diamond || activeToolType === TOOL_TYPE.frame || activeToolType === TOOL_TYPE.magicframe || activeToolType === TOOL_TYPE.image || activeToolType === TOOL_TYPE.text;
    };
    getGridPoint = (x, y, gridSize) => {
      if (gridSize) {
        return [
          Math.round(x / gridSize) * gridSize,
          Math.round(y / gridSize) * gridSize
        ];
      }
      return [x, y];
    };
  }
});

// element/linearElementEditor.ts
var editorMidPointsCache, LinearElementEditor, normalizeSelectedPoints;
var init_linearElementEditor = __esm({
  "element/linearElementEditor.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_bounds();
    init_mutateElement();
    init_binding();
    init_utils2();
    init_typeChecks();
    init_keys();
    init_textElement();
    init_constants();
    init_ShapeCache();
    init_routing();
    init_math();
    init_shapes();
    init_snapping();
    editorMidPointsCache = { version: null, points: [], zoom: null };
    LinearElementEditor = class _LinearElementEditor {
      elementId;
      /** indices */
      selectedPointsIndices;
      pointerDownState;
      /** whether you're dragging a point */
      isDragging;
      lastUncommittedPoint;
      pointerOffset;
      startBindingElement;
      endBindingElement;
      hoverPointIndex;
      segmentMidPointHoveredCoords;
      elbowed;
      constructor(element) {
        this.elementId = element.id;
        if (!pointsEqual(element.points[0], pointFrom(0, 0))) {
          console.error("Linear element is not normalized", Error().stack);
        }
        this.selectedPointsIndices = null;
        this.lastUncommittedPoint = null;
        this.isDragging = false;
        this.pointerOffset = { x: 0, y: 0 };
        this.startBindingElement = "keep";
        this.endBindingElement = "keep";
        this.pointerDownState = {
          prevSelectedPointsIndices: null,
          lastClickedPoint: -1,
          lastClickedIsEndPoint: false,
          origin: null,
          segmentMidpoint: {
            value: null,
            index: null,
            added: false
          }
        };
        this.hoverPointIndex = -1;
        this.segmentMidPointHoveredCoords = null;
        this.elbowed = isElbowArrow(element) && element.elbowed;
      }
      // ---------------------------------------------------------------------------
      // static methods
      // ---------------------------------------------------------------------------
      static POINT_HANDLE_SIZE = 10;
      /**
       * @param id the `elementId` from the instance of this class (so that we can
       *  statically guarantee this method returns an ExcalidrawLinearElement)
       */
      static getElement(id, elementsMap) {
        const element = elementsMap.get(id);
        if (element) {
          return element;
        }
        return null;
      }
      static handleBoxSelection(event, appState, setState, elementsMap) {
        if (!appState.editingLinearElement || !appState.selectionElement) {
          return false;
        }
        const { editingLinearElement } = appState;
        const { selectedPointsIndices, elementId } = editingLinearElement;
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        if (!element) {
          return false;
        }
        const [selectionX1, selectionY1, selectionX2, selectionY2] = getElementAbsoluteCoords(appState.selectionElement, elementsMap);
        const pointsSceneCoords = _LinearElementEditor.getPointsGlobalCoordinates(
          element,
          elementsMap
        );
        const nextSelectedPoints = pointsSceneCoords.reduce((acc, point2, index) => {
          if (point2[0] >= selectionX1 && point2[0] <= selectionX2 && point2[1] >= selectionY1 && point2[1] <= selectionY2 || event.shiftKey && selectedPointsIndices?.includes(index)) {
            acc.push(index);
          }
          return acc;
        }, []).filter((index) => {
          if (isElbowArrow(element) && index !== 0 && index !== element.points.length - 1) {
            return false;
          }
          return true;
        });
        setState({
          editingLinearElement: {
            ...editingLinearElement,
            selectedPointsIndices: nextSelectedPoints.length ? nextSelectedPoints : null
          }
        });
      }
      /** @returns whether point was dragged */
      static handlePointDragging(event, app, scenePointerX, scenePointerY, maybeSuggestBinding, linearElementEditor, scene) {
        if (!linearElementEditor) {
          return false;
        }
        const { elementId } = linearElementEditor;
        const elementsMap = scene.getNonDeletedElementsMap();
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        if (!element) {
          return false;
        }
        if (isElbowArrow(element) && !linearElementEditor.pointerDownState.lastClickedIsEndPoint && linearElementEditor.pointerDownState.lastClickedPoint !== 0) {
          return false;
        }
        const selectedPointsIndices = isElbowArrow(element) ? linearElementEditor.selectedPointsIndices?.reduce(
          (startEnd, index) => index === 0 ? [0, startEnd[1]] : [startEnd[0], element.points.length - 1],
          [false, false]
        ).filter(
          (idx) => typeof idx === "number"
        ) : linearElementEditor.selectedPointsIndices;
        const lastClickedPoint = isElbowArrow(element) ? linearElementEditor.pointerDownState.lastClickedPoint > 0 ? element.points.length - 1 : 0 : linearElementEditor.pointerDownState.lastClickedPoint;
        const draggingPoint = element.points[lastClickedPoint];
        if (selectedPointsIndices && draggingPoint) {
          if (shouldRotateWithDiscreteAngle(event) && selectedPointsIndices.length === 1 && element.points.length > 1) {
            const selectedIndex = selectedPointsIndices[0];
            const referencePoint = element.points[selectedIndex === 0 ? 1 : selectedIndex - 1];
            const [width, height] = _LinearElementEditor._getShiftLockedDelta(
              element,
              elementsMap,
              referencePoint,
              pointFrom(scenePointerX, scenePointerY),
              event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize()
            );
            _LinearElementEditor.movePoints(
              element,
              [
                {
                  index: selectedIndex,
                  point: pointFrom(
                    width + referencePoint[0],
                    height + referencePoint[1]
                  ),
                  isDragging: selectedIndex === lastClickedPoint
                }
              ],
              elementsMap
            );
          } else {
            const newDraggingPointPosition = _LinearElementEditor.createPointAt(
              element,
              elementsMap,
              scenePointerX - linearElementEditor.pointerOffset.x,
              scenePointerY - linearElementEditor.pointerOffset.y,
              event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize()
            );
            const deltaX = newDraggingPointPosition[0] - draggingPoint[0];
            const deltaY = newDraggingPointPosition[1] - draggingPoint[1];
            _LinearElementEditor.movePoints(
              element,
              selectedPointsIndices.map((pointIndex) => {
                const newPointPosition = pointIndex === lastClickedPoint ? _LinearElementEditor.createPointAt(
                  element,
                  elementsMap,
                  scenePointerX - linearElementEditor.pointerOffset.x,
                  scenePointerY - linearElementEditor.pointerOffset.y,
                  event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize()
                ) : pointFrom(
                  element.points[pointIndex][0] + deltaX,
                  element.points[pointIndex][1] + deltaY
                );
                return {
                  index: pointIndex,
                  point: newPointPosition,
                  isDragging: pointIndex === lastClickedPoint
                };
              }),
              elementsMap
            );
          }
          const boundTextElement = getBoundTextElement(element, elementsMap);
          if (boundTextElement) {
            handleBindTextResize(element, elementsMap, false);
          }
          if (isBindingElement(element, false)) {
            const coords = [];
            const firstSelectedIndex = selectedPointsIndices[0];
            if (firstSelectedIndex === 0) {
              coords.push(
                tupleToCoors(
                  _LinearElementEditor.getPointGlobalCoordinates(
                    element,
                    element.points[0],
                    elementsMap
                  )
                )
              );
            }
            const lastSelectedIndex = selectedPointsIndices[selectedPointsIndices.length - 1];
            if (lastSelectedIndex === element.points.length - 1) {
              coords.push(
                tupleToCoors(
                  _LinearElementEditor.getPointGlobalCoordinates(
                    element,
                    element.points[lastSelectedIndex],
                    elementsMap
                  )
                )
              );
            }
            if (coords.length) {
              maybeSuggestBinding(element, coords);
            }
          }
          return true;
        }
        return false;
      }
      static handlePointerUp(event, editingLinearElement, appState, scene) {
        const elementsMap = scene.getNonDeletedElementsMap();
        const elements = scene.getNonDeletedElements();
        const { elementId, selectedPointsIndices, isDragging, pointerDownState } = editingLinearElement;
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        if (!element) {
          return editingLinearElement;
        }
        const bindings = {};
        if (isDragging && selectedPointsIndices) {
          for (const selectedPoint of selectedPointsIndices) {
            if (selectedPoint === 0 || selectedPoint === element.points.length - 1) {
              if (isPathALoop(element.points, appState.zoom.value)) {
                _LinearElementEditor.movePoints(
                  element,
                  [
                    {
                      index: selectedPoint,
                      point: selectedPoint === 0 ? element.points[element.points.length - 1] : element.points[0]
                    }
                  ],
                  elementsMap
                );
              }
              const bindingElement = isBindingEnabled(appState) ? getHoveredElementForBinding(
                tupleToCoors(
                  _LinearElementEditor.getPointAtIndexGlobalCoordinates(
                    element,
                    selectedPoint,
                    elementsMap
                  )
                ),
                elements,
                elementsMap
              ) : null;
              bindings[selectedPoint === 0 ? "startBindingElement" : "endBindingElement"] = bindingElement;
            }
          }
        }
        return {
          ...editingLinearElement,
          ...bindings,
          // if clicking without previously dragging a point(s), and not holding
          // shift, deselect all points except the one clicked. If holding shift,
          // toggle the point.
          selectedPointsIndices: isDragging || event.shiftKey ? !isDragging && event.shiftKey && pointerDownState.prevSelectedPointsIndices?.includes(
            pointerDownState.lastClickedPoint
          ) ? selectedPointsIndices && selectedPointsIndices.filter(
            (pointIndex) => pointIndex !== pointerDownState.lastClickedPoint
          ) : selectedPointsIndices : selectedPointsIndices?.includes(pointerDownState.lastClickedPoint) ? [pointerDownState.lastClickedPoint] : selectedPointsIndices,
          isDragging: false,
          pointerOffset: { x: 0, y: 0 }
        };
      }
      static getEditorMidPoints = (element, elementsMap, appState) => {
        const boundText = getBoundTextElement(element, elementsMap);
        if (!appState.editingLinearElement && element.points.length > 2 && !boundText) {
          return [];
        }
        if (editorMidPointsCache.version === element.version && editorMidPointsCache.zoom === appState.zoom.value) {
          return editorMidPointsCache.points;
        }
        _LinearElementEditor.updateEditorMidPointsCache(
          element,
          elementsMap,
          appState
        );
        return editorMidPointsCache.points;
      };
      static updateEditorMidPointsCache = (element, elementsMap, appState) => {
        const points = _LinearElementEditor.getPointsGlobalCoordinates(
          element,
          elementsMap
        );
        let index = 0;
        const midpoints = [];
        while (index < points.length - 1) {
          if (_LinearElementEditor.isSegmentTooShort(
            element,
            element.points[index],
            element.points[index + 1],
            appState.zoom
          )) {
            midpoints.push(null);
            index++;
            continue;
          }
          const segmentMidPoint = _LinearElementEditor.getSegmentMidPoint(
            element,
            points[index],
            points[index + 1],
            index + 1,
            elementsMap
          );
          midpoints.push(segmentMidPoint);
          index++;
        }
        editorMidPointsCache.points = midpoints;
        editorMidPointsCache.version = element.version;
        editorMidPointsCache.zoom = appState.zoom.value;
      };
      static getSegmentMidpointHitCoords = (linearElementEditor, scenePointer, appState, elementsMap) => {
        const { elementId } = linearElementEditor;
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        if (!element) {
          return null;
        }
        const clickedPointIndex = _LinearElementEditor.getPointIndexUnderCursor(
          element,
          elementsMap,
          appState.zoom,
          scenePointer.x,
          scenePointer.y
        );
        if (clickedPointIndex >= 0) {
          return null;
        }
        const points = _LinearElementEditor.getPointsGlobalCoordinates(
          element,
          elementsMap
        );
        if (points.length >= 3 && !appState.editingLinearElement) {
          return null;
        }
        const threshold = _LinearElementEditor.POINT_HANDLE_SIZE / appState.zoom.value;
        const existingSegmentMidpointHitCoords = linearElementEditor.segmentMidPointHoveredCoords;
        if (existingSegmentMidpointHitCoords) {
          const distance3 = pointDistance(
            pointFrom(
              existingSegmentMidpointHitCoords[0],
              existingSegmentMidpointHitCoords[1]
            ),
            pointFrom(scenePointer.x, scenePointer.y)
          );
          if (distance3 <= threshold) {
            return existingSegmentMidpointHitCoords;
          }
        }
        let index = 0;
        const midPoints = _LinearElementEditor.getEditorMidPoints(element, elementsMap, appState);
        while (index < midPoints.length) {
          if (midPoints[index] !== null) {
            const distance3 = pointDistance(
              pointFrom(midPoints[index][0], midPoints[index][1]),
              pointFrom(scenePointer.x, scenePointer.y)
            );
            if (distance3 <= threshold) {
              return midPoints[index];
            }
          }
          index++;
        }
        return null;
      };
      static isSegmentTooShort(element, startPoint, endPoint, zoom) {
        let distance3 = pointDistance(
          pointFrom(startPoint[0], startPoint[1]),
          pointFrom(endPoint[0], endPoint[1])
        );
        if (element.points.length > 2 && element.roundness) {
          distance3 = getBezierCurveLength(element, endPoint);
        }
        return distance3 * zoom.value < _LinearElementEditor.POINT_HANDLE_SIZE * 4;
      }
      static getSegmentMidPoint(element, startPoint, endPoint, endPointIndex, elementsMap) {
        let segmentMidPoint = pointCenter(startPoint, endPoint);
        if (element.points.length > 2 && element.roundness) {
          const controlPoints = getControlPointsForBezierCurve(
            element,
            element.points[endPointIndex]
          );
          if (controlPoints) {
            const t2 = mapIntervalToBezierT(
              element,
              element.points[endPointIndex],
              0.5
            );
            segmentMidPoint = _LinearElementEditor.getPointGlobalCoordinates(
              element,
              getBezierXY(
                controlPoints[0],
                controlPoints[1],
                controlPoints[2],
                controlPoints[3],
                t2
              ),
              elementsMap
            );
          }
        }
        return segmentMidPoint;
      }
      static getSegmentMidPointIndex(linearElementEditor, appState, midPoint, elementsMap) {
        const element = _LinearElementEditor.getElement(
          linearElementEditor.elementId,
          elementsMap
        );
        if (!element) {
          return -1;
        }
        const midPoints = _LinearElementEditor.getEditorMidPoints(
          element,
          elementsMap,
          appState
        );
        let index = 0;
        while (index < midPoints.length) {
          if (_LinearElementEditor.arePointsEqual(midPoint, midPoints[index])) {
            return index + 1;
          }
          index++;
        }
        return -1;
      }
      static handlePointerDown(event, app, store, scenePointer, linearElementEditor, scene) {
        const appState = app.state;
        const elementsMap = scene.getNonDeletedElementsMap();
        const elements = scene.getNonDeletedElements();
        const ret = {
          didAddPoint: false,
          hitElement: null,
          linearElementEditor: null
        };
        if (!linearElementEditor) {
          return ret;
        }
        const { elementId } = linearElementEditor;
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        if (!element) {
          return ret;
        }
        const segmentMidpoint = _LinearElementEditor.getSegmentMidpointHitCoords(
          linearElementEditor,
          scenePointer,
          appState,
          elementsMap
        );
        let segmentMidpointIndex = null;
        if (segmentMidpoint) {
          segmentMidpointIndex = _LinearElementEditor.getSegmentMidPointIndex(
            linearElementEditor,
            appState,
            segmentMidpoint,
            elementsMap
          );
        }
        if (event.altKey && appState.editingLinearElement) {
          if (linearElementEditor.lastUncommittedPoint == null && !isElbowArrow(element)) {
            mutateElement(element, {
              points: [
                ...element.points,
                _LinearElementEditor.createPointAt(
                  element,
                  elementsMap,
                  scenePointer.x,
                  scenePointer.y,
                  event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize()
                )
              ]
            });
            ret.didAddPoint = true;
          }
          store.shouldCaptureIncrement();
          ret.linearElementEditor = {
            ...linearElementEditor,
            pointerDownState: {
              prevSelectedPointsIndices: linearElementEditor.selectedPointsIndices,
              lastClickedPoint: -1,
              lastClickedIsEndPoint: false,
              origin: { x: scenePointer.x, y: scenePointer.y },
              segmentMidpoint: {
                value: segmentMidpoint,
                index: segmentMidpointIndex,
                added: false
              }
            },
            selectedPointsIndices: [element.points.length - 1],
            lastUncommittedPoint: null,
            endBindingElement: getHoveredElementForBinding(
              scenePointer,
              elements,
              elementsMap
            )
          };
          ret.didAddPoint = true;
          return ret;
        }
        const clickedPointIndex = _LinearElementEditor.getPointIndexUnderCursor(
          element,
          elementsMap,
          appState.zoom,
          scenePointer.x,
          scenePointer.y
        );
        if (clickedPointIndex >= 0 || segmentMidpoint) {
          ret.hitElement = element;
        } else {
          const { startBindingElement, endBindingElement } = linearElementEditor;
          if (isBindingEnabled(appState) && isBindingElement(element)) {
            bindOrUnbindLinearElement(
              element,
              startBindingElement,
              endBindingElement,
              elementsMap,
              scene
            );
          }
        }
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const targetPoint = clickedPointIndex > -1 && pointRotateRads(
          pointFrom(
            element.x + element.points[clickedPointIndex][0],
            element.y + element.points[clickedPointIndex][1]
          ),
          pointFrom(cx, cy),
          element.angle
        );
        const nextSelectedPointsIndices = clickedPointIndex > -1 || event.shiftKey ? event.shiftKey || linearElementEditor.selectedPointsIndices?.includes(clickedPointIndex) ? normalizeSelectedPoints([
          ...linearElementEditor.selectedPointsIndices || [],
          clickedPointIndex
        ]) : [clickedPointIndex] : null;
        ret.linearElementEditor = {
          ...linearElementEditor,
          pointerDownState: {
            prevSelectedPointsIndices: linearElementEditor.selectedPointsIndices,
            lastClickedPoint: clickedPointIndex,
            lastClickedIsEndPoint: clickedPointIndex === element.points.length - 1,
            origin: { x: scenePointer.x, y: scenePointer.y },
            segmentMidpoint: {
              value: segmentMidpoint,
              index: segmentMidpointIndex,
              added: false
            }
          },
          selectedPointsIndices: nextSelectedPointsIndices,
          pointerOffset: targetPoint ? {
            x: scenePointer.x - targetPoint[0],
            y: scenePointer.y - targetPoint[1]
          } : { x: 0, y: 0 }
        };
        return ret;
      }
      static arePointsEqual(point1, point2) {
        if (!point1 && !point2) {
          return true;
        }
        if (!point1 || !point2) {
          return false;
        }
        return pointsEqual(point1, point2);
      }
      static handlePointerMove(event, scenePointerX, scenePointerY, app, elementsMap) {
        const appState = app.state;
        if (!appState.editingLinearElement) {
          return null;
        }
        const { elementId, lastUncommittedPoint } = appState.editingLinearElement;
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        if (!element) {
          return appState.editingLinearElement;
        }
        const { points } = element;
        const lastPoint = points[points.length - 1];
        if (!event.altKey) {
          if (lastPoint === lastUncommittedPoint) {
            _LinearElementEditor.deletePoints(
              element,
              [points.length - 1],
              elementsMap
            );
          }
          return {
            ...appState.editingLinearElement,
            lastUncommittedPoint: null
          };
        }
        let newPoint;
        if (shouldRotateWithDiscreteAngle(event) && points.length >= 2) {
          const lastCommittedPoint = points[points.length - 2];
          const [width, height] = _LinearElementEditor._getShiftLockedDelta(
            element,
            elementsMap,
            lastCommittedPoint,
            pointFrom(scenePointerX, scenePointerY),
            event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize()
          );
          newPoint = pointFrom(
            width + lastCommittedPoint[0],
            height + lastCommittedPoint[1]
          );
        } else {
          newPoint = _LinearElementEditor.createPointAt(
            element,
            elementsMap,
            scenePointerX - appState.editingLinearElement.pointerOffset.x,
            scenePointerY - appState.editingLinearElement.pointerOffset.y,
            event[KEYS.CTRL_OR_CMD] || isElbowArrow(element) ? null : app.getEffectiveGridSize()
          );
        }
        if (lastPoint === lastUncommittedPoint) {
          _LinearElementEditor.movePoints(
            element,
            [
              {
                index: element.points.length - 1,
                point: newPoint
              }
            ],
            elementsMap
          );
        } else {
          _LinearElementEditor.addPoints(
            element,
            [{ point: newPoint }],
            elementsMap
          );
        }
        return {
          ...appState.editingLinearElement,
          lastUncommittedPoint: element.points[element.points.length - 1]
        };
      }
      /** scene coords */
      static getPointGlobalCoordinates(element, p, elementsMap) {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const { x, y } = element;
        return pointRotateRads(
          pointFrom(x + p[0], y + p[1]),
          pointFrom(cx, cy),
          element.angle
        );
      }
      /** scene coords */
      static getPointsGlobalCoordinates(element, elementsMap) {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        return element.points.map((p) => {
          const { x, y } = element;
          return pointRotateRads(
            pointFrom(x + p[0], y + p[1]),
            pointFrom(cx, cy),
            element.angle
          );
        });
      }
      static getPointAtIndexGlobalCoordinates(element, indexMaybeFromEnd, elementsMap) {
        const index = indexMaybeFromEnd < 0 ? element.points.length + indexMaybeFromEnd : indexMaybeFromEnd;
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const p = element.points[index];
        const { x, y } = element;
        return p ? pointRotateRads(
          pointFrom(x + p[0], y + p[1]),
          pointFrom(cx, cy),
          element.angle
        ) : pointRotateRads(pointFrom(x, y), pointFrom(cx, cy), element.angle);
      }
      static pointFromAbsoluteCoords(element, absoluteCoords, elementsMap) {
        if (isElbowArrow(element)) {
          return pointFrom(
            absoluteCoords[0] - element.x,
            absoluteCoords[1] - element.y
          );
        }
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const [x, y] = pointRotateRads(
          pointFrom(absoluteCoords[0], absoluteCoords[1]),
          pointFrom(cx, cy),
          -element.angle
        );
        return pointFrom(x - element.x, y - element.y);
      }
      static getPointIndexUnderCursor(element, elementsMap, zoom, x, y) {
        const pointHandles = _LinearElementEditor.getPointsGlobalCoordinates(
          element,
          elementsMap
        );
        let idx = pointHandles.length;
        while (--idx > -1) {
          const p = pointHandles[idx];
          if (pointDistance(pointFrom(x, y), pointFrom(p[0], p[1])) * zoom.value < // +1px to account for outline stroke
          _LinearElementEditor.POINT_HANDLE_SIZE + 1) {
            return idx;
          }
        }
        return -1;
      }
      static createPointAt(element, elementsMap, scenePointerX, scenePointerY, gridSize) {
        const pointerOnGrid = getGridPoint(scenePointerX, scenePointerY, gridSize);
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const [rotatedX, rotatedY] = pointRotateRads(
          pointFrom(pointerOnGrid[0], pointerOnGrid[1]),
          pointFrom(cx, cy),
          -element.angle
        );
        return pointFrom(rotatedX - element.x, rotatedY - element.y);
      }
      /**
       * Normalizes line points so that the start point is at [0,0]. This is
       * expected in various parts of the codebase. Also returns new x/y to account
       * for the potential normalization.
       */
      static getNormalizedPoints(element) {
        const { points } = element;
        const offsetX = points[0][0];
        const offsetY = points[0][1];
        return {
          points: points.map((p) => {
            return pointFrom(p[0] - offsetX, p[1] - offsetY);
          }),
          x: element.x + offsetX,
          y: element.y + offsetY
        };
      }
      // element-mutating methods
      // ---------------------------------------------------------------------------
      static normalizePoints(element) {
        mutateElement(element, _LinearElementEditor.getNormalizedPoints(element));
      }
      static duplicateSelectedPoints(appState, elementsMap) {
        invariant(
          appState.editingLinearElement,
          "Not currently editing a linear element"
        );
        const { selectedPointsIndices, elementId } = appState.editingLinearElement;
        const element = _LinearElementEditor.getElement(elementId, elementsMap);
        invariant(
          element,
          "The linear element does not exist in the provided Scene"
        );
        invariant(
          selectedPointsIndices != null,
          "There are no selected points to duplicate"
        );
        const { points } = element;
        const nextSelectedIndices = [];
        let pointAddedToEnd = false;
        let indexCursor = -1;
        const nextPoints = points.reduce((acc, p, index) => {
          ++indexCursor;
          acc.push(p);
          const isSelected = selectedPointsIndices.includes(index);
          if (isSelected) {
            const nextPoint = points[index + 1];
            if (!nextPoint) {
              pointAddedToEnd = true;
            }
            acc.push(
              nextPoint ? pointFrom((p[0] + nextPoint[0]) / 2, (p[1] + nextPoint[1]) / 2) : pointFrom(p[0], p[1])
            );
            nextSelectedIndices.push(indexCursor + 1);
            ++indexCursor;
          }
          return acc;
        }, []);
        mutateElement(element, { points: nextPoints });
        if (pointAddedToEnd) {
          const lastPoint = element.points[element.points.length - 1];
          _LinearElementEditor.movePoints(
            element,
            [
              {
                index: element.points.length - 1,
                point: pointFrom(lastPoint[0] + 30, lastPoint[1] + 30)
              }
            ],
            elementsMap
          );
        }
        return {
          ...appState,
          editingLinearElement: {
            ...appState.editingLinearElement,
            selectedPointsIndices: nextSelectedIndices
          }
        };
      }
      static deletePoints(element, pointIndices, elementsMap) {
        let offsetX = 0;
        let offsetY = 0;
        const isDeletingOriginPoint = pointIndices.includes(0);
        if (isDeletingOriginPoint) {
          const firstNonDeletedPoint = element.points.find((point2, idx) => {
            return !pointIndices.includes(idx);
          });
          if (firstNonDeletedPoint) {
            offsetX = firstNonDeletedPoint[0];
            offsetY = firstNonDeletedPoint[1];
          }
        }
        const nextPoints = element.points.reduce((acc, p, idx) => {
          if (!pointIndices.includes(idx)) {
            acc.push(
              !acc.length ? pointFrom(0, 0) : pointFrom(p[0] - offsetX, p[1] - offsetY)
            );
          }
          return acc;
        }, []);
        _LinearElementEditor._updatePoints(
          element,
          nextPoints,
          offsetX,
          offsetY,
          elementsMap
        );
      }
      static addPoints(element, targetPoints, elementsMap) {
        const offsetX = 0;
        const offsetY = 0;
        const nextPoints = [...element.points, ...targetPoints.map((x) => x.point)];
        _LinearElementEditor._updatePoints(
          element,
          nextPoints,
          offsetX,
          offsetY,
          elementsMap
        );
      }
      static movePoints(element, targetPoints, elementsMap, otherUpdates, options) {
        const { points } = element;
        let offsetX = 0;
        let offsetY = 0;
        const selectedOriginPoint = targetPoints.find(({ index }) => index === 0);
        if (selectedOriginPoint) {
          offsetX = selectedOriginPoint.point[0] + points[selectedOriginPoint.index][0];
          offsetY = selectedOriginPoint.point[1] + points[selectedOriginPoint.index][1];
        }
        const nextPoints = points.map((p, idx) => {
          const selectedPointData = targetPoints.find((t2) => t2.index === idx);
          if (selectedPointData) {
            if (selectedPointData.index === 0) {
              return p;
            }
            const deltaX = selectedPointData.point[0] - points[selectedPointData.index][0];
            const deltaY = selectedPointData.point[1] - points[selectedPointData.index][1];
            return pointFrom(p[0] + deltaX - offsetX, p[1] + deltaY - offsetY);
          }
          return offsetX || offsetY ? pointFrom(p[0] - offsetX, p[1] - offsetY) : p;
        });
        _LinearElementEditor._updatePoints(
          element,
          nextPoints,
          offsetX,
          offsetY,
          elementsMap,
          otherUpdates,
          {
            isDragging: targetPoints.reduce(
              (dragging, targetPoint) => dragging || targetPoint.isDragging === true,
              false
            ),
            changedElements: options?.changedElements
          }
        );
      }
      static shouldAddMidpoint(linearElementEditor, pointerCoords, appState, elementsMap) {
        const element = _LinearElementEditor.getElement(
          linearElementEditor.elementId,
          elementsMap
        );
        if (element && isElbowArrow(element)) {
          return false;
        }
        if (!element) {
          return false;
        }
        const { segmentMidpoint } = linearElementEditor.pointerDownState;
        if (segmentMidpoint.added || segmentMidpoint.value === null || segmentMidpoint.index === null || linearElementEditor.pointerDownState.origin === null) {
          return false;
        }
        const origin = linearElementEditor.pointerDownState.origin;
        const dist = pointDistance(
          pointFrom(origin.x, origin.y),
          pointFrom(pointerCoords.x, pointerCoords.y)
        );
        if (!appState.editingLinearElement && dist < DRAGGING_THRESHOLD / appState.zoom.value) {
          return false;
        }
        return true;
      }
      static addMidpoint(linearElementEditor, pointerCoords, app, snapToGrid, elementsMap) {
        const element = _LinearElementEditor.getElement(
          linearElementEditor.elementId,
          elementsMap
        );
        if (!element) {
          return;
        }
        const { segmentMidpoint } = linearElementEditor.pointerDownState;
        const ret = {
          pointerDownState: linearElementEditor.pointerDownState,
          selectedPointsIndices: linearElementEditor.selectedPointsIndices
        };
        const midpoint = _LinearElementEditor.createPointAt(
          element,
          elementsMap,
          pointerCoords.x,
          pointerCoords.y,
          snapToGrid && !isElbowArrow(element) ? app.getEffectiveGridSize() : null
        );
        const points = [
          ...element.points.slice(0, segmentMidpoint.index),
          midpoint,
          ...element.points.slice(segmentMidpoint.index)
        ];
        mutateElement(element, {
          points
        });
        ret.pointerDownState = {
          ...linearElementEditor.pointerDownState,
          segmentMidpoint: {
            ...linearElementEditor.pointerDownState.segmentMidpoint,
            added: true
          },
          lastClickedPoint: segmentMidpoint.index
        };
        ret.selectedPointsIndices = [segmentMidpoint.index];
        return ret;
      }
      static _updatePoints(element, nextPoints, offsetX, offsetY, elementsMap, otherUpdates, options) {
        if (isElbowArrow(element)) {
          const bindings = {};
          if (otherUpdates?.startBinding !== void 0) {
            bindings.startBinding = otherUpdates.startBinding !== null && isFixedPointBinding(otherUpdates.startBinding) ? otherUpdates.startBinding : null;
          }
          if (otherUpdates?.endBinding !== void 0) {
            bindings.endBinding = otherUpdates.endBinding !== null && isFixedPointBinding(otherUpdates.endBinding) ? otherUpdates.endBinding : null;
          }
          const mergedElementsMap = options?.changedElements ? toBrandedType(
            new Map([...elementsMap, ...options.changedElements])
          ) : elementsMap;
          mutateElbowArrow(
            element,
            mergedElementsMap,
            nextPoints,
            vector(offsetX, offsetY),
            bindings,
            {
              isDragging: options?.isDragging
            }
          );
        } else {
          const nextCoords = getElementPointsCoords(element, nextPoints);
          const prevCoords = getElementPointsCoords(element, element.points);
          const nextCenterX = (nextCoords[0] + nextCoords[2]) / 2;
          const nextCenterY = (nextCoords[1] + nextCoords[3]) / 2;
          const prevCenterX = (prevCoords[0] + prevCoords[2]) / 2;
          const prevCenterY = (prevCoords[1] + prevCoords[3]) / 2;
          const dX = prevCenterX - nextCenterX;
          const dY = prevCenterY - nextCenterY;
          const rotated = pointRotateRads(
            pointFrom(offsetX, offsetY),
            pointFrom(dX, dY),
            element.angle
          );
          mutateElement(element, {
            ...otherUpdates,
            points: nextPoints,
            x: element.x + rotated[0],
            y: element.y + rotated[1]
          });
        }
      }
      static _getShiftLockedDelta(element, elementsMap, referencePoint, scenePointer, gridSize) {
        const referencePointCoords = _LinearElementEditor.getPointGlobalCoordinates(
          element,
          referencePoint,
          elementsMap
        );
        if (isElbowArrow(element)) {
          return [
            scenePointer[0] - referencePointCoords[0],
            scenePointer[1] - referencePointCoords[1]
          ];
        }
        const [gridX, gridY] = getGridPoint(
          scenePointer[0],
          scenePointer[1],
          gridSize
        );
        const { width, height } = getLockedLinearCursorAlignSize(
          referencePointCoords[0],
          referencePointCoords[1],
          gridX,
          gridY
        );
        return pointRotateRads(
          pointFrom(width, height),
          pointFrom(0, 0),
          -element.angle
        );
      }
      static getBoundTextElementPosition = (element, boundTextElement, elementsMap) => {
        const points = _LinearElementEditor.getPointsGlobalCoordinates(
          element,
          elementsMap
        );
        if (points.length < 2) {
          mutateElement(boundTextElement, { isDeleted: true });
        }
        let x = 0;
        let y = 0;
        if (element.points.length % 2 === 1) {
          const index = Math.floor(element.points.length / 2);
          const midPoint = _LinearElementEditor.getPointGlobalCoordinates(
            element,
            element.points[index],
            elementsMap
          );
          x = midPoint[0] - boundTextElement.width / 2;
          y = midPoint[1] - boundTextElement.height / 2;
        } else {
          const index = element.points.length / 2 - 1;
          let midSegmentMidpoint = editorMidPointsCache.points[index];
          if (element.points.length === 2) {
            midSegmentMidpoint = pointCenter(points[0], points[1]);
          }
          if (!midSegmentMidpoint || editorMidPointsCache.version !== element.version) {
            midSegmentMidpoint = _LinearElementEditor.getSegmentMidPoint(
              element,
              points[index],
              points[index + 1],
              index + 1,
              elementsMap
            );
          }
          x = midSegmentMidpoint[0] - boundTextElement.width / 2;
          y = midSegmentMidpoint[1] - boundTextElement.height / 2;
        }
        return { x, y };
      };
      static getMinMaxXYWithBoundText = (element, elementsMap, elementBounds, boundTextElement) => {
        let [x1, y1, x2, y2] = elementBounds;
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const { x: boundTextX1, y: boundTextY1 } = _LinearElementEditor.getBoundTextElementPosition(
          element,
          boundTextElement,
          elementsMap
        );
        const boundTextX2 = boundTextX1 + boundTextElement.width;
        const boundTextY2 = boundTextY1 + boundTextElement.height;
        const centerPoint = pointFrom(cx, cy);
        const topLeftRotatedPoint = pointRotateRads(
          pointFrom(x1, y1),
          centerPoint,
          element.angle
        );
        const topRightRotatedPoint = pointRotateRads(
          pointFrom(x2, y1),
          centerPoint,
          element.angle
        );
        const counterRotateBoundTextTopLeft = pointRotateRads(
          pointFrom(boundTextX1, boundTextY1),
          centerPoint,
          -element.angle
        );
        const counterRotateBoundTextTopRight = pointRotateRads(
          pointFrom(boundTextX2, boundTextY1),
          centerPoint,
          -element.angle
        );
        const counterRotateBoundTextBottomLeft = pointRotateRads(
          pointFrom(boundTextX1, boundTextY2),
          centerPoint,
          -element.angle
        );
        const counterRotateBoundTextBottomRight = pointRotateRads(
          pointFrom(boundTextX2, boundTextY2),
          centerPoint,
          -element.angle
        );
        if (topLeftRotatedPoint[0] < topRightRotatedPoint[0] && topLeftRotatedPoint[1] >= topRightRotatedPoint[1]) {
          x1 = Math.min(x1, counterRotateBoundTextBottomLeft[0]);
          x2 = Math.max(
            x2,
            Math.max(
              counterRotateBoundTextTopRight[0],
              counterRotateBoundTextBottomRight[0]
            )
          );
          y1 = Math.min(y1, counterRotateBoundTextTopLeft[1]);
          y2 = Math.max(y2, counterRotateBoundTextBottomRight[1]);
        } else if (topLeftRotatedPoint[0] >= topRightRotatedPoint[0] && topLeftRotatedPoint[1] > topRightRotatedPoint[1]) {
          x1 = Math.min(x1, counterRotateBoundTextBottomRight[0]);
          x2 = Math.max(
            x2,
            Math.max(
              counterRotateBoundTextTopLeft[0],
              counterRotateBoundTextTopRight[0]
            )
          );
          y1 = Math.min(y1, counterRotateBoundTextBottomLeft[1]);
          y2 = Math.max(y2, counterRotateBoundTextTopRight[1]);
        } else if (topLeftRotatedPoint[0] >= topRightRotatedPoint[0]) {
          x1 = Math.min(x1, counterRotateBoundTextTopRight[0]);
          x2 = Math.max(x2, counterRotateBoundTextBottomLeft[0]);
          y1 = Math.min(y1, counterRotateBoundTextBottomRight[1]);
          y2 = Math.max(y2, counterRotateBoundTextTopLeft[1]);
        } else if (topLeftRotatedPoint[1] <= topRightRotatedPoint[1]) {
          x1 = Math.min(
            x1,
            Math.min(
              counterRotateBoundTextTopRight[0],
              counterRotateBoundTextTopLeft[0]
            )
          );
          x2 = Math.max(x2, counterRotateBoundTextBottomRight[0]);
          y1 = Math.min(y1, counterRotateBoundTextTopRight[1]);
          y2 = Math.max(y2, counterRotateBoundTextBottomLeft[1]);
        }
        return [x1, y1, x2, y2, cx, cy];
      };
      static getElementAbsoluteCoords = (element, elementsMap, includeBoundText = false) => {
        let coords;
        let x1;
        let y1;
        let x2;
        let y2;
        if (element.points.length < 2 || !ShapeCache.get(element)) {
          const { minX, minY, maxX, maxY } = element.points.reduce(
            (limits, [x, y]) => {
              limits.minY = Math.min(limits.minY, y);
              limits.minX = Math.min(limits.minX, x);
              limits.maxX = Math.max(limits.maxX, x);
              limits.maxY = Math.max(limits.maxY, y);
              return limits;
            },
            { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity }
          );
          x1 = minX + element.x;
          y1 = minY + element.y;
          x2 = maxX + element.x;
          y2 = maxY + element.y;
        } else {
          const shape = ShapeCache.generateElementShape(element, null);
          const ops = getCurvePathOps2(shape[0]);
          const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);
          x1 = minX + element.x;
          y1 = minY + element.y;
          x2 = maxX + element.x;
          y2 = maxY + element.y;
        }
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        coords = [x1, y1, x2, y2, cx, cy];
        if (!includeBoundText) {
          return coords;
        }
        const boundTextElement = getBoundTextElement(element, elementsMap);
        if (boundTextElement) {
          coords = _LinearElementEditor.getMinMaxXYWithBoundText(
            element,
            elementsMap,
            [x1, y1, x2, y2],
            boundTextElement
          );
        }
        return coords;
      };
    };
    normalizeSelectedPoints = (points) => {
      let nextPoints = [
        ...new Set(points.filter((p) => p !== null && p !== -1))
      ];
      nextPoints = nextPoints.sort((a, b) => a - b);
      return nextPoints.length ? nextPoints : null;
    };
  }
});

// element/containerCache.ts
var originalContainerCache, updateOriginalContainerCache, resetOriginalContainerCache, getOriginalContainerHeightFromCache;
var init_containerCache = __esm({
  "element/containerCache.ts"() {
    "use strict";
    init_define_import_meta_env();
    originalContainerCache = {};
    updateOriginalContainerCache = (id, height) => {
      const data = originalContainerCache[id] || (originalContainerCache[id] = { height });
      data.height = height;
      return data;
    };
    resetOriginalContainerCache = (id) => {
      if (originalContainerCache[id]) {
        delete originalContainerCache[id];
      }
    };
    getOriginalContainerHeightFromCache = (id) => {
      return originalContainerCache[id]?.height ?? null;
    };
  }
});

// element/textElement.ts
var normalizeText, splitIntoLines, redrawTextBoundingBox, bindTextToShapeAfterDuplication, handleBindTextResize, computeBoundTextPosition, measureText, detectLineHeight, getLineHeightInPx, getApproxMinLineHeight, canvas, getLineWidth, getTextWidth, getTextHeight, parseTokens, wrapText, charWidth, DUMMY_TEXT, getApproxMinLineWidth, getMaxCharWidth, getBoundTextElementId, getBoundTextElement, getContainerElement, getContainerCenter, getContainerCoords, getTextElementAngle, shouldAllowVerticalAlign, suppportsHorizontalAlign, VALID_CONTAINER_TYPES, isValidTextContainer, computeContainerDimensionForBoundText, getBoundTextMaxWidth, getBoundTextMaxHeight, isMeasureTextSupported, getMinTextElementWidth, getTextFromElements;
var init_textElement = __esm({
  "element/textElement.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_utils2();
    init_mutateElement();
    init_constants();
    init_element();
    init_typeChecks();
    init_linearElementEditor();
    init_containerCache();
    normalizeText = (text) => {
      return normalizeEOL(text).replace(/\t/g, "        ");
    };
    splitIntoLines = (text) => {
      return normalizeText(text).split("\n");
    };
    redrawTextBoundingBox = (textElement, container, elementsMap, informMutation = true) => {
      let maxWidth = void 0;
      const boundTextUpdates = {
        x: textElement.x,
        y: textElement.y,
        text: textElement.text,
        width: textElement.width,
        height: textElement.height,
        angle: container?.angle ?? textElement.angle
      };
      boundTextUpdates.text = textElement.text;
      if (container || !textElement.autoResize) {
        maxWidth = container ? getBoundTextMaxWidth(container, textElement) : textElement.width;
        boundTextUpdates.text = wrapText(
          textElement.originalText,
          getFontString(textElement),
          maxWidth
        );
      }
      const metrics = measureText(
        boundTextUpdates.text,
        getFontString(textElement),
        textElement.lineHeight
      );
      if (textElement.autoResize) {
        boundTextUpdates.width = metrics.width;
      }
      boundTextUpdates.height = metrics.height;
      if (container) {
        const maxContainerHeight = getBoundTextMaxHeight(
          container,
          textElement
        );
        const maxContainerWidth = getBoundTextMaxWidth(container, textElement);
        if (!isArrowElement(container) && metrics.height > maxContainerHeight) {
          const nextHeight = computeContainerDimensionForBoundText(
            metrics.height,
            container.type
          );
          mutateElement(container, { height: nextHeight }, informMutation);
          updateOriginalContainerCache(container.id, nextHeight);
        }
        if (metrics.width > maxContainerWidth) {
          const nextWidth = computeContainerDimensionForBoundText(
            metrics.width,
            container.type
          );
          mutateElement(container, { width: nextWidth }, informMutation);
        }
        const updatedTextElement = {
          ...textElement,
          ...boundTextUpdates
        };
        const { x, y } = computeBoundTextPosition(
          container,
          updatedTextElement,
          elementsMap
        );
        boundTextUpdates.x = x;
        boundTextUpdates.y = y;
      }
      mutateElement(textElement, boundTextUpdates, informMutation);
    };
    bindTextToShapeAfterDuplication = (newElements, oldElements, oldIdToDuplicatedId) => {
      const newElementsMap = arrayToMap(newElements);
      oldElements.forEach((element) => {
        const newElementId = oldIdToDuplicatedId.get(element.id);
        const boundTextElementId = getBoundTextElementId(element);
        if (boundTextElementId) {
          const newTextElementId = oldIdToDuplicatedId.get(boundTextElementId);
          if (newTextElementId) {
            const newContainer = newElementsMap.get(newElementId);
            if (newContainer) {
              mutateElement(newContainer, {
                boundElements: (element.boundElements || []).filter(
                  (boundElement) => boundElement.id !== newTextElementId && boundElement.id !== boundTextElementId
                ).concat({
                  type: "text",
                  id: newTextElementId
                })
              });
            }
            const newTextElement2 = newElementsMap.get(newTextElementId);
            if (newTextElement2 && isTextElement(newTextElement2)) {
              mutateElement(newTextElement2, {
                containerId: newContainer ? newElementId : null
              });
            }
          }
        }
      });
    };
    handleBindTextResize = (container, elementsMap, transformHandleType, shouldMaintainAspectRatio2 = false) => {
      const boundTextElementId = getBoundTextElementId(container);
      if (!boundTextElementId) {
        return;
      }
      resetOriginalContainerCache(container.id);
      const textElement = getBoundTextElement(container, elementsMap);
      if (textElement && textElement.text) {
        if (!container) {
          return;
        }
        let text = textElement.text;
        let nextHeight = textElement.height;
        let nextWidth = textElement.width;
        const maxWidth = getBoundTextMaxWidth(container, textElement);
        const maxHeight = getBoundTextMaxHeight(container, textElement);
        let containerHeight = container.height;
        if (shouldMaintainAspectRatio2 || transformHandleType !== "n" && transformHandleType !== "s") {
          if (text) {
            text = wrapText(
              textElement.originalText,
              getFontString(textElement),
              maxWidth
            );
          }
          const metrics = measureText(
            text,
            getFontString(textElement),
            textElement.lineHeight
          );
          nextHeight = metrics.height;
          nextWidth = metrics.width;
        }
        if (nextHeight > maxHeight) {
          containerHeight = computeContainerDimensionForBoundText(
            nextHeight,
            container.type
          );
          const diff = containerHeight - container.height;
          const updatedY = !isArrowElement(container) && (transformHandleType === "ne" || transformHandleType === "nw" || transformHandleType === "n") ? container.y - diff : container.y;
          mutateElement(container, {
            height: containerHeight,
            y: updatedY
          });
        }
        mutateElement(textElement, {
          text,
          width: nextWidth,
          height: nextHeight
        });
        if (!isArrowElement(container)) {
          mutateElement(
            textElement,
            computeBoundTextPosition(container, textElement, elementsMap)
          );
        }
      }
    };
    computeBoundTextPosition = (container, boundTextElement, elementsMap) => {
      if (isArrowElement(container)) {
        return LinearElementEditor.getBoundTextElementPosition(
          container,
          boundTextElement,
          elementsMap
        );
      }
      const containerCoords = getContainerCoords(container);
      const maxContainerHeight = getBoundTextMaxHeight(container, boundTextElement);
      const maxContainerWidth = getBoundTextMaxWidth(container, boundTextElement);
      let x;
      let y;
      if (boundTextElement.verticalAlign === VERTICAL_ALIGN.TOP) {
        y = containerCoords.y;
      } else if (boundTextElement.verticalAlign === VERTICAL_ALIGN.BOTTOM) {
        y = containerCoords.y + (maxContainerHeight - boundTextElement.height);
      } else {
        y = containerCoords.y + (maxContainerHeight / 2 - boundTextElement.height / 2);
      }
      if (boundTextElement.textAlign === TEXT_ALIGN.LEFT) {
        x = containerCoords.x;
      } else if (boundTextElement.textAlign === TEXT_ALIGN.RIGHT) {
        x = containerCoords.x + (maxContainerWidth - boundTextElement.width);
      } else {
        x = containerCoords.x + (maxContainerWidth / 2 - boundTextElement.width / 2);
      }
      return { x, y };
    };
    measureText = (text, font, lineHeight, forceAdvanceWidth) => {
      const _text = text.split("\n").map((x) => x || " ").join("\n");
      const fontSize = parseFloat(font);
      const height = getTextHeight(_text, fontSize, lineHeight);
      const width = getTextWidth(_text, font, forceAdvanceWidth);
      return { width, height };
    };
    detectLineHeight = (textElement) => {
      const lineCount = splitIntoLines(textElement.text).length;
      return textElement.height / lineCount / textElement.fontSize;
    };
    getLineHeightInPx = (fontSize, lineHeight) => {
      return fontSize * lineHeight;
    };
    getApproxMinLineHeight = (fontSize, lineHeight) => {
      return getLineHeightInPx(fontSize, lineHeight) + BOUND_TEXT_PADDING * 2;
    };
    getLineWidth = (text, font, forceAdvanceWidth) => {
      if (!canvas) {
        canvas = document.createElement("canvas");
      }
      const canvas2dContext = canvas.getContext("2d");
      canvas2dContext.font = font;
      const metrics = canvas2dContext.measureText(text);
      const advanceWidth = metrics.width;
      if (!forceAdvanceWidth && window.TextMetrics && "actualBoundingBoxLeft" in window.TextMetrics.prototype && "actualBoundingBoxRight" in window.TextMetrics.prototype) {
        const actualWidth = Math.abs(metrics.actualBoundingBoxLeft) + Math.abs(metrics.actualBoundingBoxRight);
        return Math.max(actualWidth, advanceWidth);
      }
      if (isTestEnv()) {
        return advanceWidth * 10;
      }
      return advanceWidth;
    };
    getTextWidth = (text, font, forceAdvanceWidth) => {
      const lines = splitIntoLines(text);
      let width = 0;
      lines.forEach((line) => {
        width = Math.max(width, getLineWidth(line, font, forceAdvanceWidth));
      });
      return width;
    };
    getTextHeight = (text, fontSize, lineHeight) => {
      const lineCount = splitIntoLines(text).length;
      return getLineHeightInPx(fontSize, lineHeight) * lineCount;
    };
    parseTokens = (text) => {
      const words = text.split("-");
      if (words.length > 1) {
        words.forEach((word, index) => {
          if (index !== words.length - 1) {
            words[index] = word += "-";
          }
        });
      }
      return words.join(" ").split(" ");
    };
    wrapText = (text, font, maxWidth) => {
      if (!Number.isFinite(maxWidth) || maxWidth < 0) {
        return text;
      }
      const lines = [];
      const originalLines = text.split("\n");
      const spaceAdvanceWidth = getLineWidth(" ", font, true);
      let currentLine = "";
      let currentLineWidthTillNow = 0;
      const push = (str) => {
        if (str.trim()) {
          lines.push(str);
        }
      };
      const resetParams = () => {
        currentLine = "";
        currentLineWidthTillNow = 0;
      };
      for (const originalLine of originalLines) {
        const currentLineWidth = getLineWidth(originalLine, font, true);
        if (currentLineWidth <= maxWidth) {
          lines.push(originalLine);
          continue;
        }
        const words = parseTokens(originalLine);
        resetParams();
        let index = 0;
        while (index < words.length) {
          const currentWordWidth = getLineWidth(words[index], font, true);
          if (currentWordWidth === maxWidth) {
            push(words[index]);
            index++;
          } else if (currentWordWidth > maxWidth) {
            push(currentLine);
            resetParams();
            while (words[index].length > 0) {
              const currentChar = String.fromCodePoint(
                words[index].codePointAt(0)
              );
              const line = currentLine + currentChar;
              const lineAdvanceWidth = getLineWidth(line, font, true);
              const charAdvanceWidth = charWidth.calculate(currentChar, font);
              currentLineWidthTillNow = lineAdvanceWidth;
              words[index] = words[index].slice(currentChar.length);
              if (currentLineWidthTillNow >= maxWidth) {
                push(currentLine);
                currentLine = currentChar;
                currentLineWidthTillNow = charAdvanceWidth;
              } else {
                currentLine = line;
              }
            }
            if (currentLineWidthTillNow + spaceAdvanceWidth >= maxWidth) {
              push(currentLine);
              resetParams();
            } else if (!currentLine.endsWith("-")) {
              currentLine += " ";
              currentLineWidthTillNow += spaceAdvanceWidth;
            }
            index++;
          } else {
            while (currentLineWidthTillNow < maxWidth && index < words.length) {
              const word = words[index];
              currentLineWidthTillNow = getLineWidth(
                currentLine + word,
                font,
                true
              );
              if (currentLineWidthTillNow > maxWidth) {
                push(currentLine);
                resetParams();
                break;
              }
              index++;
              const shouldAppendSpace = !word.endsWith("-");
              currentLine += word;
              if (shouldAppendSpace) {
                currentLine += " ";
              }
              if (currentLineWidthTillNow + spaceAdvanceWidth >= maxWidth) {
                if (shouldAppendSpace) {
                  lines.push(currentLine.slice(0, -1));
                } else {
                  lines.push(currentLine);
                }
                resetParams();
                break;
              }
            }
          }
        }
        if (currentLine.slice(-1) === " ") {
          currentLine = currentLine.slice(0, -1);
          push(currentLine);
        }
      }
      return lines.join("\n");
    };
    charWidth = /* @__PURE__ */ (() => {
      const cachedCharWidth = {};
      const calculate = (char, font) => {
        const ascii = char.charCodeAt(0);
        if (!cachedCharWidth[font]) {
          cachedCharWidth[font] = [];
        }
        if (!cachedCharWidth[font][ascii]) {
          const width = getLineWidth(char, font, true);
          cachedCharWidth[font][ascii] = width;
        }
        return cachedCharWidth[font][ascii];
      };
      const getCache = (font) => {
        return cachedCharWidth[font];
      };
      return {
        calculate,
        getCache
      };
    })();
    DUMMY_TEXT = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".toLocaleUpperCase();
    getApproxMinLineWidth = (font, lineHeight) => {
      const maxCharWidth = getMaxCharWidth(font);
      if (maxCharWidth === 0) {
        return measureText(DUMMY_TEXT.split("").join("\n"), font, lineHeight).width + BOUND_TEXT_PADDING * 2;
      }
      return maxCharWidth + BOUND_TEXT_PADDING * 2;
    };
    getMaxCharWidth = (font) => {
      const cache = charWidth.getCache(font);
      if (!cache) {
        return 0;
      }
      const cacheWithOutEmpty = cache.filter((val) => val !== void 0);
      return Math.max(...cacheWithOutEmpty);
    };
    getBoundTextElementId = (container) => {
      return container?.boundElements?.length ? container?.boundElements?.find((ele) => ele.type === "text")?.id || null : null;
    };
    getBoundTextElement = (element, elementsMap) => {
      if (!element) {
        return null;
      }
      const boundTextElementId = getBoundTextElementId(element);
      if (boundTextElementId) {
        return elementsMap.get(boundTextElementId) || null;
      }
      return null;
    };
    getContainerElement = (element, elementsMap) => {
      if (!element) {
        return null;
      }
      if (element.containerId) {
        return elementsMap.get(element.containerId) || null;
      }
      return null;
    };
    getContainerCenter = (container, appState, elementsMap) => {
      if (!isArrowElement(container)) {
        return {
          x: container.x + container.width / 2,
          y: container.y + container.height / 2
        };
      }
      const points = LinearElementEditor.getPointsGlobalCoordinates(
        container,
        elementsMap
      );
      if (points.length % 2 === 1) {
        const index2 = Math.floor(container.points.length / 2);
        const midPoint = LinearElementEditor.getPointGlobalCoordinates(
          container,
          container.points[index2],
          elementsMap
        );
        return { x: midPoint[0], y: midPoint[1] };
      }
      const index = container.points.length / 2 - 1;
      let midSegmentMidpoint = LinearElementEditor.getEditorMidPoints(
        container,
        elementsMap,
        appState
      )[index];
      if (!midSegmentMidpoint) {
        midSegmentMidpoint = LinearElementEditor.getSegmentMidPoint(
          container,
          points[index],
          points[index + 1],
          index + 1,
          elementsMap
        );
      }
      return { x: midSegmentMidpoint[0], y: midSegmentMidpoint[1] };
    };
    getContainerCoords = (container) => {
      let offsetX = BOUND_TEXT_PADDING;
      let offsetY = BOUND_TEXT_PADDING;
      if (container.type === "ellipse") {
        offsetX += container.width / 2 * (1 - Math.sqrt(2) / 2);
        offsetY += container.height / 2 * (1 - Math.sqrt(2) / 2);
      }
      if (container.type === "diamond") {
        offsetX += container.width / 4;
        offsetY += container.height / 4;
      }
      return {
        x: container.x + offsetX,
        y: container.y + offsetY
      };
    };
    getTextElementAngle = (textElement, container) => {
      if (!container || isArrowElement(container)) {
        return textElement.angle;
      }
      return container.angle;
    };
    shouldAllowVerticalAlign = (selectedElements, elementsMap) => {
      return selectedElements.some((element) => {
        if (isBoundToContainer(element)) {
          const container = getContainerElement(element, elementsMap);
          if (isArrowElement(container)) {
            return false;
          }
          return true;
        }
        return false;
      });
    };
    suppportsHorizontalAlign = (selectedElements, elementsMap) => {
      return selectedElements.some((element) => {
        if (isBoundToContainer(element)) {
          const container = getContainerElement(element, elementsMap);
          if (isArrowElement(container)) {
            return false;
          }
          return true;
        }
        return isTextElement(element);
      });
    };
    VALID_CONTAINER_TYPES = /* @__PURE__ */ new Set([
      "rectangle",
      "ellipse",
      "diamond",
      "arrow"
    ]);
    isValidTextContainer = (element) => VALID_CONTAINER_TYPES.has(element.type);
    computeContainerDimensionForBoundText = (dimension, containerType) => {
      dimension = Math.ceil(dimension);
      const padding = BOUND_TEXT_PADDING * 2;
      if (containerType === "ellipse") {
        return Math.round((dimension + padding) / Math.sqrt(2) * 2);
      }
      if (containerType === "arrow") {
        return dimension + padding * 8;
      }
      if (containerType === "diamond") {
        return 2 * (dimension + padding);
      }
      return dimension + padding;
    };
    getBoundTextMaxWidth = (container, boundTextElement) => {
      const { width } = container;
      if (isArrowElement(container)) {
        const minWidth = (boundTextElement?.fontSize ?? DEFAULT_FONT_SIZE) * ARROW_LABEL_FONT_SIZE_TO_MIN_WIDTH_RATIO;
        return Math.max(ARROW_LABEL_WIDTH_FRACTION * width, minWidth);
      }
      if (container.type === "ellipse") {
        return Math.round(width / 2 * Math.sqrt(2)) - BOUND_TEXT_PADDING * 2;
      }
      if (container.type === "diamond") {
        return Math.round(width / 2) - BOUND_TEXT_PADDING * 2;
      }
      return width - BOUND_TEXT_PADDING * 2;
    };
    getBoundTextMaxHeight = (container, boundTextElement) => {
      const { height } = container;
      if (isArrowElement(container)) {
        const containerHeight = height - BOUND_TEXT_PADDING * 8 * 2;
        if (containerHeight <= 0) {
          return boundTextElement.height;
        }
        return height;
      }
      if (container.type === "ellipse") {
        return Math.round(height / 2 * Math.sqrt(2)) - BOUND_TEXT_PADDING * 2;
      }
      if (container.type === "diamond") {
        return Math.round(height / 2) - BOUND_TEXT_PADDING * 2;
      }
      return height - BOUND_TEXT_PADDING * 2;
    };
    isMeasureTextSupported = () => {
      const width = getTextWidth(
        DUMMY_TEXT,
        getFontString({
          fontSize: DEFAULT_FONT_SIZE,
          fontFamily: DEFAULT_FONT_FAMILY
        })
      );
      return width > 0;
    };
    getMinTextElementWidth = (font, lineHeight) => {
      return measureText("", font, lineHeight).width + BOUND_TEXT_PADDING * 2;
    };
    getTextFromElements = (elements, separator = "\n\n") => {
      const text = elements.reduce((acc, element) => {
        if (isTextElement(element)) {
          acc.push(element.text);
        }
        return acc;
      }, []).join(separator);
      return text;
    };
  }
});

// fractionalIndex.ts
import { generateNKeysBetween } from "fractional-indexing";
var validateFractionalIndices, orderByFractionalIndex, syncMovedIndices, syncInvalidIndices, getMovedIndicesGroups, getInvalidIndicesGroups, isValidFractionalIndex, generateIndices, isOrderedElement;
var init_fractionalIndex = __esm({
  "fractionalIndex.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_mutateElement();
    init_errors();
    init_typeChecks();
    init_textElement();
    init_utils2();
    validateFractionalIndices = (elements, {
      shouldThrow = false,
      includeBoundTextValidation = false,
      ignoreLogs,
      reconciliationContext
    }) => {
      const errorMessages = [];
      const stringifyElement = (element) => `${element?.index}:${element?.id}:${element?.type}:${element?.isDeleted}:${element?.version}:${element?.versionNonce}`;
      const indices = elements.map((x) => x.index);
      for (const [i, index] of indices.entries()) {
        const predecessorIndex = indices[i - 1];
        const successorIndex = indices[i + 1];
        if (!isValidFractionalIndex(index, predecessorIndex, successorIndex)) {
          errorMessages.push(
            `Fractional indices invariant has been compromised: "${stringifyElement(
              elements[i - 1]
            )}", "${stringifyElement(elements[i])}", "${stringifyElement(
              elements[i + 1]
            )}"`
          );
        }
        if (includeBoundTextValidation && hasBoundTextElement(elements[i])) {
          const container = elements[i];
          const text = getBoundTextElement(container, arrayToMap(elements));
          if (text && text.index <= container.index) {
            errorMessages.push(
              `Fractional indices invariant for bound elements has been compromised: "${stringifyElement(
                text
              )}", "${stringifyElement(container)}"`
            );
          }
        }
      }
      if (errorMessages.length) {
        const error = new InvalidFractionalIndexError();
        const additionalContext = [];
        if (reconciliationContext) {
          additionalContext.push("Additional reconciliation context:");
          additionalContext.push(
            reconciliationContext.localElements.map((x) => stringifyElement(x))
          );
          additionalContext.push(
            reconciliationContext.remoteElements.map((x) => stringifyElement(x))
          );
        }
        if (!ignoreLogs) {
          console.error(
            errorMessages.join("\n\n"),
            error.stack,
            elements.map((x) => stringifyElement(x)),
            ...additionalContext
          );
        }
        if (shouldThrow) {
          throw error;
        }
      }
    };
    orderByFractionalIndex = (elements) => {
      return elements.sort((a, b) => {
        if (isOrderedElement(a) && isOrderedElement(b)) {
          if (a.index < b.index) {
            return -1;
          } else if (a.index > b.index) {
            return 1;
          }
          return a.id < b.id ? -1 : 1;
        }
        return 1;
      });
    };
    syncMovedIndices = (elements, movedElements) => {
      try {
        const indicesGroups = getMovedIndicesGroups(elements, movedElements);
        const elementsUpdates = generateIndices(elements, indicesGroups);
        const elementsCandidates = elements.map(
          (x) => elementsUpdates.has(x) ? { ...x, ...elementsUpdates.get(x) } : x
        );
        validateFractionalIndices(
          elementsCandidates,
          // we don't autofix invalid bound text indices, hence don't include it in the validation
          {
            includeBoundTextValidation: false,
            shouldThrow: true,
            ignoreLogs: true
          }
        );
        for (const [element, update] of elementsUpdates) {
          mutateElement(element, update, false);
        }
      } catch (e) {
        syncInvalidIndices(elements);
      }
      return elements;
    };
    syncInvalidIndices = (elements) => {
      const indicesGroups = getInvalidIndicesGroups(elements);
      const elementsUpdates = generateIndices(elements, indicesGroups);
      for (const [element, update] of elementsUpdates) {
        mutateElement(element, update, false);
      }
      return elements;
    };
    getMovedIndicesGroups = (elements, movedElements) => {
      const indicesGroups = [];
      let i = 0;
      while (i < elements.length) {
        if (movedElements.has(elements[i].id)) {
          const indicesGroup = [i - 1, i];
          while (++i < elements.length) {
            if (!movedElements.has(elements[i].id)) {
              break;
            }
            indicesGroup.push(i);
          }
          indicesGroup.push(i);
          indicesGroups.push(indicesGroup);
        } else {
          i++;
        }
      }
      return indicesGroups;
    };
    getInvalidIndicesGroups = (elements) => {
      const indicesGroups = [];
      let lowerBound = void 0;
      let upperBound = void 0;
      let lowerBoundIndex = -1;
      let upperBoundIndex = 0;
      const getLowerBound = (index) => {
        const lowerBound2 = elements[lowerBoundIndex] ? elements[lowerBoundIndex].index : void 0;
        const candidate = elements[index - 1]?.index;
        if (!lowerBound2 && candidate || // first lowerBound
        lowerBound2 && candidate && candidate > lowerBound2) {
          return [candidate, index - 1];
        }
        return [lowerBound2, lowerBoundIndex];
      };
      const getUpperBound = (index) => {
        const upperBound2 = elements[upperBoundIndex] ? elements[upperBoundIndex].index : void 0;
        if (upperBound2 && index < upperBoundIndex) {
          return [upperBound2, upperBoundIndex];
        }
        let i2 = upperBoundIndex;
        while (++i2 < elements.length) {
          const candidate = elements[i2]?.index;
          if (!upperBound2 && candidate || // first upperBound
          upperBound2 && candidate && candidate > upperBound2) {
            return [candidate, i2];
          }
        }
        return [void 0, i2];
      };
      let i = 0;
      while (i < elements.length) {
        const current = elements[i].index;
        [lowerBound, lowerBoundIndex] = getLowerBound(i);
        [upperBound, upperBoundIndex] = getUpperBound(i);
        if (!isValidFractionalIndex(current, lowerBound, upperBound)) {
          const indicesGroup = [lowerBoundIndex, i];
          while (++i < elements.length) {
            const current2 = elements[i].index;
            const [nextLowerBound, nextLowerBoundIndex] = getLowerBound(i);
            const [nextUpperBound, nextUpperBoundIndex] = getUpperBound(i);
            if (isValidFractionalIndex(current2, nextLowerBound, nextUpperBound)) {
              break;
            }
            [lowerBound, lowerBoundIndex] = [nextLowerBound, nextLowerBoundIndex];
            [upperBound, upperBoundIndex] = [nextUpperBound, nextUpperBoundIndex];
            indicesGroup.push(i);
          }
          indicesGroup.push(upperBoundIndex);
          indicesGroups.push(indicesGroup);
        } else {
          i++;
        }
      }
      return indicesGroups;
    };
    isValidFractionalIndex = (index, predecessor, successor) => {
      if (!index) {
        return false;
      }
      if (predecessor && successor) {
        return predecessor < index && index < successor;
      }
      if (!predecessor && successor) {
        return index < successor;
      }
      if (predecessor && !successor) {
        return predecessor < index;
      }
      return !!index;
    };
    generateIndices = (elements, indicesGroups) => {
      const elementsUpdates = /* @__PURE__ */ new Map();
      for (const indices of indicesGroups) {
        const lowerBoundIndex = indices.shift();
        const upperBoundIndex = indices.pop();
        const fractionalIndices = generateNKeysBetween(
          elements[lowerBoundIndex]?.index,
          elements[upperBoundIndex]?.index,
          indices.length
        );
        for (let i = 0; i < indices.length; i++) {
          const element = elements[indices[i]];
          elementsUpdates.set(element, {
            index: fractionalIndices[i]
          });
        }
      }
      return elementsUpdates;
    };
    isOrderedElement = (element) => {
      if (element.index) {
        return true;
      }
      return false;
    };
  }
});

// scene/Scene.ts
import throttle from "lodash.throttle";
var getNonDeletedElements3, validateIndicesThrottled, hashSelectionOpts, isIdKey, Scene, Scene_default;
var init_Scene = __esm({
  "scene/Scene.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_typeChecks();
    init_selection();
    init_random();
    init_fractionalIndex();
    init_utils2();
    init_utils2();
    init_constants();
    getNonDeletedElements3 = (allElements) => {
      const elementsMap = /* @__PURE__ */ new Map();
      const elements = [];
      for (const element of allElements) {
        if (!element.isDeleted) {
          elements.push(element);
          elementsMap.set(
            element.id,
            element
          );
        }
      }
      return { elementsMap, elements };
    };
    validateIndicesThrottled = throttle(
      (elements) => {
        if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST || window?.DEBUG_FRACTIONAL_INDICES) {
          validateFractionalIndices(elements, {
            // throw only in dev & test, to remain functional on `DEBUG_FRACTIONAL_INDICES`
            shouldThrow: define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST,
            includeBoundTextValidation: true
          });
        }
      },
      1e3 * 60,
      { leading: true, trailing: false }
    );
    hashSelectionOpts = (opts) => {
      const keys = ["includeBoundTextElement", "includeElementsInFrames"];
      let hash = "";
      for (const key of keys) {
        hash += `${key}:${opts[key] ? "1" : "0"}`;
      }
      return hash;
    };
    isIdKey = (elementKey) => {
      if (typeof elementKey === "string") {
        return true;
      }
      return false;
    };
    Scene = class _Scene {
      // ---------------------------------------------------------------------------
      // static methods/props
      // ---------------------------------------------------------------------------
      static sceneMapByElement = /* @__PURE__ */ new WeakMap();
      static sceneMapById = /* @__PURE__ */ new Map();
      static mapElementToScene(elementKey, scene) {
        if (isIdKey(elementKey)) {
          this.sceneMapById.set(elementKey, scene);
        } else {
          this.sceneMapByElement.set(elementKey, scene);
          this.sceneMapById.set(elementKey.id, scene);
        }
      }
      /**
       * @deprecated pass down `app.scene` and use it directly
       */
      static getScene(elementKey) {
        if (isIdKey(elementKey)) {
          return this.sceneMapById.get(elementKey) || null;
        }
        return this.sceneMapByElement.get(elementKey) || null;
      }
      // ---------------------------------------------------------------------------
      // instance methods/props
      // ---------------------------------------------------------------------------
      callbacks = /* @__PURE__ */ new Set();
      nonDeletedElements = [];
      nonDeletedElementsMap = toBrandedType(
        /* @__PURE__ */ new Map()
      );
      // ideally all elements within the scene should be wrapped around with `Ordered` type, but right now there is no real benefit doing so
      elements = [];
      nonDeletedFramesLikes = [];
      frames = [];
      elementsMap = toBrandedType(/* @__PURE__ */ new Map());
      selectedElementsCache = {
        selectedElementIds: null,
        elements: null,
        cache: /* @__PURE__ */ new Map()
      };
      /**
       * Random integer regenerated each scene update.
       *
       * Does not relate to elements versions, it's only a renderer
       * cache-invalidation nonce at the moment.
       */
      sceneNonce;
      getSceneNonce() {
        return this.sceneNonce;
      }
      getNonDeletedElementsMap() {
        return this.nonDeletedElementsMap;
      }
      getElementsIncludingDeleted() {
        return this.elements;
      }
      getElementsMapIncludingDeleted() {
        return this.elementsMap;
      }
      getNonDeletedElements() {
        return this.nonDeletedElements;
      }
      getFramesIncludingDeleted() {
        return this.frames;
      }
      getSelectedElements(opts) {
        const hash = hashSelectionOpts(opts);
        const elements = opts?.elements || this.nonDeletedElements;
        if (this.selectedElementsCache.elements === elements && this.selectedElementsCache.selectedElementIds === opts.selectedElementIds) {
          const cached = this.selectedElementsCache.cache.get(hash);
          if (cached) {
            return cached;
          }
        } else if (opts?.elements == null) {
          this.selectedElementsCache.cache.clear();
        }
        const selectedElements = getSelectedElements(
          elements,
          { selectedElementIds: opts.selectedElementIds },
          opts
        );
        if (opts?.elements == null) {
          this.selectedElementsCache.selectedElementIds = opts.selectedElementIds;
          this.selectedElementsCache.elements = this.nonDeletedElements;
          this.selectedElementsCache.cache.set(hash, selectedElements);
        }
        return selectedElements;
      }
      getNonDeletedFramesLikes() {
        return this.nonDeletedFramesLikes;
      }
      getElement(id) {
        return this.elementsMap.get(id) || null;
      }
      getNonDeletedElement(id) {
        const element = this.getElement(id);
        if (element && isNonDeletedElement(element)) {
          return element;
        }
        return null;
      }
      /**
       * A utility method to help with updating all scene elements, with the added
       * performance optimization of not renewing the array if no change is made.
       *
       * Maps all current excalidraw elements, invoking the callback for each
       * element. The callback should either return a new mapped element, or the
       * original element if no changes are made. If no changes are made to any
       * element, this results in a no-op. Otherwise, the newly mapped elements
       * are set as the next scene's elements.
       *
       * @returns whether a change was made
       */
      mapElements(iteratee) {
        let didChange = false;
        const newElements = this.elements.map((element) => {
          const nextElement = iteratee(element);
          if (nextElement !== element) {
            didChange = true;
          }
          return nextElement;
        });
        if (didChange) {
          this.replaceAllElements(newElements);
        }
        return didChange;
      }
      replaceAllElements(nextElements) {
        const _nextElements = (
          // ts doesn't like `Array.isArray` of `instanceof Map`
          nextElements instanceof Array ? nextElements : Array.from(nextElements.values())
        );
        const nextFrameLikes = [];
        validateIndicesThrottled(_nextElements);
        this.elements = syncInvalidIndices(_nextElements);
        this.elementsMap.clear();
        this.elements.forEach((element) => {
          if (isFrameLikeElement(element)) {
            nextFrameLikes.push(element);
          }
          this.elementsMap.set(element.id, element);
          _Scene.mapElementToScene(element, this);
        });
        const nonDeletedElements = getNonDeletedElements3(this.elements);
        this.nonDeletedElements = nonDeletedElements.elements;
        this.nonDeletedElementsMap = nonDeletedElements.elementsMap;
        this.frames = nextFrameLikes;
        this.nonDeletedFramesLikes = getNonDeletedElements3(this.frames).elements;
        this.triggerUpdate();
      }
      triggerUpdate() {
        this.sceneNonce = randomInteger();
        for (const callback of Array.from(this.callbacks)) {
          callback();
        }
      }
      onUpdate(cb) {
        if (this.callbacks.has(cb)) {
          throw new Error();
        }
        this.callbacks.add(cb);
        return () => {
          if (!this.callbacks.has(cb)) {
            throw new Error();
          }
          this.callbacks.delete(cb);
        };
      }
      destroy() {
        this.elements = [];
        this.nonDeletedElements = [];
        this.nonDeletedFramesLikes = [];
        this.frames = [];
        this.elementsMap.clear();
        this.selectedElementsCache.selectedElementIds = null;
        this.selectedElementsCache.elements = null;
        this.selectedElementsCache.cache.clear();
        _Scene.sceneMapById.forEach((scene, elementKey) => {
          if (scene === this) {
            _Scene.sceneMapById.delete(elementKey);
          }
        });
        this.callbacks.clear();
      }
      insertElementAtIndex(element, index) {
        if (!Number.isFinite(index) || index < 0) {
          throw new Error(
            "insertElementAtIndex can only be called with index >= 0"
          );
        }
        const nextElements = [
          ...this.elements.slice(0, index),
          element,
          ...this.elements.slice(index)
        ];
        syncMovedIndices(nextElements, arrayToMap([element]));
        this.replaceAllElements(nextElements);
      }
      insertElementsAtIndex(elements, index) {
        if (!elements.length) {
          return;
        }
        if (!Number.isFinite(index) || index < 0) {
          throw new Error(
            "insertElementAtIndex can only be called with index >= 0"
          );
        }
        const nextElements = [
          ...this.elements.slice(0, index),
          ...elements,
          ...this.elements.slice(index)
        ];
        syncMovedIndices(nextElements, arrayToMap(elements));
        this.replaceAllElements(nextElements);
      }
      insertElement = (element) => {
        const index = element.frameId ? this.getElementIndex(element.frameId) : this.elements.length;
        this.insertElementAtIndex(element, index);
      };
      insertElements = (elements) => {
        if (!elements.length) {
          return;
        }
        const index = elements[0]?.frameId ? this.getElementIndex(elements[0].frameId) : this.elements.length;
        this.insertElementsAtIndex(elements, index);
      };
      getElementIndex(elementId) {
        return this.elements.findIndex((element) => element.id === elementId);
      }
      getContainerElement = (element) => {
        if (!element) {
          return null;
        }
        if (element.containerId) {
          return this.getElement(element.containerId) || null;
        }
        return null;
      };
    };
    Scene_default = Scene;
  }
});

// element/mutateElement.ts
var mutateElement, newElementWith, bumpVersion;
var init_mutateElement = __esm({
  "element/mutateElement.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_Scene();
    init_points();
    init_random();
    init_utils2();
    init_ShapeCache();
    mutateElement = (element, updates, informMutation = true) => {
      let didChange = false;
      const { points, fileId } = updates;
      if (typeof points !== "undefined") {
        updates = { ...getSizeFromPoints(points), ...updates };
      }
      for (const key in updates) {
        const value = updates[key];
        if (typeof value !== "undefined") {
          if (element[key] === value && // if object, always update because its attrs could have changed
          // (except for specific keys we handle below)
          (typeof value !== "object" || value === null || key === "groupIds" || key === "scale")) {
            continue;
          }
          if (key === "scale") {
            const prevScale = element[key];
            const nextScale = value;
            if (prevScale[0] === nextScale[0] && prevScale[1] === nextScale[1]) {
              continue;
            }
          } else if (key === "points") {
            const prevPoints = element[key];
            const nextPoints = value;
            if (prevPoints.length === nextPoints.length) {
              let didChangePoints = false;
              let index = prevPoints.length;
              while (--index) {
                const prevPoint = prevPoints[index];
                const nextPoint = nextPoints[index];
                if (prevPoint[0] !== nextPoint[0] || prevPoint[1] !== nextPoint[1]) {
                  didChangePoints = true;
                  break;
                }
              }
              if (!didChangePoints) {
                continue;
              }
            }
          }
          element[key] = value;
          didChange = true;
        }
      }
      if (!didChange) {
        return element;
      }
      if (typeof updates.height !== "undefined" || typeof updates.width !== "undefined" || typeof fileId != "undefined" || typeof points !== "undefined") {
        ShapeCache.delete(element);
      }
      element.version++;
      element.versionNonce = randomInteger();
      element.updated = getUpdatedTimestamp();
      if (informMutation) {
        Scene_default.getScene(element)?.triggerUpdate();
      }
      return element;
    };
    newElementWith = (element, updates, force = false) => {
      let didChange = false;
      for (const key in updates) {
        const value = updates[key];
        if (typeof value !== "undefined") {
          if (element[key] === value && // if object, always update because its attrs could have changed
          (typeof value !== "object" || value === null)) {
            continue;
          }
          didChange = true;
        }
      }
      if (!didChange && !force) {
        return element;
      }
      return {
        ...element,
        ...updates,
        updated: getUpdatedTimestamp(),
        version: element.version + 1,
        versionNonce: randomInteger()
      };
    };
    bumpVersion = (element, version) => {
      element.version = (version ?? element.version) + 1;
      element.versionNonce = randomInteger();
      element.updated = getUpdatedTimestamp();
      return element;
    };
  }
});

// element/sizeHelpers.ts
var isInvisiblySmallElement, isElementInViewport, isElementCompletelyInViewport, getPerfectElementSize, getLockedLinearCursorAlignSize, getNormalizedDimensions;
var init_sizeHelpers = __esm({
  "element/sizeHelpers.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_mutateElement();
    init_typeChecks();
    init_constants();
    init_bounds();
    init_utils2();
    isInvisiblySmallElement = (element) => {
      if (isLinearElement(element) || isFreeDrawElement(element)) {
        return element.points.length < 2;
      }
      return element.width === 0 && element.height === 0;
    };
    isElementInViewport = (element, width, height, viewTransformations, elementsMap) => {
      const [x1, y1, x2, y2] = getElementBounds(element, elementsMap);
      const topLeftSceneCoords = viewportCoordsToSceneCoords(
        {
          clientX: viewTransformations.offsetLeft,
          clientY: viewTransformations.offsetTop
        },
        viewTransformations
      );
      const bottomRightSceneCoords = viewportCoordsToSceneCoords(
        {
          clientX: viewTransformations.offsetLeft + width,
          clientY: viewTransformations.offsetTop + height
        },
        viewTransformations
      );
      return topLeftSceneCoords.x <= x2 && topLeftSceneCoords.y <= y2 && bottomRightSceneCoords.x >= x1 && bottomRightSceneCoords.y >= y1;
    };
    isElementCompletelyInViewport = (elements, width, height, viewTransformations, elementsMap, padding) => {
      const [x1, y1, x2, y2] = getCommonBounds(elements, elementsMap);
      const topLeftSceneCoords = viewportCoordsToSceneCoords(
        {
          clientX: viewTransformations.offsetLeft + (padding?.left || 0),
          clientY: viewTransformations.offsetTop + (padding?.top || 0)
        },
        viewTransformations
      );
      const bottomRightSceneCoords = viewportCoordsToSceneCoords(
        {
          clientX: viewTransformations.offsetLeft + width - (padding?.right || 0),
          clientY: viewTransformations.offsetTop + height - (padding?.bottom || 0)
        },
        viewTransformations
      );
      return x1 >= topLeftSceneCoords.x && y1 >= topLeftSceneCoords.y && x2 <= bottomRightSceneCoords.x && y2 <= bottomRightSceneCoords.y;
    };
    getPerfectElementSize = (elementType, width, height) => {
      const absWidth = Math.abs(width);
      const absHeight = Math.abs(height);
      if (elementType === "line" || elementType === "arrow" || elementType === "freedraw") {
        const lockedAngle = Math.round(Math.atan(absHeight / absWidth) / SHIFT_LOCKING_ANGLE) * SHIFT_LOCKING_ANGLE;
        if (lockedAngle === 0) {
          height = 0;
        } else if (lockedAngle === Math.PI / 2) {
          width = 0;
        } else {
          height = absWidth * Math.tan(lockedAngle) * Math.sign(height) || height;
        }
      } else if (elementType !== "selection") {
        height = absWidth * Math.sign(height);
      }
      return { width, height };
    };
    getLockedLinearCursorAlignSize = (originX, originY, x, y) => {
      let width = x - originX;
      let height = y - originY;
      const lockedAngle = Math.round(Math.atan(height / width) / SHIFT_LOCKING_ANGLE) * SHIFT_LOCKING_ANGLE;
      if (lockedAngle === 0) {
        height = 0;
      } else if (lockedAngle === Math.PI / 2) {
        width = 0;
      } else {
        const a1 = Math.tan(lockedAngle);
        const b1 = -1;
        const c1 = originY - a1 * originX;
        const a2 = -1 / a1;
        const b2 = -1;
        const c2 = y - a2 * x;
        const intersectX = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);
        const intersectY = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);
        width = intersectX - originX;
        height = intersectY - originY;
      }
      return { width, height };
    };
    getNormalizedDimensions = (element) => {
      const ret = {
        width: element.width,
        height: element.height,
        x: element.x,
        y: element.y
      };
      if (element.width < 0) {
        const nextWidth = Math.abs(element.width);
        ret.width = nextWidth;
        ret.x = element.x - nextWidth;
      }
      if (element.height < 0) {
        const nextHeight = Math.abs(element.height);
        ret.height = nextHeight;
        ret.y = element.y - nextHeight;
      }
      return ret;
    };
  }
});

// element/transformHandles.ts
var transformHandleSizes, ROTATION_RESIZE_HANDLE_GAP, DEFAULT_OMIT_SIDES, OMIT_SIDES_FOR_LINE_SLASH, OMIT_SIDES_FOR_LINE_BACKSLASH, generateTransformHandle, canResizeFromSides, getOmitSidesForDevice, getTransformHandlesFromCoords, getTransformHandles, shouldShowBoundingBox;
var init_transformHandles = __esm({
  "element/transformHandles.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_bounds();
    init_typeChecks();
    init_constants();
    init_math();
    transformHandleSizes = {
      mouse: 8,
      pen: 16,
      touch: 28
    };
    ROTATION_RESIZE_HANDLE_GAP = 16;
    DEFAULT_OMIT_SIDES = {
      e: true,
      s: true,
      n: true,
      w: true
    };
    OMIT_SIDES_FOR_LINE_SLASH = {
      e: true,
      s: true,
      n: true,
      w: true,
      nw: true,
      se: true
    };
    OMIT_SIDES_FOR_LINE_BACKSLASH = {
      e: true,
      s: true,
      n: true,
      w: true
    };
    generateTransformHandle = (x, y, width, height, cx, cy, angle) => {
      const [xx, yy] = pointRotateRads(
        pointFrom(x + width / 2, y + height / 2),
        pointFrom(cx, cy),
        angle
      );
      return [xx - width / 2, yy - height / 2, width, height];
    };
    canResizeFromSides = (device) => {
      if (device.viewport.isMobile) {
        return false;
      }
      if (device.isTouchScreen && (isAndroid || isIOS)) {
        return false;
      }
      return true;
    };
    getOmitSidesForDevice = (device) => {
      if (canResizeFromSides(device)) {
        return DEFAULT_OMIT_SIDES;
      }
      return {};
    };
    getTransformHandlesFromCoords = ([x1, y1, x2, y2, cx, cy], angle, zoom, pointerType, omitSides = {}, margin = 4) => {
      const size = transformHandleSizes[pointerType];
      const handleWidth = size / zoom.value;
      const handleHeight = size / zoom.value;
      const handleMarginX = size / zoom.value;
      const handleMarginY = size / zoom.value;
      const width = x2 - x1;
      const height = y2 - y1;
      const dashedLineMargin = margin / zoom.value;
      const centeringOffset = (size - DEFAULT_TRANSFORM_HANDLE_SPACING * 2) / (2 * zoom.value);
      const transformHandles = {
        nw: omitSides.nw ? void 0 : generateTransformHandle(
          x1 - dashedLineMargin - handleMarginX + centeringOffset,
          y1 - dashedLineMargin - handleMarginY + centeringOffset,
          handleWidth,
          handleHeight,
          cx,
          cy,
          angle
        ),
        ne: omitSides.ne ? void 0 : generateTransformHandle(
          x2 + dashedLineMargin - centeringOffset,
          y1 - dashedLineMargin - handleMarginY + centeringOffset,
          handleWidth,
          handleHeight,
          cx,
          cy,
          angle
        ),
        sw: omitSides.sw ? void 0 : generateTransformHandle(
          x1 - dashedLineMargin - handleMarginX + centeringOffset,
          y2 + dashedLineMargin - centeringOffset,
          handleWidth,
          handleHeight,
          cx,
          cy,
          angle
        ),
        se: omitSides.se ? void 0 : generateTransformHandle(
          x2 + dashedLineMargin - centeringOffset,
          y2 + dashedLineMargin - centeringOffset,
          handleWidth,
          handleHeight,
          cx,
          cy,
          angle
        ),
        rotation: omitSides.rotation ? void 0 : generateTransformHandle(
          x1 + width / 2 - handleWidth / 2,
          y1 - dashedLineMargin - handleMarginY + centeringOffset - ROTATION_RESIZE_HANDLE_GAP / zoom.value,
          handleWidth,
          handleHeight,
          cx,
          cy,
          angle
        )
      };
      const minimumSizeForEightHandles = 5 * transformHandleSizes.mouse / zoom.value;
      if (Math.abs(width) > minimumSizeForEightHandles) {
        if (!omitSides.n) {
          transformHandles.n = generateTransformHandle(
            x1 + width / 2 - handleWidth / 2,
            y1 - dashedLineMargin - handleMarginY + centeringOffset,
            handleWidth,
            handleHeight,
            cx,
            cy,
            angle
          );
        }
        if (!omitSides.s) {
          transformHandles.s = generateTransformHandle(
            x1 + width / 2 - handleWidth / 2,
            y2 + dashedLineMargin - centeringOffset,
            handleWidth,
            handleHeight,
            cx,
            cy,
            angle
          );
        }
      }
      if (Math.abs(height) > minimumSizeForEightHandles) {
        if (!omitSides.w) {
          transformHandles.w = generateTransformHandle(
            x1 - dashedLineMargin - handleMarginX + centeringOffset,
            y1 + height / 2 - handleHeight / 2,
            handleWidth,
            handleHeight,
            cx,
            cy,
            angle
          );
        }
        if (!omitSides.e) {
          transformHandles.e = generateTransformHandle(
            x2 + dashedLineMargin - centeringOffset,
            y1 + height / 2 - handleHeight / 2,
            handleWidth,
            handleHeight,
            cx,
            cy,
            angle
          );
        }
      }
      return transformHandles;
    };
    getTransformHandles = (element, zoom, elementsMap, pointerType = "mouse", omitSides = DEFAULT_OMIT_SIDES) => {
      if (element.locked || // Elbow arrows cannot be rotated
      isElbowArrow(element)) {
        return {};
      }
      if (element.type === "freedraw" || isLinearElement(element)) {
        if (element.points.length === 2) {
          const [, p1] = element.points;
          if (p1[0] === 0 || p1[1] === 0) {
            omitSides = OMIT_SIDES_FOR_LINE_BACKSLASH;
          } else if (p1[0] > 0 && p1[1] < 0) {
            omitSides = OMIT_SIDES_FOR_LINE_SLASH;
          } else if (p1[0] > 0 && p1[1] > 0) {
            omitSides = OMIT_SIDES_FOR_LINE_BACKSLASH;
          } else if (p1[0] < 0 && p1[1] > 0) {
            omitSides = OMIT_SIDES_FOR_LINE_SLASH;
          } else if (p1[0] < 0 && p1[1] < 0) {
            omitSides = OMIT_SIDES_FOR_LINE_BACKSLASH;
          }
        }
      } else if (isFrameLikeElement(element)) {
        omitSides = {
          ...omitSides,
          rotation: true
        };
      }
      const dashedLineMargin = isLinearElement(element) ? DEFAULT_TRANSFORM_HANDLE_SPACING + 8 : DEFAULT_TRANSFORM_HANDLE_SPACING;
      return getTransformHandlesFromCoords(
        getElementAbsoluteCoords(element, elementsMap, true),
        element.angle,
        zoom,
        pointerType,
        omitSides,
        dashedLineMargin
      );
    };
    shouldShowBoundingBox = (elements, appState) => {
      if (appState.editingLinearElement) {
        return false;
      }
      if (elements.length > 1) {
        return true;
      }
      const element = elements[0];
      if (isElbowArrow(element)) {
        return false;
      }
      if (!isLinearElement(element)) {
        return true;
      }
      return element.points.length > 2;
    };
  }
});

// element/resizeTest.ts
var isInsideTransformHandle, resizeTest, getElementWithTransformHandleType, getTransformHandleTypeFromCoords, RESIZE_CURSORS, rotateResizeCursor, getCursorForResizingElement, getSelectionBorders;
var init_resizeTest = __esm({
  "element/resizeTest.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_transformHandles();
    init_bounds();
    init_constants();
    init_typeChecks();
    init_math();
    isInsideTransformHandle = (transformHandle, x, y) => x >= transformHandle[0] && x <= transformHandle[0] + transformHandle[2] && y >= transformHandle[1] && y <= transformHandle[1] + transformHandle[3];
    resizeTest = (element, elementsMap, appState, x, y, zoom, pointerType, device) => {
      if (!appState.selectedElementIds[element.id]) {
        return false;
      }
      const { rotation: rotationTransformHandle, ...transformHandles } = getTransformHandles(
        element,
        zoom,
        elementsMap,
        pointerType,
        getOmitSidesForDevice(device)
      );
      if (rotationTransformHandle && isInsideTransformHandle(rotationTransformHandle, x, y)) {
        return "rotation";
      }
      const filter = Object.keys(transformHandles).filter((key) => {
        const transformHandle = transformHandles[key];
        if (!transformHandle) {
          return false;
        }
        return isInsideTransformHandle(transformHandle, x, y);
      });
      if (filter.length > 0) {
        return filter[0];
      }
      if (canResizeFromSides(device)) {
        const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(
          element,
          elementsMap
        );
        if (!(isLinearElement(element) && element.points.length <= 2)) {
          const SPACING = SIDE_RESIZING_THRESHOLD / zoom.value;
          const sides = getSelectionBorders(
            pointFrom(x1 - SPACING, y1 - SPACING),
            pointFrom(x2 + SPACING, y2 + SPACING),
            pointFrom(cx, cy),
            element.angle
          );
          for (const [dir, side] of Object.entries(sides)) {
            if (pointOnLineSegment(
              pointFrom(x, y),
              side,
              SPACING
            )) {
              return dir;
            }
          }
        }
      }
      return false;
    };
    getElementWithTransformHandleType = (elements, appState, scenePointerX, scenePointerY, zoom, pointerType, elementsMap, device) => {
      return elements.reduce((result, element) => {
        if (result) {
          return result;
        }
        const transformHandleType = resizeTest(
          element,
          elementsMap,
          appState,
          scenePointerX,
          scenePointerY,
          zoom,
          pointerType,
          device
        );
        return transformHandleType ? { element, transformHandleType } : null;
      }, null);
    };
    getTransformHandleTypeFromCoords = ([x1, y1, x2, y2], scenePointerX, scenePointerY, zoom, pointerType, device) => {
      const transformHandles = getTransformHandlesFromCoords(
        [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2],
        0,
        zoom,
        pointerType,
        getOmitSidesForDevice(device)
      );
      const found = Object.keys(transformHandles).find((key) => {
        const transformHandle = transformHandles[key];
        return transformHandle && isInsideTransformHandle(transformHandle, scenePointerX, scenePointerY);
      });
      if (found) {
        return found;
      }
      if (canResizeFromSides(device)) {
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const SPACING = SIDE_RESIZING_THRESHOLD / zoom.value;
        const sides = getSelectionBorders(
          pointFrom(x1 - SPACING, y1 - SPACING),
          pointFrom(x2 + SPACING, y2 + SPACING),
          pointFrom(cx, cy),
          0
        );
        for (const [dir, side] of Object.entries(sides)) {
          if (pointOnLineSegment(
            pointFrom(scenePointerX, scenePointerY),
            side,
            SPACING
          )) {
            return dir;
          }
        }
      }
      return false;
    };
    RESIZE_CURSORS = ["ns", "nesw", "ew", "nwse"];
    rotateResizeCursor = (cursor, angle) => {
      const index = RESIZE_CURSORS.indexOf(cursor);
      if (index >= 0) {
        const a = Math.round(angle / (Math.PI / 4));
        cursor = RESIZE_CURSORS[(index + a) % RESIZE_CURSORS.length];
      }
      return cursor;
    };
    getCursorForResizingElement = (resizingElement) => {
      const { element, transformHandleType } = resizingElement;
      const shouldSwapCursors = element && Math.sign(element.height) * Math.sign(element.width) === -1;
      let cursor = null;
      switch (transformHandleType) {
        case "n":
        case "s":
          cursor = "ns";
          break;
        case "w":
        case "e":
          cursor = "ew";
          break;
        case "nw":
        case "se":
          if (shouldSwapCursors) {
            cursor = "nesw";
          } else {
            cursor = "nwse";
          }
          break;
        case "ne":
        case "sw":
          if (shouldSwapCursors) {
            cursor = "nwse";
          } else {
            cursor = "nesw";
          }
          break;
        case "rotation":
          return "grab";
      }
      if (cursor && element) {
        cursor = rotateResizeCursor(cursor, element.angle);
      }
      return cursor ? `${cursor}-resize` : "";
    };
    getSelectionBorders = ([x1, y1], [x2, y2], center, angle) => {
      const topLeft = pointRotateRads(pointFrom(x1, y1), center, angle);
      const topRight = pointRotateRads(pointFrom(x2, y1), center, angle);
      const bottomLeft = pointRotateRads(pointFrom(x1, y2), center, angle);
      const bottomRight = pointRotateRads(pointFrom(x2, y2), center, angle);
      return {
        n: [topLeft, topRight],
        e: [topRight, bottomRight],
        s: [bottomRight, bottomLeft],
        w: [bottomLeft, topLeft]
      };
    };
  }
});

// element/resizeElements.ts
var transformElements, rotateSingleElement, rescalePointsInElement, measureFontSizeFromWidth, resizeSingleTextElement, resizeSingleElement, resizeMultipleElements, rotateMultipleElements, getResizeOffsetXY, getResizeArrowDirection;
var init_resizeElements = __esm({
  "element/resizeElements.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_constants();
    init_points();
    init_bounds();
    init_typeChecks();
    init_mutateElement();
    init_utils2();
    init_binding();
    init_Scene();
    init_textElement();
    init_linearElementEditor();
    init_groups();
    init_routing();
    init_math();
    transformElements = (originalElements, transformHandleType, selectedElements, elementsMap, shouldRotateWithDiscreteAngle2, shouldResizeFromCenter2, shouldMaintainAspectRatio2, pointerX, pointerY, centerX, centerY) => {
      if (selectedElements.length === 1) {
        const [element] = selectedElements;
        if (transformHandleType === "rotation") {
          if (!isElbowArrow(element)) {
            rotateSingleElement(
              element,
              elementsMap,
              pointerX,
              pointerY,
              shouldRotateWithDiscreteAngle2
            );
            updateBoundElements(element, elementsMap);
          }
        } else if (isTextElement(element) && transformHandleType) {
          resizeSingleTextElement(
            originalElements,
            element,
            elementsMap,
            transformHandleType,
            shouldResizeFromCenter2,
            pointerX,
            pointerY
          );
          updateBoundElements(element, elementsMap);
        } else if (transformHandleType) {
          resizeSingleElement(
            originalElements,
            shouldMaintainAspectRatio2,
            element,
            elementsMap,
            transformHandleType,
            shouldResizeFromCenter2,
            pointerX,
            pointerY
          );
        }
        return true;
      } else if (selectedElements.length > 1) {
        if (transformHandleType === "rotation") {
          rotateMultipleElements(
            originalElements,
            selectedElements,
            elementsMap,
            pointerX,
            pointerY,
            shouldRotateWithDiscreteAngle2,
            centerX,
            centerY
          );
          return true;
        } else if (transformHandleType) {
          resizeMultipleElements(
            originalElements,
            selectedElements,
            elementsMap,
            transformHandleType,
            shouldResizeFromCenter2,
            shouldMaintainAspectRatio2,
            pointerX,
            pointerY
          );
          return true;
        }
      }
      return false;
    };
    rotateSingleElement = (element, elementsMap, pointerX, pointerY, shouldRotateWithDiscreteAngle2) => {
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
      const cx = (x1 + x2) / 2;
      const cy = (y1 + y2) / 2;
      let angle;
      if (isFrameLikeElement(element)) {
        angle = 0;
      } else {
        angle = 5 * Math.PI / 2 + Math.atan2(pointerY - cy, pointerX - cx);
        if (shouldRotateWithDiscreteAngle2) {
          angle = angle + SHIFT_LOCKING_ANGLE / 2;
          angle = angle - angle % SHIFT_LOCKING_ANGLE;
        }
        angle = normalizeRadians(angle);
      }
      const boundTextElementId = getBoundTextElementId(element);
      mutateElement(element, { angle });
      if (boundTextElementId) {
        const textElement = Scene_default.getScene(element)?.getElement(
          boundTextElementId
        );
        if (textElement && !isArrowElement(element)) {
          mutateElement(textElement, { angle });
        }
      }
    };
    rescalePointsInElement = (element, width, height, normalizePoints) => isLinearElement(element) || isFreeDrawElement(element) ? {
      points: rescalePoints(
        0,
        width,
        rescalePoints(1, height, element.points, normalizePoints),
        normalizePoints
      )
    } : {};
    measureFontSizeFromWidth = (element, elementsMap, nextWidth) => {
      let width = element.width;
      const hasContainer = isBoundToContainer(element);
      if (hasContainer) {
        const container = getContainerElement(element, elementsMap);
        if (container) {
          width = getBoundTextMaxWidth(container, element);
        }
      }
      const nextFontSize = element.fontSize * (nextWidth / width);
      if (nextFontSize < MIN_FONT_SIZE) {
        return null;
      }
      return {
        size: nextFontSize
      };
    };
    resizeSingleTextElement = (originalElements, element, elementsMap, transformHandleType, shouldResizeFromCenter2, pointerX, pointerY) => {
      const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(
        element,
        elementsMap
      );
      const [rotatedX, rotatedY] = pointRotateRads(
        pointFrom(pointerX, pointerY),
        pointFrom(cx, cy),
        -element.angle
      );
      let scaleX = 0;
      let scaleY = 0;
      if (transformHandleType !== "e" && transformHandleType !== "w") {
        if (transformHandleType.includes("e")) {
          scaleX = (rotatedX - x1) / (x2 - x1);
        }
        if (transformHandleType.includes("w")) {
          scaleX = (x2 - rotatedX) / (x2 - x1);
        }
        if (transformHandleType.includes("n")) {
          scaleY = (y2 - rotatedY) / (y2 - y1);
        }
        if (transformHandleType.includes("s")) {
          scaleY = (rotatedY - y1) / (y2 - y1);
        }
      }
      const scale = Math.max(scaleX, scaleY);
      if (scale > 0) {
        const nextWidth = element.width * scale;
        const nextHeight = element.height * scale;
        const metrics = measureFontSizeFromWidth(element, elementsMap, nextWidth);
        if (metrics === null) {
          return;
        }
        const startTopLeft = [x1, y1];
        const startBottomRight = [x2, y2];
        const startCenter = [cx, cy];
        let newTopLeft = pointFrom(x1, y1);
        if (["n", "w", "nw"].includes(transformHandleType)) {
          newTopLeft = pointFrom(
            startBottomRight[0] - Math.abs(nextWidth),
            startBottomRight[1] - Math.abs(nextHeight)
          );
        }
        if (transformHandleType === "ne") {
          const bottomLeft = [startTopLeft[0], startBottomRight[1]];
          newTopLeft = pointFrom(
            bottomLeft[0],
            bottomLeft[1] - Math.abs(nextHeight)
          );
        }
        if (transformHandleType === "sw") {
          const topRight = [startBottomRight[0], startTopLeft[1]];
          newTopLeft = pointFrom(
            topRight[0] - Math.abs(nextWidth),
            topRight[1]
          );
        }
        if (["s", "n"].includes(transformHandleType)) {
          newTopLeft[0] = startCenter[0] - nextWidth / 2;
        }
        if (["e", "w"].includes(transformHandleType)) {
          newTopLeft[1] = startCenter[1] - nextHeight / 2;
        }
        if (shouldResizeFromCenter2) {
          newTopLeft[0] = startCenter[0] - Math.abs(nextWidth) / 2;
          newTopLeft[1] = startCenter[1] - Math.abs(nextHeight) / 2;
        }
        const angle = element.angle;
        const rotatedTopLeft = pointRotateRads(
          newTopLeft,
          pointFrom(cx, cy),
          angle
        );
        const newCenter = pointFrom(
          newTopLeft[0] + Math.abs(nextWidth) / 2,
          newTopLeft[1] + Math.abs(nextHeight) / 2
        );
        const rotatedNewCenter = pointRotateRads(
          newCenter,
          pointFrom(cx, cy),
          angle
        );
        newTopLeft = pointRotateRads(
          rotatedTopLeft,
          rotatedNewCenter,
          -angle
        );
        const [nextX, nextY] = newTopLeft;
        mutateElement(element, {
          fontSize: metrics.size,
          width: nextWidth,
          height: nextHeight,
          x: nextX,
          y: nextY
        });
      }
      if (transformHandleType === "e" || transformHandleType === "w") {
        const stateAtResizeStart = originalElements.get(element.id);
        const [x12, y12, x22, y22] = getResizedElementAbsoluteCoords(
          stateAtResizeStart,
          stateAtResizeStart.width,
          stateAtResizeStart.height,
          true
        );
        const startTopLeft = pointFrom(x12, y12);
        const startBottomRight = pointFrom(x22, y22);
        const startCenter = pointCenter(startTopLeft, startBottomRight);
        const rotatedPointer = pointRotateRads(
          pointFrom(pointerX, pointerY),
          startCenter,
          -stateAtResizeStart.angle
        );
        const [esx1, , esx2] = getResizedElementAbsoluteCoords(
          element,
          element.width,
          element.height,
          true
        );
        const boundsCurrentWidth = esx2 - esx1;
        const atStartBoundsWidth = startBottomRight[0] - startTopLeft[0];
        const minWidth = getMinTextElementWidth(
          getFontString({
            fontSize: element.fontSize,
            fontFamily: element.fontFamily
          }),
          element.lineHeight
        );
        let scaleX2 = atStartBoundsWidth / boundsCurrentWidth;
        if (transformHandleType.includes("e")) {
          scaleX2 = (rotatedPointer[0] - startTopLeft[0]) / boundsCurrentWidth;
        }
        if (transformHandleType.includes("w")) {
          scaleX2 = (startBottomRight[0] - rotatedPointer[0]) / boundsCurrentWidth;
        }
        const newWidth = element.width * scaleX2 < minWidth ? minWidth : element.width * scaleX2;
        const text = wrapText(
          element.originalText,
          getFontString(element),
          Math.abs(newWidth)
        );
        const metrics = measureText(
          text,
          getFontString(element),
          element.lineHeight
        );
        const eleNewHeight = metrics.height;
        const [newBoundsX1, newBoundsY1, newBoundsX2, newBoundsY2] = getResizedElementAbsoluteCoords(
          stateAtResizeStart,
          newWidth,
          eleNewHeight,
          true
        );
        const newBoundsWidth = newBoundsX2 - newBoundsX1;
        const newBoundsHeight = newBoundsY2 - newBoundsY1;
        let newTopLeft = [...startTopLeft];
        if (["n", "w", "nw"].includes(transformHandleType)) {
          newTopLeft = [
            startBottomRight[0] - Math.abs(newBoundsWidth),
            startTopLeft[1]
          ];
        }
        const angle = stateAtResizeStart.angle;
        const rotatedTopLeft = pointRotateRads(
          pointFromPair(newTopLeft),
          startCenter,
          angle
        );
        const newCenter = pointFrom(
          newTopLeft[0] + Math.abs(newBoundsWidth) / 2,
          newTopLeft[1] + Math.abs(newBoundsHeight) / 2
        );
        const rotatedNewCenter = pointRotateRads(newCenter, startCenter, angle);
        newTopLeft = pointRotateRads(
          rotatedTopLeft,
          rotatedNewCenter,
          -angle
        );
        const resizedElement = {
          width: Math.abs(newWidth),
          height: Math.abs(metrics.height),
          x: newTopLeft[0],
          y: newTopLeft[1],
          text,
          autoResize: false
        };
        mutateElement(element, resizedElement);
      }
    };
    resizeSingleElement = (originalElements, shouldMaintainAspectRatio2, element, elementsMap, transformHandleDirection, shouldResizeFromCenter2, pointerX, pointerY) => {
      const stateAtResizeStart = originalElements.get(element.id);
      const [x1, y1, x2, y2] = getResizedElementAbsoluteCoords(
        stateAtResizeStart,
        stateAtResizeStart.width,
        stateAtResizeStart.height,
        true
      );
      const startTopLeft = pointFrom(x1, y1);
      const startBottomRight = pointFrom(x2, y2);
      const startCenter = pointCenter(startTopLeft, startBottomRight);
      const rotatedPointer = pointRotateRads(
        pointFrom(pointerX, pointerY),
        startCenter,
        -stateAtResizeStart.angle
      );
      const [esx1, esy1, esx2, esy2] = getResizedElementAbsoluteCoords(
        element,
        element.width,
        element.height,
        true
      );
      const boundsCurrentWidth = esx2 - esx1;
      const boundsCurrentHeight = esy2 - esy1;
      const atStartBoundsWidth = startBottomRight[0] - startTopLeft[0];
      const atStartBoundsHeight = startBottomRight[1] - startTopLeft[1];
      let scaleX = atStartBoundsWidth / boundsCurrentWidth;
      let scaleY = atStartBoundsHeight / boundsCurrentHeight;
      let boundTextFont = {};
      const boundTextElement = getBoundTextElement(element, elementsMap);
      if (transformHandleDirection.includes("e")) {
        scaleX = (rotatedPointer[0] - startTopLeft[0]) / boundsCurrentWidth;
      }
      if (transformHandleDirection.includes("s")) {
        scaleY = (rotatedPointer[1] - startTopLeft[1]) / boundsCurrentHeight;
      }
      if (transformHandleDirection.includes("w")) {
        scaleX = (startBottomRight[0] - rotatedPointer[0]) / boundsCurrentWidth;
      }
      if (transformHandleDirection.includes("n")) {
        scaleY = (startBottomRight[1] - rotatedPointer[1]) / boundsCurrentHeight;
      }
      const eleInitialWidth = stateAtResizeStart.width;
      const eleInitialHeight = stateAtResizeStart.height;
      let eleNewWidth = element.width * scaleX;
      let eleNewHeight = element.height * scaleY;
      if (shouldResizeFromCenter2) {
        eleNewWidth = 2 * eleNewWidth - eleInitialWidth;
        eleNewHeight = 2 * eleNewHeight - eleInitialHeight;
      }
      if (shouldMaintainAspectRatio2) {
        const widthRatio = Math.abs(eleNewWidth) / eleInitialWidth;
        const heightRatio = Math.abs(eleNewHeight) / eleInitialHeight;
        if (transformHandleDirection.length === 1) {
          eleNewHeight *= widthRatio;
          eleNewWidth *= heightRatio;
        }
        if (transformHandleDirection.length === 2) {
          const ratio = Math.max(widthRatio, heightRatio);
          eleNewWidth = eleInitialWidth * ratio * Math.sign(eleNewWidth);
          eleNewHeight = eleInitialHeight * ratio * Math.sign(eleNewHeight);
        }
      }
      if (boundTextElement) {
        const stateOfBoundTextElementAtResize = originalElements.get(
          boundTextElement.id
        );
        if (stateOfBoundTextElementAtResize) {
          boundTextFont = {
            fontSize: stateOfBoundTextElementAtResize.fontSize
          };
        }
        if (shouldMaintainAspectRatio2) {
          const updatedElement = {
            ...element,
            width: eleNewWidth,
            height: eleNewHeight
          };
          const nextFont = measureFontSizeFromWidth(
            boundTextElement,
            elementsMap,
            getBoundTextMaxWidth(updatedElement, boundTextElement)
          );
          if (nextFont === null) {
            return;
          }
          boundTextFont = {
            fontSize: nextFont.size
          };
        } else {
          const minWidth = getApproxMinLineWidth(
            getFontString(boundTextElement),
            boundTextElement.lineHeight
          );
          const minHeight = getApproxMinLineHeight(
            boundTextElement.fontSize,
            boundTextElement.lineHeight
          );
          eleNewWidth = Math.max(eleNewWidth, minWidth);
          eleNewHeight = Math.max(eleNewHeight, minHeight);
        }
      }
      const [newBoundsX1, newBoundsY1, newBoundsX2, newBoundsY2] = getResizedElementAbsoluteCoords(
        stateAtResizeStart,
        eleNewWidth,
        eleNewHeight,
        true
      );
      const newBoundsWidth = newBoundsX2 - newBoundsX1;
      const newBoundsHeight = newBoundsY2 - newBoundsY1;
      let newTopLeft = [...startTopLeft];
      if (["n", "w", "nw"].includes(transformHandleDirection)) {
        newTopLeft = [
          startBottomRight[0] - Math.abs(newBoundsWidth),
          startBottomRight[1] - Math.abs(newBoundsHeight)
        ];
      }
      if (transformHandleDirection === "ne") {
        const bottomLeft = [startTopLeft[0], startBottomRight[1]];
        newTopLeft = [bottomLeft[0], bottomLeft[1] - Math.abs(newBoundsHeight)];
      }
      if (transformHandleDirection === "sw") {
        const topRight = [startBottomRight[0], startTopLeft[1]];
        newTopLeft = [topRight[0] - Math.abs(newBoundsWidth), topRight[1]];
      }
      if (shouldMaintainAspectRatio2) {
        if (["s", "n"].includes(transformHandleDirection)) {
          newTopLeft[0] = startCenter[0] - newBoundsWidth / 2;
        }
        if (["e", "w"].includes(transformHandleDirection)) {
          newTopLeft[1] = startCenter[1] - newBoundsHeight / 2;
        }
      }
      const flipX = eleNewWidth < 0;
      const flipY = eleNewHeight < 0;
      if (flipX) {
        if (transformHandleDirection.includes("e")) {
          newTopLeft[0] -= Math.abs(newBoundsWidth);
        }
        if (transformHandleDirection.includes("w")) {
          newTopLeft[0] += Math.abs(newBoundsWidth);
        }
      }
      if (flipY) {
        if (transformHandleDirection.includes("s")) {
          newTopLeft[1] -= Math.abs(newBoundsHeight);
        }
        if (transformHandleDirection.includes("n")) {
          newTopLeft[1] += Math.abs(newBoundsHeight);
        }
      }
      if (shouldResizeFromCenter2) {
        newTopLeft[0] = startCenter[0] - Math.abs(newBoundsWidth) / 2;
        newTopLeft[1] = startCenter[1] - Math.abs(newBoundsHeight) / 2;
      }
      const angle = stateAtResizeStart.angle;
      const rotatedTopLeft = pointRotateRads(
        pointFromPair(newTopLeft),
        startCenter,
        angle
      );
      const newCenter = pointFrom(
        newTopLeft[0] + Math.abs(newBoundsWidth) / 2,
        newTopLeft[1] + Math.abs(newBoundsHeight) / 2
      );
      const rotatedNewCenter = pointRotateRads(newCenter, startCenter, angle);
      newTopLeft = pointRotateRads(
        rotatedTopLeft,
        rotatedNewCenter,
        -angle
      );
      const newOrigin2 = [...newTopLeft];
      const linearElementXOffset = stateAtResizeStart.x - newBoundsX1;
      const linearElementYOffset = stateAtResizeStart.y - newBoundsY1;
      newOrigin2[0] += linearElementXOffset;
      newOrigin2[1] += linearElementYOffset;
      const nextX = newOrigin2[0];
      const nextY = newOrigin2[1];
      let rescaledElementPointsY;
      let rescaledPoints;
      if (isLinearElement(element) || isFreeDrawElement(element)) {
        rescaledElementPointsY = rescalePoints(
          1,
          eleNewHeight,
          stateAtResizeStart.points,
          true
        );
        rescaledPoints = rescalePoints(
          0,
          eleNewWidth,
          rescaledElementPointsY,
          true
        );
      }
      const resizedElement = {
        width: Math.abs(eleNewWidth),
        height: Math.abs(eleNewHeight),
        x: nextX,
        y: nextY,
        points: rescaledPoints
      };
      if ("scale" in element && "scale" in stateAtResizeStart) {
        mutateElement(element, {
          scale: [
            // defaulting because scaleX/Y can be 0/-0
            (Math.sign(newBoundsX2 - stateAtResizeStart.x) || stateAtResizeStart.scale[0]) * stateAtResizeStart.scale[0],
            (Math.sign(newBoundsY2 - stateAtResizeStart.y) || stateAtResizeStart.scale[1]) * stateAtResizeStart.scale[1]
          ]
        });
      }
      if (isArrowElement(element) && boundTextElement && shouldMaintainAspectRatio2) {
        const fontSize = resizedElement.width / element.width * boundTextElement.fontSize;
        if (fontSize < MIN_FONT_SIZE) {
          return;
        }
        boundTextFont.fontSize = fontSize;
      }
      if (resizedElement.width !== 0 && resizedElement.height !== 0 && Number.isFinite(resizedElement.x) && Number.isFinite(resizedElement.y)) {
        mutateElement(element, resizedElement);
        updateBoundElements(element, elementsMap, {
          oldSize: {
            width: stateAtResizeStart.width,
            height: stateAtResizeStart.height
          }
        });
        if (boundTextElement && boundTextFont != null) {
          mutateElement(boundTextElement, {
            fontSize: boundTextFont.fontSize
          });
        }
        handleBindTextResize(
          element,
          elementsMap,
          transformHandleDirection,
          shouldMaintainAspectRatio2
        );
      }
    };
    resizeMultipleElements = (originalElements, selectedElements, elementsMap, transformHandleType, shouldResizeFromCenter2, shouldMaintainAspectRatio2, pointerX, pointerY) => {
      const targetElements = selectedElements.reduce(
        (acc, element) => {
          const origElement = originalElements.get(element.id);
          if (origElement) {
            acc.push({ orig: origElement, latest: element });
          }
          return acc;
        },
        []
      );
      const boundTextElements = targetElements.reduce((acc, { orig }) => {
        if (!isLinearElement(orig)) {
          return acc;
        }
        const textId = getBoundTextElementId(orig);
        if (!textId) {
          return acc;
        }
        const text = originalElements.get(textId) ?? null;
        if (!isBoundToContainer(text)) {
          return acc;
        }
        const xy = LinearElementEditor.getBoundTextElementPosition(
          orig,
          text,
          elementsMap
        );
        return [...acc, { ...text, ...xy }];
      }, []);
      const { minX, minY, maxX, maxY, midX, midY } = getCommonBoundingBox(
        targetElements.map(({ orig }) => orig).concat(boundTextElements)
      );
      const width = maxX - minX;
      const height = maxY - minY;
      const direction = transformHandleType;
      const anchorsMap = {
        ne: pointFrom(minX, maxY),
        se: pointFrom(minX, minY),
        sw: pointFrom(maxX, minY),
        nw: pointFrom(maxX, maxY),
        e: pointFrom(minX, minY + height / 2),
        w: pointFrom(maxX, minY + height / 2),
        n: pointFrom(minX + width / 2, maxY),
        s: pointFrom(minX + width / 2, minY)
      };
      const [anchorX, anchorY] = shouldResizeFromCenter2 ? pointFrom(midX, midY) : anchorsMap[direction];
      const resizeFromCenterScale = shouldResizeFromCenter2 ? 2 : 1;
      const scale = Math.max(
        Math.abs(pointerX - anchorX) / width || 0,
        Math.abs(pointerY - anchorY) / height || 0
      ) * resizeFromCenterScale;
      if (scale === 0) {
        return;
      }
      let scaleX = direction.includes("e") || direction.includes("w") ? Math.abs(pointerX - anchorX) / width * resizeFromCenterScale : 1;
      let scaleY = direction.includes("n") || direction.includes("s") ? Math.abs(pointerY - anchorY) / height * resizeFromCenterScale : 1;
      const keepAspectRatio = shouldMaintainAspectRatio2 || targetElements.some(
        (item) => item.latest.angle !== 0 || isTextElement(item.latest) || isInGroup(item.latest)
      );
      if (keepAspectRatio) {
        scaleX = scale;
        scaleY = scale;
      }
      const flipConditionsMap = {
        ne: [pointerX < anchorX, pointerY > anchorY],
        se: [pointerX < anchorX, pointerY < anchorY],
        sw: [pointerX > anchorX, pointerY < anchorY],
        nw: [pointerX > anchorX, pointerY > anchorY],
        // e.g. when resizing from the "e" side, we do not need to consider changes in the `y` direction
        //      and therefore, we do not need to flip in the `y` direction at all
        e: [pointerX < anchorX, false],
        w: [pointerX > anchorX, false],
        n: [false, pointerY > anchorY],
        s: [false, pointerY < anchorY]
      };
      const [flipFactorX, flipFactorY] = flipConditionsMap[direction].map(
        (condition) => condition ? -1 : 1
      );
      const isFlippedByX = flipFactorX < 0;
      const isFlippedByY = flipFactorY < 0;
      const elementsAndUpdates = [];
      for (const { orig, latest } of targetElements) {
        if (isTextElement(orig) && isBoundToContainer(orig)) {
          continue;
        }
        const width2 = orig.width * scaleX;
        const height2 = orig.height * scaleY;
        const angle = normalizeRadians(
          orig.angle * flipFactorX * flipFactorY
        );
        const isLinearOrFreeDraw = isLinearElement(orig) || isFreeDrawElement(orig);
        const offsetX = orig.x - anchorX;
        const offsetY = orig.y - anchorY;
        const shiftX = isFlippedByX && !isLinearOrFreeDraw ? width2 : 0;
        const shiftY = isFlippedByY && !isLinearOrFreeDraw ? height2 : 0;
        const x = anchorX + flipFactorX * (offsetX * scaleX + shiftX);
        const y = anchorY + flipFactorY * (offsetY * scaleY + shiftY);
        const rescaledPoints = rescalePointsInElement(
          orig,
          width2 * flipFactorX,
          height2 * flipFactorY,
          false
        );
        const update = {
          x,
          y,
          width: width2,
          height: height2,
          angle,
          ...rescaledPoints
        };
        if (isImageElement(orig)) {
          update.scale = [orig.scale[0] * flipFactorX, orig.scale[1] * flipFactorY];
        }
        if (isTextElement(orig)) {
          const metrics = measureFontSizeFromWidth(orig, elementsMap, width2);
          if (!metrics) {
            return;
          }
          update.fontSize = metrics.size;
        }
        const boundTextElement = originalElements.get(
          getBoundTextElementId(orig) ?? ""
        );
        if (boundTextElement) {
          if (keepAspectRatio) {
            const newFontSize = boundTextElement.fontSize * scale;
            if (newFontSize < MIN_FONT_SIZE) {
              return;
            }
            update.boundTextFontSize = newFontSize;
          } else {
            update.boundTextFontSize = boundTextElement.fontSize;
          }
        }
        elementsAndUpdates.push({
          element: latest,
          update
        });
      }
      const elementsToUpdate = elementsAndUpdates.map(({ element }) => element);
      for (const {
        element,
        update: { boundTextFontSize, ...update }
      } of elementsAndUpdates) {
        const { angle } = update;
        const { width: oldWidth, height: oldHeight } = element;
        mutateElement(element, update, false);
        updateBoundElements(element, elementsMap, {
          simultaneouslyUpdated: elementsToUpdate,
          oldSize: { width: oldWidth, height: oldHeight }
        });
        const boundTextElement = getBoundTextElement(element, elementsMap);
        if (boundTextElement && boundTextFontSize) {
          mutateElement(
            boundTextElement,
            {
              fontSize: boundTextFontSize,
              angle: isLinearElement(element) ? void 0 : angle
            },
            false
          );
          handleBindTextResize(element, elementsMap, transformHandleType, true);
        }
      }
      Scene_default.getScene(elementsAndUpdates[0].element)?.triggerUpdate();
    };
    rotateMultipleElements = (originalElements, elements, elementsMap, pointerX, pointerY, shouldRotateWithDiscreteAngle2, centerX, centerY) => {
      let centerAngle = 5 * Math.PI / 2 + Math.atan2(pointerY - centerY, pointerX - centerX);
      if (shouldRotateWithDiscreteAngle2) {
        centerAngle += SHIFT_LOCKING_ANGLE / 2;
        centerAngle -= centerAngle % SHIFT_LOCKING_ANGLE;
      }
      elements.filter((element) => !isFrameLikeElement(element)).forEach((element) => {
        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
        const cx = (x1 + x2) / 2;
        const cy = (y1 + y2) / 2;
        const origAngle = originalElements.get(element.id)?.angle ?? element.angle;
        const [rotatedCX, rotatedCY] = pointRotateRads(
          pointFrom(cx, cy),
          pointFrom(centerX, centerY),
          centerAngle + origAngle - element.angle
        );
        if (isElbowArrow(element)) {
          const points = getArrowLocalFixedPoints(element, elementsMap);
          mutateElbowArrow(element, elementsMap, points);
        } else {
          mutateElement(
            element,
            {
              x: element.x + (rotatedCX - cx),
              y: element.y + (rotatedCY - cy),
              angle: normalizeRadians(centerAngle + origAngle)
            },
            false
          );
        }
        updateBoundElements(element, elementsMap, {
          simultaneouslyUpdated: elements
        });
        const boundText = getBoundTextElement(element, elementsMap);
        if (boundText && !isArrowElement(element)) {
          mutateElement(
            boundText,
            {
              x: boundText.x + (rotatedCX - cx),
              y: boundText.y + (rotatedCY - cy),
              angle: normalizeRadians(centerAngle + origAngle)
            },
            false
          );
        }
      });
      Scene_default.getScene(elements[0])?.triggerUpdate();
    };
    getResizeOffsetXY = (transformHandleType, selectedElements, elementsMap, x, y) => {
      const [x1, y1, x2, y2] = selectedElements.length === 1 ? getElementAbsoluteCoords(selectedElements[0], elementsMap) : getCommonBounds(selectedElements);
      const cx = (x1 + x2) / 2;
      const cy = (y1 + y2) / 2;
      const angle = selectedElements.length === 1 ? selectedElements[0].angle : 0;
      [x, y] = pointRotateRads(
        pointFrom(x, y),
        pointFrom(cx, cy),
        -angle
      );
      switch (transformHandleType) {
        case "n":
          return pointRotateRads(
            pointFrom(x - (x1 + x2) / 2, y - y1),
            pointFrom(0, 0),
            angle
          );
        case "s":
          return pointRotateRads(
            pointFrom(x - (x1 + x2) / 2, y - y2),
            pointFrom(0, 0),
            angle
          );
        case "w":
          return pointRotateRads(
            pointFrom(x - x1, y - (y1 + y2) / 2),
            pointFrom(0, 0),
            angle
          );
        case "e":
          return pointRotateRads(
            pointFrom(x - x2, y - (y1 + y2) / 2),
            pointFrom(0, 0),
            angle
          );
        case "nw":
          return pointRotateRads(pointFrom(x - x1, y - y1), pointFrom(0, 0), angle);
        case "ne":
          return pointRotateRads(pointFrom(x - x2, y - y1), pointFrom(0, 0), angle);
        case "sw":
          return pointRotateRads(pointFrom(x - x1, y - y2), pointFrom(0, 0), angle);
        case "se":
          return pointRotateRads(pointFrom(x - x2, y - y2), pointFrom(0, 0), angle);
        default:
          return [0, 0];
      }
    };
    getResizeArrowDirection = (transformHandleType, element) => {
      const [, [px, py]] = element.points;
      const isResizeEnd = transformHandleType === "nw" && (px < 0 || py < 0) || transformHandleType === "ne" && px >= 0 || transformHandleType === "sw" && px <= 0 || transformHandleType === "se" && (px > 0 || py > 0);
      return isResizeEnd ? "end" : "origin";
    };
  }
});

// element/dragElements.ts
var dragSelectedElements, calculateOffset, updateElementCoords, getDragOffsetXY, dragNewElement;
var init_dragElements = __esm({
  "element/dragElements.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_binding();
    init_bounds();
    init_mutateElement();
    init_sizeHelpers();
    init_textElement();
    init_typeChecks();
    init_utils2();
    init_constants();
    init_snapping();
    dragSelectedElements = (pointerDownState, _selectedElements, offset2, scene, snapOffset, gridSize) => {
      if (_selectedElements.length === 1 && isElbowArrow(_selectedElements[0]) && (_selectedElements[0].startBinding || _selectedElements[0].endBinding)) {
        return;
      }
      const selectedElements = _selectedElements.filter(
        (el) => !(isElbowArrow(el) && el.startBinding && el.endBinding)
      );
      const elementsToUpdate = new Set(
        selectedElements
      );
      const frames = selectedElements.filter((e) => isFrameLikeElement(e)).map((f) => f.id);
      if (frames.length > 0) {
        for (const element of scene.getNonDeletedElements()) {
          if (element.frameId !== null && frames.includes(element.frameId)) {
            elementsToUpdate.add(element);
          }
        }
      }
      const commonBounds = getCommonBounds(
        Array.from(elementsToUpdate).map(
          (el) => pointerDownState.originalElements.get(el.id) ?? el
        )
      );
      const adjustedOffset = calculateOffset(
        commonBounds,
        offset2,
        snapOffset,
        gridSize
      );
      elementsToUpdate.forEach((element) => {
        updateElementCoords(pointerDownState, element, adjustedOffset);
        if (
          // skip arrow labels since we calculate its position during render
          !isArrowElement(element)
        ) {
          const textElement = getBoundTextElement(
            element,
            scene.getNonDeletedElementsMap()
          );
          if (textElement) {
            updateElementCoords(pointerDownState, textElement, adjustedOffset);
          }
        }
        updateBoundElements(element, scene.getElementsMapIncludingDeleted(), {
          simultaneouslyUpdated: Array.from(elementsToUpdate)
        });
      });
    };
    calculateOffset = (commonBounds, dragOffset, snapOffset, gridSize) => {
      const [x, y] = commonBounds;
      let nextX = x + dragOffset.x + snapOffset.x;
      let nextY = y + dragOffset.y + snapOffset.y;
      if (snapOffset.x === 0 || snapOffset.y === 0) {
        const [nextGridX, nextGridY] = getGridPoint(
          x + dragOffset.x,
          y + dragOffset.y,
          gridSize
        );
        if (snapOffset.x === 0) {
          nextX = nextGridX;
        }
        if (snapOffset.y === 0) {
          nextY = nextGridY;
        }
      }
      return {
        x: nextX - x,
        y: nextY - y
      };
    };
    updateElementCoords = (pointerDownState, element, dragOffset) => {
      const originalElement = pointerDownState.originalElements.get(element.id) ?? element;
      const nextX = originalElement.x + dragOffset.x;
      const nextY = originalElement.y + dragOffset.y;
      mutateElement(element, {
        x: nextX,
        y: nextY
      });
    };
    getDragOffsetXY = (selectedElements, x, y) => {
      const [x1, y1] = getCommonBounds(selectedElements);
      return [x - x1, y - y1];
    };
    dragNewElement = ({
      newElement: newElement2,
      elementType,
      originX,
      originY,
      x,
      y,
      width,
      height,
      shouldMaintainAspectRatio: shouldMaintainAspectRatio2,
      shouldResizeFromCenter: shouldResizeFromCenter2,
      zoom,
      widthAspectRatio = null,
      originOffset = null,
      informMutation = true
    }) => {
      if (shouldMaintainAspectRatio2 && newElement2.type !== "selection") {
        if (widthAspectRatio) {
          height = width / widthAspectRatio;
        } else {
          if (Math.abs(y - originY) > Math.abs(x - originX)) {
            ({ width, height } = getPerfectElementSize(
              elementType,
              height,
              x < originX ? -width : width
            ));
          } else {
            ({ width, height } = getPerfectElementSize(
              elementType,
              width,
              y < originY ? -height : height
            ));
          }
          if (height < 0) {
            height = -height;
          }
        }
      }
      let newX = x < originX ? originX - width : originX;
      let newY = y < originY ? originY - height : originY;
      if (shouldResizeFromCenter2) {
        width += width;
        height += height;
        newX = originX - width / 2;
        newY = originY - height / 2;
      }
      let textAutoResize = null;
      if (isTextElement(newElement2)) {
        height = newElement2.height;
        const minWidth = getMinTextElementWidth(
          getFontString({
            fontSize: newElement2.fontSize,
            fontFamily: newElement2.fontFamily
          }),
          newElement2.lineHeight
        );
        width = Math.max(width, minWidth);
        if (Math.abs(x - originX) > TEXT_AUTOWRAP_THRESHOLD / zoom) {
          textAutoResize = {
            autoResize: false
          };
        }
        newY = originY;
        if (shouldResizeFromCenter2) {
          newX = originX - width / 2;
        }
      }
      if (width !== 0 && height !== 0) {
        mutateElement(
          newElement2,
          {
            x: newX + (originOffset?.x ?? 0),
            y: newY + (originOffset?.y ?? 0),
            width,
            height,
            ...textAutoResize
          },
          informMutation
        );
      }
    };
  }
});

// element/showSelectedShapeActions.ts
var showSelectedShapeActions;
var init_showSelectedShapeActions = __esm({
  "element/showSelectedShapeActions.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_scene();
    showSelectedShapeActions = (appState, elements) => Boolean(
      !appState.viewModeEnabled && (appState.activeTool.type !== "custom" && (appState.editingTextElement || appState.activeTool.type !== "selection" && appState.activeTool.type !== "eraser" && appState.activeTool.type !== "hand" && appState.activeTool.type !== "laser") || getSelectedElements(elements, appState).length)
    );
  }
});

// element/index.ts
var getSceneVersion, hashElementsVersion, hashString, getVisibleElements, getNonDeletedElements2, isNonDeletedElement, _clearElements, clearElementsForDatabase, clearElementsForExport;
var init_element = __esm({
  "element/index.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_sizeHelpers();
    init_typeChecks();
    init_newElement();
    init_bounds();
    init_transformHandles();
    init_resizeTest();
    init_resizeElements();
    init_dragElements();
    init_typeChecks();
    init_textElement();
    init_sizeHelpers();
    init_showSelectedShapeActions();
    getSceneVersion = (elements) => elements.reduce((acc, el) => acc + el.version, 0);
    hashElementsVersion = (elements) => {
      let hash = 5381;
      for (let i = 0; i < elements.length; i++) {
        hash = (hash << 5) + hash + elements[i].versionNonce;
      }
      return hash >>> 0;
    };
    hashString = (s) => {
      let hash = 5381;
      for (let i = 0; i < s.length; i++) {
        const char = s.charCodeAt(i);
        hash = (hash << 5) + hash + char;
      }
      return hash >>> 0;
    };
    getVisibleElements = (elements) => elements.filter(
      (el) => !el.isDeleted && !isInvisiblySmallElement(el)
    );
    getNonDeletedElements2 = (elements) => elements.filter((element) => !element.isDeleted);
    isNonDeletedElement = (element) => !element.isDeleted;
    _clearElements = (elements) => getNonDeletedElements2(elements).map(
      (element) => isLinearElementType(element.type) ? { ...element, lastCommittedPoint: null } : element
    );
    clearElementsForDatabase = (elements) => _clearElements(elements);
    clearElementsForExport = (elements) => _clearElements(elements);
  }
});

// scene/selection.ts
var excludeElementsInFramesFromSelection, getElementsWithinSelection, getVisibleAndNonSelectedElements, isSomeElementSelected, getCommonAttributeOfSelectedElements, getSelectedElements, getTargetElements, makeNextSelectedElementIds;
var init_selection = __esm({
  "scene/selection.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_typeChecks();
    init_frame();
    init_utils2();
    init_sizeHelpers();
    excludeElementsInFramesFromSelection = (selectedElements) => {
      const framesInSelection = /* @__PURE__ */ new Set();
      selectedElements.forEach((element) => {
        if (isFrameLikeElement(element)) {
          framesInSelection.add(element.id);
        }
      });
      return selectedElements.filter((element) => {
        if (element.frameId && framesInSelection.has(element.frameId)) {
          return false;
        }
        return true;
      });
    };
    getElementsWithinSelection = (elements, selection, elementsMap, excludeElementsInFrames = true) => {
      const [selectionX1, selectionY1, selectionX2, selectionY2] = getElementAbsoluteCoords(selection, elementsMap);
      let elementsInSelection = elements.filter((element) => {
        let [elementX1, elementY1, elementX2, elementY2] = getElementBounds(
          element,
          elementsMap
        );
        const containingFrame = getContainingFrame(element, elementsMap);
        if (containingFrame) {
          const [fx1, fy1, fx2, fy2] = getElementBounds(
            containingFrame,
            elementsMap
          );
          elementX1 = Math.max(fx1, elementX1);
          elementY1 = Math.max(fy1, elementY1);
          elementX2 = Math.min(fx2, elementX2);
          elementY2 = Math.min(fy2, elementY2);
        }
        return element.locked === false && element.type !== "selection" && !isBoundToContainer(element) && selectionX1 <= elementX1 && selectionY1 <= elementY1 && selectionX2 >= elementX2 && selectionY2 >= elementY2;
      });
      elementsInSelection = excludeElementsInFrames ? excludeElementsInFramesFromSelection(elementsInSelection) : elementsInSelection;
      elementsInSelection = elementsInSelection.filter((element) => {
        const containingFrame = getContainingFrame(element, elementsMap);
        if (containingFrame) {
          return elementOverlapsWithFrame(element, containingFrame, elementsMap);
        }
        return true;
      });
      return elementsInSelection;
    };
    getVisibleAndNonSelectedElements = (elements, selectedElements, appState, elementsMap) => {
      const selectedElementsSet = new Set(
        selectedElements.map((element) => element.id)
      );
      return elements.filter((element) => {
        const isVisible = isElementInViewport(
          element,
          appState.width,
          appState.height,
          appState,
          elementsMap
        );
        return !selectedElementsSet.has(element.id) && isVisible;
      });
    };
    isSomeElementSelected = function() {
      let lastElements = null;
      let lastSelectedElementIds = null;
      let isSelected = null;
      const ret = (elements, appState) => {
        if (isSelected != null && elements === lastElements && appState.selectedElementIds === lastSelectedElementIds) {
          return isSelected;
        }
        isSelected = elements.some(
          (element) => appState.selectedElementIds[element.id]
        );
        lastElements = elements;
        lastSelectedElementIds = appState.selectedElementIds;
        return isSelected;
      };
      ret.clearCache = () => {
        lastElements = null;
        lastSelectedElementIds = null;
        isSelected = null;
      };
      return ret;
    }();
    getCommonAttributeOfSelectedElements = (elements, appState, getAttribute) => {
      const attributes = Array.from(
        new Set(
          getSelectedElements(elements, appState).map(
            (element) => getAttribute(element)
          )
        )
      );
      return attributes.length === 1 ? attributes[0] : null;
    };
    getSelectedElements = (elements, appState, opts) => {
      const selectedElements = [];
      for (const element of elements.values()) {
        if (appState.selectedElementIds[element.id]) {
          selectedElements.push(element);
          continue;
        }
        if (opts?.includeBoundTextElement && isBoundToContainer(element) && appState.selectedElementIds[element?.containerId]) {
          selectedElements.push(element);
          continue;
        }
      }
      if (opts?.includeElementsInFrames) {
        const elementsToInclude = [];
        selectedElements.forEach((element) => {
          if (isFrameLikeElement(element)) {
            getFrameChildren(elements, element.id).forEach(
              (e) => elementsToInclude.push(e)
            );
          }
          elementsToInclude.push(element);
        });
        return elementsToInclude;
      }
      return selectedElements;
    };
    getTargetElements = (elements, appState) => appState.editingTextElement ? [appState.editingTextElement] : appState.newElement ? [appState.newElement] : getSelectedElements(elements, appState, {
      includeBoundTextElement: true
    });
    makeNextSelectedElementIds = (nextSelectedElementIds, prevState) => {
      if (isShallowEqual(prevState.selectedElementIds, nextSelectedElementIds)) {
        return prevState.selectedElementIds;
      }
      return nextSelectedElementIds;
    };
  }
});

// scene/scroll.ts
var isOutsideViewPort, centerScrollOn, calculateScrollCenter;
var init_scroll = __esm({
  "scene/scroll.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_element();
    init_utils2();
    isOutsideViewPort = (appState, cords) => {
      const [x1, y1, x2, y2] = cords;
      const { x: viewportX1, y: viewportY1 } = sceneCoordsToViewportCoords(
        { sceneX: x1, sceneY: y1 },
        appState
      );
      const { x: viewportX2, y: viewportY2 } = sceneCoordsToViewportCoords(
        { sceneX: x2, sceneY: y2 },
        appState
      );
      return viewportX2 - viewportX1 > appState.width || viewportY2 - viewportY1 > appState.height;
    };
    centerScrollOn = ({
      scenePoint,
      viewportDimensions,
      zoom,
      offsets
    }) => {
      let scrollX = (viewportDimensions.width - (offsets?.right ?? 0)) / 2 / zoom.value - scenePoint.x;
      scrollX += (offsets?.left ?? 0) / 2 / zoom.value;
      let scrollY = (viewportDimensions.height - (offsets?.bottom ?? 0)) / 2 / zoom.value - scenePoint.y;
      scrollY += (offsets?.top ?? 0) / 2 / zoom.value;
      return {
        scrollX,
        scrollY
      };
    };
    calculateScrollCenter = (elements, appState) => {
      elements = getVisibleElements(elements);
      if (!elements.length) {
        return {
          scrollX: 0,
          scrollY: 0
        };
      }
      let [x1, y1, x2, y2] = getCommonBounds(elements);
      if (isOutsideViewPort(appState, [x1, y1, x2, y2])) {
        [x1, y1, x2, y2] = getClosestElementBounds(
          elements,
          viewportCoordsToSceneCoords(
            { clientX: appState.scrollX, clientY: appState.scrollY },
            appState
          )
        );
      }
      const centerX = (x1 + x2) / 2;
      const centerY = (y1 + y2) / 2;
      return centerScrollOn({
        scenePoint: { x: centerX, y: centerY },
        viewportDimensions: { width: appState.width, height: appState.height },
        zoom: appState.zoom
      });
    };
  }
});

// scene/normalize.ts
var getNormalizedZoom, getNormalizedGridSize, getNormalizedGridStep;
var init_normalize = __esm({
  "scene/normalize.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_math();
    init_constants();
    getNormalizedZoom = (zoom) => {
      return clamp(round(zoom, 6), MIN_ZOOM, MAX_ZOOM);
    };
    getNormalizedGridSize = (gridStep) => {
      return clamp(Math.round(gridStep), 1, 100);
    };
    getNormalizedGridStep = (gridStep) => {
      return clamp(Math.round(gridStep), 1, 100);
    };
  }
});

// scene/index.ts
var init_scene = __esm({
  "scene/index.ts"() {
    "use strict";
    init_define_import_meta_env();
    init_selection();
    init_scroll();
    init_comparisons();
    init_normalize();
  }
});

// index.tsx
init_define_import_meta_env();
import React44, { useEffect as useEffect41 } from "react";

// components/InitializeApp.tsx
init_define_import_meta_env();
import { useEffect as useEffect2, useState as useState2 } from "react";

// components/LoadingMessage.tsx
init_define_import_meta_env();

// i18n.ts
init_define_import_meta_env();
import fallbackLangData from "./en-QJZTDUGK.json";
import percentages from "./percentages-UCQDHIQF.json";

// jotai.ts
init_define_import_meta_env();
import { unstable_createStore, useAtom } from "jotai";
import { useLayoutEffect } from "react";
var jotaiScope = Symbol();
var jotaiStore = unstable_createStore();

// i18n.ts
import { atom, useAtomValue } from "jotai";

// import("./locales/**/*.json") in i18n.ts
var globImport_locales_json = __glob({
  "./locales/ar-SA.json": () => import("./ar-SA-JA6F2FMJ.json"),
  "./locales/az-AZ.json": () => import("./az-AZ-GVIENQVH.json"),
  "./locales/bg-BG.json": () => import("./bg-BG-YFNNHCEP.json"),
  "./locales/bn-BD.json": () => import("./bn-BD-LMEIWSRD.json"),
  "./locales/ca-ES.json": () => import("./ca-ES-C2WGCLOT.json"),
  "./locales/cs-CZ.json": () => import("./cs-CZ-F2NDIQMB.json"),
  "./locales/da-DK.json": () => import("./da-DK-WBEQB3CJ.json"),
  "./locales/de-DE.json": () => import("./de-DE-VEIMCP7R.json"),
  "./locales/el-GR.json": () => import("./el-GR-TKRKG5GQ.json"),
  "./locales/en.json": () => import("./en-QJZTDUGK.json"),
  "./locales/es-ES.json": () => import("./es-ES-TOLWEZNW.json"),
  "./locales/eu-ES.json": () => import("./eu-ES-7CDRJQWJ.json"),
  "./locales/fa-IR.json": () => import("./fa-IR-527E2XGU.json"),
  "./locales/fi-FI.json": () => import("./fi-FI-NLQ7RQGZ.json"),
  "./locales/fr-FR.json": () => import("./fr-FR-KUHO4FLU.json"),
  "./locales/gl-ES.json": () => import("./gl-ES-NEXX3VBB.json"),
  "./locales/he-IL.json": () => import("./he-IL-MED2VGBZ.json"),
  "./locales/hi-IN.json": () => import("./hi-IN-5V633W7V.json"),
  "./locales/hu-HU.json": () => import("./hu-HU-2FOZGVGR.json"),
  "./locales/id-ID.json": () => import("./id-ID-I6BOLXTF.json"),
  "./locales/it-IT.json": () => import("./it-IT-WKPQOK4P.json"),
  "./locales/ja-JP.json": () => import("./ja-JP-VKA4ISRU.json"),
  "./locales/kaa.json": () => import("./kaa-IKPRSBNY.json"),
  "./locales/kab-KAB.json": () => import("./kab-KAB-IE4PHQTZ.json"),
  "./locales/kk-KZ.json": () => import("./kk-KZ-MNJT6XSV.json"),
  "./locales/km-KH.json": () => import("./km-KH-LADGDFXV.json"),
  "./locales/ko-KR.json": () => import("./ko-KR-XD7AVF2F.json"),
  "./locales/ku-TR.json": () => import("./ku-TR-4XBHKDQA.json"),
  "./locales/lt-LT.json": () => import("./lt-LT-QC35R4YH.json"),
  "./locales/lv-LV.json": () => import("./lv-LV-GSD5D3BA.json"),
  "./locales/mr-IN.json": () => import("./mr-IN-KOLSWM7Y.json"),
  "./locales/my-MM.json": () => import("./my-MM-M53KMUET.json"),
  "./locales/nb-NO.json": () => import("./nb-NO-XXC6U37A.json"),
  "./locales/nl-NL.json": () => import("./nl-NL-HCCJQEUO.json"),
  "./locales/nn-NO.json": () => import("./nn-NO-6P7Z2PI2.json"),
  "./locales/oc-FR.json": () => import("./oc-FR-JRJKPLNT.json"),
  "./locales/pa-IN.json": () => import("./pa-IN-LZWLEPIB.json"),
  "./locales/percentages.json": () => import("./percentages-UCQDHIQF.json"),
  "./locales/pl-PL.json": () => import("./pl-PL-3WBLCXI2.json"),
  "./locales/pt-BR.json": () => import("./pt-BR-O3ZPTUNW.json"),
  "./locales/pt-PT.json": () => import("./pt-PT-7AQTSAFO.json"),
  "./locales/ro-RO.json": () => import("./ro-RO-HJ65JYWV.json"),
  "./locales/ru-RU.json": () => import("./ru-RU-P7ROIYNC.json"),
  "./locales/si-LK.json": () => import("./si-LK-7ZSWVION.json"),
  "./locales/sk-SK.json": () => import("./sk-SK-NXVBGLYY.json"),
  "./locales/sl-SI.json": () => import("./sl-SI-VFTWOYNP.json"),
  "./locales/sv-SE.json": () => import("./sv-SE-YONBLQNW.json"),
  "./locales/ta-IN.json": () => import("./ta-IN-BSETPMLX.json"),
  "./locales/th-TH.json": () => import("./th-TH-URTRDITB.json"),
  "./locales/tr-TR.json": () => import("./tr-TR-N5SCAVTB.json"),
  "./locales/uk-UA.json": () => import("./uk-UA-LBCYVSQZ.json"),
  "./locales/vi-VN.json": () => import("./vi-VN-POZWLIUU.json"),
  "./locales/zh-CN.json": () => import("./zh-CN-FUF5V3SC.json"),
  "./locales/zh-HK.json": () => import("./zh-HK-OB4VW42C.json"),
  "./locales/zh-TW.json": () => import("./zh-TW-5JPVKOM7.json")
});

// i18n.ts
var COMPLETION_THRESHOLD = 85;
var defaultLang = { code: "en", label: "English" };
var languages = [
  defaultLang,
  ...[
    { code: "ar-SA", label: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629", rtl: true },
    { code: "bg-BG", label: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438" },
    { code: "ca-ES", label: "Catal\xE0" },
    { code: "cs-CZ", label: "\u010Cesky" },
    { code: "de-DE", label: "Deutsch" },
    { code: "el-GR", label: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC" },
    { code: "es-ES", label: "Espa\xF1ol" },
    { code: "eu-ES", label: "Euskara" },
    { code: "fa-IR", label: "\u0641\u0627\u0631\u0633\u06CC", rtl: true },
    { code: "fi-FI", label: "Suomi" },
    { code: "fr-FR", label: "Fran\xE7ais" },
    { code: "gl-ES", label: "Galego" },
    { code: "he-IL", label: "\u05E2\u05D1\u05E8\u05D9\u05EA", rtl: true },
    { code: "hi-IN", label: "\u0939\u093F\u0928\u094D\u0926\u0940" },
    { code: "hu-HU", label: "Magyar" },
    { code: "id-ID", label: "Bahasa Indonesia" },
    { code: "it-IT", label: "Italiano" },
    { code: "ja-JP", label: "\u65E5\u672C\u8A9E" },
    { code: "kab-KAB", label: "Taqbaylit" },
    { code: "kk-KZ", label: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456" },
    { code: "ko-KR", label: "\uD55C\uAD6D\uC5B4" },
    { code: "ku-TR", label: "Kurd\xEE" },
    { code: "lt-LT", label: "Lietuvi\u0173" },
    { code: "lv-LV", label: "Latvie\u0161u" },
    { code: "my-MM", label: "Burmese" },
    { code: "nb-NO", label: "Norsk bokm\xE5l" },
    { code: "nl-NL", label: "Nederlands" },
    { code: "nn-NO", label: "Norsk nynorsk" },
    { code: "oc-FR", label: "Occitan" },
    { code: "pa-IN", label: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40" },
    { code: "pl-PL", label: "Polski" },
    { code: "pt-BR", label: "Portugu\xEAs Brasileiro" },
    { code: "pt-PT", label: "Portugu\xEAs" },
    { code: "ro-RO", label: "Rom\xE2n\u0103" },
    { code: "ru-RU", label: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" },
    { code: "sk-SK", label: "Sloven\u010Dina" },
    { code: "sv-SE", label: "Svenska" },
    { code: "sl-SI", label: "Sloven\u0161\u010Dina" },
    { code: "tr-TR", label: "T\xFCrk\xE7e" },
    { code: "uk-UA", label: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430" },
    { code: "zh-CN", label: "\u7B80\u4F53\u4E2D\u6587" },
    { code: "zh-TW", label: "\u7E41\u9AD4\u4E2D\u6587" },
    { code: "vi-VN", label: "Ti\u1EBFng Vi\u1EC7t" },
    { code: "mr-IN", label: "\u092E\u0930\u093E\u0920\u0940" }
  ].filter(
    (lang) => percentages[lang.code] >= COMPLETION_THRESHOLD
  ).sort((left, right) => left.label > right.label ? 1 : -1)
];
var TEST_LANG_CODE = "__test__";
if (define_import_meta_env_default.DEV) {
  languages.unshift(
    { code: TEST_LANG_CODE, label: "test language" },
    {
      code: `${TEST_LANG_CODE}.rtl`,
      label: "\u202Atest language (rtl)\u202C",
      rtl: true
    }
  );
}
var currentLang = defaultLang;
var currentLangData = {};
var setLanguage = async (lang) => {
  currentLang = lang;
  document.documentElement.dir = currentLang.rtl ? "rtl" : "ltr";
  document.documentElement.lang = currentLang.code;
  if (lang.code.startsWith(TEST_LANG_CODE)) {
    currentLangData = {};
  } else {
    try {
      currentLangData = await globImport_locales_json(`./locales/${currentLang.code}.json`);
    } catch (error) {
      console.error(`Failed to load language ${lang.code}:`, error.message);
      currentLangData = fallbackLangData;
    }
  }
  jotaiStore.set(editorLangCodeAtom, lang.code);
};
var getLanguage = () => currentLang;
var findPartsForData = (data, parts) => {
  for (let index = 0; index < parts.length; ++index) {
    const part = parts[index];
    if (data[part] === void 0) {
      return void 0;
    }
    data = data[part];
  }
  if (typeof data !== "string") {
    return void 0;
  }
  return data;
};
var t = (path, replacement, fallback) => {
  if (currentLang.code.startsWith(TEST_LANG_CODE)) {
    const name = replacement ? `${path}(${JSON.stringify(replacement).slice(1, -1)})` : path;
    return `\u202A[[${name}]]\u202C`;
  }
  const parts = path.split(".");
  let translation2 = findPartsForData(currentLangData, parts) || findPartsForData(fallbackLangData, parts) || fallback;
  if (translation2 === void 0) {
    const errorMessage = `Can't find translation for ${path}`;
    if (define_import_meta_env_default.PROD) {
      console.warn(errorMessage);
      return "";
    }
    throw new Error(errorMessage);
  }
  if (replacement) {
    for (const key in replacement) {
      translation2 = translation2.replace(`{{${key}}}`, String(replacement[key]));
    }
  }
  return translation2;
};
var editorLangCodeAtom = atom(defaultLang.code);
var useI18n = () => {
  const langCode = useAtomValue(editorLangCodeAtom, jotaiScope);
  return { t, langCode };
};

// components/LoadingMessage.tsx
import { useState, useEffect } from "react";

// components/Spinner.tsx
init_define_import_meta_env();
import React from "react";
import { jsx } from "react/jsx-runtime";
var Spinner = ({
  size = "1em",
  circleWidth = 8,
  synchronized = false,
  className = ""
}) => {
  const mountTime = React.useRef(Date.now());
  const mountDelay = -(mountTime.current % 1600);
  return /* @__PURE__ */ jsx("div", { className: `Spinner ${className}`, children: /* @__PURE__ */ jsx(
    "svg",
    {
      viewBox: "0 0 100 100",
      style: {
        width: size,
        height: size,
        // fix for remounting causing spinner flicker
        ["--spinner-delay"]: synchronized ? `${mountDelay}ms` : 0
      },
      children: /* @__PURE__ */ jsx(
        "circle",
        {
          cx: "50",
          cy: "50",
          r: 50 - circleWidth / 2,
          strokeWidth: circleWidth,
          fill: "none",
          strokeMiterlimit: "10"
        }
      )
    }
  ) });
};
var Spinner_default = Spinner;

// components/LoadingMessage.tsx
init_constants();
import clsx from "clsx";
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var LoadingMessage = ({
  delay,
  theme
}) => {
  const [isWaiting, setIsWaiting] = useState(!!delay);
  useEffect(() => {
    if (!delay) {
      return;
    }
    const timer = setTimeout(() => {
      setIsWaiting(false);
    }, delay);
    return () => clearTimeout(timer);
  }, [delay]);
  if (isWaiting) {
    return null;
  }
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: clsx("LoadingMessage", {
        "LoadingMessage--dark": theme === THEME.DARK
      }),
      children: [
        /* @__PURE__ */ jsx2("div", { children: /* @__PURE__ */ jsx2(Spinner_default, {}) }),
        /* @__PURE__ */ jsx2("div", { className: "LoadingMessage-text", children: t("labels.loadingScene") })
      ]
    }
  );
};

// components/InitializeApp.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var InitializeApp = (props) => {
  const [loading, setLoading] = useState2(true);
  useEffect2(() => {
    const updateLang = async () => {
      await setLanguage(currentLang2);
      setLoading(false);
    };
    const currentLang2 = languages.find((lang) => lang.code === props.langCode) || defaultLang;
    updateLang();
  }, [props.langCode]);
  return loading ? /* @__PURE__ */ jsx3(LoadingMessage, { theme: props.theme }) : props.children;
};

// components/App.tsx
init_define_import_meta_env();
import React43, { useContext as useContext3 } from "react";
import { flushSync } from "react-dom";
import rough4 from "roughjs/bin/rough";
import clsx56 from "clsx";
import { nanoid as nanoid3 } from "nanoid";

// actions/index.ts
init_define_import_meta_env();

// actions/actionDeleteSelected.tsx
init_define_import_meta_env();
init_scene();
init_keys();

// components/ToolButton.tsx
init_define_import_meta_env();
import React4, { useEffect as useEffect3, useRef, useState as useState3 } from "react";
import clsx3 from "clsx";
init_errors();
init_utils2();
import { jsx as jsx5, jsxs as jsxs3 } from "react/jsx-runtime";
var ToolButton = React4.forwardRef((props, ref) => {
  const { id: excalId } = useExcalidrawContainer();
  const innerRef = React4.useRef(null);
  React4.useImperativeHandle(ref, () => innerRef.current);
  const sizeCn = `ToolIcon_size_${props.size}`;
  const [isLoading, setIsLoading] = useState3(false);
  const isMountedRef = useRef(true);
  const onClick = async (event) => {
    const ret = "onClick" in props && props.onClick?.(event);
    if (isPromiseLike(ret)) {
      try {
        setIsLoading(true);
        await ret;
      } catch (error) {
        if (!(error instanceof AbortError)) {
          throw error;
        } else {
          console.warn(error);
        }
      } finally {
        if (isMountedRef.current) {
          setIsLoading(false);
        }
      }
    }
  };
  useEffect3(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  const lastPointerTypeRef = useRef(null);
  if (props.type === "button" || props.type === "icon" || props.type === "submit") {
    const type = props.type === "icon" ? "button" : props.type;
    return /* @__PURE__ */ jsxs3(
      "button",
      {
        className: clsx3(
          "ToolIcon_type_button",
          sizeCn,
          props.className,
          props.visible && !props.hidden ? "ToolIcon_type_button--show" : "ToolIcon_type_button--hide",
          {
            ToolIcon: !props.hidden,
            "ToolIcon--selected": props.selected,
            "ToolIcon--plain": props.type === "icon"
          }
        ),
        style: props.style,
        "data-testid": props["data-testid"],
        hidden: props.hidden,
        title: props.title,
        "aria-label": props["aria-label"],
        type,
        onClick,
        ref: innerRef,
        disabled: isLoading || props.isLoading || !!props.disabled,
        children: [
          (props.icon || props.label) && /* @__PURE__ */ jsxs3(
            "div",
            {
              className: "ToolIcon__icon",
              "aria-hidden": "true",
              "aria-disabled": !!props.disabled,
              children: [
                props.icon || props.label,
                props.keyBindingLabel && /* @__PURE__ */ jsx5("span", { className: "ToolIcon__keybinding", children: props.keyBindingLabel }),
                props.isLoading && /* @__PURE__ */ jsx5(Spinner_default, {})
              ]
            }
          ),
          props.showAriaLabel && /* @__PURE__ */ jsxs3("div", { className: "ToolIcon__label", children: [
            props["aria-label"],
            " ",
            isLoading && /* @__PURE__ */ jsx5(Spinner_default, {})
          ] }),
          props.children
        ]
      }
    );
  }
  return /* @__PURE__ */ jsxs3(
    "label",
    {
      className: clsx3("ToolIcon", props.className),
      title: props.title,
      onPointerDown: (event) => {
        lastPointerTypeRef.current = event.pointerType || null;
        props.onPointerDown?.({ pointerType: event.pointerType || null });
      },
      onPointerUp: () => {
        requestAnimationFrame(() => {
          lastPointerTypeRef.current = null;
        });
      },
      children: [
        /* @__PURE__ */ jsx5(
          "input",
          {
            className: `ToolIcon_type_radio ${sizeCn}`,
            type: "radio",
            name: props.name,
            "aria-label": props["aria-label"],
            "aria-keyshortcuts": props["aria-keyshortcuts"],
            "data-testid": props["data-testid"],
            id: `${excalId}-${props.id}`,
            onChange: () => {
              props.onChange?.({ pointerType: lastPointerTypeRef.current });
            },
            checked: props.checked,
            ref: innerRef
          }
        ),
        /* @__PURE__ */ jsxs3("div", { className: "ToolIcon__icon", children: [
          props.icon,
          props.keyBindingLabel && /* @__PURE__ */ jsx5("span", { className: "ToolIcon__keybinding", children: props.keyBindingLabel })
        ] })
      ]
    }
  );
});
ToolButton.defaultProps = {
  visible: true,
  className: "",
  size: "medium"
};
ToolButton.displayName = "ToolButton";

// actions/actionDeleteSelected.tsx
init_register();
init_element();
init_mutateElement();
init_groups();
init_linearElementEditor();
init_binding();
init_typeChecks();
init_utils2();
init_icons();
init_store();
init_routing();
import { jsx as jsx6 } from "react/jsx-runtime";
var deleteSelectedElements = (elements, appState, app) => {
  const elementsMap = app.scene.getNonDeletedElementsMap();
  const framesToBeDeleted = new Set(
    getSelectedElements(
      elements.filter((el) => isFrameLikeElement(el)),
      appState
    ).map((el) => el.id)
  );
  return {
    elements: elements.map((el) => {
      if (appState.selectedElementIds[el.id]) {
        if (el.boundElements) {
          el.boundElements.forEach((candidate) => {
            const bound = app.scene.getNonDeletedElementsMap().get(candidate.id);
            if (bound && isElbowArrow(bound)) {
              mutateElement(bound, {
                startBinding: el.id === bound.startBinding?.elementId ? null : bound.startBinding,
                endBinding: el.id === bound.endBinding?.elementId ? null : bound.endBinding
              });
              mutateElbowArrow(bound, elementsMap, bound.points);
            }
          });
        }
        return newElementWith(el, { isDeleted: true });
      }
      if (el.frameId && framesToBeDeleted.has(el.frameId)) {
        return newElementWith(el, { isDeleted: true });
      }
      if (isBoundToContainer(el) && appState.selectedElementIds[el.containerId]) {
        return newElementWith(el, { isDeleted: true });
      }
      return el;
    }),
    appState: {
      ...appState,
      selectedElementIds: {},
      selectedGroupIds: {}
    }
  };
};
var handleGroupEditingState = (appState, elements) => {
  if (appState.editingGroupId) {
    const siblingElements = getElementsInGroup(
      getNonDeletedElements2(elements),
      appState.editingGroupId
    );
    if (siblingElements.length) {
      return {
        ...appState,
        selectedElementIds: { [siblingElements[0].id]: true }
      };
    }
  }
  return appState;
};
var actionDeleteSelected = register({
  name: "deleteSelectedElements",
  label: "labels.delete",
  icon: TrashIcon,
  trackEvent: { category: "element", action: "delete" },
  perform: (elements, appState, formData, app) => {
    if (appState.editingLinearElement) {
      const {
        elementId,
        selectedPointsIndices,
        startBindingElement,
        endBindingElement
      } = appState.editingLinearElement;
      const elementsMap = app.scene.getNonDeletedElementsMap();
      const element = LinearElementEditor.getElement(elementId, elementsMap);
      if (!element) {
        return false;
      }
      if (selectedPointsIndices == null) {
        return false;
      }
      if (element.points.length < 2) {
        const nextElements2 = elements.map((el) => {
          if (el.id === element.id) {
            return newElementWith(el, { isDeleted: true });
          }
          return el;
        });
        const nextAppState2 = handleGroupEditingState(appState, nextElements2);
        return {
          elements: nextElements2,
          appState: {
            ...nextAppState2,
            editingLinearElement: null
          },
          storeAction: StoreAction.CAPTURE
        };
      }
      const binding = {
        startBindingElement: selectedPointsIndices?.includes(0) ? null : startBindingElement,
        endBindingElement: selectedPointsIndices?.includes(
          element.points.length - 1
        ) ? null : endBindingElement
      };
      LinearElementEditor.deletePoints(
        element,
        selectedPointsIndices,
        elementsMap
      );
      return {
        elements,
        appState: {
          ...appState,
          editingLinearElement: {
            ...appState.editingLinearElement,
            ...binding,
            selectedPointsIndices: selectedPointsIndices?.[0] > 0 ? [selectedPointsIndices[0] - 1] : [0]
          }
        },
        storeAction: StoreAction.CAPTURE
      };
    }
    let { elements: nextElements, appState: nextAppState } = deleteSelectedElements(elements, appState, app);
    fixBindingsAfterDeletion(
      nextElements,
      elements.filter(({ id }) => appState.selectedElementIds[id])
    );
    nextAppState = handleGroupEditingState(nextAppState, nextElements);
    return {
      elements: nextElements,
      appState: {
        ...nextAppState,
        activeTool: updateActiveTool(appState, { type: "selection" }),
        multiElement: null,
        activeEmbeddable: null
      },
      storeAction: isSomeElementSelected(
        getNonDeletedElements2(elements),
        appState
      ) ? StoreAction.CAPTURE : StoreAction.NONE
    };
  },
  keyTest: (event, appState, elements) => (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) && !event[KEYS.CTRL_OR_CMD],
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsx6(
    ToolButton,
    {
      type: "button",
      icon: TrashIcon,
      title: t("labels.delete"),
      "aria-label": t("labels.delete"),
      onClick: () => updateData(null),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});

// actions/actionZindex.tsx
init_define_import_meta_env();

// zindex.ts
init_define_import_meta_env();
init_typeChecks();
init_fractionalIndex();
init_groups();
init_scene();
init_Scene();
init_utils2();
var isOfTargetFrame = (element, frameId) => {
  return element.frameId === frameId || element.id === frameId;
};
var getIndicesToMove = (elements, appState, elementsToBeMoved) => {
  let selectedIndices = [];
  let deletedIndices = [];
  let includeDeletedIndex = null;
  let index = -1;
  const selectedElementIds = arrayToMap(
    elementsToBeMoved ? elementsToBeMoved : getSelectedElements(elements, appState, {
      includeBoundTextElement: true,
      includeElementsInFrames: true
    })
  );
  while (++index < elements.length) {
    const element = elements[index];
    if (selectedElementIds.get(element.id)) {
      if (deletedIndices.length) {
        selectedIndices = selectedIndices.concat(deletedIndices);
        deletedIndices = [];
      }
      selectedIndices.push(index);
      includeDeletedIndex = index + 1;
    } else if (element.isDeleted && includeDeletedIndex === index) {
      includeDeletedIndex = index + 1;
      deletedIndices.push(index);
    } else {
      deletedIndices = [];
    }
  }
  return selectedIndices;
};
var toContiguousGroups = (array) => {
  let cursor = 0;
  return array.reduce((acc, value, index) => {
    if (index > 0 && array[index - 1] !== value - 1) {
      cursor = ++cursor;
    }
    (acc[cursor] || (acc[cursor] = [])).push(value);
    return acc;
  }, []);
};
var getTargetIndexAccountingForBinding = (nextElement, elements, direction) => {
  if ("containerId" in nextElement && nextElement.containerId) {
    const containerElement = Scene_default.getScene(nextElement).getElement(
      nextElement.containerId
    );
    if (containerElement) {
      return direction === "left" ? Math.min(
        elements.indexOf(containerElement),
        elements.indexOf(nextElement)
      ) : Math.max(
        elements.indexOf(containerElement),
        elements.indexOf(nextElement)
      );
    }
  } else {
    const boundElementId = nextElement.boundElements?.find(
      (binding) => binding.type !== "arrow"
    )?.id;
    if (boundElementId) {
      const boundTextElement = Scene_default.getScene(nextElement).getElement(boundElementId);
      if (boundTextElement) {
        return direction === "left" ? Math.min(
          elements.indexOf(boundTextElement),
          elements.indexOf(nextElement)
        ) : Math.max(
          elements.indexOf(boundTextElement),
          elements.indexOf(nextElement)
        );
      }
    }
  }
};
var getContiguousFrameRangeElements = (allElements, frameId) => {
  let rangeStart = -1;
  let rangeEnd = -1;
  allElements.forEach((element, index) => {
    if (isOfTargetFrame(element, frameId)) {
      if (rangeStart === -1) {
        rangeStart = index;
      }
      rangeEnd = index;
    }
  });
  if (rangeStart === -1) {
    return [];
  }
  return allElements.slice(rangeStart, rangeEnd + 1);
};
var getTargetIndex = (appState, elements, boundaryIndex, direction, containingFrame) => {
  const sourceElement = elements[boundaryIndex];
  const indexFilter = (element) => {
    if (element.isDeleted) {
      return false;
    }
    if (containingFrame) {
      return element.frameId === containingFrame;
    }
    if (appState.editingGroupId) {
      return element.groupIds.includes(appState.editingGroupId);
    }
    return true;
  };
  const candidateIndex = direction === "left" ? findLastIndex(
    elements,
    (el) => indexFilter(el),
    Math.max(0, boundaryIndex - 1)
  ) : findIndex(elements, (el) => indexFilter(el), boundaryIndex + 1);
  const nextElement = elements[candidateIndex];
  if (!nextElement) {
    return -1;
  }
  if (appState.editingGroupId) {
    if (
      // candidate element is a sibling in current editing group → return
      sourceElement?.groupIds.join("") === nextElement?.groupIds.join("")
    ) {
      return getTargetIndexAccountingForBinding(nextElement, elements, direction) ?? candidateIndex;
    } else if (!nextElement?.groupIds.includes(appState.editingGroupId)) {
      return -1;
    }
  }
  if (!containingFrame && (nextElement.frameId || isFrameLikeElement(nextElement))) {
    const frameElements = getContiguousFrameRangeElements(
      elements,
      nextElement.frameId || nextElement.id
    );
    return direction === "left" ? elements.indexOf(frameElements[0]) : elements.indexOf(frameElements[frameElements.length - 1]);
  }
  if (!nextElement.groupIds.length) {
    return getTargetIndexAccountingForBinding(nextElement, elements, direction) ?? candidateIndex;
  }
  const siblingGroupId = appState.editingGroupId ? nextElement.groupIds[nextElement.groupIds.indexOf(appState.editingGroupId) - 1] : nextElement.groupIds[nextElement.groupIds.length - 1];
  const elementsInSiblingGroup = getElementsInGroup(elements, siblingGroupId);
  if (elementsInSiblingGroup.length) {
    return direction === "left" ? elements.indexOf(elementsInSiblingGroup[0]) : elements.indexOf(
      elementsInSiblingGroup[elementsInSiblingGroup.length - 1]
    );
  }
  return candidateIndex;
};
var getTargetElementsMap = (elements, indices) => {
  return indices.reduce((acc, index) => {
    const element = elements[index];
    acc.set(element.id, element);
    return acc;
  }, /* @__PURE__ */ new Map());
};
var shiftElementsByOne = (elements, appState, direction) => {
  const indicesToMove = getIndicesToMove(elements, appState);
  const targetElementsMap = getTargetElementsMap(elements, indicesToMove);
  let groupedIndices = toContiguousGroups(indicesToMove);
  if (direction === "right") {
    groupedIndices = groupedIndices.reverse();
  }
  const selectedFrames = new Set(
    indicesToMove.filter((idx) => isFrameLikeElement(elements[idx])).map((idx) => elements[idx].id)
  );
  groupedIndices.forEach((indices, i) => {
    const leadingIndex = indices[0];
    const trailingIndex = indices[indices.length - 1];
    const boundaryIndex = direction === "left" ? leadingIndex : trailingIndex;
    const containingFrame = indices.some((idx) => {
      const el = elements[idx];
      return el.frameId && selectedFrames.has(el.frameId);
    }) ? null : elements[boundaryIndex]?.frameId;
    const targetIndex = getTargetIndex(
      appState,
      elements,
      boundaryIndex,
      direction,
      containingFrame
    );
    if (targetIndex === -1 || boundaryIndex === targetIndex) {
      return;
    }
    const leadingElements = direction === "left" ? elements.slice(0, targetIndex) : elements.slice(0, leadingIndex);
    const targetElements = elements.slice(leadingIndex, trailingIndex + 1);
    const displacedElements = direction === "left" ? elements.slice(targetIndex, leadingIndex) : elements.slice(trailingIndex + 1, targetIndex + 1);
    const trailingElements = direction === "left" ? elements.slice(trailingIndex + 1) : elements.slice(targetIndex + 1);
    elements = direction === "left" ? [
      ...leadingElements,
      ...targetElements,
      ...displacedElements,
      ...trailingElements
    ] : [
      ...leadingElements,
      ...displacedElements,
      ...targetElements,
      ...trailingElements
    ];
  });
  syncMovedIndices(elements, targetElementsMap);
  return elements;
};
var shiftElementsToEnd = (elements, appState, direction, containingFrame, elementsToBeMoved) => {
  const indicesToMove = getIndicesToMove(elements, appState, elementsToBeMoved);
  const targetElementsMap = getTargetElementsMap(elements, indicesToMove);
  const displacedElements = [];
  let leadingIndex;
  let trailingIndex;
  if (direction === "left") {
    if (containingFrame) {
      leadingIndex = findIndex(
        elements,
        (el) => isOfTargetFrame(el, containingFrame)
      );
    } else if (appState.editingGroupId) {
      const groupElements = getElementsInGroup(
        elements,
        appState.editingGroupId
      );
      if (!groupElements.length) {
        return elements;
      }
      leadingIndex = elements.indexOf(groupElements[0]);
    } else {
      leadingIndex = 0;
    }
    trailingIndex = indicesToMove[indicesToMove.length - 1];
  } else {
    if (containingFrame) {
      trailingIndex = findLastIndex(
        elements,
        (el) => isOfTargetFrame(el, containingFrame)
      );
    } else if (appState.editingGroupId) {
      const groupElements = getElementsInGroup(
        elements,
        appState.editingGroupId
      );
      if (!groupElements.length) {
        return elements;
      }
      trailingIndex = elements.indexOf(groupElements[groupElements.length - 1]);
    } else {
      trailingIndex = elements.length - 1;
    }
    leadingIndex = indicesToMove[0];
  }
  if (leadingIndex === -1) {
    leadingIndex = 0;
  }
  for (let index = leadingIndex; index < trailingIndex + 1; index++) {
    if (!indicesToMove.includes(index)) {
      displacedElements.push(elements[index]);
    }
  }
  const targetElements = Array.from(targetElementsMap.values());
  const leadingElements = elements.slice(0, leadingIndex);
  const trailingElements = elements.slice(trailingIndex + 1);
  const nextElements = direction === "left" ? [
    ...leadingElements,
    ...targetElements,
    ...displacedElements,
    ...trailingElements
  ] : [
    ...leadingElements,
    ...displacedElements,
    ...targetElements,
    ...trailingElements
  ];
  syncMovedIndices(nextElements, targetElementsMap);
  return nextElements;
};
function shiftElementsAccountingForFrames(allElements, appState, direction, shiftFunction) {
  const elementsToMove = arrayToMap(
    getSelectedElements(allElements, appState, {
      includeBoundTextElement: true,
      includeElementsInFrames: true
    })
  );
  const frameAwareContiguousElementsToMove = { regularElements: [], frameChildren: /* @__PURE__ */ new Map() };
  const fullySelectedFrames = /* @__PURE__ */ new Set();
  for (const element of allElements) {
    if (elementsToMove.has(element.id) && isFrameLikeElement(element)) {
      fullySelectedFrames.add(element.id);
    }
  }
  for (const element of allElements) {
    if (elementsToMove.has(element.id)) {
      if (isFrameLikeElement(element) || element.frameId && fullySelectedFrames.has(element.frameId)) {
        frameAwareContiguousElementsToMove.regularElements.push(element);
      } else if (!element.frameId) {
        frameAwareContiguousElementsToMove.regularElements.push(element);
      } else {
        const frameChildren = frameAwareContiguousElementsToMove.frameChildren.get(
          element.frameId
        ) || [];
        frameChildren.push(element);
        frameAwareContiguousElementsToMove.frameChildren.set(
          element.frameId,
          frameChildren
        );
      }
    }
  }
  let nextElements = allElements;
  const frameChildrenSets = Array.from(
    frameAwareContiguousElementsToMove.frameChildren.entries()
  );
  for (const [frameId, children] of frameChildrenSets) {
    nextElements = shiftFunction(
      allElements,
      appState,
      direction,
      frameId,
      children
    );
  }
  return shiftFunction(
    nextElements,
    appState,
    direction,
    null,
    frameAwareContiguousElementsToMove.regularElements
  );
}
var moveOneLeft = (allElements, appState) => {
  return shiftElementsByOne(allElements, appState, "left");
};
var moveOneRight = (allElements, appState) => {
  return shiftElementsByOne(allElements, appState, "right");
};
var moveAllLeft = (allElements, appState) => {
  return shiftElementsAccountingForFrames(
    allElements,
    appState,
    "left",
    shiftElementsToEnd
  );
};
var moveAllRight = (allElements, appState) => {
  return shiftElementsAccountingForFrames(
    allElements,
    appState,
    "right",
    shiftElementsToEnd
  );
};

// actions/actionZindex.tsx
init_keys();
init_utils2();
init_register();
init_icons();
init_constants();
init_store();
import { jsx as jsx7 } from "react/jsx-runtime";
var actionSendBackward = register({
  name: "sendBackward",
  label: "labels.sendBackward",
  keywords: ["move down", "zindex", "layer"],
  icon: SendBackwardIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState) => {
    return {
      elements: moveOneLeft(elements, appState),
      appState,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyPriority: 40,
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === CODES.BRACKET_LEFT,
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx7(
    "button",
    {
      type: "button",
      className: "zIndexButton",
      onClick: () => updateData(null),
      title: `${t("labels.sendBackward")} \u2014 ${getShortcutKey("CtrlOrCmd+[")}`,
      children: SendBackwardIcon
    }
  )
});
var actionBringForward = register({
  name: "bringForward",
  label: "labels.bringForward",
  keywords: ["move up", "zindex", "layer"],
  icon: BringForwardIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState) => {
    return {
      elements: moveOneRight(elements, appState),
      appState,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyPriority: 40,
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === CODES.BRACKET_RIGHT,
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx7(
    "button",
    {
      type: "button",
      className: "zIndexButton",
      onClick: () => updateData(null),
      title: `${t("labels.bringForward")} \u2014 ${getShortcutKey("CtrlOrCmd+]")}`,
      children: BringForwardIcon
    }
  )
});
var actionSendToBack = register({
  name: "sendToBack",
  label: "labels.sendToBack",
  keywords: ["move down", "zindex", "layer"],
  icon: SendToBackIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState) => {
    return {
      elements: moveAllLeft(elements, appState),
      appState,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => isDarwin ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.BRACKET_LEFT : event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.code === CODES.BRACKET_LEFT,
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx7(
    "button",
    {
      type: "button",
      className: "zIndexButton",
      onClick: () => updateData(null),
      title: `${t("labels.sendToBack")} \u2014 ${isDarwin ? getShortcutKey("CtrlOrCmd+Alt+[") : getShortcutKey("CtrlOrCmd+Shift+[")}`,
      children: SendToBackIcon
    }
  )
});
var actionBringToFront = register({
  name: "bringToFront",
  label: "labels.bringToFront",
  keywords: ["move up", "zindex", "layer"],
  icon: BringToFrontIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState) => {
    return {
      elements: moveAllRight(elements, appState),
      appState,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => isDarwin ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.BRACKET_RIGHT : event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.code === CODES.BRACKET_RIGHT,
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx7(
    "button",
    {
      type: "button",
      className: "zIndexButton",
      onClick: (event) => updateData(null),
      title: `${t("labels.bringToFront")} \u2014 ${isDarwin ? getShortcutKey("CtrlOrCmd+Alt+]") : getShortcutKey("CtrlOrCmd+Shift+]")}`,
      children: BringToFrontIcon
    }
  )
});

// actions/actionSelectAll.ts
init_define_import_meta_env();
init_keys();
init_register();
init_groups();
init_element();
init_typeChecks();
init_linearElementEditor();
init_selection();
init_icons();
init_store();
var actionSelectAll = register({
  name: "selectAll",
  label: "labels.selectAll",
  icon: selectAllIcon,
  trackEvent: { category: "canvas" },
  viewMode: false,
  perform: (elements, appState, value, app) => {
    if (appState.editingLinearElement) {
      return false;
    }
    const selectedElementIds = excludeElementsInFramesFromSelection(
      elements.filter(
        (element) => !element.isDeleted && !(isTextElement(element) && element.containerId) && !element.locked
      )
    ).reduce((map, element) => {
      map[element.id] = true;
      return map;
    }, {});
    return {
      appState: {
        ...appState,
        ...selectGroupsForSelectedElements(
          {
            editingGroupId: null,
            selectedElementIds
          },
          getNonDeletedElements2(elements),
          appState,
          app
        ),
        selectedLinearElement: (
          // single linear element selected
          Object.keys(selectedElementIds).length === 1 && isLinearElement(elements[0]) ? new LinearElementEditor(elements[0]) : null
        )
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.A
});

// actions/actionDuplicateSelection.tsx
init_define_import_meta_env();
init_keys();
init_register();
init_element();
init_scene();
init_utils2();
init_linearElementEditor();
init_groups();
init_binding();
init_constants();
init_textElement();
init_typeChecks();

// element/sortElements.ts
init_define_import_meta_env();
init_utils2();
var normalizeGroupElementOrder = (elements) => {
  const origElements = elements.slice();
  const sortedElements = /* @__PURE__ */ new Set();
  const orderInnerGroups = (elements2) => {
    const firstGroupSig = elements2[0]?.groupIds?.join("");
    const aGroup = [elements2[0]];
    const bGroup = [];
    for (const element of elements2.slice(1)) {
      if (element.groupIds?.join("") === firstGroupSig) {
        aGroup.push(element);
      } else {
        bGroup.push(element);
      }
    }
    return bGroup.length ? [...aGroup, ...orderInnerGroups(bGroup)] : aGroup;
  };
  const groupHandledElements = /* @__PURE__ */ new Map();
  origElements.forEach((element, idx) => {
    if (groupHandledElements.has(element.id)) {
      return;
    }
    if (element.groupIds?.length) {
      const topGroup = element.groupIds[element.groupIds.length - 1];
      const groupElements = origElements.slice(idx).filter((element2) => {
        const ret = element2?.groupIds?.some((id) => id === topGroup);
        if (ret) {
          groupHandledElements.set(element2.id, true);
        }
        return ret;
      });
      for (const elem of orderInnerGroups(groupElements)) {
        sortedElements.add(elem);
      }
    } else {
      sortedElements.add(element);
    }
  });
  if (sortedElements.size !== elements.length) {
    console.error("normalizeGroupElementOrder: lost some elements... bailing!");
    return elements;
  }
  return [...sortedElements];
};
var normalizeBoundElementsOrder = (elements) => {
  const elementsMap = arrayToMapWithIndex(elements);
  const origElements = elements.slice();
  const sortedElements = /* @__PURE__ */ new Set();
  origElements.forEach((element, idx) => {
    if (!element) {
      return;
    }
    if (element.boundElements?.length) {
      sortedElements.add(element);
      origElements[idx] = null;
      element.boundElements.forEach((boundElement) => {
        const child = elementsMap.get(boundElement.id);
        if (child && boundElement.type === "text") {
          sortedElements.add(child[0]);
          origElements[child[1]] = null;
        }
      });
    } else if (element.type === "text" && element.containerId) {
      const parent = elementsMap.get(element.containerId);
      if (!parent?.[0].boundElements?.find((x) => x.id === element.id)) {
        sortedElements.add(element);
        origElements[idx] = null;
      }
    } else {
      sortedElements.add(element);
      origElements[idx] = null;
    }
  });
  if (sortedElements.size !== elements.length) {
    console.error(
      "normalizeBoundElementsOrder: lost some elements... bailing!"
    );
    return elements;
  }
  return [...sortedElements];
};
var normalizeElementOrder = (elements) => {
  const ret = normalizeBoundElementsOrder(normalizeGroupElementOrder(elements));
  return ret;
};

// actions/actionDuplicateSelection.tsx
init_icons();
init_frame();
init_selection();
init_fractionalIndex();
init_store();
import { jsx as jsx8 } from "react/jsx-runtime";
var actionDuplicateSelection = register({
  name: "duplicateSelection",
  label: "labels.duplicateSelection",
  icon: DuplicateIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState, formData, app) => {
    if (appState.editingLinearElement) {
      try {
        const newAppState = LinearElementEditor.duplicateSelectedPoints(
          appState,
          app.scene.getNonDeletedElementsMap()
        );
        return {
          elements,
          appState: newAppState,
          storeAction: StoreAction.CAPTURE
        };
      } catch {
        return false;
      }
    }
    return {
      ...duplicateElements2(elements, appState),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.D,
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsx8(
    ToolButton,
    {
      type: "button",
      icon: DuplicateIcon,
      title: `${t("labels.duplicateSelection")} \u2014 ${getShortcutKey(
        "CtrlOrCmd+D"
      )}`,
      "aria-label": t("labels.duplicateSelection"),
      onClick: () => updateData(null),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var duplicateElements2 = (elements, appState) => {
  const sortedElements = normalizeElementOrder(elements);
  const groupIdMap = /* @__PURE__ */ new Map();
  const newElements = [];
  const oldElements = [];
  const oldIdToDuplicatedId = /* @__PURE__ */ new Map();
  const duplicatedElementsMap = /* @__PURE__ */ new Map();
  const duplicateAndOffsetElement = (element) => {
    const newElement2 = duplicateElement(
      appState.editingGroupId,
      groupIdMap,
      element,
      {
        x: element.x + DEFAULT_GRID_SIZE / 2,
        y: element.y + DEFAULT_GRID_SIZE / 2
      }
    );
    duplicatedElementsMap.set(newElement2.id, newElement2);
    oldIdToDuplicatedId.set(element.id, newElement2.id);
    oldElements.push(element);
    newElements.push(newElement2);
    return newElement2;
  };
  const idsOfElementsToDuplicate = arrayToMap(
    getSelectedElements(sortedElements, appState, {
      includeBoundTextElement: true,
      includeElementsInFrames: true
    })
  );
  const processedIds = /* @__PURE__ */ new Map();
  const markAsProcessed = (elements2) => {
    for (const element of elements2) {
      processedIds.set(element.id, true);
    }
    return elements2;
  };
  const elementsWithClones = [];
  let index = -1;
  while (++index < sortedElements.length) {
    const element = sortedElements[index];
    if (processedIds.get(element.id)) {
      continue;
    }
    const boundTextElement = getBoundTextElement(element, arrayToMap(elements));
    const isElementAFrameLike = isFrameLikeElement(element);
    if (idsOfElementsToDuplicate.get(element.id)) {
      if (element.groupIds.length || boundTextElement || isElementAFrameLike) {
        const groupId = getSelectedGroupForElement(appState, element);
        if (groupId) {
          const groupElements = getElementsInGroup(
            sortedElements,
            groupId
          ).flatMap(
            (element2) => isFrameLikeElement(element2) ? [...getFrameChildren(elements, element2.id), element2] : [element2]
          );
          elementsWithClones.push(
            ...markAsProcessed([
              ...groupElements,
              ...groupElements.map(
                (element2) => duplicateAndOffsetElement(element2)
              )
            ])
          );
          continue;
        }
        if (boundTextElement) {
          elementsWithClones.push(
            ...markAsProcessed([
              element,
              boundTextElement,
              duplicateAndOffsetElement(element),
              duplicateAndOffsetElement(boundTextElement)
            ])
          );
          continue;
        }
        if (isElementAFrameLike) {
          const elementsInFrame = getFrameChildren(sortedElements, element.id);
          elementsWithClones.push(
            ...markAsProcessed([
              ...elementsInFrame,
              element,
              ...elementsInFrame.map((e) => duplicateAndOffsetElement(e)),
              duplicateAndOffsetElement(element)
            ])
          );
          continue;
        }
      }
      if (!element.frameId || !idsOfElementsToDuplicate.has(element.frameId)) {
        elementsWithClones.push(
          ...markAsProcessed([element, duplicateAndOffsetElement(element)])
        );
      }
    } else {
      elementsWithClones.push(...markAsProcessed([element]));
    }
  }
  const finalElementsReversed = [];
  const finalElementIds = /* @__PURE__ */ new Map();
  index = elementsWithClones.length;
  while (--index >= 0) {
    const element = elementsWithClones[index];
    if (!finalElementIds.get(element.id)) {
      finalElementIds.set(element.id, true);
      finalElementsReversed.push(element);
    }
  }
  const finalElements = syncMovedIndices(
    finalElementsReversed.reverse(),
    arrayToMap(newElements)
  );
  bindTextToShapeAfterDuplication(
    elementsWithClones,
    oldElements,
    oldIdToDuplicatedId
  );
  fixBindingsAfterDuplication(
    elementsWithClones,
    oldElements,
    oldIdToDuplicatedId
  );
  bindElementsToFramesAfterDuplication(
    finalElements,
    oldElements,
    oldIdToDuplicatedId
  );
  const nextElementsToSelect = excludeElementsInFramesFromSelection(newElements);
  return {
    elements: finalElements,
    appState: {
      ...appState,
      ...selectGroupsForSelectedElements(
        {
          editingGroupId: appState.editingGroupId,
          selectedElementIds: nextElementsToSelect.reduce(
            (acc, element) => {
              if (!isBoundToContainer(element)) {
                acc[element.id] = true;
              }
              return acc;
            },
            {}
          )
        },
        getNonDeletedElements2(finalElements),
        appState,
        null
      )
    }
  };
};

// actions/actionProperties.tsx
init_define_import_meta_env();
init_colors();
import { useEffect as useEffect14, useMemo as useMemo4, useRef as useRef12, useState as useState8 } from "react";

// analytics.ts
init_define_import_meta_env();
var ALLOWED_CATEGORIES_TO_TRACK = /* @__PURE__ */ new Set(["command_palette", "export"]);
var trackEvent = (category, action, label, value) => {
  try {
    if (typeof window === "undefined" || define_import_meta_env_default.VITE_WORKER_ID || define_import_meta_env_default.VITE_APP_ENABLE_TRACKING !== "true") {
      return;
    }
    if (!ALLOWED_CATEGORIES_TO_TRACK.has(category)) {
      return;
    }
    if (define_import_meta_env_default.DEV) {
      return;
    }
    if (!define_import_meta_env_default.PROD) {
      console.info("trackEvent", { category, action, label, value });
    }
    if (window.sa_event) {
      window.sa_event(action, {
        category,
        label,
        value
      });
    }
  } catch (error) {
    console.error("error during analytics", error);
  }
};

// components/ButtonIconSelect.tsx
init_define_import_meta_env();
import clsx5 from "clsx";

// components/ButtonIcon.tsx
init_define_import_meta_env();
import { forwardRef } from "react";
import clsx4 from "clsx";
import { jsx as jsx9 } from "react/jsx-runtime";
var ButtonIcon = forwardRef(
  (props, ref) => {
    const { title, className, testId, active, standalone, icon, onClick } = props;
    return /* @__PURE__ */ jsx9(
      "button",
      {
        type: "button",
        ref,
        title,
        "data-testid": testId,
        className: clsx4(className, { standalone, active }),
        onClick,
        children: icon
      },
      title
    );
  }
);

// components/ButtonIconSelect.tsx
import { jsx as jsx10, jsxs as jsxs4 } from "react/jsx-runtime";
var ButtonIconSelect = (props) => /* @__PURE__ */ jsx10("div", { className: "buttonList", children: props.options.map(
  (option) => props.type === "button" ? /* @__PURE__ */ jsx10(
    ButtonIcon,
    {
      icon: option.icon,
      title: option.text,
      testId: option.testId,
      active: option.active ?? props.value === option.value,
      onClick: (event) => props.onClick(option.value, event)
    },
    option.text
  ) : /* @__PURE__ */ jsxs4(
    "label",
    {
      className: clsx5({ active: props.value === option.value }),
      title: option.text,
      children: [
        /* @__PURE__ */ jsx10(
          "input",
          {
            type: "radio",
            name: props.group,
            onChange: () => props.onChange(option.value),
            checked: props.value === option.value,
            "data-testid": option.testId
          }
        ),
        option.icon
      ]
    },
    option.text
  )
) });

// components/ColorPicker/ColorPicker.tsx
init_define_import_meta_env();
init_utils2();

// components/ColorPicker/TopPicks.tsx
init_define_import_meta_env();
init_colors();
import clsx6 from "clsx";
import { jsx as jsx11 } from "react/jsx-runtime";
var TopPicks = ({
  onChange,
  type,
  activeColor,
  topPicks
}) => {
  let colors;
  if (type === "elementStroke") {
    colors = DEFAULT_ELEMENT_STROKE_PICKS;
  }
  if (type === "elementBackground") {
    colors = DEFAULT_ELEMENT_BACKGROUND_PICKS;
  }
  if (type === "canvasBackground") {
    colors = DEFAULT_CANVAS_BACKGROUND_PICKS;
  }
  if (topPicks) {
    colors = topPicks;
  }
  if (!colors) {
    console.error("Invalid type for TopPicks");
    return null;
  }
  return /* @__PURE__ */ jsx11("div", { className: "color-picker__top-picks", children: colors.map((color) => /* @__PURE__ */ jsx11(
    "button",
    {
      className: clsx6("color-picker__button", {
        active: color === activeColor,
        "is-transparent": color === "transparent" || !color
      }),
      style: { "--swatch-color": color },
      type: "button",
      title: color,
      onClick: () => onChange(color),
      "data-testid": `color-top-pick-${color}`,
      children: /* @__PURE__ */ jsx11("div", { className: "color-picker__button-outline" })
    },
    color
  )) });
};

// components/ButtonSeparator.tsx
init_define_import_meta_env();
import { jsx as jsx12 } from "react/jsx-runtime";
var ButtonSeparator = () => /* @__PURE__ */ jsx12(
  "div",
  {
    style: {
      width: 1,
      height: "1rem",
      backgroundColor: "var(--default-border-color)",
      margin: "0 auto"
    }
  }
);

// components/ColorPicker/Picker.tsx
init_define_import_meta_env();
import React5, { useEffect as useEffect7, useState as useState4 } from "react";

// components/ColorPicker/ShadeList.tsx
init_define_import_meta_env();
import clsx7 from "clsx";
import { useAtom as useAtom2 } from "jotai";
import { useEffect as useEffect4, useRef as useRef2 } from "react";

// components/ColorPicker/colorPickerUtils.ts
init_define_import_meta_env();
init_colors();
import { atom as atom2 } from "jotai";
var getColorNameAndShadeFromColor = ({
  palette: palette2,
  color
}) => {
  for (const [colorName, colorVal] of Object.entries(palette2)) {
    if (Array.isArray(colorVal)) {
      const shade = colorVal.indexOf(color);
      if (shade > -1) {
        return { colorName, shade };
      }
    } else if (colorVal === color) {
      return { colorName, shade: null };
    }
  }
  return null;
};
var colorPickerHotkeyBindings = [
  ["q", "w", "e", "r", "t"],
  ["a", "s", "d", "f", "g"],
  ["z", "x", "c", "v", "b"]
].flat();
var isCustomColor = ({
  color,
  palette: palette2
}) => {
  const paletteValues = Object.values(palette2).flat();
  return !paletteValues.includes(color);
};
var getMostUsedCustomColors = (elements, type, palette2) => {
  const elementColorTypeMap = {
    elementBackground: "backgroundColor",
    elementStroke: "strokeColor"
  };
  const colors = elements.filter((element) => {
    if (element.isDeleted) {
      return false;
    }
    const color = element[elementColorTypeMap[type]];
    return isCustomColor({ color, palette: palette2 });
  });
  const colorCountMap = /* @__PURE__ */ new Map();
  colors.forEach((element) => {
    const color = element[elementColorTypeMap[type]];
    if (colorCountMap.has(color)) {
      colorCountMap.set(color, colorCountMap.get(color) + 1);
    } else {
      colorCountMap.set(color, 1);
    }
  });
  return [...colorCountMap.entries()].sort((a, b) => b[1] - a[1]).map((c) => c[0]).slice(0, MAX_CUSTOM_COLORS_USED_IN_CANVAS);
};
var activeColorPickerSectionAtom = atom2(null);
var calculateContrast = (r, g, b) => {
  const yiq = (r * 299 + g * 587 + b * 114) / 1e3;
  return yiq >= 160 ? "black" : "white";
};
var getContrastYIQ = (bgHex, isCustomColor2) => {
  if (isCustomColor2) {
    const style = new Option().style;
    style.color = bgHex;
    if (style.color) {
      const rgb = style.color.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(",");
      const r2 = parseInt(rgb[0]);
      const g2 = parseInt(rgb[1]);
      const b2 = parseInt(rgb[2]);
      return calculateContrast(r2, g2, b2);
    }
  }
  if (bgHex === "transparent") {
    return "black";
  }
  const r = parseInt(bgHex.substring(1, 3), 16);
  const g = parseInt(bgHex.substring(3, 5), 16);
  const b = parseInt(bgHex.substring(5, 7), 16);
  return calculateContrast(r, g, b);
};

// components/ColorPicker/HotkeyLabel.tsx
init_define_import_meta_env();
import { jsxs as jsxs5 } from "react/jsx-runtime";
var HotkeyLabel = ({
  color,
  keyLabel,
  isCustomColor: isCustomColor2 = false,
  isShade = false
}) => {
  return /* @__PURE__ */ jsxs5(
    "div",
    {
      className: "color-picker__button__hotkey-label",
      style: {
        color: getContrastYIQ(color, isCustomColor2)
      },
      children: [
        isShade && "\u21E7",
        keyLabel
      ]
    }
  );
};
var HotkeyLabel_default = HotkeyLabel;

// components/ColorPicker/ShadeList.tsx
import { jsx as jsx13, jsxs as jsxs6 } from "react/jsx-runtime";
var ShadeList = ({ hex, onChange, palette: palette2 }) => {
  const colorObj = getColorNameAndShadeFromColor({
    color: hex || "transparent",
    palette: palette2
  });
  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom2(
    activeColorPickerSectionAtom
  );
  const btnRef = useRef2(null);
  useEffect4(() => {
    if (btnRef.current && activeColorPickerSection === "shades") {
      btnRef.current.focus();
    }
  }, [colorObj, activeColorPickerSection]);
  if (colorObj) {
    const { colorName, shade } = colorObj;
    const shades = palette2[colorName];
    if (Array.isArray(shades)) {
      return /* @__PURE__ */ jsx13("div", { className: "color-picker-content--default shades", children: shades.map((color, i) => /* @__PURE__ */ jsxs6(
        "button",
        {
          ref: i === shade && activeColorPickerSection === "shades" ? btnRef : void 0,
          tabIndex: -1,
          type: "button",
          className: clsx7(
            "color-picker__button color-picker__button--large",
            { active: i === shade }
          ),
          "aria-label": "Shade",
          title: `${colorName} - ${i + 1}`,
          style: color ? { "--swatch-color": color } : void 0,
          onClick: () => {
            onChange(color);
            setActiveColorPickerSection("shades");
          },
          children: [
            /* @__PURE__ */ jsx13("div", { className: "color-picker__button-outline" }),
            /* @__PURE__ */ jsx13(HotkeyLabel_default, { color, keyLabel: i + 1, isShade: true })
          ]
        },
        i
      )) });
    }
  }
  return /* @__PURE__ */ jsxs6(
    "div",
    {
      className: "color-picker-content--default",
      style: { position: "relative" },
      tabIndex: -1,
      children: [
        /* @__PURE__ */ jsx13(
          "button",
          {
            type: "button",
            tabIndex: -1,
            className: "color-picker__button color-picker__button--large color-picker__button--no-focus-visible"
          }
        ),
        /* @__PURE__ */ jsx13(
          "div",
          {
            tabIndex: -1,
            style: {
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              textAlign: "center",
              fontSize: "0.75rem"
            },
            children: t("colorPicker.noShades")
          }
        )
      ]
    }
  );
};

// components/ColorPicker/PickerColorList.tsx
init_define_import_meta_env();
import clsx8 from "clsx";
import { useAtom as useAtom3 } from "jotai";
import { useEffect as useEffect5, useRef as useRef3 } from "react";
import { jsx as jsx14, jsxs as jsxs7 } from "react/jsx-runtime";
var PickerColorList = ({
  palette: palette2,
  color,
  onChange,
  label,
  activeShade
}) => {
  const colorObj = getColorNameAndShadeFromColor({
    color: color || "transparent",
    palette: palette2
  });
  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom3(
    activeColorPickerSectionAtom
  );
  const btnRef = useRef3(null);
  useEffect5(() => {
    if (btnRef.current && activeColorPickerSection === "baseColors") {
      btnRef.current.focus();
    }
  }, [colorObj?.colorName, activeColorPickerSection]);
  return /* @__PURE__ */ jsx14("div", { className: "color-picker-content--default", children: Object.entries(palette2).map(([key, value], index) => {
    const color2 = (Array.isArray(value) ? value[activeShade] : value) || "transparent";
    const keybinding = colorPickerHotkeyBindings[index];
    const label2 = t(
      `colors.${key.replace(/\d+/, "")}`,
      null,
      ""
    );
    return /* @__PURE__ */ jsxs7(
      "button",
      {
        ref: colorObj?.colorName === key ? btnRef : void 0,
        tabIndex: -1,
        type: "button",
        className: clsx8(
          "color-picker__button color-picker__button--large",
          {
            active: colorObj?.colorName === key,
            "is-transparent": color2 === "transparent" || !color2
          }
        ),
        onClick: () => {
          onChange(color2);
          setActiveColorPickerSection("baseColors");
        },
        title: `${label2}${color2.startsWith("#") ? ` ${color2}` : ""} \u2014 ${keybinding}`,
        "aria-label": `${label2} \u2014 ${keybinding}`,
        style: color2 ? { "--swatch-color": color2 } : void 0,
        "data-testid": `color-${key}`,
        children: [
          /* @__PURE__ */ jsx14("div", { className: "color-picker__button-outline" }),
          /* @__PURE__ */ jsx14(HotkeyLabel_default, { color: color2, keyLabel: keybinding })
        ]
      },
      key
    );
  }) });
};
var PickerColorList_default = PickerColorList;

// components/ColorPicker/Picker.tsx
import { useAtom as useAtom5 } from "jotai";

// components/ColorPicker/CustomColorList.tsx
init_define_import_meta_env();
import clsx9 from "clsx";
import { useAtom as useAtom4 } from "jotai";
import { useEffect as useEffect6, useRef as useRef4 } from "react";
import { jsx as jsx15, jsxs as jsxs8 } from "react/jsx-runtime";
var CustomColorList = ({
  colors,
  color,
  onChange,
  label
}) => {
  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom4(
    activeColorPickerSectionAtom
  );
  const btnRef = useRef4(null);
  useEffect6(() => {
    if (btnRef.current) {
      btnRef.current.focus();
    }
  }, [color, activeColorPickerSection]);
  return /* @__PURE__ */ jsx15("div", { className: "color-picker-content--default", children: colors.map((c, i) => {
    return /* @__PURE__ */ jsxs8(
      "button",
      {
        ref: color === c ? btnRef : void 0,
        tabIndex: -1,
        type: "button",
        className: clsx9(
          "color-picker__button color-picker__button--large",
          {
            active: color === c,
            "is-transparent": c === "transparent" || !c
          }
        ),
        onClick: () => {
          onChange(c);
          setActiveColorPickerSection("custom");
        },
        title: c,
        "aria-label": label,
        style: { "--swatch-color": c },
        children: [
          /* @__PURE__ */ jsx15("div", { className: "color-picker__button-outline" }),
          /* @__PURE__ */ jsx15(HotkeyLabel_default, { color: c, keyLabel: i + 1, isCustomColor: true })
        ]
      },
      i
    );
  }) });
};

// components/ColorPicker/keyboardNavHandlers.ts
init_define_import_meta_env();
init_keys();
init_colors();
var arrowHandler = (eventKey, currentIndex, length) => {
  const rows = Math.ceil(length / COLORS_PER_ROW);
  currentIndex = currentIndex ?? -1;
  switch (eventKey) {
    case "ArrowLeft": {
      const prevIndex = currentIndex - 1;
      return prevIndex < 0 ? length - 1 : prevIndex;
    }
    case "ArrowRight": {
      return (currentIndex + 1) % length;
    }
    case "ArrowDown": {
      const nextIndex = currentIndex + COLORS_PER_ROW;
      return nextIndex >= length ? currentIndex % COLORS_PER_ROW : nextIndex;
    }
    case "ArrowUp": {
      const prevIndex = currentIndex - COLORS_PER_ROW;
      const newIndex = prevIndex < 0 ? COLORS_PER_ROW * rows + prevIndex : prevIndex;
      return newIndex >= length ? void 0 : newIndex;
    }
  }
};
var hotkeyHandler = ({
  e,
  colorObj,
  onChange,
  palette: palette2,
  customColors,
  setActiveColorPickerSection,
  activeShade
}) => {
  if (colorObj?.shade != null) {
    if (["Digit1", "Digit2", "Digit3", "Digit4", "Digit5"].includes(e.code) && e.shiftKey) {
      const newShade = Number(e.code.slice(-1)) - 1;
      onChange(palette2[colorObj.colorName][newShade]);
      setActiveColorPickerSection("shades");
      return true;
    }
  }
  if (["1", "2", "3", "4", "5"].includes(e.key)) {
    const c = customColors[Number(e.key) - 1];
    if (c) {
      onChange(customColors[Number(e.key) - 1]);
      setActiveColorPickerSection("custom");
      return true;
    }
  }
  if (colorPickerHotkeyBindings.includes(e.key)) {
    const index = colorPickerHotkeyBindings.indexOf(e.key);
    const paletteKey = Object.keys(palette2)[index];
    const paletteValue = palette2[paletteKey];
    const r = Array.isArray(paletteValue) ? paletteValue[activeShade] : paletteValue;
    onChange(r);
    setActiveColorPickerSection("baseColors");
    return true;
  }
  return false;
};
var colorPickerKeyNavHandler = ({
  event,
  activeColorPickerSection,
  palette: palette2,
  color,
  onChange,
  customColors,
  setActiveColorPickerSection,
  updateData,
  activeShade,
  onEyeDropperToggle,
  onEscape
}) => {
  if (event[KEYS.CTRL_OR_CMD]) {
    return false;
  }
  if (event.key === KEYS.ESCAPE) {
    onEscape(event);
    return true;
  }
  if (event.key === KEYS.ALT) {
    onEyeDropperToggle(true);
    return true;
  }
  if (event.key === KEYS.I) {
    onEyeDropperToggle();
    return true;
  }
  const colorObj = getColorNameAndShadeFromColor({ color, palette: palette2 });
  if (event.key === KEYS.TAB) {
    const sectionsMap = {
      custom: !!customColors.length,
      baseColors: true,
      shades: colorObj?.shade != null,
      hex: true
    };
    const sections = Object.entries(sectionsMap).reduce((acc, [key, value]) => {
      if (value) {
        acc.push(key);
      }
      return acc;
    }, []);
    const activeSectionIndex = sections.indexOf(activeColorPickerSection);
    const indexOffset = event.shiftKey ? -1 : 1;
    const nextSectionIndex = activeSectionIndex + indexOffset > sections.length - 1 ? 0 : activeSectionIndex + indexOffset < 0 ? sections.length - 1 : activeSectionIndex + indexOffset;
    const nextSection = sections[nextSectionIndex];
    if (nextSection) {
      setActiveColorPickerSection(nextSection);
    }
    if (nextSection === "custom") {
      onChange(customColors[0]);
    } else if (nextSection === "baseColors") {
      const baseColorName = Object.entries(palette2).find(([name, shades]) => {
        if (Array.isArray(shades)) {
          return shades.includes(color);
        } else if (shades === color) {
          return name;
        }
        return null;
      });
      if (!baseColorName) {
        onChange(COLOR_PALETTE.black);
      }
    }
    event.preventDefault();
    event.stopPropagation();
    return true;
  }
  if (hotkeyHandler({
    e: event,
    colorObj,
    onChange,
    palette: palette2,
    customColors,
    setActiveColorPickerSection,
    activeShade
  })) {
    return true;
  }
  if (activeColorPickerSection === "shades") {
    if (colorObj) {
      const { shade } = colorObj;
      const newShade = arrowHandler(event.key, shade, COLORS_PER_ROW);
      if (newShade !== void 0) {
        onChange(palette2[colorObj.colorName][newShade]);
        return true;
      }
    }
  }
  if (activeColorPickerSection === "baseColors") {
    if (colorObj) {
      const { colorName } = colorObj;
      const colorNames = Object.keys(palette2);
      const indexOfColorName = colorNames.indexOf(colorName);
      const newColorIndex = arrowHandler(
        event.key,
        indexOfColorName,
        colorNames.length
      );
      if (newColorIndex !== void 0) {
        const newColorName = colorNames[newColorIndex];
        const newColorNameValue = palette2[newColorName];
        onChange(
          Array.isArray(newColorNameValue) ? newColorNameValue[activeShade] : newColorNameValue
        );
        return true;
      }
    }
  }
  if (activeColorPickerSection === "custom") {
    const indexOfColor = customColors.indexOf(color);
    const newColorIndex = arrowHandler(
      event.key,
      indexOfColor,
      customColors.length
    );
    if (newColorIndex !== void 0) {
      const newColor = customColors[newColorIndex];
      onChange(newColor);
      return true;
    }
  }
  return false;
};

// components/ColorPicker/PickerHeading.tsx
init_define_import_meta_env();
import { jsx as jsx16 } from "react/jsx-runtime";
var PickerHeading = ({ children }) => /* @__PURE__ */ jsx16("div", { className: "color-picker__heading", children });
var PickerHeading_default = PickerHeading;

// components/ColorPicker/Picker.tsx
init_colors();
init_keys();
init_constants();
import { jsx as jsx17, jsxs as jsxs9 } from "react/jsx-runtime";
var Picker = ({
  color,
  onChange,
  label,
  type,
  elements,
  palette: palette2,
  updateData,
  children,
  onEyeDropperToggle,
  onEscape
}) => {
  const [customColors] = React5.useState(() => {
    if (type === "canvasBackground") {
      return [];
    }
    return getMostUsedCustomColors(elements, type, palette2);
  });
  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom5(
    activeColorPickerSectionAtom
  );
  const colorObj = getColorNameAndShadeFromColor({
    color,
    palette: palette2
  });
  useEffect7(() => {
    if (!activeColorPickerSection) {
      const isCustom = isCustomColor({ color, palette: palette2 });
      const isCustomButNotInList = isCustom && !customColors.includes(color);
      setActiveColorPickerSection(
        isCustomButNotInList ? "hex" : isCustom ? "custom" : colorObj?.shade != null ? "shades" : "baseColors"
      );
    }
  }, [
    activeColorPickerSection,
    color,
    palette2,
    setActiveColorPickerSection,
    colorObj,
    customColors
  ]);
  const [activeShade, setActiveShade] = useState4(
    colorObj?.shade ?? (type === "elementBackground" ? DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX : DEFAULT_ELEMENT_STROKE_COLOR_INDEX)
  );
  useEffect7(() => {
    if (colorObj?.shade != null) {
      setActiveShade(colorObj.shade);
    }
    const keyup = (event) => {
      if (event.key === KEYS.ALT) {
        onEyeDropperToggle(false);
      }
    };
    document.addEventListener("keyup" /* KEYUP */, keyup, { capture: true });
    return () => {
      document.removeEventListener("keyup" /* KEYUP */, keyup, { capture: true });
    };
  }, [colorObj, onEyeDropperToggle]);
  const pickerRef = React5.useRef(null);
  return /* @__PURE__ */ jsx17("div", { role: "dialog", "aria-modal": "true", "aria-label": t("labels.colorPicker"), children: /* @__PURE__ */ jsxs9(
    "div",
    {
      ref: pickerRef,
      onKeyDown: (event) => {
        const handled = colorPickerKeyNavHandler({
          event,
          activeColorPickerSection,
          palette: palette2,
          color,
          onChange,
          onEyeDropperToggle,
          customColors,
          setActiveColorPickerSection,
          updateData,
          activeShade,
          onEscape
        });
        if (handled) {
          event.preventDefault();
          event.stopPropagation();
        }
      },
      className: "color-picker-content properties-content",
      tabIndex: -1,
      children: [
        !!customColors.length && /* @__PURE__ */ jsxs9("div", { children: [
          /* @__PURE__ */ jsx17(PickerHeading_default, { children: t("colorPicker.mostUsedCustomColors") }),
          /* @__PURE__ */ jsx17(
            CustomColorList,
            {
              colors: customColors,
              color,
              label: t("colorPicker.mostUsedCustomColors"),
              onChange
            }
          )
        ] }),
        /* @__PURE__ */ jsxs9("div", { children: [
          /* @__PURE__ */ jsx17(PickerHeading_default, { children: t("colorPicker.colors") }),
          /* @__PURE__ */ jsx17(
            PickerColorList_default,
            {
              color,
              label,
              palette: palette2,
              onChange,
              activeShade
            }
          )
        ] }),
        /* @__PURE__ */ jsxs9("div", { children: [
          /* @__PURE__ */ jsx17(PickerHeading_default, { children: t("colorPicker.shades") }),
          /* @__PURE__ */ jsx17(ShadeList, { hex: color, onChange, palette: palette2 })
        ] }),
        children
      ]
    }
  ) });
};

// components/ColorPicker/ColorPicker.tsx
import * as Popover2 from "@radix-ui/react-popover";
import { useAtom as useAtom7 } from "jotai";
init_colors();
import clsx13 from "clsx";
import { useRef as useRef8 } from "react";

// components/ColorPicker/ColorInput.tsx
init_define_import_meta_env();
import { useCallback, useEffect as useEffect10, useRef as useRef7, useState as useState6 } from "react";
import { useAtom as useAtom6 } from "jotai";
init_icons();
init_keys();

// components/EyeDropper.tsx
init_define_import_meta_env();
init_colors();
init_constants();
import { atom as atom3 } from "jotai";
import { useEffect as useEffect9, useRef as useRef6 } from "react";
import { createPortal } from "react-dom";

// context/ui-appState.ts
init_define_import_meta_env();
import React6 from "react";
var UIAppStateContext = React6.createContext(null);
var useUIAppState = () => React6.useContext(UIAppStateContext);

// hooks/useCreatePortalContainer.ts
init_define_import_meta_env();
import { useState as useState5, useLayoutEffect as useLayoutEffect2 } from "react";
init_constants();
var useCreatePortalContainer = (opts) => {
  const [div, setDiv] = useState5(null);
  const device = useDevice();
  const { theme } = useUIAppState();
  const { container: excalidrawContainer } = useExcalidrawContainer();
  useLayoutEffect2(() => {
    if (div) {
      div.className = "";
      div.classList.add("excalidraw", ...opts?.className?.split(/\s+/) || []);
      div.classList.toggle("excalidraw--mobile", device.editor.isMobile);
      div.classList.toggle("theme--dark", theme === THEME.DARK);
    }
  }, [div, theme, device.editor.isMobile, opts?.className]);
  useLayoutEffect2(() => {
    const container = opts?.parentSelector ? excalidrawContainer?.querySelector(opts.parentSelector) : document.body;
    if (!container) {
      return;
    }
    const div2 = document.createElement("div");
    container.appendChild(div2);
    setDiv(div2);
    return () => {
      container.removeChild(div2);
    };
  }, [excalidrawContainer, opts?.parentSelector]);
  return div;
};

// hooks/useOutsideClick.ts
init_define_import_meta_env();
init_constants();
import { useEffect as useEffect8 } from "react";
function useOutsideClick(ref, callback, isInside) {
  useEffect8(() => {
    function onOutsideClick(event) {
      const _event = event;
      if (!ref.current) {
        return;
      }
      const isInsideOverride = isInside?.(_event, ref.current);
      if (isInsideOverride === true) {
        return;
      } else if (isInsideOverride === false) {
        return callback(_event);
      }
      if (ref.current.contains(_event.target) || // target is detached from DOM (happens when the element is removed
      // on a pointerup event fired *before* this handler's pointerup is
      // dispatched)
      !document.documentElement.contains(_event.target)) {
        return;
      }
      const isClickOnRadixPortal = _event.target.closest("[data-radix-portal]") || // when radix popup is in "modal" mode, it disables pointer events on
      // the `body` element, so the target element is going to be the `html`
      // (note: this won't work if we selectively re-enable pointer events on
      // specific elements as we do with navbar or excalidraw UI elements)
      _event.target === document.documentElement && document.body.style.pointerEvents === "none";
      if (isClickOnRadixPortal) {
        return;
      }
      if (_event.target.closest("[data-prevent-outside-click]")) {
        return;
      }
      callback(_event);
    }
    document.addEventListener("pointerdown" /* POINTER_DOWN */, onOutsideClick);
    document.addEventListener("touchstart" /* TOUCH_START */, onOutsideClick);
    return () => {
      document.removeEventListener("pointerdown" /* POINTER_DOWN */, onOutsideClick);
      document.removeEventListener("touchstart" /* TOUCH_START */, onOutsideClick);
    };
  }, [ref, callback, isInside]);
}

// components/EyeDropper.tsx
init_keys();
init_scene();

// hooks/useStable.ts
init_define_import_meta_env();
import { useRef as useRef5 } from "react";
var useStable = (value) => {
  const ref = useRef5(value);
  Object.assign(ref.current, value);
  return ref.current;
};

// components/EyeDropper.tsx
import { jsx as jsx18 } from "react/jsx-runtime";
var activeEyeDropperAtom = atom3(null);
var EyeDropper = ({ onCancel, onChange, onSelect, colorPickerType }) => {
  const eyeDropperContainer = useCreatePortalContainer({
    className: "excalidraw-eye-dropper-backdrop",
    parentSelector: ".excalidraw-eye-dropper-container"
  });
  const appState = useUIAppState();
  const elements = useExcalidrawElements();
  const app = useApp();
  const selectedElements = getSelectedElements(elements, appState);
  const stableProps = useStable({
    app,
    onCancel,
    onChange,
    onSelect,
    selectedElements
  });
  const { container: excalidrawContainer } = useExcalidrawContainer();
  useEffect9(() => {
    const colorPreviewDiv = ref.current;
    if (!colorPreviewDiv || !app.canvas || !eyeDropperContainer) {
      return;
    }
    let isHoldingPointerDown = false;
    const ctx = app.canvas.getContext("2d");
    const getCurrentColor = ({
      clientX,
      clientY
    }) => {
      const pixel = ctx.getImageData(
        (clientX - appState.offsetLeft) * window.devicePixelRatio,
        (clientY - appState.offsetTop) * window.devicePixelRatio,
        1,
        1
      ).data;
      return rgbToHex(pixel[0], pixel[1], pixel[2]);
    };
    const mouseMoveListener = ({
      clientX,
      clientY,
      altKey
    }) => {
      colorPreviewDiv.style.top = `${clientY + 20}px`;
      colorPreviewDiv.style.left = `${clientX + 20}px`;
      const currentColor = getCurrentColor({ clientX, clientY });
      if (isHoldingPointerDown) {
        stableProps.onChange(
          colorPickerType,
          currentColor,
          stableProps.selectedElements,
          { altKey }
        );
      }
      colorPreviewDiv.style.background = currentColor;
    };
    const onCancel2 = () => {
      stableProps.onCancel();
    };
    const onSelect2 = (color, event) => {
      stableProps.onSelect(color, event);
    };
    const pointerDownListener = (event) => {
      isHoldingPointerDown = true;
      event.stopImmediatePropagation();
    };
    const pointerUpListener = (event) => {
      isHoldingPointerDown = false;
      excalidrawContainer?.focus();
      event.stopImmediatePropagation();
      event.preventDefault();
      onSelect2(getCurrentColor(event), event);
    };
    const keyDownListener = (event) => {
      if (event.key === KEYS.ESCAPE) {
        event.preventDefault();
        event.stopImmediatePropagation();
        onCancel2();
      }
    };
    eyeDropperContainer.tabIndex = -1;
    eyeDropperContainer.focus();
    mouseMoveListener({
      clientX: stableProps.app.lastViewportPosition.x,
      clientY: stableProps.app.lastViewportPosition.y,
      altKey: false
    });
    eyeDropperContainer.addEventListener("keydown" /* KEYDOWN */, keyDownListener);
    eyeDropperContainer.addEventListener(
      "pointerdown" /* POINTER_DOWN */,
      pointerDownListener
    );
    eyeDropperContainer.addEventListener("pointerup" /* POINTER_UP */, pointerUpListener);
    window.addEventListener("pointermove", mouseMoveListener, {
      passive: true
    });
    window.addEventListener("blur" /* BLUR */, onCancel2);
    return () => {
      isHoldingPointerDown = false;
      eyeDropperContainer.removeEventListener("keydown" /* KEYDOWN */, keyDownListener);
      eyeDropperContainer.removeEventListener(
        "pointerdown" /* POINTER_DOWN */,
        pointerDownListener
      );
      eyeDropperContainer.removeEventListener(
        "pointerup" /* POINTER_UP */,
        pointerUpListener
      );
      window.removeEventListener("pointermove", mouseMoveListener);
      window.removeEventListener("blur" /* BLUR */, onCancel2);
    };
  }, [
    stableProps,
    app.canvas,
    eyeDropperContainer,
    colorPickerType,
    excalidrawContainer,
    appState.offsetLeft,
    appState.offsetTop
  ]);
  const ref = useRef6(null);
  useOutsideClick(
    ref,
    () => {
      onCancel();
    },
    (event) => {
      if (event.target.closest(
        ".excalidraw-eye-dropper-trigger, .excalidraw-eye-dropper-backdrop"
      )) {
        return true;
      }
      return false;
    }
  );
  if (!eyeDropperContainer) {
    return null;
  }
  return createPortal(
    /* @__PURE__ */ jsx18("div", { ref, className: "excalidraw-eye-dropper-preview" }),
    eyeDropperContainer
  );
};

// components/ColorPicker/ColorInput.tsx
import clsx10 from "clsx";
init_utils2();
import { Fragment as Fragment2, jsx as jsx19, jsxs as jsxs10 } from "react/jsx-runtime";
var ColorInput = ({
  color,
  onChange,
  label,
  colorPickerType
}) => {
  const device = useDevice();
  const [innerValue, setInnerValue] = useState6(color);
  const [activeSection, setActiveColorPickerSection] = useAtom6(
    activeColorPickerSectionAtom
  );
  useEffect10(() => {
    setInnerValue(color);
  }, [color]);
  const changeColor = useCallback(
    (inputValue) => {
      const value = inputValue.toLowerCase();
      const color2 = getColor(value);
      if (color2) {
        onChange(color2);
      }
      setInnerValue(value);
    },
    [onChange]
  );
  const inputRef = useRef7(null);
  const eyeDropperTriggerRef = useRef7(null);
  useEffect10(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, [activeSection]);
  const [eyeDropperState, setEyeDropperState] = useAtom6(
    activeEyeDropperAtom,
    jotaiScope
  );
  useEffect10(() => {
    return () => {
      setEyeDropperState(null);
    };
  }, [setEyeDropperState]);
  return /* @__PURE__ */ jsxs10("div", { className: "color-picker__input-label", children: [
    /* @__PURE__ */ jsx19("div", { className: "color-picker__input-hash", children: "#" }),
    /* @__PURE__ */ jsx19(
      "input",
      {
        ref: activeSection === "hex" ? inputRef : void 0,
        style: { border: 0, padding: 0 },
        spellCheck: false,
        className: "color-picker-input",
        "aria-label": label,
        onChange: (event) => {
          changeColor(event.target.value);
        },
        value: (innerValue || "").replace(/^#/, ""),
        onBlur: () => {
          setInnerValue(color);
        },
        tabIndex: -1,
        onFocus: () => setActiveColorPickerSection("hex"),
        onKeyDown: (event) => {
          if (event.key === KEYS.TAB) {
            return;
          } else if (event.key === KEYS.ESCAPE) {
            eyeDropperTriggerRef.current?.focus();
          }
          event.stopPropagation();
        }
      }
    ),
    !device.editor.isMobile && /* @__PURE__ */ jsxs10(Fragment2, { children: [
      /* @__PURE__ */ jsx19(
        "div",
        {
          style: {
            width: "1px",
            height: "1.25rem",
            backgroundColor: "var(--default-border-color)"
          }
        }
      ),
      /* @__PURE__ */ jsx19(
        "div",
        {
          ref: eyeDropperTriggerRef,
          className: clsx10("excalidraw-eye-dropper-trigger", {
            selected: eyeDropperState
          }),
          onClick: () => setEyeDropperState(
            (s) => s ? null : {
              keepOpenOnAlt: false,
              onSelect: (color2) => onChange(color2),
              colorPickerType
            }
          ),
          title: `${t(
            "labels.eyeDropper"
          )} \u2014 ${KEYS.I.toLocaleUpperCase()} or ${getShortcutKey("Alt")} `,
          children: eyeDropperIcon
        }
      )
    ] })
  ] });
};

// components/PropertiesPopover.tsx
init_define_import_meta_env();
import React8 from "react";
import clsx12 from "clsx";
import * as Popover from "@radix-ui/react-popover";

// components/Island.tsx
init_define_import_meta_env();
import React7 from "react";
import clsx11 from "clsx";
import { jsx as jsx20 } from "react/jsx-runtime";
var Island = React7.forwardRef(
  ({ children, padding, className, style }, ref) => /* @__PURE__ */ jsx20(
    "div",
    {
      className: clsx11("Island", className),
      style: { "--padding": padding, ...style },
      ref,
      children
    }
  )
);

// components/PropertiesPopover.tsx
init_utils2();
import { jsx as jsx21, jsxs as jsxs11 } from "react/jsx-runtime";
var PropertiesPopover = React8.forwardRef(
  ({
    className,
    container,
    children,
    style,
    onClose,
    onKeyDown,
    onFocusOutside,
    onPointerLeave,
    onPointerDownOutside
  }, ref) => {
    const device = useDevice();
    return /* @__PURE__ */ jsx21(Popover.Portal, { container, children: /* @__PURE__ */ jsxs11(
      Popover.Content,
      {
        ref,
        className: clsx12("focus-visible-none", className),
        "data-prevent-outside-click": true,
        side: device.editor.isMobile && !device.viewport.isLandscape ? "bottom" : "right",
        align: device.editor.isMobile && !device.viewport.isLandscape ? "center" : "start",
        alignOffset: -16,
        sideOffset: 20,
        style: {
          zIndex: "var(--zIndex-popup)"
        },
        onPointerLeave,
        onKeyDown,
        onFocusOutside,
        onPointerDownOutside,
        onCloseAutoFocus: (e) => {
          e.stopPropagation();
          e.preventDefault();
          if (container && !isInteractive(document.activeElement)) {
            container.focus();
          }
          onClose();
        },
        children: [
          /* @__PURE__ */ jsx21(Island, { padding: 3, style, children }),
          /* @__PURE__ */ jsx21(
            Popover.Arrow,
            {
              width: 20,
              height: 10,
              style: {
                fill: "var(--popup-bg-color)",
                filter: "drop-shadow(rgba(0, 0, 0, 0.05) 0px 3px 2px)"
              }
            }
          )
        ]
      }
    ) });
  }
);

// components/ColorPicker/ColorPicker.tsx
import { jsx as jsx22, jsxs as jsxs12 } from "react/jsx-runtime";
var isValidColor = (color) => {
  const style = new Option().style;
  style.color = color;
  return !!style.color;
};
var getColor = (color) => {
  if (isTransparent(color)) {
    return color;
  }
  return isValidColor(`#${color}`) ? `#${color}` : isValidColor(color) ? color : null;
};
var ColorPickerPopupContent = ({
  type,
  color,
  onChange,
  label,
  elements,
  palette: palette2 = COLOR_PALETTE,
  updateData
}) => {
  const { container } = useExcalidrawContainer();
  const [, setActiveColorPickerSection] = useAtom7(activeColorPickerSectionAtom);
  const [eyeDropperState, setEyeDropperState] = useAtom7(
    activeEyeDropperAtom,
    jotaiScope
  );
  const colorInputJSX = /* @__PURE__ */ jsxs12("div", { children: [
    /* @__PURE__ */ jsx22(PickerHeading_default, { children: t("colorPicker.hexCode") }),
    /* @__PURE__ */ jsx22(
      ColorInput,
      {
        color,
        label,
        onChange: (color2) => {
          onChange(color2);
        },
        colorPickerType: type
      }
    )
  ] });
  const popoverRef = useRef8(null);
  const focusPickerContent = () => {
    popoverRef.current?.querySelector(".color-picker-content")?.focus();
  };
  return /* @__PURE__ */ jsx22(
    PropertiesPopover,
    {
      container,
      style: { maxWidth: "13rem" },
      onFocusOutside: (event) => {
        focusPickerContent();
        event.preventDefault();
      },
      onPointerDownOutside: (event) => {
        if (eyeDropperState) {
          event.preventDefault();
        }
      },
      onClose: () => {
        updateData({ openPopup: null });
        setActiveColorPickerSection(null);
      },
      children: palette2 ? /* @__PURE__ */ jsx22(
        Picker,
        {
          palette: palette2,
          color,
          onChange: (changedColor) => {
            onChange(changedColor);
          },
          onEyeDropperToggle: (force) => {
            setEyeDropperState((state) => {
              if (force) {
                state = state || {
                  keepOpenOnAlt: true,
                  onSelect: onChange,
                  colorPickerType: type
                };
                state.keepOpenOnAlt = true;
                return state;
              }
              return force === false || state ? null : {
                keepOpenOnAlt: false,
                onSelect: onChange,
                colorPickerType: type
              };
            });
          },
          onEscape: (event) => {
            if (eyeDropperState) {
              setEyeDropperState(null);
            } else {
              updateData({ openPopup: null });
            }
          },
          label,
          type,
          elements,
          updateData,
          children: colorInputJSX
        }
      ) : colorInputJSX
    }
  );
};
var ColorPickerTrigger = ({
  label,
  color,
  type
}) => {
  return /* @__PURE__ */ jsx22(
    Popover2.Trigger,
    {
      type: "button",
      className: clsx13("color-picker__button active-color properties-trigger", {
        "is-transparent": color === "transparent" || !color
      }),
      "aria-label": label,
      style: color ? { "--swatch-color": color } : void 0,
      title: type === "elementStroke" ? t("labels.showStroke") : t("labels.showBackground"),
      children: /* @__PURE__ */ jsx22("div", { className: "color-picker__button-outline" })
    }
  );
};
var ColorPicker = ({
  type,
  color,
  onChange,
  label,
  elements,
  palette: palette2 = COLOR_PALETTE,
  topPicks,
  updateData,
  appState
}) => {
  return /* @__PURE__ */ jsx22("div", { children: /* @__PURE__ */ jsxs12("div", { role: "dialog", "aria-modal": "true", className: "color-picker-container", children: [
    /* @__PURE__ */ jsx22(
      TopPicks,
      {
        activeColor: color,
        onChange,
        type,
        topPicks
      }
    ),
    /* @__PURE__ */ jsx22(ButtonSeparator, {}),
    /* @__PURE__ */ jsxs12(
      Popover2.Root,
      {
        open: appState.openPopup === type,
        onOpenChange: (open) => {
          updateData({ openPopup: open ? type : null });
        },
        children: [
          /* @__PURE__ */ jsx22(ColorPickerTrigger, { color, label, type }),
          appState.openPopup === type && /* @__PURE__ */ jsx22(
            ColorPickerPopupContent,
            {
              type,
              color,
              onChange,
              label,
              elements,
              palette: palette2,
              updateData
            }
          )
        ]
      }
    )
  ] }) });
};

// components/IconPicker.tsx
init_define_import_meta_env();
import React10 from "react";

// components/Popover.tsx
init_define_import_meta_env();
import { useLayoutEffect as useLayoutEffect3, useRef as useRef9, useEffect as useEffect11 } from "react";
init_utils2();
init_keys();
import { unstable_batchedUpdates } from "react-dom";
import { jsx as jsx23 } from "react/jsx-runtime";
var Popover3 = ({
  children,
  left,
  top,
  onCloseRequest,
  fitInViewport = false,
  offsetLeft = 0,
  offsetTop = 0,
  viewportWidth = window.innerWidth,
  viewportHeight = window.innerHeight
}) => {
  const popoverRef = useRef9(null);
  useEffect11(() => {
    const container = popoverRef.current;
    if (!container) {
      return;
    }
    if (!container.contains(document.activeElement)) {
      container.focus();
    }
    const handleKeyDown = (event) => {
      if (event.key === KEYS.TAB) {
        const focusableElements = queryFocusableElements(container);
        const { activeElement } = document;
        const currentIndex = focusableElements.findIndex(
          (element) => element === activeElement
        );
        if (activeElement === container) {
          if (event.shiftKey) {
            focusableElements[focusableElements.length - 1]?.focus();
          } else {
            focusableElements[0].focus();
          }
          event.preventDefault();
          event.stopImmediatePropagation();
        } else if (currentIndex === 0 && event.shiftKey) {
          focusableElements[focusableElements.length - 1]?.focus();
          event.preventDefault();
          event.stopImmediatePropagation();
        } else if (currentIndex === focusableElements.length - 1 && !event.shiftKey) {
          focusableElements[0]?.focus();
          event.preventDefault();
          event.stopImmediatePropagation();
        }
      }
    };
    container.addEventListener("keydown", handleKeyDown);
    return () => container.removeEventListener("keydown", handleKeyDown);
  }, []);
  const lastInitializedPosRef = useRef9(
    null
  );
  useLayoutEffect3(() => {
    if (fitInViewport && popoverRef.current && top != null && left != null) {
      const container = popoverRef.current;
      const { width, height } = container.getBoundingClientRect();
      if (lastInitializedPosRef.current?.top === top && lastInitializedPosRef.current?.left === left) {
        return;
      }
      lastInitializedPosRef.current = { top, left };
      if (width >= viewportWidth) {
        container.style.width = `${viewportWidth}px`;
        container.style.left = "0px";
        container.style.overflowX = "scroll";
      } else if (left + width - offsetLeft > viewportWidth) {
        container.style.left = `${viewportWidth - width - 10}px`;
      } else {
        container.style.left = `${left}px`;
      }
      if (height >= viewportHeight) {
        container.style.height = `${viewportHeight - 20}px`;
        container.style.top = "10px";
        container.style.overflowY = "scroll";
      } else if (top + height - offsetTop > viewportHeight) {
        container.style.top = `${viewportHeight - height}px`;
      } else {
        container.style.top = `${top}px`;
      }
    }
  }, [
    top,
    left,
    fitInViewport,
    viewportWidth,
    viewportHeight,
    offsetLeft,
    offsetTop
  ]);
  useEffect11(() => {
    if (onCloseRequest) {
      const handler = (event) => {
        if (!popoverRef.current?.contains(event.target)) {
          unstable_batchedUpdates(() => onCloseRequest(event));
        }
      };
      document.addEventListener("pointerdown", handler, false);
      return () => document.removeEventListener("pointerdown", handler, false);
    }
  }, [onCloseRequest]);
  return /* @__PURE__ */ jsx23("div", { className: "popover", ref: popoverRef, tabIndex: -1, children });
};

// components/IconPicker.tsx
init_keys();
import clsx14 from "clsx";
import { Fragment as Fragment3, jsx as jsx24, jsxs as jsxs13 } from "react/jsx-runtime";
function Picker2({
  options,
  value,
  label,
  onChange,
  onClose
}) {
  const rFirstItem = React10.useRef();
  const rActiveItem = React10.useRef();
  const rGallery = React10.useRef(null);
  React10.useEffect(() => {
    if (rActiveItem.current) {
      rActiveItem.current.focus();
    } else if (rGallery.current) {
      rGallery.current.focus();
    }
  }, []);
  const handleKeyDown = (event) => {
    const pressedOption = options.find(
      (option) => option.keyBinding === event.key.toLowerCase()
    );
    if (!(event.metaKey || event.altKey || event.ctrlKey) && pressedOption) {
      const index = options.indexOf(pressedOption);
      rGallery.current.children[index].focus();
      event.preventDefault();
    } else if (event.key === KEYS.TAB) {
      setTimeout(() => {
        const active = rActiveItem.current;
        const docActive = document.activeElement;
        if (active !== docActive) {
          onClose();
        }
      }, 0);
    } else if (isArrowKey(event.key)) {
      const { activeElement } = document;
      const isRTL2 = getLanguage().rtl;
      const index = Array.prototype.indexOf.call(
        rGallery.current.children,
        activeElement
      );
      if (index !== -1) {
        const length = options.length;
        let nextIndex = index;
        switch (event.key) {
          case (isRTL2 ? KEYS.ARROW_LEFT : KEYS.ARROW_RIGHT):
          case KEYS.ARROW_DOWN: {
            nextIndex = (index + 1) % length;
            break;
          }
          case (isRTL2 ? KEYS.ARROW_RIGHT : KEYS.ARROW_LEFT):
          case KEYS.ARROW_UP: {
            nextIndex = (length + index - 1) % length;
            break;
          }
        }
        rGallery.current.children[nextIndex].focus();
      }
      event.preventDefault();
    } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) {
      event.preventDefault();
      onClose();
    }
    event.nativeEvent.stopImmediatePropagation();
    event.stopPropagation();
  };
  return /* @__PURE__ */ jsx24(
    "div",
    {
      className: `picker`,
      role: "dialog",
      "aria-modal": "true",
      "aria-label": label,
      onKeyDown: handleKeyDown,
      children: /* @__PURE__ */ jsx24("div", { className: "picker-content", ref: rGallery, children: options.map((option, i) => /* @__PURE__ */ jsxs13(
        "button",
        {
          type: "button",
          className: clsx14("picker-option", {
            active: value === option.value
          }),
          onClick: (event) => {
            event.currentTarget.focus();
            onChange(option.value);
          },
          title: `${option.text} ${option.keyBinding && `\u2014 ${option.keyBinding.toUpperCase()}`}`,
          "aria-label": option.text || "none",
          "aria-keyshortcuts": option.keyBinding || void 0,
          ref: (el) => {
            if (el && i === 0) {
              rFirstItem.current = el;
            }
            if (el && option.value === value) {
              rActiveItem.current = el;
            }
          },
          onFocus: () => {
            onChange(option.value);
          },
          children: [
            option.icon,
            option.keyBinding && /* @__PURE__ */ jsx24("span", { className: "picker-keybinding", children: option.keyBinding })
          ]
        },
        option.text
      )) })
    }
  );
}
function IconPicker({
  value,
  label,
  options,
  onChange,
  group = ""
}) {
  const [isActive, setActive] = React10.useState(false);
  const rPickerButton = React10.useRef(null);
  const isRTL2 = getLanguage().rtl;
  return /* @__PURE__ */ jsxs13("div", { children: [
    /* @__PURE__ */ jsx24(
      "button",
      {
        name: group,
        type: "button",
        className: isActive ? "active" : "",
        "aria-label": label,
        onClick: () => setActive(!isActive),
        ref: rPickerButton,
        children: options.find((option) => option.value === value)?.icon
      }
    ),
    /* @__PURE__ */ jsx24(React10.Suspense, { fallback: "", children: isActive ? /* @__PURE__ */ jsxs13(Fragment3, { children: [
      /* @__PURE__ */ jsx24(
        Popover3,
        {
          onCloseRequest: (event) => event.target !== rPickerButton.current && setActive(false),
          ...isRTL2 ? { right: 5.5 } : { left: -5.5 },
          children: /* @__PURE__ */ jsx24(
            Picker2,
            {
              options: options.filter((opt) => opt.showInPicker !== false),
              value,
              label,
              onChange,
              onClose: () => {
                setActive(false);
                rPickerButton.current?.focus();
              }
            }
          )
        }
      ),
      /* @__PURE__ */ jsx24("div", { className: "picker-triangle" })
    ] }) : null })
  ] });
}

// components/FontPicker/FontPicker.tsx
init_define_import_meta_env();
import React15, { useCallback as useCallback3, useMemo as useMemo3 } from "react";
import * as Popover5 from "@radix-ui/react-popover";

// components/FontPicker/FontPickerList.tsx
init_define_import_meta_env();
import React14, {
  useMemo,
  useState as useState7,
  useRef as useRef11,
  useEffect as useEffect13,
  useCallback as useCallback2
} from "react";

// components/QuickSearch.tsx
init_define_import_meta_env();
init_icons();
import clsx15 from "clsx";
import React11 from "react";
import { jsx as jsx25, jsxs as jsxs14 } from "react/jsx-runtime";
var QuickSearch = React11.forwardRef(
  ({ className, placeholder, onChange }, ref) => {
    return /* @__PURE__ */ jsxs14("div", { className: clsx15("QuickSearch__wrapper", className), children: [
      searchIcon,
      /* @__PURE__ */ jsx25(
        "input",
        {
          ref,
          className: "QuickSearch__input",
          type: "text",
          placeholder,
          onChange: (e) => onChange(e.target.value.trim().toLowerCase())
        }
      )
    ] });
  }
);

// components/ScrollableList.tsx
init_define_import_meta_env();
import clsx16 from "clsx";
import { Children } from "react";
import { jsx as jsx26 } from "react/jsx-runtime";
var ScrollableList = ({
  className,
  placeholder,
  children
}) => {
  const isEmpty = !Children.count(children);
  return /* @__PURE__ */ jsx26("div", { className: clsx16("ScrollableList__wrapper", className), role: "menu", children: isEmpty ? /* @__PURE__ */ jsx26("div", { className: "empty", children: placeholder }) : children });
};

// components/dropdownMenu/DropdownMenuGroup.tsx
init_define_import_meta_env();
import { jsx as jsx27, jsxs as jsxs15 } from "react/jsx-runtime";
var MenuGroup = ({
  children,
  className = "",
  style,
  title
}) => {
  return /* @__PURE__ */ jsxs15("div", { className: `dropdown-menu-group ${className}`, style, children: [
    title && /* @__PURE__ */ jsx27("p", { className: "dropdown-menu-group-title", children: title }),
    children
  ] });
};
var DropdownMenuGroup_default = MenuGroup;
MenuGroup.displayName = "DropdownMenuGroup";

// components/dropdownMenu/DropdownMenuItem.tsx
init_define_import_meta_env();
import { useEffect as useEffect12, useRef as useRef10 } from "react";

// components/dropdownMenu/common.ts
init_define_import_meta_env();
init_constants();
init_utils2();
import React12, { useContext } from "react";
var DropdownMenuContentPropsContext = React12.createContext({});
var getDropdownMenuItemClassName = (className = "", selected = false, hovered = false) => {
  return `dropdown-menu-item dropdown-menu-item-base ${className}
  ${selected ? "dropdown-menu-item--selected" : ""} ${hovered ? "dropdown-menu-item--hovered" : ""}`.trim();
};
var useHandleDropdownMenuItemClick = (origOnClick, onSelect) => {
  const DropdownMenuContentProps = useContext(DropdownMenuContentPropsContext);
  return composeEventHandlers(origOnClick, (event) => {
    const itemSelectEvent = new CustomEvent("menu.itemSelect" /* MENU_ITEM_SELECT */, {
      bubbles: true,
      cancelable: true
    });
    onSelect?.(itemSelectEvent);
    if (!itemSelectEvent.defaultPrevented) {
      DropdownMenuContentProps.onSelect?.(itemSelectEvent);
    }
  });
};

// components/dropdownMenu/DropdownMenuItemContent.tsx
init_define_import_meta_env();
import { Fragment as Fragment4, jsx as jsx28, jsxs as jsxs16 } from "react/jsx-runtime";
var MenuItemContent = ({
  textStyle,
  icon,
  shortcut,
  children
}) => {
  const device = useDevice();
  return /* @__PURE__ */ jsxs16(Fragment4, { children: [
    icon && /* @__PURE__ */ jsx28("div", { className: "dropdown-menu-item__icon", children: icon }),
    /* @__PURE__ */ jsx28("div", { style: textStyle, className: "dropdown-menu-item__text", children }),
    shortcut && !device.editor.isMobile && /* @__PURE__ */ jsx28("div", { className: "dropdown-menu-item__shortcut", children: shortcut })
  ] });
};
var DropdownMenuItemContent_default = MenuItemContent;

// components/dropdownMenu/DropdownMenuItem.tsx
init_constants();
import { jsx as jsx29 } from "react/jsx-runtime";
var DropdownMenuItem = ({
  icon,
  value,
  order,
  children,
  shortcut,
  className,
  hovered,
  selected,
  textStyle,
  onSelect,
  onClick,
  ...rest
}) => {
  const handleClick = useHandleDropdownMenuItemClick(onClick, onSelect);
  const ref = useRef10(null);
  useEffect12(() => {
    if (hovered) {
      if (order === 0) {
        ref.current?.scrollIntoView({ block: "end" });
      } else {
        ref.current?.scrollIntoView({ block: "nearest" });
      }
    }
  }, [hovered, order]);
  return /* @__PURE__ */ jsx29(
    "button",
    {
      ...rest,
      ref,
      value,
      onClick: handleClick,
      className: getDropdownMenuItemClassName(className, selected, hovered),
      title: rest.title ?? rest["aria-label"],
      children: /* @__PURE__ */ jsx29(DropdownMenuItemContent_default, { textStyle, icon, shortcut, children })
    }
  );
};
DropdownMenuItem.displayName = "DropdownMenuItem";
var DropDownMenuItemBadgeType = {
  GREEN: "green",
  RED: "red",
  BLUE: "blue"
};
var DropDownMenuItemBadge = ({
  type = DropDownMenuItemBadgeType.BLUE,
  children
}) => {
  const { theme } = useExcalidrawAppState();
  const style = {
    display: "inline-flex",
    marginLeft: "auto",
    padding: "2px 4px",
    borderRadius: 6,
    fontSize: 9,
    fontFamily: "Cascadia, monospace",
    border: theme === THEME.LIGHT ? "1.5px solid white" : "none"
  };
  switch (type) {
    case DropDownMenuItemBadgeType.GREEN:
      Object.assign(style, {
        backgroundColor: "var(--background-color-badge)",
        color: "var(--color-badge)"
      });
      break;
    case DropDownMenuItemBadgeType.RED:
      Object.assign(style, {
        backgroundColor: "pink",
        color: "darkred"
      });
      break;
    case DropDownMenuItemBadgeType.BLUE:
    default:
      Object.assign(style, {
        background: "var(--color-promo)",
        color: "var(--color-surface-lowest)"
      });
  }
  return /* @__PURE__ */ jsx29("div", { className: "DropDownMenuItemBadge", style, children });
};
DropDownMenuItemBadge.displayName = "DropdownMenuItemBadge";
DropdownMenuItem.Badge = DropDownMenuItemBadge;
var DropdownMenuItem_default = DropdownMenuItem;

// components/FontPicker/FontPickerList.tsx
init_utils2();

// components/FontPicker/keyboardNavHandlers.ts
init_define_import_meta_env();
init_keys();
var fontPickerKeyHandler = ({
  event,
  inputRef,
  hoveredFont,
  filteredFonts,
  onClose,
  onSelect,
  onHover
}) => {
  if (!event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key.toLowerCase() === KEYS.F) {
    inputRef.current?.focus();
    return true;
  }
  if (event.key === KEYS.ESCAPE) {
    onClose();
    return true;
  }
  if (event.key === KEYS.ENTER) {
    if (hoveredFont?.value) {
      onSelect(hoveredFont.value);
    }
    return true;
  }
  if (event.key === KEYS.ARROW_DOWN) {
    if (hoveredFont?.next) {
      onHover(hoveredFont.next.value);
    } else if (filteredFonts[0]?.value) {
      onHover(filteredFonts[0].value);
    }
    return true;
  }
  if (event.key === KEYS.ARROW_UP) {
    if (hoveredFont?.prev) {
      onHover(hoveredFont.prev.value);
    } else if (filteredFonts[filteredFonts.length - 1]?.value) {
      onHover(filteredFonts[filteredFonts.length - 1].value);
    }
    return true;
  }
};

// components/FontPicker/FontPickerList.tsx
init_fonts();
import { jsx as jsx30, jsxs as jsxs17 } from "react/jsx-runtime";
var FontPickerList = React14.memo(
  ({
    selectedFontFamily,
    hoveredFontFamily,
    onSelect,
    onHover,
    onLeave,
    onOpen,
    onClose
  }) => {
    const { container } = useExcalidrawContainer();
    const { fonts } = useApp();
    const { showDeprecatedFonts } = useAppProps();
    const [searchTerm, setSearchTerm] = useState7("");
    const inputRef = useRef11(null);
    const allFonts = useMemo(
      () => Array.from(Fonts.registered.entries()).filter(([_, { metadata }]) => !metadata.serverSide).map(([familyId, { metadata, fonts: fonts2 }]) => {
        const fontDescriptor = {
          value: familyId,
          icon: metadata.icon,
          text: fonts2[0].fontFace.family
        };
        if (metadata.deprecated) {
          Object.assign(fontDescriptor, {
            deprecated: metadata.deprecated,
            badge: {
              type: DropDownMenuItemBadgeType.RED,
              placeholder: t("fontList.badge.old")
            }
          });
        }
        return fontDescriptor;
      }).sort(
        (a, b) => a.text.toLowerCase() > b.text.toLowerCase() ? 1 : -1
      ),
      []
    );
    const sceneFamilies = useMemo(
      () => new Set(fonts.getSceneFontFamilies()),
      // cache per selected font family, so hover re-render won't mess it up
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [selectedFontFamily]
    );
    const sceneFonts = useMemo(
      () => allFonts.filter((font) => sceneFamilies.has(font.value)),
      // always show all the fonts in the scene, even those that were deprecated
      [allFonts, sceneFamilies]
    );
    const availableFonts = useMemo(
      () => allFonts.filter(
        (font) => !sceneFamilies.has(font.value) && (showDeprecatedFonts || !font.deprecated)
        // skip deprecated fonts
      ),
      [allFonts, sceneFamilies, showDeprecatedFonts]
    );
    const filteredFonts = useMemo(
      () => arrayToList(
        [...sceneFonts, ...availableFonts].filter(
          (font) => font.text?.toLowerCase().includes(searchTerm)
        )
      ),
      [sceneFonts, availableFonts, searchTerm]
    );
    const hoveredFont = useMemo(() => {
      let font;
      if (hoveredFontFamily) {
        font = filteredFonts.find((font2) => font2.value === hoveredFontFamily);
      } else if (selectedFontFamily) {
        font = filteredFonts.find((font2) => font2.value === selectedFontFamily);
      }
      if (!font && searchTerm) {
        if (filteredFonts[0]?.value) {
          onHover(filteredFonts[0].value);
        } else {
          onLeave();
        }
      }
      return font;
    }, [
      hoveredFontFamily,
      selectedFontFamily,
      searchTerm,
      filteredFonts,
      onHover,
      onLeave
    ]);
    const onKeyDown = useCallback2(
      (event) => {
        const handled = fontPickerKeyHandler({
          event,
          inputRef,
          hoveredFont,
          filteredFonts,
          onSelect,
          onHover,
          onClose
        });
        if (handled) {
          event.preventDefault();
          event.stopPropagation();
        }
      },
      [hoveredFont, filteredFonts, onSelect, onHover, onClose]
    );
    useEffect13(() => {
      onOpen();
      return () => {
        onClose();
      };
    }, []);
    const sceneFilteredFonts = useMemo(
      () => filteredFonts.filter((font) => sceneFamilies.has(font.value)),
      [filteredFonts, sceneFamilies]
    );
    const availableFilteredFonts = useMemo(
      () => filteredFonts.filter((font) => !sceneFamilies.has(font.value)),
      [filteredFonts, sceneFamilies]
    );
    const renderFont = (font, index) => /* @__PURE__ */ jsxs17(
      DropdownMenuItem_default,
      {
        icon: font.icon,
        value: font.value,
        order: index,
        textStyle: {
          fontFamily: getFontFamilyString({ fontFamily: font.value })
        },
        hovered: font.value === hoveredFont?.value,
        selected: font.value === selectedFontFamily,
        tabIndex: font.value === selectedFontFamily ? 0 : -1,
        onClick: (e) => {
          onSelect(Number(e.currentTarget.value));
        },
        onMouseMove: () => {
          if (hoveredFont?.value !== font.value) {
            onHover(font.value);
          }
        },
        children: [
          font.text,
          font.badge && /* @__PURE__ */ jsx30(DropDownMenuItemBadge, { type: font.badge.type, children: font.badge.placeholder })
        ]
      },
      font.value
    );
    const groups = [];
    if (sceneFilteredFonts.length) {
      groups.push(
        /* @__PURE__ */ jsx30(DropdownMenuGroup_default, { title: t("fontList.sceneFonts"), children: sceneFilteredFonts.map(renderFont) }, "group_1")
      );
    }
    if (availableFilteredFonts.length) {
      groups.push(
        /* @__PURE__ */ jsx30(DropdownMenuGroup_default, { title: t("fontList.availableFonts"), children: availableFilteredFonts.map(
          (font, index) => renderFont(font, index + sceneFilteredFonts.length)
        ) }, "group_2")
      );
    }
    return /* @__PURE__ */ jsxs17(
      PropertiesPopover,
      {
        className: "properties-content",
        container,
        style: { width: "15rem" },
        onClose,
        onPointerLeave: onLeave,
        onKeyDown,
        children: [
          /* @__PURE__ */ jsx30(
            QuickSearch,
            {
              ref: inputRef,
              placeholder: t("quickSearch.placeholder"),
              onChange: debounce(setSearchTerm, 20)
            }
          ),
          /* @__PURE__ */ jsx30(
            ScrollableList,
            {
              className: "dropdown-menu fonts manual-hover",
              placeholder: t("fontList.empty"),
              children: groups.length ? groups : null
            }
          )
        ]
      }
    );
  },
  (prev, next) => prev.selectedFontFamily === next.selectedFontFamily && prev.hoveredFontFamily === next.hoveredFontFamily
);

// components/FontPicker/FontPickerTrigger.tsx
init_define_import_meta_env();
import * as Popover4 from "@radix-ui/react-popover";
import { useMemo as useMemo2 } from "react";
init_icons();
import { jsx as jsx31 } from "react/jsx-runtime";
var FontPickerTrigger = ({
  selectedFontFamily
}) => {
  const isTriggerActive = useMemo2(
    () => Boolean(selectedFontFamily && !isDefaultFont(selectedFontFamily)),
    [selectedFontFamily]
  );
  return /* @__PURE__ */ jsx31(Popover4.Trigger, { asChild: true, children: /* @__PURE__ */ jsx31("div", { children: /* @__PURE__ */ jsx31(
    ButtonIcon,
    {
      standalone: true,
      icon: TextIcon,
      title: t("labels.showFonts"),
      className: "properties-trigger",
      testId: "font-family-show-fonts",
      active: isTriggerActive,
      onClick: () => {
      }
    }
  ) }) });
};

// components/FontPicker/FontPicker.tsx
init_icons();
init_constants();
import { jsx as jsx32, jsxs as jsxs18 } from "react/jsx-runtime";
var DEFAULT_FONTS = [
  {
    value: FONT_FAMILY.Excalifont,
    icon: FreedrawIcon,
    text: t("labels.handDrawn"),
    testId: "font-family-handrawn"
  },
  {
    value: FONT_FAMILY.Nunito,
    icon: FontFamilyNormalIcon,
    text: t("labels.normal"),
    testId: "font-family-normal"
  },
  {
    value: FONT_FAMILY["Comic Shanns"],
    icon: FontFamilyCodeIcon,
    text: t("labels.code"),
    testId: "font-family-code"
  }
];
var defaultFontFamilies = new Set(DEFAULT_FONTS.map((x) => x.value));
var isDefaultFont = (fontFamily) => {
  if (!fontFamily) {
    return false;
  }
  return defaultFontFamilies.has(fontFamily);
};
var FontPicker = React15.memo(
  ({
    isOpened,
    selectedFontFamily,
    hoveredFontFamily,
    onSelect,
    onHover,
    onLeave,
    onPopupChange
  }) => {
    const defaultFonts = useMemo3(() => DEFAULT_FONTS, []);
    const onSelectCallback = useCallback3(
      (value) => {
        if (value) {
          onSelect(value);
        }
      },
      [onSelect]
    );
    return /* @__PURE__ */ jsxs18("div", { role: "dialog", "aria-modal": "true", className: "FontPicker__container", children: [
      /* @__PURE__ */ jsx32(
        ButtonIconSelect,
        {
          type: "button",
          options: defaultFonts,
          value: selectedFontFamily,
          onClick: onSelectCallback
        }
      ),
      /* @__PURE__ */ jsx32(ButtonSeparator, {}),
      /* @__PURE__ */ jsxs18(Popover5.Root, { open: isOpened, onOpenChange: onPopupChange, children: [
        /* @__PURE__ */ jsx32(FontPickerTrigger, { selectedFontFamily }),
        isOpened && /* @__PURE__ */ jsx32(
          FontPickerList,
          {
            selectedFontFamily,
            hoveredFontFamily,
            onSelect: onSelectCallback,
            onHover,
            onLeave,
            onOpen: () => onPopupChange(true),
            onClose: () => onPopupChange(false)
          }
        )
      ] })
    ] });
  },
  (prev, next) => prev.isOpened === next.isOpened && prev.selectedFontFamily === next.selectedFontFamily && prev.hoveredFontFamily === next.hoveredFontFamily
);

// actions/actionProperties.tsx
init_icons();
init_constants();
init_element();
init_mutateElement();
init_textElement();
init_typeChecks();
init_keys();
init_random();
init_scene();
init_comparisons();
init_utils2();
init_register();
init_store();
init_fonts();
init_binding();
init_routing();
init_linearElementEditor();
init_math();
import { Fragment as Fragment5, jsx as jsx33, jsxs as jsxs19 } from "react/jsx-runtime";
var FONT_SIZE_RELATIVE_INCREASE_STEP = 0.1;
var changeProperty = (elements, appState, callback, includeBoundText = false) => {
  const selectedElementIds = arrayToMap(
    getSelectedElements(elements, appState, {
      includeBoundTextElement: includeBoundText
    })
  );
  return elements.map((element) => {
    if (selectedElementIds.get(element.id) || element.id === appState.editingTextElement?.id) {
      return callback(element);
    }
    return element;
  });
};
var getFormValue = function(elements, appState, getAttribute, isRelevantElement, defaultValue) {
  const editingTextElement = appState.editingTextElement;
  const nonDeletedElements = getNonDeletedElements2(elements);
  let ret = null;
  if (editingTextElement) {
    ret = getAttribute(editingTextElement);
  }
  if (!ret) {
    const hasSelection = isSomeElementSelected(nonDeletedElements, appState);
    if (hasSelection) {
      ret = getCommonAttributeOfSelectedElements(
        isRelevantElement === true ? nonDeletedElements : nonDeletedElements.filter((el) => isRelevantElement(el)),
        appState,
        getAttribute
      ) ?? (typeof defaultValue === "function" ? defaultValue(true) : defaultValue);
    } else {
      ret = typeof defaultValue === "function" ? defaultValue(false) : defaultValue;
    }
  }
  return ret;
};
var offsetElementAfterFontResize = (prevElement, nextElement) => {
  if (isBoundToContainer(nextElement) || !nextElement.autoResize) {
    return nextElement;
  }
  return mutateElement(
    nextElement,
    {
      x: prevElement.textAlign === "left" ? prevElement.x : prevElement.x + (prevElement.width - nextElement.width) / (prevElement.textAlign === "center" ? 2 : 1),
      // centering vertically is non-standard, but for Excalidraw I think
      // it makes sense
      y: prevElement.y + (prevElement.height - nextElement.height) / 2
    },
    false
  );
};
var changeFontSize = (elements, appState, app, getNewFontSize, fallbackValue) => {
  const newFontSizes = /* @__PURE__ */ new Set();
  return {
    elements: changeProperty(
      elements,
      appState,
      (oldElement) => {
        if (isTextElement(oldElement)) {
          const newFontSize = getNewFontSize(oldElement);
          newFontSizes.add(newFontSize);
          let newElement2 = newElementWith(oldElement, {
            fontSize: newFontSize
          });
          redrawTextBoundingBox(
            newElement2,
            app.scene.getContainerElement(oldElement),
            app.scene.getNonDeletedElementsMap()
          );
          newElement2 = offsetElementAfterFontResize(oldElement, newElement2);
          return newElement2;
        }
        return oldElement;
      },
      true
    ),
    appState: {
      ...appState,
      // update state only if we've set all select text elements to
      // the same font size
      currentItemFontSize: newFontSizes.size === 1 ? [...newFontSizes][0] : fallbackValue ?? appState.currentItemFontSize
    },
    storeAction: StoreAction.CAPTURE
  };
};
var actionChangeStrokeColor = register({
  name: "changeStrokeColor",
  label: "labels.stroke",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      ...value.currentItemStrokeColor && {
        elements: changeProperty(
          elements,
          appState,
          (el) => {
            return hasStrokeColor(el.type) ? newElementWith(el, {
              strokeColor: value.currentItemStrokeColor
            }) : el;
          },
          true
        )
      },
      appState: {
        ...appState,
        ...value
      },
      storeAction: !!value.currentItemStrokeColor ? StoreAction.CAPTURE : StoreAction.NONE
    };
  },
  PanelComponent: ({ elements, appState, updateData, appProps }) => /* @__PURE__ */ jsxs19(Fragment5, { children: [
    /* @__PURE__ */ jsx33("h3", { "aria-hidden": "true", children: t("labels.stroke") }),
    /* @__PURE__ */ jsx33(
      ColorPicker,
      {
        topPicks: DEFAULT_ELEMENT_STROKE_PICKS,
        palette: DEFAULT_ELEMENT_STROKE_COLOR_PALETTE,
        type: "elementStroke",
        label: t("labels.stroke"),
        color: getFormValue(
          elements,
          appState,
          (element) => element.strokeColor,
          true,
          appState.currentItemStrokeColor
        ),
        onChange: (color) => updateData({ currentItemStrokeColor: color }),
        elements,
        appState,
        updateData
      }
    )
  ] })
});
var actionChangeBackgroundColor = register({
  name: "changeBackgroundColor",
  label: "labels.changeBackground",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      ...value.currentItemBackgroundColor && {
        elements: changeProperty(
          elements,
          appState,
          (el) => newElementWith(el, {
            backgroundColor: value.currentItemBackgroundColor
          })
        )
      },
      appState: {
        ...appState,
        ...value
      },
      storeAction: !!value.currentItemBackgroundColor ? StoreAction.CAPTURE : StoreAction.NONE
    };
  },
  PanelComponent: ({ elements, appState, updateData, appProps }) => /* @__PURE__ */ jsxs19(Fragment5, { children: [
    /* @__PURE__ */ jsx33("h3", { "aria-hidden": "true", children: t("labels.background") }),
    /* @__PURE__ */ jsx33(
      ColorPicker,
      {
        topPicks: DEFAULT_ELEMENT_BACKGROUND_PICKS,
        palette: DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE,
        type: "elementBackground",
        label: t("labels.background"),
        color: getFormValue(
          elements,
          appState,
          (element) => element.backgroundColor,
          true,
          appState.currentItemBackgroundColor
        ),
        onChange: (color) => updateData({ currentItemBackgroundColor: color }),
        elements,
        appState,
        updateData
      }
    )
  ] })
});
var actionChangeFillStyle = register({
  name: "changeFillStyle",
  label: "labels.fill",
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    trackEvent(
      "element",
      "changeFillStyle",
      `${value} (${app.device.editor.isMobile ? "mobile" : "desktop"})`
    );
    return {
      elements: changeProperty(
        elements,
        appState,
        (el) => newElementWith(el, {
          fillStyle: value
        })
      ),
      appState: { ...appState, currentItemFillStyle: value },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => {
    const selectedElements = getSelectedElements(elements, appState);
    const allElementsZigZag = selectedElements.length > 0 && selectedElements.every((el) => el.fillStyle === "zigzag");
    return /* @__PURE__ */ jsxs19("fieldset", { children: [
      /* @__PURE__ */ jsx33("legend", { children: t("labels.fill") }),
      /* @__PURE__ */ jsx33(
        ButtonIconSelect,
        {
          type: "button",
          options: [
            {
              value: "hachure",
              text: `${allElementsZigZag ? t("labels.zigzag") : t("labels.hachure")} (${getShortcutKey("Alt-Click")})`,
              icon: allElementsZigZag ? FillZigZagIcon : FillHachureIcon,
              active: allElementsZigZag ? true : void 0,
              testId: `fill-hachure`
            },
            {
              value: "cross-hatch",
              text: t("labels.crossHatch"),
              icon: FillCrossHatchIcon,
              testId: `fill-cross-hatch`
            },
            {
              value: "solid",
              text: t("labels.solid"),
              icon: FillSolidIcon,
              testId: `fill-solid`
            }
          ],
          value: getFormValue(
            elements,
            appState,
            (element) => element.fillStyle,
            (element) => element.hasOwnProperty("fillStyle"),
            (hasSelection) => hasSelection ? null : appState.currentItemFillStyle
          ),
          onClick: (value, event) => {
            const nextValue = event.altKey && value === "hachure" && selectedElements.every((el) => el.fillStyle === "hachure") ? "zigzag" : value;
            updateData(nextValue);
          }
        }
      )
    ] });
  }
});
var actionChangeStrokeWidth = register({
  name: "changeStrokeWidth",
  label: "labels.strokeWidth",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      elements: changeProperty(
        elements,
        appState,
        (el) => newElementWith(el, {
          strokeWidth: value
        })
      ),
      appState: { ...appState, currentItemStrokeWidth: value },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsxs19("fieldset", { children: [
    /* @__PURE__ */ jsx33("legend", { children: t("labels.strokeWidth") }),
    /* @__PURE__ */ jsx33(
      ButtonIconSelect,
      {
        group: "stroke-width",
        options: [
          {
            value: STROKE_WIDTH.thin,
            text: t("labels.thin"),
            icon: StrokeWidthBaseIcon,
            testId: "strokeWidth-thin"
          },
          {
            value: STROKE_WIDTH.bold,
            text: t("labels.bold"),
            icon: StrokeWidthBoldIcon,
            testId: "strokeWidth-bold"
          },
          {
            value: STROKE_WIDTH.extraBold,
            text: t("labels.extraBold"),
            icon: StrokeWidthExtraBoldIcon,
            testId: "strokeWidth-extraBold"
          }
        ],
        value: getFormValue(
          elements,
          appState,
          (element) => element.strokeWidth,
          (element) => element.hasOwnProperty("strokeWidth"),
          (hasSelection) => hasSelection ? null : appState.currentItemStrokeWidth
        ),
        onChange: (value) => updateData(value)
      }
    )
  ] })
});
var actionChangeSloppiness = register({
  name: "changeSloppiness",
  label: "labels.sloppiness",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      elements: changeProperty(
        elements,
        appState,
        (el) => newElementWith(el, {
          seed: randomInteger(),
          roughness: value
        })
      ),
      appState: { ...appState, currentItemRoughness: value },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsxs19("fieldset", { children: [
    /* @__PURE__ */ jsx33("legend", { children: t("labels.sloppiness") }),
    /* @__PURE__ */ jsx33(
      ButtonIconSelect,
      {
        group: "sloppiness",
        options: [
          {
            value: 0,
            text: t("labels.architect"),
            icon: SloppinessArchitectIcon
          },
          {
            value: 1,
            text: t("labels.artist"),
            icon: SloppinessArtistIcon
          },
          {
            value: 2,
            text: t("labels.cartoonist"),
            icon: SloppinessCartoonistIcon
          }
        ],
        value: getFormValue(
          elements,
          appState,
          (element) => element.roughness,
          (element) => element.hasOwnProperty("roughness"),
          (hasSelection) => hasSelection ? null : appState.currentItemRoughness
        ),
        onChange: (value) => updateData(value)
      }
    )
  ] })
});
var actionChangeStrokeStyle = register({
  name: "changeStrokeStyle",
  label: "labels.strokeStyle",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      elements: changeProperty(
        elements,
        appState,
        (el) => newElementWith(el, {
          strokeStyle: value
        })
      ),
      appState: { ...appState, currentItemStrokeStyle: value },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsxs19("fieldset", { children: [
    /* @__PURE__ */ jsx33("legend", { children: t("labels.strokeStyle") }),
    /* @__PURE__ */ jsx33(
      ButtonIconSelect,
      {
        group: "strokeStyle",
        options: [
          {
            value: "solid",
            text: t("labels.strokeStyle_solid"),
            icon: StrokeWidthBaseIcon
          },
          {
            value: "dashed",
            text: t("labels.strokeStyle_dashed"),
            icon: StrokeStyleDashedIcon
          },
          {
            value: "dotted",
            text: t("labels.strokeStyle_dotted"),
            icon: StrokeStyleDottedIcon
          }
        ],
        value: getFormValue(
          elements,
          appState,
          (element) => element.strokeStyle,
          (element) => element.hasOwnProperty("strokeStyle"),
          (hasSelection) => hasSelection ? null : appState.currentItemStrokeStyle
        ),
        onChange: (value) => updateData(value)
      }
    )
  ] })
});
var actionChangeOpacity = register({
  name: "changeOpacity",
  label: "labels.opacity",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      elements: changeProperty(
        elements,
        appState,
        (el) => newElementWith(el, {
          opacity: value
        }),
        true
      ),
      appState: { ...appState, currentItemOpacity: value },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsxs19("label", { className: "control-label", children: [
    t("labels.opacity"),
    /* @__PURE__ */ jsx33(
      "input",
      {
        type: "range",
        min: "0",
        max: "100",
        step: "10",
        onChange: (event) => updateData(+event.target.value),
        value: getFormValue(
          elements,
          appState,
          (element) => element.opacity,
          true,
          appState.currentItemOpacity
        ) ?? void 0
      }
    )
  ] })
});
var actionChangeFontSize = register({
  name: "changeFontSize",
  label: "labels.fontSize",
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    return changeFontSize(elements, appState, app, () => value, value);
  },
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsxs19("fieldset", { children: [
    /* @__PURE__ */ jsx33("legend", { children: t("labels.fontSize") }),
    /* @__PURE__ */ jsx33(
      ButtonIconSelect,
      {
        group: "font-size",
        options: [
          {
            value: 16,
            text: t("labels.small"),
            icon: FontSizeSmallIcon,
            testId: "fontSize-small"
          },
          {
            value: 20,
            text: t("labels.medium"),
            icon: FontSizeMediumIcon,
            testId: "fontSize-medium"
          },
          {
            value: 28,
            text: t("labels.large"),
            icon: FontSizeLargeIcon,
            testId: "fontSize-large"
          },
          {
            value: 36,
            text: t("labels.veryLarge"),
            icon: FontSizeExtraLargeIcon,
            testId: "fontSize-veryLarge"
          }
        ],
        value: getFormValue(
          elements,
          appState,
          (element) => {
            if (isTextElement(element)) {
              return element.fontSize;
            }
            const boundTextElement = getBoundTextElement(
              element,
              app.scene.getNonDeletedElementsMap()
            );
            if (boundTextElement) {
              return boundTextElement.fontSize;
            }
            return null;
          },
          (element) => isTextElement(element) || getBoundTextElement(
            element,
            app.scene.getNonDeletedElementsMap()
          ) !== null,
          (hasSelection) => hasSelection ? null : appState.currentItemFontSize || DEFAULT_FONT_SIZE
        ),
        onChange: (value) => updateData(value)
      }
    )
  ] })
});
var actionDecreaseFontSize = register({
  name: "decreaseFontSize",
  label: "labels.decreaseFontSize",
  icon: fontSizeIcon,
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    return changeFontSize(
      elements,
      appState,
      app,
      (element) => Math.round(
        // get previous value before relative increase (doesn't work fully
        // due to rounding and float precision issues)
        1 / (1 + FONT_SIZE_RELATIVE_INCREASE_STEP) * element.fontSize
      )
    );
  },
  keyTest: (event) => {
    return event[KEYS.CTRL_OR_CMD] && event.shiftKey && // KEYS.COMMA needed for MacOS
    (event.key === KEYS.CHEVRON_LEFT || event.key === KEYS.COMMA);
  }
});
var actionIncreaseFontSize = register({
  name: "increaseFontSize",
  label: "labels.increaseFontSize",
  icon: fontSizeIcon,
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    return changeFontSize(
      elements,
      appState,
      app,
      (element) => Math.round(element.fontSize * (1 + FONT_SIZE_RELATIVE_INCREASE_STEP))
    );
  },
  keyTest: (event) => {
    return event[KEYS.CTRL_OR_CMD] && event.shiftKey && // KEYS.PERIOD needed for MacOS
    (event.key === KEYS.CHEVRON_RIGHT || event.key === KEYS.PERIOD);
  }
});
var actionChangeFontFamily = register({
  name: "changeFontFamily",
  label: "labels.fontFamily",
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    const { cachedElements, resetAll, resetContainers, ...nextAppState } = value;
    if (resetAll) {
      const nextElements = changeProperty(
        elements,
        appState,
        (element) => {
          const cachedElement = cachedElements?.get(element.id);
          if (cachedElement) {
            const newElement2 = newElementWith(element, {
              ...cachedElement
            });
            return newElement2;
          }
          return element;
        },
        true
      );
      return {
        elements: nextElements,
        appState: {
          ...appState,
          ...nextAppState
        },
        storeAction: StoreAction.UPDATE
      };
    }
    const { currentItemFontFamily, currentHoveredFontFamily } = value;
    let nexStoreAction = StoreAction.NONE;
    let nextFontFamily;
    let skipOnHoverRender = false;
    if (currentItemFontFamily) {
      nextFontFamily = currentItemFontFamily;
      nexStoreAction = StoreAction.CAPTURE;
    } else if (currentHoveredFontFamily) {
      nextFontFamily = currentHoveredFontFamily;
      nexStoreAction = StoreAction.NONE;
      const selectedTextElements = getSelectedElements(elements, appState, {
        includeBoundTextElement: true
      }).filter((element) => isTextElement(element));
      if (selectedTextElements.length > 200) {
        skipOnHoverRender = true;
      } else {
        let i = 0;
        let textLengthAccumulator = 0;
        while (i < selectedTextElements.length && textLengthAccumulator < 5e3) {
          const textElement = selectedTextElements[i];
          textLengthAccumulator += textElement?.originalText.length || 0;
          i++;
        }
        if (textLengthAccumulator > 5e3) {
          skipOnHoverRender = true;
        }
      }
    }
    const result = {
      appState: {
        ...appState,
        ...nextAppState
      },
      storeAction: nexStoreAction
    };
    if (nextFontFamily && !skipOnHoverRender) {
      const elementContainerMapping = /* @__PURE__ */ new Map();
      let uniqueChars = /* @__PURE__ */ new Set();
      let skipFontFaceCheck = false;
      const fontsCache = Array.from(Fonts.loadedFontsCache.values());
      const fontFamily = Object.entries(FONT_FAMILY).find(
        ([_, value2]) => value2 === nextFontFamily
      )?.[0];
      if (currentHoveredFontFamily && fontFamily && fontsCache.some((sig) => sig.startsWith(fontFamily))) {
        skipFontFaceCheck = true;
      }
      Object.assign(result, {
        elements: changeProperty(
          elements,
          appState,
          (oldElement) => {
            if (isTextElement(oldElement) && (oldElement.fontFamily !== nextFontFamily || currentItemFontFamily)) {
              const newElement2 = newElementWith(
                oldElement,
                {
                  fontFamily: nextFontFamily,
                  lineHeight: getLineHeight(nextFontFamily)
                }
              );
              const cachedContainer = cachedElements?.get(oldElement.containerId || "") || {};
              const container = app.scene.getContainerElement(oldElement);
              if (resetContainers && container && cachedContainer) {
                mutateElement(container, { ...cachedContainer }, false);
              }
              if (!skipFontFaceCheck) {
                uniqueChars = /* @__PURE__ */ new Set([
                  ...uniqueChars,
                  ...Array.from(newElement2.originalText)
                ]);
              }
              elementContainerMapping.set(newElement2, container);
              return newElement2;
            }
            return oldElement;
          },
          true
        )
      });
      const fontString = `10px ${getFontFamilyString({
        fontFamily: nextFontFamily
      })}`;
      const chars = Array.from(uniqueChars.values()).join();
      if (skipFontFaceCheck || window.document.fonts.check(fontString, chars)) {
        for (const [element, container] of elementContainerMapping) {
          redrawTextBoundingBox(
            element,
            container,
            app.scene.getNonDeletedElementsMap(),
            false
          );
        }
      } else {
        window.document.fonts.load(fontString, chars).then((fontFaces) => {
          for (const [element, container] of elementContainerMapping) {
            const latestElement = app.scene.getElement(element.id);
            const latestContainer = container ? app.scene.getElement(container.id) : null;
            if (latestElement) {
              redrawTextBoundingBox(
                latestElement,
                latestContainer,
                app.scene.getNonDeletedElementsMap(),
                false
              );
            }
          }
          app.fonts.onLoaded(fontFaces);
        });
      }
    }
    return result;
  },
  PanelComponent: ({ elements, appState, app, updateData }) => {
    const cachedElementsRef = useRef12(/* @__PURE__ */ new Map());
    const prevSelectedFontFamilyRef = useRef12(null);
    const [batchedData, setBatchedData] = useState8({});
    const isUnmounted = useRef12(true);
    const selectedFontFamily = useMemo4(() => {
      const getFontFamily = (elementsArray, elementsMap) => getFormValue(
        elementsArray,
        appState,
        (element) => {
          if (isTextElement(element)) {
            return element.fontFamily;
          }
          const boundTextElement = getBoundTextElement(element, elementsMap);
          if (boundTextElement) {
            return boundTextElement.fontFamily;
          }
          return null;
        },
        (element) => isTextElement(element) || getBoundTextElement(element, elementsMap) !== null,
        (hasSelection) => hasSelection ? null : appState.currentItemFontFamily || DEFAULT_FONT_FAMILY
      );
      if (batchedData.openPopup === "fontFamily" && appState.openPopup === "fontFamily") {
        return getFontFamily(
          Array.from(cachedElementsRef.current?.values() ?? []),
          cachedElementsRef.current
        );
      }
      if (!batchedData.openPopup && appState.openPopup !== "fontFamily") {
        return getFontFamily(elements, app.scene.getNonDeletedElementsMap());
      }
      return prevSelectedFontFamilyRef.current;
    }, [batchedData.openPopup, appState, elements, app.scene]);
    useEffect14(() => {
      prevSelectedFontFamilyRef.current = selectedFontFamily;
    }, [selectedFontFamily]);
    useEffect14(() => {
      if (Object.keys(batchedData).length) {
        updateData(batchedData);
        setBatchedData({});
      }
    }, [batchedData]);
    useEffect14(() => {
      isUnmounted.current = false;
      return () => {
        isUnmounted.current = true;
      };
    }, []);
    return /* @__PURE__ */ jsxs19("fieldset", { children: [
      /* @__PURE__ */ jsx33("legend", { children: t("labels.fontFamily") }),
      /* @__PURE__ */ jsx33(
        FontPicker,
        {
          isOpened: appState.openPopup === "fontFamily",
          selectedFontFamily,
          hoveredFontFamily: appState.currentHoveredFontFamily,
          onSelect: (fontFamily) => {
            setBatchedData({
              openPopup: null,
              currentHoveredFontFamily: null,
              currentItemFontFamily: fontFamily
            });
            cachedElementsRef.current.clear();
          },
          onHover: (fontFamily) => {
            setBatchedData({
              currentHoveredFontFamily: fontFamily,
              cachedElements: new Map(cachedElementsRef.current),
              resetContainers: true
            });
          },
          onLeave: () => {
            setBatchedData({
              currentHoveredFontFamily: null,
              cachedElements: new Map(cachedElementsRef.current),
              resetAll: true
            });
          },
          onPopupChange: (open) => {
            if (open) {
              cachedElementsRef.current.clear();
              const { editingTextElement } = appState;
              if (editingTextElement?.type === "text") {
                const latesteditingTextElement = app.scene.getElement(
                  editingTextElement.id
                );
                cachedElementsRef.current.set(
                  editingTextElement.id,
                  newElementWith(
                    latesteditingTextElement || editingTextElement,
                    {},
                    true
                  )
                );
              } else {
                const selectedElements = getSelectedElements(
                  elements,
                  appState,
                  {
                    includeBoundTextElement: true
                  }
                );
                for (const element of selectedElements) {
                  cachedElementsRef.current.set(
                    element.id,
                    newElementWith(element, {}, true)
                  );
                }
              }
              setBatchedData({
                openPopup: "fontFamily"
              });
            } else {
              const data = {
                openPopup: null,
                currentHoveredFontFamily: null,
                cachedElements: new Map(cachedElementsRef.current),
                resetAll: true
              };
              if (isUnmounted.current) {
                updateData({ ...batchedData, ...data });
              } else {
                setBatchedData(data);
              }
              cachedElementsRef.current.clear();
            }
          }
        }
      )
    ] });
  }
});
var actionChangeTextAlign = register({
  name: "changeTextAlign",
  label: "Change text alignment",
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    return {
      elements: changeProperty(
        elements,
        appState,
        (oldElement) => {
          if (isTextElement(oldElement)) {
            const newElement2 = newElementWith(
              oldElement,
              { textAlign: value }
            );
            redrawTextBoundingBox(
              newElement2,
              app.scene.getContainerElement(oldElement),
              app.scene.getNonDeletedElementsMap()
            );
            return newElement2;
          }
          return oldElement;
        },
        true
      ),
      appState: {
        ...appState,
        currentItemTextAlign: value
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData, app }) => {
    const elementsMap = app.scene.getNonDeletedElementsMap();
    return /* @__PURE__ */ jsxs19("fieldset", { children: [
      /* @__PURE__ */ jsx33("legend", { children: t("labels.textAlign") }),
      /* @__PURE__ */ jsx33(
        ButtonIconSelect,
        {
          group: "text-align",
          options: [
            {
              value: "left",
              text: t("labels.left"),
              icon: TextAlignLeftIcon,
              testId: "align-left"
            },
            {
              value: "center",
              text: t("labels.center"),
              icon: TextAlignCenterIcon,
              testId: "align-horizontal-center"
            },
            {
              value: "right",
              text: t("labels.right"),
              icon: TextAlignRightIcon,
              testId: "align-right"
            }
          ],
          value: getFormValue(
            elements,
            appState,
            (element) => {
              if (isTextElement(element)) {
                return element.textAlign;
              }
              const boundTextElement = getBoundTextElement(
                element,
                elementsMap
              );
              if (boundTextElement) {
                return boundTextElement.textAlign;
              }
              return null;
            },
            (element) => isTextElement(element) || getBoundTextElement(element, elementsMap) !== null,
            (hasSelection) => hasSelection ? null : appState.currentItemTextAlign
          ),
          onChange: (value) => updateData(value)
        }
      )
    ] });
  }
});
var actionChangeVerticalAlign = register({
  name: "changeVerticalAlign",
  label: "Change vertical alignment",
  trackEvent: { category: "element" },
  perform: (elements, appState, value, app) => {
    return {
      elements: changeProperty(
        elements,
        appState,
        (oldElement) => {
          if (isTextElement(oldElement)) {
            const newElement2 = newElementWith(
              oldElement,
              { verticalAlign: value }
            );
            redrawTextBoundingBox(
              newElement2,
              app.scene.getContainerElement(oldElement),
              app.scene.getNonDeletedElementsMap()
            );
            return newElement2;
          }
          return oldElement;
        },
        true
      ),
      appState: {
        ...appState
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData, app }) => {
    return /* @__PURE__ */ jsx33("fieldset", { children: /* @__PURE__ */ jsx33(
      ButtonIconSelect,
      {
        group: "text-align",
        options: [
          {
            value: VERTICAL_ALIGN.TOP,
            text: t("labels.alignTop"),
            icon: /* @__PURE__ */ jsx33(TextAlignTopIcon, { theme: appState.theme }),
            testId: "align-top"
          },
          {
            value: VERTICAL_ALIGN.MIDDLE,
            text: t("labels.centerVertically"),
            icon: /* @__PURE__ */ jsx33(TextAlignMiddleIcon, { theme: appState.theme }),
            testId: "align-middle"
          },
          {
            value: VERTICAL_ALIGN.BOTTOM,
            text: t("labels.alignBottom"),
            icon: /* @__PURE__ */ jsx33(TextAlignBottomIcon, { theme: appState.theme }),
            testId: "align-bottom"
          }
        ],
        value: getFormValue(
          elements,
          appState,
          (element) => {
            if (isTextElement(element) && element.containerId) {
              return element.verticalAlign;
            }
            const boundTextElement = getBoundTextElement(
              element,
              app.scene.getNonDeletedElementsMap()
            );
            if (boundTextElement) {
              return boundTextElement.verticalAlign;
            }
            return null;
          },
          (element) => isTextElement(element) || getBoundTextElement(
            element,
            app.scene.getNonDeletedElementsMap()
          ) !== null,
          (hasSelection) => hasSelection ? null : VERTICAL_ALIGN.MIDDLE
        ),
        onChange: (value) => updateData(value)
      }
    ) });
  }
});
var actionChangeRoundness = register({
  name: "changeRoundness",
  label: "Change edge roundness",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      elements: changeProperty(elements, appState, (el) => {
        if (isElbowArrow(el)) {
          return el;
        }
        return newElementWith(el, {
          roundness: value === "round" ? {
            type: isUsingAdaptiveRadius(el.type) ? ROUNDNESS.ADAPTIVE_RADIUS : ROUNDNESS.PROPORTIONAL_RADIUS
          } : null
        });
      }),
      appState: {
        ...appState,
        currentItemRoundness: value
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => {
    const targetElements = getTargetElements(
      getNonDeletedElements2(elements),
      appState
    );
    const hasLegacyRoundness = targetElements.some(
      (el) => el.roundness?.type === ROUNDNESS.LEGACY
    );
    return /* @__PURE__ */ jsxs19("fieldset", { children: [
      /* @__PURE__ */ jsx33("legend", { children: t("labels.edges") }),
      /* @__PURE__ */ jsx33(
        ButtonIconSelect,
        {
          group: "edges",
          options: [
            {
              value: "sharp",
              text: t("labels.sharp"),
              icon: EdgeSharpIcon
            },
            {
              value: "round",
              text: t("labels.round"),
              icon: EdgeRoundIcon
            }
          ],
          value: getFormValue(
            elements,
            appState,
            (element) => hasLegacyRoundness ? null : element.roundness ? "round" : "sharp",
            (element) => !isArrowElement(element) && element.hasOwnProperty("roundness"),
            (hasSelection) => hasSelection ? null : appState.currentItemRoundness
          ),
          onChange: (value) => updateData(value)
        }
      )
    ] });
  }
});
var getArrowheadOptions = (flip) => {
  return [
    {
      value: null,
      text: t("labels.arrowhead_none"),
      keyBinding: "q",
      icon: ArrowheadNoneIcon
    },
    {
      value: "arrow",
      text: t("labels.arrowhead_arrow"),
      keyBinding: "w",
      icon: /* @__PURE__ */ jsx33(ArrowheadArrowIcon, { flip })
    },
    {
      value: "bar",
      text: t("labels.arrowhead_bar"),
      keyBinding: "e",
      icon: /* @__PURE__ */ jsx33(ArrowheadBarIcon, { flip })
    },
    {
      value: "dot",
      text: t("labels.arrowhead_circle"),
      keyBinding: null,
      icon: /* @__PURE__ */ jsx33(ArrowheadCircleIcon, { flip }),
      showInPicker: false
    },
    {
      value: "circle",
      text: t("labels.arrowhead_circle"),
      keyBinding: "r",
      icon: /* @__PURE__ */ jsx33(ArrowheadCircleIcon, { flip }),
      showInPicker: false
    },
    {
      value: "circle_outline",
      text: t("labels.arrowhead_circle_outline"),
      keyBinding: null,
      icon: /* @__PURE__ */ jsx33(ArrowheadCircleOutlineIcon, { flip }),
      showInPicker: false
    },
    {
      value: "triangle",
      text: t("labels.arrowhead_triangle"),
      icon: /* @__PURE__ */ jsx33(ArrowheadTriangleIcon, { flip }),
      keyBinding: "t"
    },
    {
      value: "triangle_outline",
      text: t("labels.arrowhead_triangle_outline"),
      icon: /* @__PURE__ */ jsx33(ArrowheadTriangleOutlineIcon, { flip }),
      keyBinding: null,
      showInPicker: false
    },
    {
      value: "diamond",
      text: t("labels.arrowhead_diamond"),
      icon: /* @__PURE__ */ jsx33(ArrowheadDiamondIcon, { flip }),
      keyBinding: null,
      showInPicker: false
    },
    {
      value: "diamond_outline",
      text: t("labels.arrowhead_diamond_outline"),
      icon: /* @__PURE__ */ jsx33(ArrowheadDiamondOutlineIcon, { flip }),
      keyBinding: null,
      showInPicker: false
    }
  ];
};
var actionChangeArrowhead = register({
  name: "changeArrowhead",
  label: "Change arrowheads",
  trackEvent: false,
  perform: (elements, appState, value) => {
    return {
      elements: changeProperty(elements, appState, (el) => {
        if (isLinearElement(el)) {
          const { position, type } = value;
          if (position === "start") {
            const element = newElementWith(el, {
              startArrowhead: type
            });
            return element;
          } else if (position === "end") {
            const element = newElementWith(el, {
              endArrowhead: type
            });
            return element;
          }
        }
        return el;
      }),
      appState: {
        ...appState,
        [value.position === "start" ? "currentItemStartArrowhead" : "currentItemEndArrowhead"]: value.type
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => {
    const isRTL2 = getLanguage().rtl;
    return /* @__PURE__ */ jsxs19("fieldset", { children: [
      /* @__PURE__ */ jsx33("legend", { children: t("labels.arrowheads") }),
      /* @__PURE__ */ jsxs19("div", { className: "iconSelectList buttonList", children: [
        /* @__PURE__ */ jsx33(
          IconPicker,
          {
            label: "arrowhead_start",
            options: getArrowheadOptions(!isRTL2),
            value: getFormValue(
              elements,
              appState,
              (element) => isLinearElement(element) && canHaveArrowheads(element.type) ? element.startArrowhead : appState.currentItemStartArrowhead,
              true,
              appState.currentItemStartArrowhead
            ),
            onChange: (value) => updateData({ position: "start", type: value })
          }
        ),
        /* @__PURE__ */ jsx33(
          IconPicker,
          {
            label: "arrowhead_end",
            group: "arrowheads",
            options: getArrowheadOptions(!!isRTL2),
            value: getFormValue(
              elements,
              appState,
              (element) => isLinearElement(element) && canHaveArrowheads(element.type) ? element.endArrowhead : appState.currentItemEndArrowhead,
              true,
              appState.currentItemEndArrowhead
            ),
            onChange: (value) => updateData({ position: "end", type: value })
          }
        )
      ] })
    ] });
  }
});
var actionChangeArrowType = register({
  name: "changeArrowType",
  label: "Change arrow types",
  trackEvent: false,
  perform: (elements, appState, value, app) => {
    return {
      elements: changeProperty(elements, appState, (el) => {
        if (!isArrowElement(el)) {
          return el;
        }
        const newElement2 = newElementWith(el, {
          roundness: value === ARROW_TYPE.round ? {
            type: ROUNDNESS.PROPORTIONAL_RADIUS
          } : null,
          elbowed: value === ARROW_TYPE.elbow,
          points: value === ARROW_TYPE.elbow || el.elbowed ? [el.points[0], el.points[el.points.length - 1]] : el.points
        });
        if (isElbowArrow(newElement2)) {
          const elementsMap = app.scene.getNonDeletedElementsMap();
          app.dismissLinearEditor();
          const startGlobalPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
            newElement2,
            0,
            elementsMap
          );
          const endGlobalPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(
            newElement2,
            -1,
            elementsMap
          );
          const startHoveredElement = !newElement2.startBinding && getHoveredElementForBinding(
            tupleToCoors(startGlobalPoint),
            elements,
            elementsMap,
            true
          );
          const endHoveredElement = !newElement2.endBinding && getHoveredElementForBinding(
            tupleToCoors(endGlobalPoint),
            elements,
            elementsMap,
            true
          );
          const startElement = startHoveredElement ? startHoveredElement : newElement2.startBinding && elementsMap.get(
            newElement2.startBinding.elementId
          );
          const endElement = endHoveredElement ? endHoveredElement : newElement2.endBinding && elementsMap.get(
            newElement2.endBinding.elementId
          );
          const finalStartPoint = startHoveredElement ? bindPointToSnapToElementOutline(
            startGlobalPoint,
            endGlobalPoint,
            startHoveredElement,
            elementsMap
          ) : startGlobalPoint;
          const finalEndPoint = endHoveredElement ? bindPointToSnapToElementOutline(
            endGlobalPoint,
            startGlobalPoint,
            endHoveredElement,
            elementsMap
          ) : endGlobalPoint;
          startHoveredElement && bindLinearElement(
            newElement2,
            startHoveredElement,
            "start",
            elementsMap
          );
          endHoveredElement && bindLinearElement(
            newElement2,
            endHoveredElement,
            "end",
            elementsMap
          );
          mutateElbowArrow(
            newElement2,
            elementsMap,
            [finalStartPoint, finalEndPoint].map(
              (p) => pointFrom(p[0] - newElement2.x, p[1] - newElement2.y)
            ),
            vector(0, 0),
            {
              ...startElement && newElement2.startBinding ? {
                startBinding: {
                  // @ts-ignore TS cannot discern check above
                  ...newElement2.startBinding,
                  ...calculateFixedPointForElbowArrowBinding(
                    newElement2,
                    startElement,
                    "start",
                    elementsMap
                  )
                }
              } : {},
              ...endElement && newElement2.endBinding ? {
                endBinding: {
                  // @ts-ignore TS cannot discern check above
                  ...newElement2.endBinding,
                  ...calculateFixedPointForElbowArrowBinding(
                    newElement2,
                    endElement,
                    "end",
                    elementsMap
                  )
                }
              } : {}
            }
          );
        }
        return newElement2;
      }),
      appState: {
        ...appState,
        currentItemArrowType: value
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData }) => {
    return /* @__PURE__ */ jsxs19("fieldset", { children: [
      /* @__PURE__ */ jsx33("legend", { children: t("labels.arrowtypes") }),
      /* @__PURE__ */ jsx33(
        ButtonIconSelect,
        {
          group: "arrowtypes",
          options: [
            {
              value: ARROW_TYPE.sharp,
              text: t("labels.arrowtype_sharp"),
              icon: sharpArrowIcon,
              testId: "sharp-arrow"
            },
            {
              value: ARROW_TYPE.round,
              text: t("labels.arrowtype_round"),
              icon: roundArrowIcon,
              testId: "round-arrow"
            },
            {
              value: ARROW_TYPE.elbow,
              text: t("labels.arrowtype_elbowed"),
              icon: elbowArrowIcon,
              testId: "elbow-arrow"
            }
          ],
          value: getFormValue(
            elements,
            appState,
            (element) => {
              if (isArrowElement(element)) {
                return element.elbowed ? ARROW_TYPE.elbow : element.roundness ? ARROW_TYPE.round : ARROW_TYPE.sharp;
              }
              return null;
            },
            (element) => isArrowElement(element),
            (hasSelection) => hasSelection ? null : appState.currentItemArrowType
          ),
          onChange: (value) => updateData(value)
        }
      )
    ] });
  }
});

// actions/actionCanvas.tsx
init_define_import_meta_env();
init_icons();
init_constants();
init_element();
init_keys();
init_scene();
init_scroll();

// scene/zoom.ts
init_define_import_meta_env();
var getStateForZoom = ({
  viewportX,
  viewportY,
  nextZoom
}, appState) => {
  const appLayerX = viewportX - appState.offsetLeft;
  const appLayerY = viewportY - appState.offsetTop;
  const currentZoom = appState.zoom.value;
  const baseScrollX = appState.scrollX + (appLayerX - appLayerX / currentZoom);
  const baseScrollY = appState.scrollY + (appLayerY - appLayerY / currentZoom);
  const zoomOffsetScrollX = -(appLayerX - appLayerX / nextZoom);
  const zoomOffsetScrollY = -(appLayerY - appLayerY / nextZoom);
  return {
    scrollX: baseScrollX + zoomOffsetScrollX,
    scrollY: baseScrollY + zoomOffsetScrollY,
    zoom: {
      value: nextZoom
    }
  };
};

// actions/actionCanvas.tsx
init_utils2();
init_register();

// components/Tooltip.tsx
init_define_import_meta_env();
import { useEffect as useEffect15 } from "react";
import { jsx as jsx34 } from "react/jsx-runtime";
var getTooltipDiv = () => {
  const existingDiv = document.querySelector(
    ".excalidraw-tooltip"
  );
  if (existingDiv) {
    return existingDiv;
  }
  const div = document.createElement("div");
  document.body.appendChild(div);
  div.classList.add("excalidraw-tooltip");
  return div;
};
var updateTooltipPosition = (tooltip, item, position = "bottom") => {
  const tooltipRect = tooltip.getBoundingClientRect();
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  const margin = 5;
  let left = item.left + item.width / 2 - tooltipRect.width / 2;
  if (left < 0) {
    left = margin;
  } else if (left + tooltipRect.width >= viewportWidth) {
    left = viewportWidth - tooltipRect.width - margin;
  }
  let top;
  if (position === "bottom") {
    top = item.top + item.height + margin;
    if (top + tooltipRect.height >= viewportHeight) {
      top = item.top - tooltipRect.height - margin;
    }
  } else {
    top = item.top - tooltipRect.height - margin;
    if (top < 0) {
      top = item.top + item.height + margin;
    }
  }
  Object.assign(tooltip.style, {
    top: `${top}px`,
    left: `${left}px`
  });
};
var updateTooltip = (item, tooltip, label, long) => {
  tooltip.classList.add("excalidraw-tooltip--visible");
  tooltip.style.minWidth = long ? "50ch" : "10ch";
  tooltip.style.maxWidth = long ? "50ch" : "15ch";
  tooltip.textContent = label;
  const itemRect = item.getBoundingClientRect();
  updateTooltipPosition(tooltip, itemRect);
};
var Tooltip = ({
  children,
  label,
  long = false,
  style,
  disabled
}) => {
  useEffect15(() => {
    return () => getTooltipDiv().classList.remove("excalidraw-tooltip--visible");
  }, []);
  if (disabled) {
    return null;
  }
  return /* @__PURE__ */ jsx34(
    "div",
    {
      className: "excalidraw-tooltip-wrapper",
      onPointerEnter: (event) => updateTooltip(
        event.currentTarget,
        getTooltipDiv(),
        label,
        long
      ),
      onPointerLeave: () => getTooltipDiv().classList.remove("excalidraw-tooltip--visible"),
      style,
      children
    }
  );
};

// actions/actionCanvas.tsx
init_mutateElement();
init_appState();
init_colors();
init_cursor();
init_store();
init_math();
import { jsx as jsx35, jsxs as jsxs20 } from "react/jsx-runtime";
var actionChangeViewBackgroundColor = register({
  name: "changeViewBackgroundColor",
  label: "labels.canvasBackground",
  paletteName: "Change canvas background color",
  trackEvent: false,
  predicate: (elements, appState, props, app) => {
    return !!app.props.UIOptions.canvasActions.changeViewBackgroundColor && !appState.viewModeEnabled;
  },
  perform: (_, appState, value) => {
    return {
      appState: { ...appState, ...value },
      storeAction: !!value.viewBackgroundColor ? StoreAction.CAPTURE : StoreAction.NONE
    };
  },
  PanelComponent: ({ elements, appState, updateData, appProps }) => {
    return /* @__PURE__ */ jsx35(
      ColorPicker,
      {
        palette: null,
        topPicks: DEFAULT_CANVAS_BACKGROUND_PICKS,
        label: t("labels.canvasBackground"),
        type: "canvasBackground",
        color: appState.viewBackgroundColor,
        onChange: (color) => updateData({ viewBackgroundColor: color }),
        "data-testid": "canvas-background-picker",
        elements,
        appState,
        updateData
      }
    );
  }
});
var actionClearCanvas = register({
  name: "clearCanvas",
  label: "labels.clearCanvas",
  paletteName: "Clear canvas",
  icon: TrashIcon,
  trackEvent: { category: "canvas" },
  predicate: (elements, appState, props, app) => {
    return !!app.props.UIOptions.canvasActions.clearCanvas && !appState.viewModeEnabled;
  },
  perform: (elements, appState, _, app) => {
    app.imageCache.clear();
    return {
      elements: elements.map(
        (element) => newElementWith(element, { isDeleted: true })
      ),
      appState: {
        ...getDefaultAppState(),
        files: {},
        theme: appState.theme,
        penMode: appState.penMode,
        penDetected: appState.penDetected,
        exportBackground: appState.exportBackground,
        exportEmbedScene: appState.exportEmbedScene,
        gridSize: appState.gridSize,
        gridStep: appState.gridStep,
        gridModeEnabled: appState.gridModeEnabled,
        stats: appState.stats,
        pasteDialog: appState.pasteDialog,
        activeTool: appState.activeTool.type === "image" ? { ...appState.activeTool, type: "selection" } : appState.activeTool
      },
      storeAction: StoreAction.CAPTURE
    };
  }
});
var actionZoomIn = register({
  name: "zoomIn",
  label: "buttons.zoomIn",
  viewMode: true,
  icon: ZoomInIcon,
  trackEvent: { category: "canvas" },
  perform: (_elements, appState, _, app) => {
    return {
      appState: {
        ...appState,
        ...getStateForZoom(
          {
            viewportX: appState.width / 2 + appState.offsetLeft,
            viewportY: appState.height / 2 + appState.offsetTop,
            nextZoom: getNormalizedZoom(appState.zoom.value + ZOOM_STEP)
          },
          appState
        ),
        userToFollow: null
      },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx35(
    ToolButton,
    {
      type: "button",
      className: "zoom-in-button zoom-button",
      icon: ZoomInIcon,
      title: `${t("buttons.zoomIn")} \u2014 ${getShortcutKey("CtrlOrCmd++")}`,
      "aria-label": t("buttons.zoomIn"),
      disabled: appState.zoom.value >= MAX_ZOOM,
      onClick: () => {
        updateData(null);
      }
    }
  ),
  keyTest: (event) => (event.code === CODES.EQUAL || event.code === CODES.NUM_ADD) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)
});
var actionZoomOut = register({
  name: "zoomOut",
  label: "buttons.zoomOut",
  icon: ZoomOutIcon,
  viewMode: true,
  trackEvent: { category: "canvas" },
  perform: (_elements, appState, _, app) => {
    return {
      appState: {
        ...appState,
        ...getStateForZoom(
          {
            viewportX: appState.width / 2 + appState.offsetLeft,
            viewportY: appState.height / 2 + appState.offsetTop,
            nextZoom: getNormalizedZoom(appState.zoom.value - ZOOM_STEP)
          },
          appState
        ),
        userToFollow: null
      },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx35(
    ToolButton,
    {
      type: "button",
      className: "zoom-out-button zoom-button",
      icon: ZoomOutIcon,
      title: `${t("buttons.zoomOut")} \u2014 ${getShortcutKey("CtrlOrCmd+-")}`,
      "aria-label": t("buttons.zoomOut"),
      disabled: appState.zoom.value <= MIN_ZOOM,
      onClick: () => {
        updateData(null);
      }
    }
  ),
  keyTest: (event) => (event.code === CODES.MINUS || event.code === CODES.NUM_SUBTRACT) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)
});
var actionResetZoom = register({
  name: "resetZoom",
  label: "buttons.resetZoom",
  icon: ZoomResetIcon,
  viewMode: true,
  trackEvent: { category: "canvas" },
  perform: (_elements, appState, _, app) => {
    return {
      appState: {
        ...appState,
        ...getStateForZoom(
          {
            viewportX: appState.width / 2 + appState.offsetLeft,
            viewportY: appState.height / 2 + appState.offsetTop,
            nextZoom: getNormalizedZoom(1)
          },
          appState
        ),
        userToFollow: null
      },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ updateData, appState }) => /* @__PURE__ */ jsx35(Tooltip, { label: t("buttons.resetZoom"), style: { height: "100%" }, children: /* @__PURE__ */ jsxs20(
    ToolButton,
    {
      type: "button",
      className: "reset-zoom-button zoom-button",
      title: t("buttons.resetZoom"),
      "aria-label": t("buttons.resetZoom"),
      onClick: () => {
        updateData(null);
      },
      children: [
        (appState.zoom.value * 100).toFixed(0),
        "%"
      ]
    }
  ) }),
  keyTest: (event) => (event.code === CODES.ZERO || event.code === CODES.NUM_ZERO) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)
});
var zoomValueToFitBoundsOnViewport = (bounds, viewportDimensions, viewportZoomFactor = 1) => {
  const [x1, y1, x2, y2] = bounds;
  const commonBoundsWidth = x2 - x1;
  const zoomValueForWidth = viewportDimensions.width / commonBoundsWidth;
  const commonBoundsHeight = y2 - y1;
  const zoomValueForHeight = viewportDimensions.height / commonBoundsHeight;
  const smallestZoomValue = Math.min(zoomValueForWidth, zoomValueForHeight);
  const adjustedZoomValue = smallestZoomValue * clamp(viewportZoomFactor, 0.1, 1);
  return Math.min(adjustedZoomValue, 1);
};
var zoomToFitBounds = ({
  bounds,
  appState,
  canvasOffsets,
  fitToViewport = false,
  viewportZoomFactor = 1,
  minZoom = -Infinity,
  maxZoom = Infinity
}) => {
  viewportZoomFactor = clamp(viewportZoomFactor, MIN_ZOOM, MAX_ZOOM);
  const [x1, y1, x2, y2] = bounds;
  const centerX = (x1 + x2) / 2;
  const centerY = (y1 + y2) / 2;
  const canvasOffsetLeft = canvasOffsets?.left ?? 0;
  const canvasOffsetTop = canvasOffsets?.top ?? 0;
  const canvasOffsetRight = canvasOffsets?.right ?? 0;
  const canvasOffsetBottom = canvasOffsets?.bottom ?? 0;
  const effectiveCanvasWidth = appState.width - canvasOffsetLeft - canvasOffsetRight;
  const effectiveCanvasHeight = appState.height - canvasOffsetTop - canvasOffsetBottom;
  let adjustedZoomValue;
  if (fitToViewport) {
    const commonBoundsWidth = x2 - x1;
    const commonBoundsHeight = y2 - y1;
    adjustedZoomValue = Math.min(
      effectiveCanvasWidth / commonBoundsWidth,
      effectiveCanvasHeight / commonBoundsHeight
    ) * viewportZoomFactor;
  } else {
    adjustedZoomValue = zoomValueToFitBoundsOnViewport(
      bounds,
      {
        width: effectiveCanvasWidth,
        height: effectiveCanvasHeight
      },
      viewportZoomFactor
    );
  }
  const newZoomValue = getNormalizedZoom(
    clamp(roundToStep(adjustedZoomValue, ZOOM_STEP, "floor"), minZoom, maxZoom)
  );
  const centerScroll = centerScrollOn({
    scenePoint: { x: centerX, y: centerY },
    viewportDimensions: {
      width: appState.width,
      height: appState.height
    },
    offsets: canvasOffsets,
    zoom: { value: newZoomValue }
  });
  return {
    appState: {
      ...appState,
      scrollX: centerScroll.scrollX,
      scrollY: centerScroll.scrollY,
      zoom: { value: newZoomValue }
    },
    storeAction: StoreAction.NONE
  };
};
var zoomToFit = ({
  canvasOffsets,
  targetElements,
  appState,
  fitToViewport,
  viewportZoomFactor,
  minZoom,
  maxZoom
}) => {
  const commonBounds = getCommonBounds(getNonDeletedElements2(targetElements));
  return zoomToFitBounds({
    canvasOffsets,
    bounds: commonBounds,
    appState,
    fitToViewport,
    viewportZoomFactor,
    minZoom,
    maxZoom
  });
};
var actionZoomToFitSelectionInViewport = register({
  name: "zoomToFitSelectionInViewport",
  label: "labels.zoomToFitViewport",
  icon: zoomAreaIcon,
  trackEvent: { category: "canvas" },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    return zoomToFit({
      targetElements: selectedElements.length ? selectedElements : elements,
      appState: {
        ...appState,
        userToFollow: null
      },
      fitToViewport: false,
      canvasOffsets: app.getEditorUIOffsets()
    });
  },
  // NOTE shift-2 should have been assigned actionZoomToFitSelection.
  // TBD on how proceed
  keyTest: (event) => event.code === CODES.TWO && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]
});
var actionZoomToFitSelection = register({
  name: "zoomToFitSelection",
  label: "helpDialog.zoomToSelection",
  icon: zoomAreaIcon,
  trackEvent: { category: "canvas" },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    return zoomToFit({
      targetElements: selectedElements.length ? selectedElements : elements,
      appState: {
        ...appState,
        userToFollow: null
      },
      fitToViewport: true,
      canvasOffsets: app.getEditorUIOffsets()
    });
  },
  // NOTE this action should use shift-2 per figma, alas
  keyTest: (event) => event.code === CODES.THREE && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]
});
var actionZoomToFit = register({
  name: "zoomToFit",
  label: "helpDialog.zoomToFit",
  icon: zoomAreaIcon,
  viewMode: true,
  trackEvent: { category: "canvas" },
  perform: (elements, appState, _, app) => zoomToFit({
    targetElements: elements,
    appState: {
      ...appState,
      userToFollow: null
    },
    fitToViewport: false,
    canvasOffsets: app.getEditorUIOffsets()
  }),
  keyTest: (event) => event.code === CODES.ONE && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]
});
var actionToggleTheme = register({
  name: "toggleTheme",
  label: (_, appState) => {
    return appState.theme === THEME.DARK ? "buttons.lightMode" : "buttons.darkMode";
  },
  keywords: ["toggle", "dark", "light", "mode", "theme"],
  icon: (appState) => appState.theme === THEME.LIGHT ? MoonIcon : SunIcon,
  viewMode: true,
  trackEvent: { category: "canvas" },
  perform: (_, appState, value) => {
    return {
      appState: {
        ...appState,
        theme: value || (appState.theme === THEME.LIGHT ? THEME.DARK : THEME.LIGHT)
      },
      storeAction: StoreAction.NONE
    };
  },
  keyTest: (event) => event.altKey && event.shiftKey && event.code === CODES.D,
  predicate: (elements, appState, props, app) => {
    return !!app.props.UIOptions.canvasActions.toggleTheme;
  }
});
var actionToggleEraserTool = register({
  name: "toggleEraserTool",
  label: "toolBar.eraser",
  trackEvent: { category: "toolbar" },
  perform: (elements, appState) => {
    let activeTool;
    if (isEraserActive(appState)) {
      activeTool = updateActiveTool(appState, {
        ...appState.activeTool.lastActiveTool || {
          type: "selection"
        },
        lastActiveToolBeforeEraser: null
      });
    } else {
      activeTool = updateActiveTool(appState, {
        type: "eraser",
        lastActiveToolBeforeEraser: appState.activeTool
      });
    }
    return {
      appState: {
        ...appState,
        selectedElementIds: {},
        selectedGroupIds: {},
        activeEmbeddable: null,
        activeTool
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event.key === KEYS.E
});
var actionToggleHandTool = register({
  name: "toggleHandTool",
  label: "toolBar.hand",
  paletteName: "Toggle hand tool",
  trackEvent: { category: "toolbar" },
  icon: handIcon,
  viewMode: false,
  perform: (elements, appState, _, app) => {
    let activeTool;
    if (isHandToolActive(appState)) {
      activeTool = updateActiveTool(appState, {
        ...appState.activeTool.lastActiveTool || {
          type: "selection"
        },
        lastActiveToolBeforeEraser: null
      });
    } else {
      activeTool = updateActiveTool(appState, {
        type: "hand",
        lastActiveToolBeforeEraser: appState.activeTool
      });
      setCursor(app.interactiveCanvas, CURSOR_TYPE.GRAB);
    }
    return {
      appState: {
        ...appState,
        selectedElementIds: {},
        selectedGroupIds: {},
        activeEmbeddable: null,
        activeTool
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => !event.altKey && !event[KEYS.CTRL_OR_CMD] && event.key === KEYS.H
});

// actions/actionFinalize.tsx
init_define_import_meta_env();
init_keys();
init_element();
init_utils2();
init_icons();
init_register();
init_mutateElement();
init_linearElementEditor();
init_binding();
init_typeChecks();
init_cursor();
init_store();
init_math();
init_shapes();
import { jsx as jsx36 } from "react/jsx-runtime";
var actionFinalize = register({
  name: "finalize",
  label: "",
  trackEvent: false,
  perform: (elements, appState, _, app) => {
    const { interactiveCanvas, focusContainer, scene } = app;
    const elementsMap = scene.getNonDeletedElementsMap();
    if (appState.editingLinearElement) {
      const { elementId, startBindingElement, endBindingElement } = appState.editingLinearElement;
      const element = LinearElementEditor.getElement(elementId, elementsMap);
      if (element) {
        if (isBindingElement(element)) {
          bindOrUnbindLinearElement(
            element,
            startBindingElement,
            endBindingElement,
            elementsMap,
            scene
          );
        }
        return {
          elements: element.points.length < 2 || isInvisiblySmallElement(element) ? elements.filter((el) => el.id !== element.id) : void 0,
          appState: {
            ...appState,
            cursorButton: "up",
            editingLinearElement: null
          },
          storeAction: StoreAction.CAPTURE
        };
      }
    }
    let newElements = elements;
    const pendingImageElement = appState.pendingImageElementId && scene.getElement(appState.pendingImageElementId);
    if (pendingImageElement) {
      mutateElement(pendingImageElement, { isDeleted: true }, false);
    }
    if (window.document.activeElement instanceof HTMLElement) {
      focusContainer();
    }
    const multiPointElement = appState.multiElement ? appState.multiElement : appState.newElement?.type === "freedraw" ? appState.newElement : null;
    if (multiPointElement) {
      if (multiPointElement.type !== "freedraw" && appState.lastPointerDownWith !== "touch") {
        const { points, lastCommittedPoint } = multiPointElement;
        if (!lastCommittedPoint || points[points.length - 1] !== lastCommittedPoint) {
          mutateElement(multiPointElement, {
            points: multiPointElement.points.slice(0, -1)
          });
        }
      }
      if (isInvisiblySmallElement(multiPointElement)) {
        newElements = newElements.filter(
          (el) => el.id !== multiPointElement.id
        );
      }
      const isLoop = isPathALoop(multiPointElement.points, appState.zoom.value);
      if (multiPointElement.type === "line" || multiPointElement.type === "freedraw") {
        if (isLoop) {
          const linePoints = multiPointElement.points;
          const firstPoint = linePoints[0];
          mutateElement(multiPointElement, {
            points: linePoints.map(
              (p, index) => index === linePoints.length - 1 ? pointFrom(firstPoint[0], firstPoint[1]) : p
            )
          });
        }
      }
      if (isBindingElement(multiPointElement) && !isLoop && multiPointElement.points.length > 1) {
        const [x, y] = LinearElementEditor.getPointAtIndexGlobalCoordinates(
          multiPointElement,
          -1,
          arrayToMap(elements)
        );
        maybeBindLinearElement(
          multiPointElement,
          appState,
          { x, y },
          elementsMap,
          elements
        );
      }
    }
    if (!appState.activeTool.locked && appState.activeTool.type !== "freedraw" || !multiPointElement) {
      resetCursor(interactiveCanvas);
    }
    let activeTool;
    if (appState.activeTool.type === "eraser") {
      activeTool = updateActiveTool(appState, {
        ...appState.activeTool.lastActiveTool || {
          type: "selection"
        },
        lastActiveToolBeforeEraser: null
      });
    } else {
      activeTool = updateActiveTool(appState, {
        type: "selection"
      });
    }
    return {
      elements: newElements,
      appState: {
        ...appState,
        cursorButton: "up",
        activeTool: (appState.activeTool.locked || appState.activeTool.type === "freedraw") && multiPointElement ? appState.activeTool : activeTool,
        activeEmbeddable: null,
        newElement: null,
        selectionElement: null,
        multiElement: null,
        editingTextElement: null,
        startBoundElement: null,
        suggestedBindings: [],
        selectedElementIds: multiPointElement && !appState.activeTool.locked && appState.activeTool.type !== "freedraw" ? {
          ...appState.selectedElementIds,
          [multiPointElement.id]: true
        } : appState.selectedElementIds,
        // To select the linear element when user has finished mutipoint editing
        selectedLinearElement: multiPointElement && isLinearElement(multiPointElement) ? new LinearElementEditor(multiPointElement) : appState.selectedLinearElement,
        pendingImageElementId: null
      },
      // TODO: #7348 we should not capture everything, but if we don't, it leads to incosistencies -> revisit
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event, appState) => event.key === KEYS.ESCAPE && (appState.editingLinearElement !== null || !appState.newElement && appState.multiElement === null) || (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) && appState.multiElement !== null,
  PanelComponent: ({ appState, updateData, data }) => /* @__PURE__ */ jsx36(
    ToolButton,
    {
      type: "button",
      icon: done,
      title: t("buttons.done"),
      "aria-label": t("buttons.done"),
      onClick: updateData,
      visible: appState.multiElement != null,
      size: data?.size || "medium",
      style: { pointerEvents: "all" }
    }
  )
});

// actions/actionExport.tsx
init_define_import_meta_env();
init_icons();

// components/ProjectName.tsx
init_define_import_meta_env();
init_utils2();
import { useState as useState9 } from "react";
init_keys();
import { jsx as jsx37, jsxs as jsxs21 } from "react/jsx-runtime";
var ProjectName = (props) => {
  const { id } = useExcalidrawContainer();
  const [fileName, setFileName] = useState9(props.value);
  const handleBlur = (event) => {
    if (!props.ignoreFocus) {
      focusNearestParent(event.target);
    }
    const value = event.target.value;
    if (value !== props.value) {
      props.onChange(value);
    }
  };
  const handleKeyDown = (event) => {
    if (event.key === KEYS.ENTER) {
      event.preventDefault();
      if (event.nativeEvent.isComposing || event.keyCode === 229) {
        return;
      }
      event.currentTarget.blur();
    }
  };
  return /* @__PURE__ */ jsxs21("div", { className: "ProjectName", children: [
    /* @__PURE__ */ jsx37("label", { className: "ProjectName-label", htmlFor: "filename", children: `${props.label}:` }),
    /* @__PURE__ */ jsx37(
      "input",
      {
        type: "text",
        className: "TextInput",
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        id: `${id}-filename`,
        value: fileName,
        onChange: (event) => setFileName(event.target.value)
      }
    )
  ] });
};

// components/DarkModeToggle.tsx
init_define_import_meta_env();
init_constants();
import { jsx as jsx38 } from "react/jsx-runtime";
var DarkModeToggle = (props) => {
  const title = props.title || (props.value === THEME.DARK ? t("buttons.lightMode") : t("buttons.darkMode"));
  return /* @__PURE__ */ jsx38(
    ToolButton,
    {
      type: "icon",
      icon: props.value === THEME.LIGHT ? ICONS.MOON : ICONS.SUN,
      title,
      "aria-label": title,
      onClick: () => props.onChange(props.value === THEME.DARK ? THEME.LIGHT : THEME.DARK),
      "data-testid": "toggle-dark-mode"
    }
  );
};
var ICONS = {
  SUN: /* @__PURE__ */ jsx38("svg", { width: "512", height: "512", className: "rtl-mirror", viewBox: "0 0 512 512", children: /* @__PURE__ */ jsx38(
    "path",
    {
      fill: "currentColor",
      d: "M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z"
    }
  ) }),
  MOON: /* @__PURE__ */ jsx38("svg", { width: "512", height: "512", className: "rtl-mirror", viewBox: "0 0 512 512", children: /* @__PURE__ */ jsx38(
    "path",
    {
      fill: "currentColor",
      d: "M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z"
    }
  ) })
};

// data/index.ts
init_define_import_meta_env();
init_clipboard();
init_constants();
init_element();
init_typeChecks();
init_scene();
init_export();
init_utils2();
init_blob();
init_filesystem();
init_json();
init_frame();
init_blob();
init_json();
var prepareElementsForExport = (elements, { selectedElementIds }, exportSelectionOnly) => {
  elements = getNonDeletedElements2(elements);
  const isExportingSelection = exportSelectionOnly && isSomeElementSelected(elements, { selectedElementIds });
  let exportingFrame = null;
  let exportedElements = isExportingSelection ? getSelectedElements(
    elements,
    { selectedElementIds },
    {
      includeBoundTextElement: true
    }
  ) : elements;
  if (isExportingSelection) {
    if (exportedElements.length === 1 && isFrameLikeElement(exportedElements[0])) {
      exportingFrame = exportedElements[0];
      exportedElements = getElementsOverlappingFrame(elements, exportingFrame);
    } else if (exportedElements.length > 1) {
      exportedElements = getSelectedElements(
        elements,
        { selectedElementIds },
        {
          includeBoundTextElement: true,
          includeElementsInFrames: true
        }
      );
    }
  }
  return {
    exportingFrame,
    exportedElements: cloneJSON(exportedElements)
  };
};
var exportCanvas = async (type, elements, appState, files, {
  exportBackground,
  exportPadding = DEFAULT_EXPORT_PADDING,
  viewBackgroundColor,
  name = appState.name || DEFAULT_FILENAME,
  fileHandle = null,
  exportingFrame = null
}) => {
  if (elements.length === 0) {
    throw new Error(t("alerts.cannotExportEmptyCanvas"));
  }
  if (type === "svg" || type === "clipboard-svg") {
    const svgPromise = exportToSvg(
      elements,
      {
        exportBackground,
        exportWithDarkMode: appState.exportWithDarkMode,
        viewBackgroundColor,
        exportPadding,
        exportScale: appState.exportScale,
        exportEmbedScene: appState.exportEmbedScene && type === "svg"
      },
      files,
      { exportingFrame }
    );
    if (type === "svg") {
      return fileSave(
        svgPromise.then((svg) => {
          return new Blob([svg.outerHTML], { type: MIME_TYPES.svg });
        }),
        {
          description: "Export to SVG",
          name,
          extension: appState.exportEmbedScene ? "excalidraw.svg" : "svg",
          fileHandle
        }
      );
    } else if (type === "clipboard-svg") {
      const svg = await svgPromise.then((svg2) => svg2.outerHTML);
      try {
        await copyTextToSystemClipboard(svg);
      } catch (e) {
        throw new Error(t("errors.copyToSystemClipboardFailed"));
      }
      return;
    }
  }
  const tempCanvas = exportToCanvas(elements, appState, files, {
    exportBackground,
    viewBackgroundColor,
    exportPadding,
    exportingFrame
  });
  if (type === "png") {
    let blob = canvasToBlob(tempCanvas);
    if (appState.exportEmbedScene) {
      blob = blob.then(
        (blob2) => Promise.resolve().then(() => (init_image(), image_exports)).then(
          ({ encodePngMetadata: encodePngMetadata2 }) => encodePngMetadata2({
            blob: blob2,
            metadata: serializeAsJSON(elements, appState, files, "local")
          })
        )
      );
    }
    return fileSave(blob, {
      description: "Export to PNG",
      name,
      // FIXME reintroduce `excalidraw.png` when most people upgrade away
      // from 111.0.5563.64 (arm64), see #6349
      extension: (
        /* appState.exportEmbedScene ? "excalidraw.png" : */
        "png"
      ),
      fileHandle
    });
  } else if (type === "clipboard") {
    try {
      const blob = canvasToBlob(tempCanvas);
      await copyBlobToClipboardAsPng(blob);
    } catch (error) {
      console.warn(error);
      if (error.name === "CANVAS_POSSIBLY_TOO_BIG") {
        throw new Error(t("canvasError.canvasTooBig"));
      }
      if (isFirefox && error.name === "TypeError") {
        throw new Error(
          `${t("alerts.couldNotCopyToClipboard")}

${t(
            "hints.firefox_clipboard_write"
          )}`
        );
      } else {
        throw new Error(t("alerts.couldNotCopyToClipboard"));
      }
    }
  } else {
    throw new Error("Unsupported export type");
  }
};

// data/resave.ts
init_define_import_meta_env();
init_blob();
var resaveAsImageWithScene = async (elements, appState, files, name) => {
  const { exportBackground, viewBackgroundColor, fileHandle } = appState;
  const fileHandleType = getFileHandleType(fileHandle);
  if (!fileHandle || !isImageFileHandleType(fileHandleType)) {
    throw new Error(
      "fileHandle should exist and should be of type svg or png when resaving"
    );
  }
  appState = {
    ...appState,
    exportEmbedScene: true
  };
  const { exportedElements, exportingFrame } = prepareElementsForExport(
    elements,
    appState,
    false
  );
  await exportCanvas(fileHandleType, exportedElements, appState, files, {
    exportBackground,
    viewBackgroundColor,
    name,
    fileHandle,
    exportingFrame
  });
  return { fileHandle };
};

// actions/actionExport.tsx
init_keys();
init_register();

// components/CheckboxItem.tsx
init_define_import_meta_env();
init_icons();
import clsx17 from "clsx";
import { jsx as jsx39, jsxs as jsxs22 } from "react/jsx-runtime";
var CheckboxItem = ({ children, checked, onChange, className }) => {
  return /* @__PURE__ */ jsxs22(
    "div",
    {
      className: clsx17("Checkbox", className, { "is-checked": checked }),
      onClick: (event) => {
        onChange(!checked, event);
        event.currentTarget.querySelector(
          ".Checkbox-box"
        ).focus();
      },
      children: [
        /* @__PURE__ */ jsx39(
          "button",
          {
            type: "button",
            className: "Checkbox-box",
            role: "checkbox",
            "aria-checked": checked,
            children: checkIcon
          }
        ),
        /* @__PURE__ */ jsx39("div", { className: "Checkbox-label", children })
      ]
    }
  );
};

// actions/actionExport.tsx
init_export();
init_constants();
init_scene();
init_element();
init_blob();
init_filesystem();
init_store();
import { Fragment as Fragment6, jsx as jsx40, jsxs as jsxs23 } from "react/jsx-runtime";
var actionChangeProjectName = register({
  name: "changeProjectName",
  label: "labels.fileTitle",
  trackEvent: false,
  perform: (_elements, appState, value) => {
    return {
      appState: { ...appState, name: value },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ appState, updateData, appProps, data, app }) => /* @__PURE__ */ jsx40(
    ProjectName,
    {
      label: t("labels.fileTitle"),
      value: app.getName(),
      onChange: (name) => updateData(name),
      ignoreFocus: data?.ignoreFocus ?? false
    }
  )
});
var actionChangeExportScale = register({
  name: "changeExportScale",
  label: "imageExportDialog.scale",
  trackEvent: { category: "export", action: "scale" },
  perform: (_elements, appState, value) => {
    return {
      appState: { ...appState, exportScale: value },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ elements: allElements, appState, updateData }) => {
    const elements = getNonDeletedElements2(allElements);
    const exportSelected = isSomeElementSelected(elements, appState);
    const exportedElements = exportSelected ? getSelectedElements(elements, appState) : elements;
    return /* @__PURE__ */ jsx40(Fragment6, { children: EXPORT_SCALES.map((s) => {
      const [width, height] = getExportSize(
        exportedElements,
        DEFAULT_EXPORT_PADDING,
        s
      );
      const scaleButtonTitle = `${t(
        "imageExportDialog.label.scale"
      )} ${s}x (${width}x${height})`;
      return /* @__PURE__ */ jsx40(
        ToolButton,
        {
          size: "small",
          type: "radio",
          icon: `${s}x`,
          name: "export-canvas-scale",
          title: scaleButtonTitle,
          "aria-label": scaleButtonTitle,
          id: "export-canvas-scale",
          checked: s === appState.exportScale,
          onChange: () => updateData(s)
        },
        s
      );
    }) });
  }
});
var actionChangeExportBackground = register({
  name: "changeExportBackground",
  label: "imageExportDialog.label.withBackground",
  trackEvent: { category: "export", action: "toggleBackground" },
  perform: (_elements, appState, value) => {
    return {
      appState: { ...appState, exportBackground: value },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ appState, updateData }) => /* @__PURE__ */ jsx40(
    CheckboxItem,
    {
      checked: appState.exportBackground,
      onChange: (checked) => updateData(checked),
      children: t("imageExportDialog.label.withBackground")
    }
  )
});
var actionChangeExportEmbedScene = register({
  name: "changeExportEmbedScene",
  label: "imageExportDialog.tooltip.embedScene",
  trackEvent: { category: "export", action: "embedScene" },
  perform: (_elements, appState, value) => {
    return {
      appState: { ...appState, exportEmbedScene: value },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ appState, updateData }) => /* @__PURE__ */ jsxs23(
    CheckboxItem,
    {
      checked: appState.exportEmbedScene,
      onChange: (checked) => updateData(checked),
      children: [
        t("imageExportDialog.label.embedScene"),
        /* @__PURE__ */ jsx40(Tooltip, { label: t("imageExportDialog.tooltip.embedScene"), long: true, children: /* @__PURE__ */ jsx40("div", { className: "excalidraw-tooltip-icon", children: questionCircle }) })
      ]
    }
  )
});
var actionSaveToActiveFile = register({
  name: "saveToActiveFile",
  label: "buttons.save",
  icon: ExportIcon,
  trackEvent: { category: "export" },
  predicate: (elements, appState, props, app) => {
    return !!app.props.UIOptions.canvasActions.saveToActiveFile && !!appState.fileHandle && !appState.viewModeEnabled;
  },
  perform: async (elements, appState, value, app) => {
    const fileHandleExists = !!appState.fileHandle;
    try {
      const { fileHandle } = isImageFileHandle(appState.fileHandle) ? await resaveAsImageWithScene(
        elements,
        appState,
        app.files,
        app.getName()
      ) : await saveAsJSON(elements, appState, app.files, app.getName());
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          fileHandle,
          toast: fileHandleExists ? {
            message: fileHandle?.name ? t("toast.fileSavedToFilename").replace(
              "{filename}",
              `"${fileHandle.name}"`
            ) : t("toast.fileSaved")
          } : null
        }
      };
    } catch (error) {
      if (error?.name !== "AbortError") {
        console.error(error);
      } else {
        console.warn(error);
      }
      return { storeAction: StoreAction.NONE };
    }
  },
  keyTest: (event) => event.key === KEYS.S && event[KEYS.CTRL_OR_CMD] && !event.shiftKey
});
var actionSaveFileToDisk = register({
  name: "saveFileToDisk",
  label: "exportDialog.disk_title",
  icon: ExportIcon,
  viewMode: true,
  trackEvent: { category: "export" },
  perform: async (elements, appState, value, app) => {
    try {
      const { fileHandle } = await saveAsJSON(
        elements,
        {
          ...appState,
          fileHandle: null
        },
        app.files,
        app.getName()
      );
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          openDialog: null,
          fileHandle,
          toast: { message: t("toast.fileSaved") }
        }
      };
    } catch (error) {
      if (error?.name !== "AbortError") {
        console.error(error);
      } else {
        console.warn(error);
      }
      return { storeAction: StoreAction.NONE };
    }
  },
  keyTest: (event) => event.key === KEYS.S && event.shiftKey && event[KEYS.CTRL_OR_CMD],
  PanelComponent: ({ updateData }) => /* @__PURE__ */ jsx40(
    ToolButton,
    {
      type: "button",
      icon: saveAs,
      title: t("buttons.saveAs"),
      "aria-label": t("buttons.saveAs"),
      showAriaLabel: useDevice().editor.isMobile,
      hidden: !nativeFileSystemSupported,
      onClick: () => updateData(null),
      "data-testid": "save-as-button"
    }
  )
});
var actionLoadScene = register({
  name: "loadScene",
  label: "buttons.load",
  trackEvent: { category: "export" },
  predicate: (elements, appState, props, app) => {
    return !!app.props.UIOptions.canvasActions.loadScene && !appState.viewModeEnabled;
  },
  perform: async (elements, appState, _, app) => {
    try {
      const {
        elements: loadedElements,
        appState: loadedAppState,
        files
      } = await loadFromJSON(appState, elements);
      return {
        elements: loadedElements,
        appState: loadedAppState,
        files,
        storeAction: StoreAction.CAPTURE
      };
    } catch (error) {
      if (error?.name === "AbortError") {
        console.warn(error);
        return false;
      }
      return {
        elements,
        appState: { ...appState, errorMessage: error.message },
        files: app.files,
        storeAction: StoreAction.NONE
      };
    }
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.O
});
var actionExportWithDarkMode = register({
  name: "exportWithDarkMode",
  label: "imageExportDialog.label.darkMode",
  trackEvent: { category: "export", action: "toggleTheme" },
  perform: (_elements, appState, value) => {
    return {
      appState: { ...appState, exportWithDarkMode: value },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ appState, updateData }) => /* @__PURE__ */ jsx40(
    "div",
    {
      style: {
        display: "flex",
        justifyContent: "flex-end",
        marginTop: "-45px",
        marginBottom: "10px"
      },
      children: /* @__PURE__ */ jsx40(
        DarkModeToggle,
        {
          value: appState.exportWithDarkMode ? THEME.DARK : THEME.LIGHT,
          onChange: (theme) => {
            updateData(theme === THEME.DARK);
          },
          title: t("imageExportDialog.label.darkMode")
        }
      )
    }
  )
});

// actions/actionStyles.ts
init_define_import_meta_env();
init_element();
init_keys();
init_register();
init_mutateElement();
init_constants();
init_textElement();
init_typeChecks();
init_scene();
init_icons();
init_store();
init_fonts();
var copiedStyles = "{}";
var actionCopyStyles = register({
  name: "copyStyles",
  label: "labels.copyStyles",
  icon: paintIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState, formData, app) => {
    const elementsCopied = [];
    const element = elements.find((el) => appState.selectedElementIds[el.id]);
    elementsCopied.push(element);
    if (element && hasBoundTextElement(element)) {
      const boundTextElement = getBoundTextElement(
        element,
        app.scene.getNonDeletedElementsMap()
      );
      elementsCopied.push(boundTextElement);
    }
    if (element) {
      copiedStyles = JSON.stringify(elementsCopied);
    }
    return {
      appState: {
        ...appState,
        toast: { message: t("toast.copyStyles") }
      },
      storeAction: StoreAction.NONE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.C
});
var actionPasteStyles = register({
  name: "pasteStyles",
  label: "labels.pasteStyles",
  icon: paintIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState, formData, app) => {
    const elementsCopied = JSON.parse(copiedStyles);
    const pastedElement = elementsCopied[0];
    const boundTextElement = elementsCopied[1];
    if (!isExcalidrawElement(pastedElement)) {
      return { elements, storeAction: StoreAction.NONE };
    }
    const selectedElements = getSelectedElements(elements, appState, {
      includeBoundTextElement: true
    });
    const selectedElementIds = selectedElements.map((element) => element.id);
    return {
      elements: elements.map((element) => {
        if (selectedElementIds.includes(element.id)) {
          let elementStylesToCopyFrom = pastedElement;
          if (isTextElement(element) && element.containerId) {
            elementStylesToCopyFrom = boundTextElement;
          }
          if (!elementStylesToCopyFrom) {
            return element;
          }
          let newElement2 = newElementWith(element, {
            backgroundColor: elementStylesToCopyFrom?.backgroundColor,
            strokeWidth: elementStylesToCopyFrom?.strokeWidth,
            strokeColor: elementStylesToCopyFrom?.strokeColor,
            strokeStyle: elementStylesToCopyFrom?.strokeStyle,
            fillStyle: elementStylesToCopyFrom?.fillStyle,
            opacity: elementStylesToCopyFrom?.opacity,
            roughness: elementStylesToCopyFrom?.roughness,
            roundness: elementStylesToCopyFrom.roundness ? canApplyRoundnessTypeToElement(
              elementStylesToCopyFrom.roundness.type,
              element
            ) ? elementStylesToCopyFrom.roundness : getDefaultRoundnessTypeForElement(element) : null
          });
          if (isTextElement(newElement2)) {
            const fontSize = elementStylesToCopyFrom.fontSize || DEFAULT_FONT_SIZE;
            const fontFamily = elementStylesToCopyFrom.fontFamily || DEFAULT_FONT_FAMILY;
            newElement2 = newElementWith(newElement2, {
              fontSize,
              fontFamily,
              textAlign: elementStylesToCopyFrom.textAlign || DEFAULT_TEXT_ALIGN,
              lineHeight: elementStylesToCopyFrom.lineHeight || getLineHeight(fontFamily)
            });
            let container = null;
            if (newElement2.containerId) {
              container = selectedElements.find(
                (element2) => isTextElement(newElement2) && element2.id === newElement2.containerId
              ) || null;
            }
            redrawTextBoundingBox(
              newElement2,
              container,
              app.scene.getNonDeletedElementsMap()
            );
          }
          if (newElement2.type === "arrow" && isArrowElement(elementStylesToCopyFrom)) {
            newElement2 = newElementWith(newElement2, {
              startArrowhead: elementStylesToCopyFrom.startArrowhead,
              endArrowhead: elementStylesToCopyFrom.endArrowhead
            });
          }
          if (isFrameLikeElement(element)) {
            newElement2 = newElementWith(newElement2, {
              roundness: null,
              backgroundColor: "transparent"
            });
          }
          return newElement2;
        }
        return element;
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V
});

// actions/actionMenu.tsx
init_define_import_meta_env();
init_icons();
init_element();
init_register();
init_keys();
init_store();
import { jsx as jsx41 } from "react/jsx-runtime";
var actionToggleCanvasMenu = register({
  name: "toggleCanvasMenu",
  label: "buttons.menu",
  trackEvent: { category: "menu" },
  perform: (_, appState) => ({
    appState: {
      ...appState,
      openMenu: appState.openMenu === "canvas" ? null : "canvas"
    },
    storeAction: StoreAction.NONE
  }),
  PanelComponent: ({ appState, updateData }) => /* @__PURE__ */ jsx41(
    ToolButton,
    {
      type: "button",
      icon: HamburgerMenuIcon,
      "aria-label": t("buttons.menu"),
      onClick: updateData,
      selected: appState.openMenu === "canvas"
    }
  )
});
var actionToggleEditMenu = register({
  name: "toggleEditMenu",
  label: "buttons.edit",
  trackEvent: { category: "menu" },
  perform: (_elements, appState) => ({
    appState: {
      ...appState,
      openMenu: appState.openMenu === "shape" ? null : "shape"
    },
    storeAction: StoreAction.NONE
  }),
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsx41(
    ToolButton,
    {
      visible: showSelectedShapeActions(
        appState,
        getNonDeletedElements2(elements)
      ),
      type: "button",
      icon: palette,
      "aria-label": t("buttons.edit"),
      onClick: updateData,
      selected: appState.openMenu === "shape"
    }
  )
});
var actionShortcuts = register({
  name: "toggleShortcuts",
  label: "welcomeScreen.defaults.helpHint",
  icon: HelpIconThin,
  viewMode: true,
  trackEvent: { category: "menu", action: "toggleHelpDialog" },
  perform: (_elements, appState, _, { focusContainer }) => {
    if (appState.openDialog?.name === "help") {
      focusContainer();
    }
    return {
      appState: {
        ...appState,
        openDialog: appState.openDialog?.name === "help" ? null : {
          name: "help"
        }
      },
      storeAction: StoreAction.NONE
    };
  },
  keyTest: (event) => event.key === KEYS.QUESTION_MARK
});

// actions/actionGroup.tsx
init_define_import_meta_env();
init_keys();
init_utils2();
init_register();
init_icons();
init_mutateElement();
init_scene();
init_groups();
init_element();
init_random();
init_typeChecks();
init_frame();
init_fractionalIndex();
init_store();
import { jsx as jsx42 } from "react/jsx-runtime";
var allElementsInSameGroup = (elements) => {
  if (elements.length >= 2) {
    const groupIds = elements[0].groupIds;
    for (const groupId of groupIds) {
      if (elements.reduce(
        (acc, element) => acc && isElementInGroup(element, groupId),
        true
      )) {
        return true;
      }
    }
  }
  return false;
};
var enableActionGroup = (elements, appState, app) => {
  const selectedElements = app.scene.getSelectedElements({
    selectedElementIds: appState.selectedElementIds,
    includeBoundTextElement: true
  });
  return selectedElements.length >= 2 && !allElementsInSameGroup(selectedElements);
};
var actionGroup = register({
  name: "group",
  label: "labels.group",
  icon: (appState) => /* @__PURE__ */ jsx42(GroupIcon, { theme: appState.theme }),
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true
    });
    if (selectedElements.length < 2) {
      return { appState, elements, storeAction: StoreAction.NONE };
    }
    const selectedGroupIds = getSelectedGroupIds(appState);
    if (selectedGroupIds.length === 1) {
      const selectedGroupId = selectedGroupIds[0];
      const elementIdsInGroup = new Set(
        getElementsInGroup(elements, selectedGroupId).map(
          (element) => element.id
        )
      );
      const selectedElementIds = new Set(
        selectedElements.map((element) => element.id)
      );
      const combinedSet = /* @__PURE__ */ new Set([
        ...Array.from(elementIdsInGroup),
        ...Array.from(selectedElementIds)
      ]);
      if (combinedSet.size === elementIdsInGroup.size) {
        return { appState, elements, storeAction: StoreAction.NONE };
      }
    }
    let nextElements = [...elements];
    const groupingElementsFromDifferentFrames = new Set(selectedElements.map((element) => element.frameId)).size > 1;
    if (groupingElementsFromDifferentFrames) {
      const frameElementsMap = groupByFrameLikes(selectedElements);
      frameElementsMap.forEach((elementsInFrame, frameId) => {
        removeElementsFromFrame(
          elementsInFrame,
          app.scene.getNonDeletedElementsMap()
        );
      });
    }
    const newGroupId = randomId();
    const selectElementIds = arrayToMap(selectedElements);
    nextElements = nextElements.map((element) => {
      if (!selectElementIds.get(element.id)) {
        return element;
      }
      return newElementWith(element, {
        groupIds: addToGroup(
          element.groupIds,
          newGroupId,
          appState.editingGroupId
        )
      });
    });
    const elementsInGroup = getElementsInGroup(nextElements, newGroupId);
    const lastElementInGroup = elementsInGroup[elementsInGroup.length - 1];
    const lastGroupElementIndex = nextElements.lastIndexOf(
      lastElementInGroup
    );
    const elementsAfterGroup = nextElements.slice(lastGroupElementIndex + 1);
    const elementsBeforeGroup = nextElements.slice(0, lastGroupElementIndex).filter(
      (updatedElement) => !isElementInGroup(updatedElement, newGroupId)
    );
    const reorderedElements = syncMovedIndices(
      [...elementsBeforeGroup, ...elementsInGroup, ...elementsAfterGroup],
      arrayToMap(elementsInGroup)
    );
    return {
      appState: {
        ...appState,
        ...selectGroup(
          newGroupId,
          { ...appState, selectedGroupIds: {} },
          getNonDeletedElements2(nextElements)
        )
      },
      elements: reorderedElements,
      storeAction: StoreAction.CAPTURE
    };
  },
  predicate: (elements, appState, _, app) => enableActionGroup(elements, appState, app),
  keyTest: (event) => !event.shiftKey && event[KEYS.CTRL_OR_CMD] && event.key === KEYS.G,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx42(
    ToolButton,
    {
      hidden: !enableActionGroup(elements, appState, app),
      type: "button",
      icon: /* @__PURE__ */ jsx42(GroupIcon, { theme: appState.theme }),
      onClick: () => updateData(null),
      title: `${t("labels.group")} \u2014 ${getShortcutKey("CtrlOrCmd+G")}`,
      "aria-label": t("labels.group"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var actionUngroup = register({
  name: "ungroup",
  label: "labels.ungroup",
  icon: (appState) => /* @__PURE__ */ jsx42(UngroupIcon, { theme: appState.theme }),
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    const groupIds = getSelectedGroupIds(appState);
    const elementsMap = arrayToMap(elements);
    if (groupIds.length === 0) {
      return { appState, elements, storeAction: StoreAction.NONE };
    }
    let nextElements = [...elements];
    const boundTextElementIds = [];
    nextElements = nextElements.map((element) => {
      if (isBoundToContainer(element)) {
        boundTextElementIds.push(element.id);
      }
      const nextGroupIds = removeFromSelectedGroups(
        element.groupIds,
        appState.selectedGroupIds
      );
      if (nextGroupIds.length === element.groupIds.length) {
        return element;
      }
      return newElementWith(element, {
        groupIds: nextGroupIds
      });
    });
    const updateAppState = selectGroupsForSelectedElements(
      appState,
      getNonDeletedElements2(nextElements),
      appState,
      null
    );
    const selectedElements = app.scene.getSelectedElements(appState);
    const selectedElementFrameIds = new Set(
      selectedElements.filter((element) => element.frameId).map((element) => element.frameId)
    );
    const targetFrames = getFrameLikeElements(elements).filter(
      (frame) => selectedElementFrameIds.has(frame.id)
    );
    targetFrames.forEach((frame) => {
      if (frame) {
        nextElements = replaceAllElementsInFrame(
          nextElements,
          getElementsInResizingFrame(
            nextElements,
            frame,
            appState,
            elementsMap
          ),
          frame,
          app
        );
      }
    });
    updateAppState.selectedElementIds = Object.entries(
      updateAppState.selectedElementIds
    ).reduce(
      (acc, [id, selected]) => {
        if (selected && !boundTextElementIds.includes(id)) {
          acc[id] = true;
        }
        return acc;
      },
      {}
    );
    return {
      appState: { ...appState, ...updateAppState },
      elements: nextElements,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event.shiftKey && event[KEYS.CTRL_OR_CMD] && event.key === KEYS.G.toUpperCase(),
  predicate: (elements, appState) => getSelectedGroupIds(appState).length > 0,
  PanelComponent: ({ elements, appState, updateData }) => /* @__PURE__ */ jsx42(
    ToolButton,
    {
      type: "button",
      hidden: getSelectedGroupIds(appState).length === 0,
      icon: /* @__PURE__ */ jsx42(UngroupIcon, { theme: appState.theme }),
      onClick: () => updateData(null),
      title: `${t("labels.ungroup")} \u2014 ${getShortcutKey("CtrlOrCmd+Shift+G")}`,
      "aria-label": t("labels.ungroup"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});

// actions/actionNavigate.tsx
init_define_import_meta_env();

// clients.ts
init_define_import_meta_env();
init_constants();

// renderer/roundRect.ts
init_define_import_meta_env();
var roundRect = (context, x, y, width, height, radius, strokeColor) => {
  context.beginPath();
  context.moveTo(x + radius, y);
  context.lineTo(x + width - radius, y);
  context.quadraticCurveTo(x + width, y, x + width, y + radius);
  context.lineTo(x + width, y + height - radius);
  context.quadraticCurveTo(
    x + width,
    y + height,
    x + width - radius,
    y + height
  );
  context.lineTo(x + radius, y + height);
  context.quadraticCurveTo(x, y + height, x, y + height - radius);
  context.lineTo(x, y + radius);
  context.quadraticCurveTo(x, y, x + radius, y);
  context.closePath();
  context.fill();
  if (strokeColor) {
    context.strokeStyle = strokeColor;
  }
  context.stroke();
};

// types.ts
init_define_import_meta_env();

// clients.ts
function hashToInteger(id) {
  let hash = 0;
  if (id.length === 0) {
    return hash;
  }
  for (let i = 0; i < id.length; i++) {
    const char = id.charCodeAt(i);
    hash = (hash << 5) - hash + char;
  }
  return hash;
}
var getClientColor = (socketId, collaborator) => {
  const hash = Math.abs(hashToInteger(collaborator?.id || socketId));
  const hue = hash % 37 * 10;
  const saturation = 100;
  const lightness = 83;
  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
};
var getNameInitial = (name) => {
  const firstCodePoint = name?.trim()?.codePointAt(0);
  return (firstCodePoint ? String.fromCodePoint(firstCodePoint) : "?").toUpperCase();
};
var renderRemoteCursors = ({
  context,
  renderConfig,
  appState,
  normalizedWidth,
  normalizedHeight
}) => {
  for (const [socketId, pointer] of renderConfig.remotePointerViewportCoords) {
    let { x, y } = pointer;
    const collaborator = appState.collaborators.get(socketId);
    x -= appState.offsetLeft;
    y -= appState.offsetTop;
    const width = 11;
    const height = 14;
    const isOutOfBounds = x < 0 || x > normalizedWidth - width || y < 0 || y > normalizedHeight - height;
    x = Math.max(x, 0);
    x = Math.min(x, normalizedWidth - width);
    y = Math.max(y, 0);
    y = Math.min(y, normalizedHeight - height);
    const background = getClientColor(socketId, collaborator);
    context.save();
    context.strokeStyle = background;
    context.fillStyle = background;
    const userState = renderConfig.remotePointerUserStates.get(socketId);
    const isInactive = isOutOfBounds || userState === "idle" /* IDLE */ || userState === "away" /* AWAY */;
    if (isInactive) {
      context.globalAlpha = 0.3;
    }
    if (renderConfig.remotePointerButton.get(socketId) === "down") {
      context.beginPath();
      context.arc(x, y, 15, 0, 2 * Math.PI, false);
      context.lineWidth = 3;
      context.strokeStyle = "#ffffff88";
      context.stroke();
      context.closePath();
      context.beginPath();
      context.arc(x, y, 15, 0, 2 * Math.PI, false);
      context.lineWidth = 1;
      context.strokeStyle = background;
      context.stroke();
      context.closePath();
    }
    const IS_SPEAKING_COLOR = appState.theme === THEME.DARK ? "#2f6330" : COLOR_VOICE_CALL;
    const isSpeaking = collaborator?.isSpeaking;
    if (isSpeaking) {
      context.fillStyle = IS_SPEAKING_COLOR;
      context.strokeStyle = IS_SPEAKING_COLOR;
      context.lineWidth = 10;
      context.lineJoin = "round";
      context.beginPath();
      context.moveTo(x, y);
      context.lineTo(x + 0, y + 14);
      context.lineTo(x + 4, y + 9);
      context.lineTo(x + 11, y + 8);
      context.closePath();
      context.stroke();
      context.fill();
    }
    context.fillStyle = COLOR_WHITE;
    context.strokeStyle = COLOR_WHITE;
    context.lineWidth = 6;
    context.lineJoin = "round";
    context.beginPath();
    context.moveTo(x, y);
    context.lineTo(x + 0, y + 14);
    context.lineTo(x + 4, y + 9);
    context.lineTo(x + 11, y + 8);
    context.closePath();
    context.stroke();
    context.fill();
    context.fillStyle = background;
    context.strokeStyle = background;
    context.lineWidth = 2;
    context.lineJoin = "round";
    context.beginPath();
    if (isInactive) {
      context.moveTo(x - 1, y - 1);
      context.lineTo(x - 1, y + 15);
      context.lineTo(x + 5, y + 10);
      context.lineTo(x + 12, y + 9);
      context.closePath();
      context.fill();
    } else {
      context.moveTo(x, y);
      context.lineTo(x + 0, y + 14);
      context.lineTo(x + 4, y + 9);
      context.lineTo(x + 11, y + 8);
      context.closePath();
      context.fill();
      context.stroke();
    }
    const username = renderConfig.remotePointerUsernames.get(socketId) || "";
    if (!isOutOfBounds && username) {
      context.font = "600 12px sans-serif";
      const offsetX = (isSpeaking ? x + 0 : x) + width / 2;
      const offsetY = (isSpeaking ? y + 0 : y) + height + 2;
      const paddingHorizontal = 5;
      const paddingVertical = 3;
      const measure = context.measureText(username);
      const measureHeight = measure.actualBoundingBoxDescent + measure.actualBoundingBoxAscent;
      const finalHeight = Math.max(measureHeight, 12);
      const boxX = offsetX - 1;
      const boxY = offsetY - 1;
      const boxWidth = measure.width + 2 + paddingHorizontal * 2 + 2;
      const boxHeight = finalHeight + 2 + paddingVertical * 2 + 2;
      if (context.roundRect) {
        context.beginPath();
        context.roundRect(boxX, boxY, boxWidth, boxHeight, 8);
        context.fillStyle = background;
        context.fill();
        context.strokeStyle = COLOR_WHITE;
        context.stroke();
        if (isSpeaking) {
          context.beginPath();
          context.roundRect(boxX - 2, boxY - 2, boxWidth + 4, boxHeight + 4, 8);
          context.strokeStyle = IS_SPEAKING_COLOR;
          context.stroke();
        }
      } else {
        roundRect(context, boxX, boxY, boxWidth, boxHeight, 8, COLOR_WHITE);
      }
      context.fillStyle = COLOR_CHARCOAL_BLACK;
      context.fillText(
        username,
        offsetX + paddingHorizontal + 1,
        offsetY + paddingVertical + measure.actualBoundingBoxAscent + Math.floor((finalHeight - measureHeight) / 2) + 2
      );
      if (isSpeaking) {
        context.fillStyle = IS_SPEAKING_COLOR;
        const barheight = 8;
        const margin = 8;
        const gap = 5;
        context.fillRect(
          boxX + boxWidth + margin,
          boxY + (boxHeight / 2 - barheight / 2),
          2,
          barheight
        );
        context.fillRect(
          boxX + boxWidth + margin + gap,
          boxY + (boxHeight / 2 - barheight * 2 / 2),
          2,
          barheight * 2
        );
        context.fillRect(
          boxX + boxWidth + margin + gap * 2,
          boxY + (boxHeight / 2 - barheight / 2),
          2,
          barheight
        );
      }
    }
    context.restore();
    context.closePath();
  }
};

// components/Avatar.tsx
init_define_import_meta_env();
import { useState as useState10 } from "react";
import clsx18 from "clsx";
import { jsx as jsx43 } from "react/jsx-runtime";
var Avatar = ({
  color,
  onClick,
  name,
  src,
  className
}) => {
  const shortName = getNameInitial(name);
  const [error, setError] = useState10(false);
  const loadImg = !error && src;
  const style = loadImg ? void 0 : { background: color };
  return /* @__PURE__ */ jsx43("div", { className: clsx18("Avatar", className), style, onClick, children: loadImg ? /* @__PURE__ */ jsx43(
    "img",
    {
      className: "Avatar-img",
      src,
      alt: shortName,
      referrerPolicy: "no-referrer",
      onError: () => setError(true)
    }
  ) : shortName });
};

// actions/actionNavigate.tsx
init_icons();
init_store();
init_register();
import clsx19 from "clsx";
import { jsx as jsx44, jsxs as jsxs24 } from "react/jsx-runtime";
var actionGoToCollaborator = register({
  name: "goToCollaborator",
  label: "Go to a collaborator",
  viewMode: true,
  trackEvent: { category: "collab" },
  perform: (_elements, appState, collaborator) => {
    if (!collaborator.socketId || appState.userToFollow?.socketId === collaborator.socketId || collaborator.isCurrentUser) {
      return {
        appState: {
          ...appState,
          userToFollow: null
        },
        storeAction: StoreAction.NONE
      };
    }
    return {
      appState: {
        ...appState,
        userToFollow: {
          socketId: collaborator.socketId,
          username: collaborator.username || ""
        },
        // Close mobile menu
        openMenu: appState.openMenu === "canvas" ? null : appState.openMenu
      },
      storeAction: StoreAction.NONE
    };
  },
  PanelComponent: ({ updateData, data, appState }) => {
    const { socketId, collaborator, withName, isBeingFollowed } = data;
    const background = getClientColor(socketId, collaborator);
    const statusClassNames = clsx19({
      "is-followed": isBeingFollowed,
      "is-current-user": collaborator.isCurrentUser === true,
      "is-speaking": collaborator.isSpeaking,
      "is-in-call": collaborator.isInCall,
      "is-muted": collaborator.isMuted
    });
    const statusIconJSX = collaborator.isInCall ? collaborator.isSpeaking ? /* @__PURE__ */ jsxs24(
      "div",
      {
        className: "UserList__collaborator-status-icon-speaking-indicator",
        title: t("userList.hint.isSpeaking"),
        children: [
          /* @__PURE__ */ jsx44("div", {}),
          /* @__PURE__ */ jsx44("div", {}),
          /* @__PURE__ */ jsx44("div", {})
        ]
      }
    ) : collaborator.isMuted ? /* @__PURE__ */ jsx44(
      "div",
      {
        className: "UserList__collaborator-status-icon-microphone-muted",
        title: t("userList.hint.micMuted"),
        children: microphoneMutedIcon
      }
    ) : /* @__PURE__ */ jsx44("div", { title: t("userList.hint.inCall"), children: microphoneIcon }) : null;
    return withName ? /* @__PURE__ */ jsxs24(
      "div",
      {
        className: `dropdown-menu-item dropdown-menu-item-base UserList__collaborator ${statusClassNames}`,
        style: { [`--avatar-size`]: "1.5rem" },
        onClick: () => updateData(collaborator),
        children: [
          /* @__PURE__ */ jsx44(
            Avatar,
            {
              color: background,
              onClick: () => {
              },
              name: collaborator.username || "",
              src: collaborator.avatarUrl,
              className: statusClassNames
            }
          ),
          /* @__PURE__ */ jsx44("div", { className: "UserList__collaborator-name", children: collaborator.username }),
          /* @__PURE__ */ jsxs24("div", { className: "UserList__collaborator-status-icons", "aria-hidden": true, children: [
            isBeingFollowed && /* @__PURE__ */ jsx44(
              "div",
              {
                className: "UserList__collaborator-status-icon-is-followed",
                title: t("userList.hint.followStatus"),
                children: eyeIcon
              }
            ),
            statusIconJSX
          ] })
        ]
      }
    ) : /* @__PURE__ */ jsxs24(
      "div",
      {
        className: `UserList__collaborator UserList__collaborator--avatar-only ${statusClassNames}`,
        children: [
          /* @__PURE__ */ jsx44(
            Avatar,
            {
              color: background,
              onClick: () => {
                updateData(collaborator);
              },
              name: collaborator.username || "",
              src: collaborator.avatarUrl,
              className: statusClassNames
            }
          ),
          statusIconJSX && /* @__PURE__ */ jsx44("div", { className: "UserList__collaborator-status-icon", children: statusIconJSX })
        ]
      }
    );
  }
});

// actions/actionAddToLibrary.ts
init_define_import_meta_env();
init_register();
init_newElement();
init_random();
init_constants();
init_store();
var actionAddToLibrary = register({
  name: "addToLibrary",
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true,
      includeElementsInFrames: true
    });
    for (const type of LIBRARY_DISABLED_TYPES) {
      if (selectedElements.some((element) => element.type === type)) {
        return {
          storeAction: StoreAction.NONE,
          appState: {
            ...appState,
            errorMessage: t(`errors.libraryElementTypeError.${type}`)
          }
        };
      }
    }
    return app.library.getLatestLibrary().then((items) => {
      return app.library.setLibrary([
        {
          id: randomId(),
          status: "unpublished",
          elements: selectedElements.map(deepCopyElement),
          created: Date.now()
        },
        ...items
      ]);
    }).then(() => {
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          toast: { message: t("toast.addedToLibrary") }
        }
      };
    }).catch((error) => {
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          errorMessage: error.message
        }
      };
    });
  },
  label: "labels.addToLibrary"
});

// actions/actionAlign.tsx
init_define_import_meta_env();

// align.ts
init_define_import_meta_env();
init_mutateElement();
init_bounds();
init_groups();
var alignElements = (selectedElements, elementsMap, alignment) => {
  const groups = getMaximumGroups(
    selectedElements,
    elementsMap
  );
  const selectionBoundingBox = getCommonBoundingBox(selectedElements);
  return groups.flatMap((group) => {
    const translation2 = calculateTranslation(
      group,
      selectionBoundingBox,
      alignment
    );
    return group.map(
      (element) => newElementWith(element, {
        x: element.x + translation2.x,
        y: element.y + translation2.y
      })
    );
  });
};
var calculateTranslation = (group, selectionBoundingBox, { axis, position }) => {
  const groupBoundingBox = getCommonBoundingBox(group);
  const [min, max] = axis === "x" ? ["minX", "maxX"] : ["minY", "maxY"];
  const noTranslation = { x: 0, y: 0 };
  if (position === "start") {
    return {
      ...noTranslation,
      [axis]: selectionBoundingBox[min] - groupBoundingBox[min]
    };
  } else if (position === "end") {
    return {
      ...noTranslation,
      [axis]: selectionBoundingBox[max] - groupBoundingBox[max]
    };
  }
  return {
    ...noTranslation,
    [axis]: (selectionBoundingBox[min] + selectionBoundingBox[max]) / 2 - (groupBoundingBox[min] + groupBoundingBox[max]) / 2
  };
};

// actions/actionAlign.tsx
init_icons();
init_element();
init_typeChecks();
init_frame();
init_keys();
init_scene();
init_store();
init_utils2();
init_register();
import { jsx as jsx45 } from "react/jsx-runtime";
var alignActionsPredicate = (elements, appState, _, app) => {
  const selectedElements = app.scene.getSelectedElements(appState);
  return selectedElements.length > 1 && // TODO enable aligning frames when implemented properly
  !selectedElements.some((el) => isFrameLikeElement(el));
};
var alignSelectedElements = (elements, appState, app, alignment) => {
  const selectedElements = app.scene.getSelectedElements(appState);
  const elementsMap = arrayToMap(elements);
  const updatedElements = alignElements(
    selectedElements,
    elementsMap,
    alignment
  );
  const updatedElementsMap = arrayToMap(updatedElements);
  return updateFrameMembershipOfSelectedElements(
    elements.map((element) => updatedElementsMap.get(element.id) || element),
    appState,
    app
  );
};
var actionAlignTop = register({
  name: "alignTop",
  label: "labels.alignTop",
  icon: AlignTopIcon,
  trackEvent: { category: "element" },
  predicate: alignActionsPredicate,
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: alignSelectedElements(elements, appState, app, {
        position: "start",
        axis: "y"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_UP,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx45(
    ToolButton,
    {
      hidden: !alignActionsPredicate(elements, appState, null, app),
      type: "button",
      icon: AlignTopIcon,
      onClick: () => updateData(null),
      title: `${t("labels.alignTop")} \u2014 ${getShortcutKey(
        "CtrlOrCmd+Shift+Up"
      )}`,
      "aria-label": t("labels.alignTop"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var actionAlignBottom = register({
  name: "alignBottom",
  label: "labels.alignBottom",
  icon: AlignBottomIcon,
  trackEvent: { category: "element" },
  predicate: alignActionsPredicate,
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: alignSelectedElements(elements, appState, app, {
        position: "end",
        axis: "y"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_DOWN,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx45(
    ToolButton,
    {
      hidden: !alignActionsPredicate(elements, appState, null, app),
      type: "button",
      icon: AlignBottomIcon,
      onClick: () => updateData(null),
      title: `${t("labels.alignBottom")} \u2014 ${getShortcutKey(
        "CtrlOrCmd+Shift+Down"
      )}`,
      "aria-label": t("labels.alignBottom"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var actionAlignLeft = register({
  name: "alignLeft",
  label: "labels.alignLeft",
  icon: AlignLeftIcon,
  trackEvent: { category: "element" },
  predicate: alignActionsPredicate,
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: alignSelectedElements(elements, appState, app, {
        position: "start",
        axis: "x"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_LEFT,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx45(
    ToolButton,
    {
      hidden: !alignActionsPredicate(elements, appState, null, app),
      type: "button",
      icon: AlignLeftIcon,
      onClick: () => updateData(null),
      title: `${t("labels.alignLeft")} \u2014 ${getShortcutKey(
        "CtrlOrCmd+Shift+Left"
      )}`,
      "aria-label": t("labels.alignLeft"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var actionAlignRight = register({
  name: "alignRight",
  label: "labels.alignRight",
  icon: AlignRightIcon,
  trackEvent: { category: "element" },
  predicate: alignActionsPredicate,
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: alignSelectedElements(elements, appState, app, {
        position: "end",
        axis: "x"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_RIGHT,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx45(
    ToolButton,
    {
      hidden: !alignActionsPredicate(elements, appState, null, app),
      type: "button",
      icon: AlignRightIcon,
      onClick: () => updateData(null),
      title: `${t("labels.alignRight")} \u2014 ${getShortcutKey(
        "CtrlOrCmd+Shift+Right"
      )}`,
      "aria-label": t("labels.alignRight"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var actionAlignVerticallyCentered = register({
  name: "alignVerticallyCentered",
  label: "labels.centerVertically",
  icon: CenterVerticallyIcon,
  trackEvent: { category: "element" },
  predicate: alignActionsPredicate,
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: alignSelectedElements(elements, appState, app, {
        position: "center",
        axis: "y"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx45(
    ToolButton,
    {
      hidden: !alignActionsPredicate(elements, appState, null, app),
      type: "button",
      icon: CenterVerticallyIcon,
      onClick: () => updateData(null),
      title: t("labels.centerVertically"),
      "aria-label": t("labels.centerVertically"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var actionAlignHorizontallyCentered = register({
  name: "alignHorizontallyCentered",
  label: "labels.centerHorizontally",
  icon: CenterHorizontallyIcon,
  trackEvent: { category: "element" },
  predicate: alignActionsPredicate,
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: alignSelectedElements(elements, appState, app, {
        position: "center",
        axis: "x"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx45(
    ToolButton,
    {
      hidden: !alignActionsPredicate(elements, appState, null, app),
      type: "button",
      icon: CenterHorizontallyIcon,
      onClick: () => updateData(null),
      title: t("labels.centerHorizontally"),
      "aria-label": t("labels.centerHorizontally"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});

// actions/actionDistribute.tsx
init_define_import_meta_env();
init_icons();

// distribute.ts
init_define_import_meta_env();
init_mutateElement();
init_groups();
init_bounds();
var distributeElements = (selectedElements, elementsMap, distribution) => {
  const [start2, mid, end, extent] = distribution.axis === "x" ? ["minX", "midX", "maxX", "width"] : ["minY", "midY", "maxY", "height"];
  const bounds = getCommonBoundingBox(selectedElements);
  const groups = getMaximumGroups(selectedElements, elementsMap).map((group) => [group, getCommonBoundingBox(group)]).sort((a, b) => a[1][mid] - b[1][mid]);
  let span = 0;
  for (const group of groups) {
    span += group[1][extent];
  }
  const step = (bounds[extent] - span) / (groups.length - 1);
  if (step < 0) {
    const index0 = groups.findIndex((g) => g[1][start2] === bounds[start2]);
    const index1 = groups.findIndex((g) => g[1][end] === bounds[end]);
    const step2 = (groups[index1][1][mid] - groups[index0][1][mid]) / (groups.length - 1);
    let pos2 = groups[index0][1][mid];
    return groups.flatMap(([group, box], index) => {
      const translation2 = {
        x: 0,
        y: 0
      };
      if (index !== index0 && index !== index1) {
        pos2 += step2;
        translation2[distribution.axis] = pos2 - box[mid];
      }
      return group.map(
        (element) => newElementWith(element, {
          x: element.x + translation2.x,
          y: element.y + translation2.y
        })
      );
    });
  }
  let pos = bounds[start2];
  return groups.flatMap(([group, box]) => {
    const translation2 = {
      x: 0,
      y: 0
    };
    translation2[distribution.axis] = pos - box[start2];
    pos += step;
    pos += box[extent];
    return group.map(
      (element) => newElementWith(element, {
        x: element.x + translation2.x,
        y: element.y + translation2.y
      })
    );
  });
};

// actions/actionDistribute.tsx
init_element();
init_typeChecks();
init_frame();
init_keys();
init_scene();
init_store();
init_utils2();
init_register();
import { jsx as jsx46 } from "react/jsx-runtime";
var enableActionGroup2 = (appState, app) => {
  const selectedElements = app.scene.getSelectedElements(appState);
  return selectedElements.length > 1 && // TODO enable distributing frames when implemented properly
  !selectedElements.some((el) => isFrameLikeElement(el));
};
var distributeSelectedElements = (elements, appState, app, distribution) => {
  const selectedElements = app.scene.getSelectedElements(appState);
  const updatedElements = distributeElements(
    selectedElements,
    app.scene.getNonDeletedElementsMap(),
    distribution
  );
  const updatedElementsMap = arrayToMap(updatedElements);
  return updateFrameMembershipOfSelectedElements(
    elements.map((element) => updatedElementsMap.get(element.id) || element),
    appState,
    app
  );
};
var distributeHorizontally = register({
  name: "distributeHorizontally",
  label: "labels.distributeHorizontally",
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: distributeSelectedElements(elements, appState, app, {
        space: "between",
        axis: "x"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.H,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx46(
    ToolButton,
    {
      hidden: !enableActionGroup2(appState, app),
      type: "button",
      icon: DistributeHorizontallyIcon,
      onClick: () => updateData(null),
      title: `${t("labels.distributeHorizontally")} \u2014 ${getShortcutKey(
        "Alt+H"
      )}`,
      "aria-label": t("labels.distributeHorizontally"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});
var distributeVertically = register({
  name: "distributeVertically",
  label: "labels.distributeVertically",
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    return {
      appState,
      elements: distributeSelectedElements(elements, appState, app, {
        space: "between",
        axis: "y"
      }),
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,
  PanelComponent: ({ elements, appState, updateData, app }) => /* @__PURE__ */ jsx46(
    ToolButton,
    {
      hidden: !enableActionGroup2(appState, app),
      type: "button",
      icon: DistributeVerticallyIcon,
      onClick: () => updateData(null),
      title: `${t("labels.distributeVertically")} \u2014 ${getShortcutKey("Alt+V")}`,
      "aria-label": t("labels.distributeVertically"),
      visible: isSomeElementSelected(getNonDeletedElements2(elements), appState)
    }
  )
});

// actions/actionFlip.ts
init_define_import_meta_env();
init_register();
init_scene();
init_element();
init_resizeElements();
init_utils2();
init_keys();
init_bounds();
init_binding();
init_frame();
init_icons();
init_store();
init_typeChecks();
init_routing();
init_mutateElement();
var actionFlipHorizontal = register({
  name: "flipHorizontal",
  label: "labels.flipHorizontal",
  icon: flipHorizontal,
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    return {
      elements: updateFrameMembershipOfSelectedElements(
        flipSelectedElements(
          elements,
          app.scene.getNonDeletedElementsMap(),
          appState,
          "horizontal",
          app
        ),
        appState,
        app
      ),
      appState,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event.shiftKey && event.code === CODES.H
});
var actionFlipVertical = register({
  name: "flipVertical",
  label: "labels.flipVertical",
  icon: flipVertical,
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    return {
      elements: updateFrameMembershipOfSelectedElements(
        flipSelectedElements(
          elements,
          app.scene.getNonDeletedElementsMap(),
          appState,
          "vertical",
          app
        ),
        appState,
        app
      ),
      appState,
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event) => event.shiftKey && event.code === CODES.V && !event[KEYS.CTRL_OR_CMD]
});
var flipSelectedElements = (elements, elementsMap, appState, flipDirection, app) => {
  const selectedElements = getSelectedElements(
    getNonDeletedElements2(elements),
    appState,
    {
      includeBoundTextElement: true,
      includeElementsInFrames: true
    }
  );
  const updatedElements = flipElements(
    selectedElements,
    elementsMap,
    appState,
    flipDirection,
    app
  );
  const updatedElementsMap = arrayToMap(updatedElements);
  return elements.map(
    (element) => updatedElementsMap.get(element.id) || element
  );
};
var flipElements = (selectedElements, elementsMap, appState, flipDirection, app) => {
  if (selectedElements.every(
    (element) => isArrowElement(element) && (element.startBinding || element.endBinding)
  )) {
    return selectedElements.map((element) => {
      const _element = element;
      return newElementWith(_element, {
        startArrowhead: _element.endArrowhead,
        endArrowhead: _element.startArrowhead
      });
    });
  }
  const { minX, minY, maxX, maxY, midX, midY } = getCommonBoundingBox(selectedElements);
  resizeMultipleElements(
    elementsMap,
    selectedElements,
    elementsMap,
    "nw",
    true,
    true,
    flipDirection === "horizontal" ? maxX : minX,
    flipDirection === "horizontal" ? minY : maxY
  );
  bindOrUnbindLinearElements(
    selectedElements.filter(isLinearElement),
    elementsMap,
    app.scene.getNonDeletedElements(),
    app.scene,
    isBindingEnabled(appState),
    []
  );
  const { elbowArrows, otherElements } = selectedElements.reduce(
    (acc, element) => isElbowArrow(element) ? { ...acc, elbowArrows: acc.elbowArrows.concat(element) } : { ...acc, otherElements: acc.otherElements.concat(element) },
    { elbowArrows: [], otherElements: [] }
  );
  const { midX: newMidX, midY: newMidY } = getCommonBoundingBox(selectedElements);
  const [diffX, diffY] = [midX - newMidX, midY - newMidY];
  otherElements.forEach(
    (element) => mutateElement(element, {
      x: element.x + diffX,
      y: element.y + diffY
    })
  );
  elbowArrows.forEach(
    (element) => mutateElbowArrow(
      element,
      elementsMap,
      element.points,
      void 0,
      void 0,
      {
        informMutation: false
      }
    )
  );
  return selectedElements;
};

// actions/actionClipboard.tsx
init_define_import_meta_env();
init_keys();
init_register();
init_clipboard();
init_element();
init_constants();
init_icons();
init_store();
var actionCopy = register({
  name: "copy",
  label: "labels.copy",
  icon: DuplicateIcon,
  trackEvent: { category: "element" },
  perform: async (elements, appState, event, app) => {
    const elementsToCopy = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true,
      includeElementsInFrames: true
    });
    try {
      await copyToClipboard(elementsToCopy, app.files, event);
    } catch (error) {
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          errorMessage: error.message
        }
      };
    }
    return {
      storeAction: StoreAction.NONE
    };
  },
  // don't supply a shortcut since we handle this conditionally via onCopy event
  keyTest: void 0
});
var actionPaste = register({
  name: "paste",
  label: "labels.paste",
  trackEvent: { category: "element" },
  perform: async (elements, appState, data, app) => {
    let types;
    try {
      types = await readSystemClipboard();
    } catch (error) {
      if (error.name === "AbortError" || error.name === "NotAllowedError") {
        return false;
      }
      console.error(`actionPaste ${error.name}: ${error.message}`);
      if (isFirefox) {
        return {
          storeAction: StoreAction.NONE,
          appState: {
            ...appState,
            errorMessage: t("hints.firefox_clipboard_write")
          }
        };
      }
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          errorMessage: t("errors.asyncPasteFailedOnRead")
        }
      };
    }
    try {
      app.pasteFromClipboard(createPasteEvent({ types }));
    } catch (error) {
      console.error(error);
      return {
        storeAction: StoreAction.NONE,
        appState: {
          ...appState,
          errorMessage: t("errors.asyncPasteFailedOnParse")
        }
      };
    }
    return {
      storeAction: StoreAction.NONE
    };
  },
  // don't supply a shortcut since we handle this conditionally via onCopy event
  keyTest: void 0
});
var actionCut = register({
  name: "cut",
  label: "labels.cut",
  icon: cutIcon,
  trackEvent: { category: "element" },
  perform: (elements, appState, event, app) => {
    actionCopy.perform(elements, appState, event, app);
    return actionDeleteSelected.perform(elements, appState, null, app);
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.X
});
var actionCopyAsSvg = register({
  name: "copyAsSvg",
  label: "labels.copyAsSvg",
  icon: svgIcon,
  trackEvent: { category: "element" },
  perform: async (elements, appState, _data, app) => {
    if (!app.canvas) {
      return {
        storeAction: StoreAction.NONE
      };
    }
    const { exportedElements, exportingFrame } = prepareElementsForExport(
      elements,
      appState,
      true
    );
    try {
      await exportCanvas(
        "clipboard-svg",
        exportedElements,
        appState,
        app.files,
        {
          ...appState,
          exportingFrame,
          name: app.getName()
        }
      );
      return {
        storeAction: StoreAction.NONE
      };
    } catch (error) {
      console.error(error);
      return {
        appState: {
          ...appState,
          errorMessage: error.message
        },
        storeAction: StoreAction.NONE
      };
    }
  },
  predicate: (elements) => {
    return probablySupportsClipboardWriteText && elements.length > 0;
  },
  keywords: ["svg", "clipboard", "copy"]
});
var actionCopyAsPng = register({
  name: "copyAsPng",
  label: "labels.copyAsPng",
  icon: pngIcon,
  trackEvent: { category: "element" },
  perform: async (elements, appState, _data, app) => {
    if (!app.canvas) {
      return {
        storeAction: StoreAction.NONE
      };
    }
    const selectedElements = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true,
      includeElementsInFrames: true
    });
    const { exportedElements, exportingFrame } = prepareElementsForExport(
      elements,
      appState,
      true
    );
    try {
      await exportCanvas("clipboard", exportedElements, appState, app.files, {
        ...appState,
        exportingFrame,
        name: app.getName()
      });
      return {
        appState: {
          ...appState,
          toast: {
            message: t("toast.copyToClipboardAsPng", {
              exportSelection: selectedElements.length ? t("toast.selection") : t("toast.canvas"),
              exportColorScheme: appState.exportWithDarkMode ? t("buttons.darkMode") : t("buttons.lightMode")
            })
          }
        },
        storeAction: StoreAction.NONE
      };
    } catch (error) {
      console.error(error);
      return {
        appState: {
          ...appState,
          errorMessage: error.message
        },
        storeAction: StoreAction.NONE
      };
    }
  },
  predicate: (elements) => {
    return probablySupportsClipboardBlob && elements.length > 0;
  },
  keyTest: (event) => event.code === CODES.C && event.altKey && event.shiftKey,
  keywords: ["png", "clipboard", "copy"]
});
var copyText = register({
  name: "copyText",
  label: "labels.copyText",
  trackEvent: { category: "element" },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true
    });
    try {
      copyTextToSystemClipboard(getTextFromElements(selectedElements));
    } catch (e) {
      throw new Error(t("errors.copyToSystemClipboardFailed"));
    }
    return {
      storeAction: StoreAction.NONE
    };
  },
  predicate: (elements, appState, _, app) => {
    return probablySupportsClipboardWriteText && app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true
    }).some(isTextElement);
  },
  keywords: ["text", "clipboard", "copy"]
});

// actions/actionToggleGridMode.tsx
init_define_import_meta_env();
init_keys();
init_register();
init_icons();
init_store();
var actionToggleGridMode = register({
  name: "gridMode",
  icon: gridIcon,
  keywords: ["snap"],
  label: "labels.toggleGrid",
  viewMode: true,
  trackEvent: {
    category: "canvas",
    predicate: (appState) => appState.gridModeEnabled
  },
  perform(elements, appState) {
    return {
      appState: {
        ...appState,
        gridModeEnabled: !this.checked(appState),
        objectsSnapModeEnabled: false
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.gridModeEnabled,
  predicate: (element, appState, props) => {
    return props.gridModeEnabled === void 0;
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.code === CODES.QUOTE
});

// actions/actionToggleZenMode.tsx
init_define_import_meta_env();
init_icons();
init_keys();
init_store();
init_register();
var actionToggleZenMode = register({
  name: "zenMode",
  label: "buttons.zenMode",
  icon: coffeeIcon,
  paletteName: "Toggle zen mode",
  viewMode: true,
  trackEvent: {
    category: "canvas",
    predicate: (appState) => !appState.zenModeEnabled
  },
  perform(elements, appState) {
    return {
      appState: {
        ...appState,
        zenModeEnabled: !this.checked(appState)
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.zenModeEnabled,
  predicate: (elements, appState, appProps) => {
    return typeof appProps.zenModeEnabled === "undefined";
  },
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.Z
});

// actions/actionToggleObjectsSnapMode.tsx
init_define_import_meta_env();
init_icons();
init_keys();
init_store();
init_register();
var actionToggleObjectsSnapMode = register({
  name: "objectsSnapMode",
  label: "buttons.objectsSnapMode",
  icon: magnetIcon,
  viewMode: false,
  trackEvent: {
    category: "canvas",
    predicate: (appState) => !appState.objectsSnapModeEnabled
  },
  perform(elements, appState) {
    return {
      appState: {
        ...appState,
        objectsSnapModeEnabled: !this.checked(appState),
        gridModeEnabled: false
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.objectsSnapModeEnabled,
  predicate: (elements, appState, appProps) => {
    return typeof appProps.objectsSnapModeEnabled === "undefined";
  },
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.S
});

// actions/actionToggleStats.tsx
init_define_import_meta_env();
init_register();
init_keys();
init_icons();
init_store();
var actionToggleStats = register({
  name: "stats",
  label: "stats.fullTitle",
  icon: abacusIcon,
  paletteName: "Toggle stats",
  viewMode: true,
  trackEvent: { category: "menu" },
  keywords: ["edit", "attributes", "customize"],
  perform(elements, appState) {
    return {
      appState: {
        ...appState,
        stats: { ...appState.stats, open: !this.checked(appState) }
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.stats.open,
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.SLASH
});

// actions/actionBoundText.tsx
init_define_import_meta_env();
init_constants();
init_element();
init_mutateElement();
init_textElement();
init_containerCache();
init_typeChecks();
init_utils2();
init_register();
init_fractionalIndex();
init_store();
var actionUnbindText = register({
  name: "unbindText",
  label: "labels.unbindText",
  trackEvent: { category: "element" },
  predicate: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    return selectedElements.some((element) => hasBoundTextElement(element));
  },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    const elementsMap = app.scene.getNonDeletedElementsMap();
    selectedElements.forEach((element) => {
      const boundTextElement = getBoundTextElement(element, elementsMap);
      if (boundTextElement) {
        const { width, height } = measureText(
          boundTextElement.originalText,
          getFontString(boundTextElement),
          boundTextElement.lineHeight
        );
        const originalContainerHeight = getOriginalContainerHeightFromCache(
          element.id
        );
        resetOriginalContainerCache(element.id);
        const { x, y } = computeBoundTextPosition(
          element,
          boundTextElement,
          elementsMap
        );
        mutateElement(boundTextElement, {
          containerId: null,
          width,
          height,
          text: boundTextElement.originalText,
          x,
          y
        });
        mutateElement(element, {
          boundElements: element.boundElements?.filter(
            (ele) => ele.id !== boundTextElement.id
          ),
          height: originalContainerHeight ? originalContainerHeight : element.height
        });
      }
    });
    return {
      elements,
      appState,
      storeAction: StoreAction.CAPTURE
    };
  }
});
var actionBindText = register({
  name: "bindText",
  label: "labels.bindText",
  trackEvent: { category: "element" },
  predicate: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    if (selectedElements.length === 2) {
      const textElement = isTextElement(selectedElements[0]) || isTextElement(selectedElements[1]);
      let bindingContainer;
      if (isTextBindableContainer(selectedElements[0])) {
        bindingContainer = selectedElements[0];
      } else if (isTextBindableContainer(selectedElements[1])) {
        bindingContainer = selectedElements[1];
      }
      if (textElement && bindingContainer && getBoundTextElement(
        bindingContainer,
        app.scene.getNonDeletedElementsMap()
      ) === null) {
        return true;
      }
    }
    return false;
  },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    let textElement;
    let container;
    if (isTextElement(selectedElements[0]) && isTextBindableContainer(selectedElements[1])) {
      textElement = selectedElements[0];
      container = selectedElements[1];
    } else {
      textElement = selectedElements[1];
      container = selectedElements[0];
    }
    mutateElement(textElement, {
      containerId: container.id,
      verticalAlign: VERTICAL_ALIGN.MIDDLE,
      textAlign: TEXT_ALIGN.CENTER,
      autoResize: true
    });
    mutateElement(container, {
      boundElements: (container.boundElements || []).concat({
        type: "text",
        id: textElement.id
      })
    });
    const originalContainerHeight = container.height;
    redrawTextBoundingBox(
      textElement,
      container,
      app.scene.getNonDeletedElementsMap()
    );
    updateOriginalContainerCache(container.id, originalContainerHeight);
    return {
      elements: pushTextAboveContainer(elements, container, textElement),
      appState: { ...appState, selectedElementIds: { [container.id]: true } },
      storeAction: StoreAction.CAPTURE
    };
  }
});
var pushTextAboveContainer = (elements, container, textElement) => {
  const updatedElements = elements.slice();
  const textElementIndex = updatedElements.findIndex(
    (ele) => ele.id === textElement.id
  );
  updatedElements.splice(textElementIndex, 1);
  const containerIndex = updatedElements.findIndex(
    (ele) => ele.id === container.id
  );
  updatedElements.splice(containerIndex + 1, 0, textElement);
  syncMovedIndices(updatedElements, arrayToMap([container, textElement]));
  return updatedElements;
};
var pushContainerBelowText = (elements, container, textElement) => {
  const updatedElements = elements.slice();
  const containerIndex = updatedElements.findIndex(
    (ele) => ele.id === container.id
  );
  updatedElements.splice(containerIndex, 1);
  const textElementIndex = updatedElements.findIndex(
    (ele) => ele.id === textElement.id
  );
  updatedElements.splice(textElementIndex, 0, container);
  syncMovedIndices(updatedElements, arrayToMap([container, textElement]));
  return updatedElements;
};
var actionWrapTextInContainer = register({
  name: "wrapTextInContainer",
  label: "labels.createContainerFromText",
  trackEvent: { category: "element" },
  predicate: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    const areTextElements = selectedElements.every((el) => isTextElement(el));
    return selectedElements.length > 0 && areTextElements;
  },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    let updatedElements = elements.slice();
    const containerIds = {};
    for (const textElement of selectedElements) {
      if (isTextElement(textElement)) {
        const container = newElement({
          type: "rectangle",
          backgroundColor: appState.currentItemBackgroundColor,
          boundElements: [
            ...textElement.boundElements || [],
            { id: textElement.id, type: "text" }
          ],
          angle: textElement.angle,
          fillStyle: appState.currentItemFillStyle,
          strokeColor: appState.currentItemStrokeColor,
          roughness: appState.currentItemRoughness,
          strokeWidth: appState.currentItemStrokeWidth,
          strokeStyle: appState.currentItemStrokeStyle,
          roundness: appState.currentItemRoundness === "round" ? {
            type: isUsingAdaptiveRadius("rectangle") ? ROUNDNESS.ADAPTIVE_RADIUS : ROUNDNESS.PROPORTIONAL_RADIUS
          } : null,
          opacity: 100,
          locked: false,
          x: textElement.x - BOUND_TEXT_PADDING,
          y: textElement.y - BOUND_TEXT_PADDING,
          width: computeContainerDimensionForBoundText(
            textElement.width,
            "rectangle"
          ),
          height: computeContainerDimensionForBoundText(
            textElement.height,
            "rectangle"
          ),
          groupIds: textElement.groupIds,
          frameId: textElement.frameId
        });
        if (textElement.boundElements?.length) {
          const linearElementIds = textElement.boundElements.filter((ele) => ele.type === "arrow").map((el) => el.id);
          const linearElements = updatedElements.filter(
            (ele) => linearElementIds.includes(ele.id)
          );
          linearElements.forEach((ele) => {
            let startBinding = ele.startBinding;
            let endBinding = ele.endBinding;
            if (startBinding?.elementId === textElement.id) {
              startBinding = {
                ...startBinding,
                elementId: container.id
              };
            }
            if (endBinding?.elementId === textElement.id) {
              endBinding = { ...endBinding, elementId: container.id };
            }
            if (startBinding || endBinding) {
              mutateElement(ele, { startBinding, endBinding }, false);
            }
          });
        }
        mutateElement(
          textElement,
          {
            containerId: container.id,
            verticalAlign: VERTICAL_ALIGN.MIDDLE,
            boundElements: null,
            textAlign: TEXT_ALIGN.CENTER,
            autoResize: true
          },
          false
        );
        redrawTextBoundingBox(
          textElement,
          container,
          app.scene.getNonDeletedElementsMap()
        );
        updatedElements = pushContainerBelowText(
          [...updatedElements, container],
          container,
          textElement
        );
        containerIds[container.id] = true;
      }
    }
    return {
      elements: updatedElements,
      appState: {
        ...appState,
        selectedElementIds: containerIds
      },
      storeAction: StoreAction.CAPTURE
    };
  }
});

// actions/actionLink.tsx
init_define_import_meta_env();

// components/hyperlink/Hyperlink.tsx
init_define_import_meta_env();
init_utils2();
init_embeddable();
init_mutateElement();
init_icons();
init_keys();
init_constants();
init_bounds();
import {
  useCallback as useCallback4,
  useEffect as useEffect16,
  useLayoutEffect as useLayoutEffect4,
  useRef as useRef13,
  useState as useState11
} from "react";
import clsx20 from "clsx";
init_scene();
init_collision2();
init_url();
init_typeChecks();
init_helpers();
init_math();
import { jsx as jsx47, jsxs as jsxs25 } from "react/jsx-runtime";
var CONTAINER_WIDTH = 320;
var SPACE_BOTTOM = 85;
var CONTAINER_PADDING = 5;
var CONTAINER_HEIGHT = 42;
var AUTO_HIDE_TIMEOUT = 500;
var IS_HYPERLINK_TOOLTIP_VISIBLE = false;
var embeddableLinkCache = /* @__PURE__ */ new Map();
var Hyperlink = ({
  element,
  elementsMap,
  setAppState,
  onLinkOpen,
  setToast,
  updateEmbedValidationStatus
}) => {
  const appState = useExcalidrawAppState();
  const appProps = useAppProps();
  const linkVal = element.link || "";
  const [inputVal, setInputVal] = useState11(linkVal);
  const inputRef = useRef13(null);
  const isEditing = appState.showHyperlinkPopup === "editor";
  const handleSubmit = useCallback4(() => {
    if (!inputRef.current) {
      return;
    }
    const link = normalizeLink(inputRef.current.value) || null;
    if (!element.link && link) {
      trackEvent("hyperlink", "create");
    }
    if (isEmbeddableElement(element)) {
      if (appState.activeEmbeddable?.element === element) {
        setAppState({ activeEmbeddable: null });
      }
      if (!link) {
        mutateElement(element, {
          link: null
        });
        updateEmbedValidationStatus(element, false);
        return;
      }
      if (!embeddableURLValidator(link, appProps.validateEmbeddable)) {
        if (link) {
          setToast({ message: t("toast.unableToEmbed"), closable: true });
        }
        element.link && embeddableLinkCache.set(element.id, element.link);
        mutateElement(element, {
          link
        });
        updateEmbedValidationStatus(element, false);
      } else {
        const { width, height } = element;
        const embedLink = getEmbedLink(link);
        if (embedLink?.error instanceof URIError) {
          setToast({
            message: t("toast.unrecognizedLinkFormat"),
            closable: true
          });
        }
        const ar = embedLink ? embedLink.intrinsicSize.w / embedLink.intrinsicSize.h : 1;
        const hasLinkChanged = embeddableLinkCache.get(element.id) !== element.link;
        mutateElement(element, {
          ...hasLinkChanged ? {
            width: embedLink?.type === "video" ? width > height ? width : height * ar : width,
            height: embedLink?.type === "video" ? width > height ? width / ar : height : height
          } : {},
          link
        });
        updateEmbedValidationStatus(element, true);
        if (embeddableLinkCache.has(element.id)) {
          embeddableLinkCache.delete(element.id);
        }
      }
    } else {
      mutateElement(element, { link });
    }
  }, [
    element,
    setToast,
    appProps.validateEmbeddable,
    appState.activeEmbeddable,
    setAppState,
    updateEmbedValidationStatus
  ]);
  useLayoutEffect4(() => {
    return () => {
      handleSubmit();
    };
  }, [handleSubmit]);
  useEffect16(() => {
    let timeoutId = null;
    const handlePointerMove = (event) => {
      if (isEditing) {
        return;
      }
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      const shouldHide = shouldHideLinkPopup(
        element,
        elementsMap,
        appState,
        pointFrom(event.clientX, event.clientY)
      );
      if (shouldHide) {
        timeoutId = window.setTimeout(() => {
          setAppState({ showHyperlinkPopup: false });
        }, AUTO_HIDE_TIMEOUT);
      }
    };
    window.addEventListener("pointermove" /* POINTER_MOVE */, handlePointerMove, false);
    return () => {
      window.removeEventListener("pointermove" /* POINTER_MOVE */, handlePointerMove, false);
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [appState, element, isEditing, setAppState, elementsMap]);
  const handleRemove = useCallback4(() => {
    trackEvent("hyperlink", "delete");
    mutateElement(element, { link: null });
    if (isEditing) {
      inputRef.current.value = "";
    }
    setAppState({ showHyperlinkPopup: false });
  }, [setAppState, element, isEditing]);
  const onEdit = () => {
    trackEvent("hyperlink", "edit", "popup-ui");
    setAppState({ showHyperlinkPopup: "editor" });
  };
  const { x, y } = getCoordsForPopover(element, appState, elementsMap);
  if (appState.contextMenu || appState.selectedElementsAreBeingDragged || appState.resizingElement || appState.isRotating || appState.openMenu || appState.viewModeEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsxs25(
    "div",
    {
      className: "excalidraw-hyperlinkContainer",
      style: {
        top: `${y}px`,
        left: `${x}px`,
        width: CONTAINER_WIDTH,
        padding: CONTAINER_PADDING
      },
      onClick: () => {
        if (!element.link && !isEditing) {
          setAppState({ showHyperlinkPopup: "editor" });
        }
      },
      children: [
        isEditing ? /* @__PURE__ */ jsx47(
          "input",
          {
            className: clsx20("excalidraw-hyperlinkContainer-input"),
            placeholder: "Type or paste your link here",
            ref: inputRef,
            value: inputVal,
            onChange: (event) => setInputVal(event.target.value),
            autoFocus: true,
            onKeyDown: (event) => {
              event.stopPropagation();
              if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.K) {
                event.preventDefault();
              }
              if (event.key === KEYS.ENTER || event.key === KEYS.ESCAPE) {
                handleSubmit();
                setAppState({ showHyperlinkPopup: "info" });
              }
            }
          }
        ) : element.link ? /* @__PURE__ */ jsx47(
          "a",
          {
            href: normalizeLink(element.link || ""),
            className: "excalidraw-hyperlinkContainer-link",
            target: isLocalLink(element.link) ? "_self" : "_blank",
            onClick: (event) => {
              if (element.link && onLinkOpen) {
                const customEvent = wrapEvent(
                  "excalidraw-link" /* EXCALIDRAW_LINK */,
                  event.nativeEvent
                );
                onLinkOpen(
                  {
                    ...element,
                    link: normalizeLink(element.link)
                  },
                  customEvent
                );
                if (customEvent.defaultPrevented) {
                  event.preventDefault();
                }
              }
            },
            rel: "noopener noreferrer",
            children: element.link
          }
        ) : /* @__PURE__ */ jsx47("div", { className: "excalidraw-hyperlinkContainer-link", children: t("labels.link.empty") }),
        /* @__PURE__ */ jsxs25("div", { className: "excalidraw-hyperlinkContainer__buttons", children: [
          !isEditing && /* @__PURE__ */ jsx47(
            ToolButton,
            {
              type: "button",
              title: t("buttons.edit"),
              "aria-label": t("buttons.edit"),
              label: t("buttons.edit"),
              onClick: onEdit,
              className: "excalidraw-hyperlinkContainer--edit",
              icon: FreedrawIcon
            }
          ),
          linkVal && !isEmbeddableElement(element) && /* @__PURE__ */ jsx47(
            ToolButton,
            {
              type: "button",
              title: t("buttons.remove"),
              "aria-label": t("buttons.remove"),
              label: t("buttons.remove"),
              onClick: handleRemove,
              className: "excalidraw-hyperlinkContainer--remove",
              icon: TrashIcon
            }
          )
        ] })
      ]
    }
  );
};
var getCoordsForPopover = (element, appState, elementsMap) => {
  const [x1, y1] = getElementAbsoluteCoords(element, elementsMap);
  const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(
    { sceneX: x1 + element.width / 2, sceneY: y1 },
    appState
  );
  const x = viewportX - appState.offsetLeft - CONTAINER_WIDTH / 2;
  const y = viewportY - appState.offsetTop - SPACE_BOTTOM;
  return { x, y };
};
var getContextMenuLabel = (elements, appState) => {
  const selectedElements = getSelectedElements(elements, appState);
  const label = selectedElements[0]?.link ? isEmbeddableElement(selectedElements[0]) ? "labels.link.editEmbed" : "labels.link.edit" : isEmbeddableElement(selectedElements[0]) ? "labels.link.createEmbed" : "labels.link.create";
  return label;
};
var HYPERLINK_TOOLTIP_TIMEOUT_ID = null;
var showHyperlinkTooltip = (element, appState, elementsMap) => {
  if (HYPERLINK_TOOLTIP_TIMEOUT_ID) {
    clearTimeout(HYPERLINK_TOOLTIP_TIMEOUT_ID);
  }
  HYPERLINK_TOOLTIP_TIMEOUT_ID = window.setTimeout(
    () => renderTooltip(element, appState, elementsMap),
    HYPERLINK_TOOLTIP_DELAY
  );
};
var renderTooltip = (element, appState, elementsMap) => {
  if (!element.link) {
    return;
  }
  const tooltipDiv = getTooltipDiv();
  tooltipDiv.classList.add("excalidraw-tooltip--visible");
  tooltipDiv.style.maxWidth = "20rem";
  tooltipDiv.textContent = element.link;
  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
  const [linkX, linkY, linkWidth, linkHeight] = getLinkHandleFromCoords(
    [x1, y1, x2, y2],
    element.angle,
    appState
  );
  const linkViewportCoords = sceneCoordsToViewportCoords(
    { sceneX: linkX, sceneY: linkY },
    appState
  );
  updateTooltipPosition(
    tooltipDiv,
    {
      left: linkViewportCoords.x,
      top: linkViewportCoords.y,
      width: linkWidth,
      height: linkHeight
    },
    "top"
  );
  trackEvent("hyperlink", "tooltip", "link-icon");
  IS_HYPERLINK_TOOLTIP_VISIBLE = true;
};
var hideHyperlinkToolip = () => {
  if (HYPERLINK_TOOLTIP_TIMEOUT_ID) {
    clearTimeout(HYPERLINK_TOOLTIP_TIMEOUT_ID);
  }
  if (IS_HYPERLINK_TOOLTIP_VISIBLE) {
    IS_HYPERLINK_TOOLTIP_VISIBLE = false;
    getTooltipDiv().classList.remove("excalidraw-tooltip--visible");
  }
};
var shouldHideLinkPopup = (element, elementsMap, appState, [clientX, clientY]) => {
  const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(
    { clientX, clientY },
    appState
  );
  const threshold = 15 / appState.zoom.value;
  if (hitElementBoundingBox(sceneX, sceneY, element, elementsMap)) {
    return false;
  }
  const [x1, y1, x2] = getElementAbsoluteCoords(element, elementsMap);
  if (sceneX >= x1 && sceneX <= x2 && sceneY >= y1 - SPACE_BOTTOM && sceneY <= y1) {
    return false;
  }
  const { x: popoverX, y: popoverY } = getCoordsForPopover(
    element,
    appState,
    elementsMap
  );
  if (clientX >= popoverX - threshold && clientX <= popoverX + CONTAINER_WIDTH + CONTAINER_PADDING * 2 + threshold && clientY >= popoverY - threshold && clientY <= popoverY + threshold + CONTAINER_PADDING * 2 + CONTAINER_HEIGHT) {
    return false;
  }
  return true;
};

// actions/actionLink.tsx
init_icons();
init_typeChecks();
init_keys();
init_scene();
init_store();
init_utils2();
init_register();
import { jsx as jsx48 } from "react/jsx-runtime";
var actionLink = register({
  name: "hyperlink",
  label: (elements, appState) => getContextMenuLabel(elements, appState),
  icon: LinkIcon,
  perform: (elements, appState) => {
    if (appState.showHyperlinkPopup === "editor") {
      return false;
    }
    return {
      elements,
      appState: {
        ...appState,
        showHyperlinkPopup: "editor",
        openMenu: null
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  trackEvent: { category: "hyperlink", action: "click" },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.K,
  predicate: (elements, appState) => {
    const selectedElements = getSelectedElements(elements, appState);
    return selectedElements.length === 1;
  },
  PanelComponent: ({ elements, appState, updateData }) => {
    const selectedElements = getSelectedElements(elements, appState);
    return /* @__PURE__ */ jsx48(
      ToolButton,
      {
        type: "button",
        icon: LinkIcon,
        "aria-label": t(getContextMenuLabel(elements, appState)),
        title: `${isEmbeddableElement(elements[0]) ? t("labels.link.labelEmbed") : t("labels.link.label")} - ${getShortcutKey("CtrlOrCmd+K")}`,
        onClick: () => updateData(null),
        selected: selectedElements.length === 1 && !!selectedElements[0].link
      }
    );
  }
});

// actions/actionElementLock.ts
init_define_import_meta_env();
init_icons();
init_mutateElement();
init_typeChecks();
init_keys();
init_scene();
init_store();
init_utils2();
init_register();
var shouldLock = (elements) => elements.every((el) => !el.locked);
var actionToggleElementLock = register({
  name: "toggleElementLock",
  label: (elements, appState, app) => {
    const selected = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: false
    });
    if (selected.length === 1 && !isFrameLikeElement(selected[0])) {
      return selected[0].locked ? "labels.elementLock.unlock" : "labels.elementLock.lock";
    }
    return shouldLock(selected) ? "labels.elementLock.lockAll" : "labels.elementLock.unlockAll";
  },
  icon: (appState, elements) => {
    const selectedElements = getSelectedElements(elements, appState);
    return shouldLock(selectedElements) ? LockedIcon : UnlockedIcon;
  },
  trackEvent: { category: "element" },
  predicate: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    return selectedElements.length > 0 && !selectedElements.some((element) => element.locked && element.frameId);
  },
  perform: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true,
      includeElementsInFrames: true
    });
    if (!selectedElements.length) {
      return false;
    }
    const nextLockState = shouldLock(selectedElements);
    const selectedElementsMap = arrayToMap(selectedElements);
    return {
      elements: elements.map((element) => {
        if (!selectedElementsMap.has(element.id)) {
          return element;
        }
        return newElementWith(element, { locked: nextLockState });
      }),
      appState: {
        ...appState,
        selectedLinearElement: nextLockState ? null : appState.selectedLinearElement
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  keyTest: (event, appState, elements, app) => {
    return event.key.toLocaleLowerCase() === KEYS.L && event[KEYS.CTRL_OR_CMD] && event.shiftKey && app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: false
    }).length > 0;
  }
});
var actionUnlockAllElements = register({
  name: "unlockAllElements",
  paletteName: "Unlock all elements",
  trackEvent: { category: "canvas" },
  viewMode: false,
  icon: UnlockedIcon,
  predicate: (elements, appState) => {
    const selectedElements = getSelectedElements(elements, appState);
    return selectedElements.length === 0 && elements.some((element) => element.locked);
  },
  perform: (elements, appState) => {
    const lockedElements = elements.filter((el) => el.locked);
    return {
      elements: elements.map((element) => {
        if (element.locked) {
          return newElementWith(element, { locked: false });
        }
        return element;
      }),
      appState: {
        ...appState,
        selectedElementIds: Object.fromEntries(
          lockedElements.map((el) => [el.id, true])
        )
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  label: "labels.elementLock.unlockAll"
});

// actions/actionLinearEditor.tsx
init_define_import_meta_env();

// components/CommandPalette/CommandPalette.tsx
init_define_import_meta_env();
import { useEffect as useEffect26, useRef as useRef23, useState as useState23 } from "react";
init_keys();

// components/Dialog.tsx
init_define_import_meta_env();
import clsx29 from "clsx";
import { useEffect as useEffect25, useState as useState20 } from "react";

// hooks/useCallbackRefState.ts
init_define_import_meta_env();
import { useCallback as useCallback5, useState as useState12 } from "react";
var useCallbackRefState = () => {
  const [refValue, setRefValue] = useState12(null);
  const refCallback = useCallback5((value) => setRefValue(value), []);
  return [refValue, refCallback];
};

// components/Dialog.tsx
init_keys();

// components/Modal.tsx
init_define_import_meta_env();
init_keys();
import { createPortal as createPortal2 } from "react-dom";
import clsx21 from "clsx";
import { useRef as useRef14 } from "react";
import { jsx as jsx49, jsxs as jsxs26 } from "react/jsx-runtime";
var Modal = (props) => {
  const { closeOnClickOutside = true } = props;
  const modalRoot = useCreatePortalContainer({
    className: "excalidraw-modal-container"
  });
  const animationsDisabledRef = useRef14(
    document.body.classList.contains("excalidraw-animations-disabled")
  );
  if (!modalRoot) {
    return null;
  }
  const handleKeydown = (event) => {
    if (event.key === KEYS.ESCAPE) {
      event.nativeEvent.stopImmediatePropagation();
      event.stopPropagation();
      props.onCloseRequest();
    }
  };
  return createPortal2(
    /* @__PURE__ */ jsxs26(
      "div",
      {
        className: clsx21("Modal", props.className, {
          "animations-disabled": animationsDisabledRef.current
        }),
        role: "dialog",
        "aria-modal": "true",
        onKeyDown: handleKeydown,
        "aria-labelledby": props.labelledBy,
        "data-prevent-outside-click": true,
        children: [
          /* @__PURE__ */ jsx49(
            "div",
            {
              className: "Modal__background",
              onClick: closeOnClickOutside ? props.onCloseRequest : void 0
            }
          ),
          /* @__PURE__ */ jsx49(
            "div",
            {
              className: "Modal__content",
              style: { "--max-width": `${props.maxWidth}px` },
              tabIndex: 0,
              children: props.children
            }
          )
        ]
      }
    ),
    modalRoot
  );
};

// components/Dialog.tsx
init_utils2();
import { useSetAtom as useSetAtom2 } from "jotai";

// components/LibraryMenu.tsx
init_define_import_meta_env();
import { useState as useState19, useCallback as useCallback10, useMemo as useMemo6, useRef as useRef20 } from "react";

// data/library.ts
init_define_import_meta_env();
init_blob();
init_restore();
import { atom as atom5 } from "jotai";
init_bounds();
init_errors();
init_constants();
import { useEffect as useEffect18, useRef as useRef15 } from "react";

// hooks/useLibraryItemSvg.ts
init_define_import_meta_env();
init_colors();
import { atom as atom4, useAtom as useAtom8 } from "jotai";
import { useEffect as useEffect17, useState as useState13 } from "react";
init_export2();
var libraryItemSvgsCache = atom4(/* @__PURE__ */ new Map());
var exportLibraryItemToSvg = async (elements) => {
  return await exportToSvg2({
    elements,
    appState: {
      exportBackground: false,
      viewBackgroundColor: COLOR_PALETTE.white
    },
    files: null,
    renderEmbeddables: false,
    skipInliningFonts: true
  });
};
var useLibraryItemSvg = (id, elements, svgCache) => {
  const [svg, setSvg] = useState13();
  useEffect17(() => {
    if (elements) {
      if (id) {
        const cachedSvg = svgCache.get(id);
        if (cachedSvg) {
          setSvg(cachedSvg);
        } else {
          (async () => {
            const exportedSvg = await exportLibraryItemToSvg(elements);
            exportedSvg.querySelector(".style-fonts")?.remove();
            if (exportedSvg) {
              svgCache.set(id, exportedSvg);
              setSvg(exportedSvg);
            }
          })();
        }
      } else {
        (async () => {
          const exportedSvg = await exportLibraryItemToSvg(elements);
          setSvg(exportedSvg);
        })();
      }
    }
  }, [id, elements, svgCache, setSvg]);
  return svg;
};
var useLibraryCache = () => {
  const [svgCache] = useAtom8(libraryItemSvgsCache, jotaiScope);
  const clearLibraryCache = () => svgCache.clear();
  const deleteItemsFromLibraryCache = (items) => {
    items.forEach((item) => svgCache.delete(item));
  };
  return {
    clearLibraryCache,
    deleteItemsFromLibraryCache,
    svgCache
  };
};

// data/library.ts
init_utils2();
init_emitter();

// queue.ts
init_define_import_meta_env();
init_utils2();
var Queue = class {
  jobs = [];
  running = false;
  tick() {
    if (this.running) {
      return;
    }
    const job = this.jobs.shift();
    if (job) {
      this.running = true;
      job.promise.resolve(
        promiseTry(job.jobFactory, ...job.args).finally(() => {
          this.running = false;
          this.tick();
        })
      );
    } else {
      this.running = false;
    }
  }
  push(jobFactory, ...args) {
    const promise = resolvablePromise();
    this.jobs.push({ jobFactory, promise, args });
    this.tick();
    return promise;
  }
};

// data/library.ts
init_element();
var onLibraryUpdateEmitter = new Emitter();
var libraryItemsAtom = atom5({ status: "loaded", isInitialized: false, libraryItems: [] });
var cloneLibraryItems = (libraryItems) => cloneJSON(libraryItems);
var isUniqueItem = (existingLibraryItems, targetLibraryItem) => {
  return !existingLibraryItems.find((libraryItem) => {
    if (libraryItem.elements.length !== targetLibraryItem.elements.length) {
      return false;
    }
    return libraryItem.elements.every((libItemExcalidrawItem, idx) => {
      return libItemExcalidrawItem.id === targetLibraryItem.elements[idx].id && libItemExcalidrawItem.versionNonce === targetLibraryItem.elements[idx].versionNonce;
    });
  });
};
var mergeLibraryItems = (localItems, otherItems) => {
  const newItems = [];
  for (const item of otherItems) {
    if (isUniqueItem(localItems, item)) {
      newItems.push(item);
    }
  }
  return [...newItems, ...localItems];
};
var createLibraryUpdate = (prevLibraryItems, nextLibraryItems) => {
  const nextItemsMap = arrayToMap(nextLibraryItems);
  const update = {
    deletedItems: /* @__PURE__ */ new Map(),
    addedItems: /* @__PURE__ */ new Map()
  };
  for (const item of prevLibraryItems) {
    if (!nextItemsMap.has(item.id)) {
      update.deletedItems.set(item.id, item);
    }
  }
  const prevItemsMap = arrayToMap(prevLibraryItems);
  for (const item of nextLibraryItems) {
    if (!prevItemsMap.has(item.id)) {
      update.addedItems.set(item.id, item);
    }
  }
  return update;
};
var Library = class {
  /** latest libraryItems */
  currLibraryItems = [];
  /** snapshot of library items since last onLibraryChange call */
  prevLibraryItems = cloneLibraryItems(this.currLibraryItems);
  app;
  constructor(app) {
    this.app = app;
  }
  updateQueue = [];
  getLastUpdateTask = () => {
    return this.updateQueue[this.updateQueue.length - 1];
  };
  notifyListeners = () => {
    if (this.updateQueue.length > 0) {
      jotaiStore.set(libraryItemsAtom, (s) => ({
        status: "loading",
        libraryItems: this.currLibraryItems,
        isInitialized: s.isInitialized
      }));
    } else {
      jotaiStore.set(libraryItemsAtom, {
        status: "loaded",
        libraryItems: this.currLibraryItems,
        isInitialized: true
      });
      try {
        const prevLibraryItems = this.prevLibraryItems;
        this.prevLibraryItems = cloneLibraryItems(this.currLibraryItems);
        const nextLibraryItems = cloneLibraryItems(this.currLibraryItems);
        this.app.props.onLibraryChange?.(nextLibraryItems);
        onLibraryUpdateEmitter.trigger(
          createLibraryUpdate(prevLibraryItems, nextLibraryItems),
          nextLibraryItems
        );
      } catch (error) {
        console.error(error);
      }
    }
  };
  /** call on excalidraw instance unmount */
  destroy = () => {
    this.updateQueue = [];
    this.currLibraryItems = [];
    jotaiStore.set(libraryItemSvgsCache, /* @__PURE__ */ new Map());
  };
  resetLibrary = () => {
    return this.setLibrary([]);
  };
  /**
   * @returns latest cloned libraryItems. Awaits all in-progress updates first.
   */
  getLatestLibrary = () => {
    return new Promise(async (resolve) => {
      try {
        const libraryItems = await (this.getLastUpdateTask() || this.currLibraryItems);
        if (this.updateQueue.length > 0) {
          resolve(this.getLatestLibrary());
        } else {
          resolve(cloneLibraryItems(libraryItems));
        }
      } catch (error) {
        return resolve(this.currLibraryItems);
      }
    });
  };
  // NOTE this is a high-level public API (exposed on ExcalidrawAPI) with
  // a slight overhead (always restoring library items). For internal use
  // where merging isn't needed, use `library.setLibrary()` directly.
  updateLibrary = async ({
    libraryItems,
    prompt = false,
    merge = false,
    openLibraryMenu = false,
    defaultStatus = "unpublished"
  }) => {
    if (openLibraryMenu) {
      this.app.setState({
        openSidebar: { name: DEFAULT_SIDEBAR.name, tab: LIBRARY_SIDEBAR_TAB }
      });
    }
    return this.setLibrary(() => {
      return new Promise(async (resolve, reject) => {
        try {
          const source = await (typeof libraryItems === "function" && !(libraryItems instanceof Blob) ? libraryItems(this.currLibraryItems) : libraryItems);
          let nextItems;
          if (source instanceof Blob) {
            nextItems = await loadLibraryFromBlob(source, defaultStatus);
          } else {
            nextItems = restoreLibraryItems(source, defaultStatus);
          }
          if (!prompt || window.confirm(
            t("alerts.confirmAddLibrary", {
              numShapes: nextItems.length
            })
          )) {
            if (prompt) {
              this.app.focusContainer();
            }
            if (merge) {
              resolve(mergeLibraryItems(this.currLibraryItems, nextItems));
            } else {
              resolve(nextItems);
            }
          } else {
            reject(new AbortError());
          }
        } catch (error) {
          reject(error);
        }
      });
    });
  };
  setLibrary = (libraryItems) => {
    const task = new Promise(async (resolve, reject) => {
      try {
        await this.getLastUpdateTask();
        if (typeof libraryItems === "function") {
          libraryItems = libraryItems(this.currLibraryItems);
        }
        this.currLibraryItems = cloneLibraryItems(await libraryItems);
        resolve(this.currLibraryItems);
      } catch (error) {
        reject(error);
      }
    }).catch((error) => {
      if (error.name === "AbortError") {
        console.warn("Library update aborted by user");
        return this.currLibraryItems;
      }
      throw error;
    }).finally(() => {
      this.updateQueue = this.updateQueue.filter((_task) => _task !== task);
      this.notifyListeners();
    });
    this.updateQueue.push(task);
    this.notifyListeners();
    return task;
  };
};
var library_default = Library;
var distributeLibraryItemsOnSquareGrid = (libraryItems) => {
  const PADDING = 50;
  const ITEMS_PER_ROW = Math.ceil(Math.sqrt(libraryItems.length));
  const resElements = [];
  const getMaxHeightPerRow = (row2) => {
    const maxHeight = libraryItems.slice(row2 * ITEMS_PER_ROW, row2 * ITEMS_PER_ROW + ITEMS_PER_ROW).reduce((acc, item) => {
      const { height } = getCommonBoundingBox(item.elements);
      return Math.max(acc, height);
    }, 0);
    return maxHeight;
  };
  const getMaxWidthPerCol = (targetCol) => {
    let index2 = 0;
    let currCol = 0;
    let maxWidth = 0;
    for (const item of libraryItems) {
      if (index2 % ITEMS_PER_ROW === 0) {
        currCol = 0;
      }
      if (currCol === targetCol) {
        const { width } = getCommonBoundingBox(item.elements);
        maxWidth = Math.max(maxWidth, width);
      }
      index2++;
      currCol++;
    }
    return maxWidth;
  };
  let colOffsetX = 0;
  let rowOffsetY = 0;
  let maxHeightCurrRow = 0;
  let maxWidthCurrCol = 0;
  let index = 0;
  let col = 0;
  let row = 0;
  for (const item of libraryItems) {
    if (index && index % ITEMS_PER_ROW === 0) {
      rowOffsetY += maxHeightCurrRow + PADDING;
      colOffsetX = 0;
      col = 0;
      row++;
    }
    if (col === 0) {
      maxHeightCurrRow = getMaxHeightPerRow(row);
    }
    maxWidthCurrCol = getMaxWidthPerCol(col);
    const { minX, minY, width, height } = getCommonBoundingBox(item.elements);
    const offsetCenterX = (maxWidthCurrCol - width) / 2;
    const offsetCenterY = (maxHeightCurrRow - height) / 2;
    resElements.push(
      ...item.elements.map((element) => ({
        ...element,
        x: element.x + // offset for column
        colOffsetX + // offset to center in given square grid
        offsetCenterX - // subtract minX so that given item starts at 0 coord
        minX,
        y: element.y + // offset for row
        rowOffsetY + // offset to center in given square grid
        offsetCenterY - // subtract minY so that given item starts at 0 coord
        minY
      }))
    );
    colOffsetX += maxWidthCurrCol + PADDING;
    index++;
    col++;
  }
  return resElements;
};
var parseLibraryTokensFromUrl = () => {
  const libraryUrl = (
    // current
    new URLSearchParams(window.location.hash.slice(1)).get(
      URL_HASH_KEYS.addLibrary
    ) || // legacy, kept for compat reasons
    new URLSearchParams(window.location.search).get(URL_QUERY_KEYS.addLibrary)
  );
  const idToken = libraryUrl ? new URLSearchParams(window.location.hash.slice(1)).get("token") : null;
  return libraryUrl ? { libraryUrl, idToken } : null;
};
var AdapterTransaction = class _AdapterTransaction {
  static queue = new Queue();
  static async getLibraryItems(adapter, source, _queue = true) {
    const task = () => new Promise(async (resolve, reject) => {
      try {
        const data = await adapter.load({ source });
        resolve(restoreLibraryItems(data?.libraryItems || [], "published"));
      } catch (error) {
        reject(error);
      }
    });
    if (_queue) {
      return _AdapterTransaction.queue.push(task);
    }
    return task();
  }
  static run = async (adapter, fn) => {
    const transaction = new _AdapterTransaction(adapter);
    return _AdapterTransaction.queue.push(() => fn(transaction));
  };
  // ------------------
  adapter;
  constructor(adapter) {
    this.adapter = adapter;
  }
  getLibraryItems(source) {
    return _AdapterTransaction.getLibraryItems(this.adapter, source, false);
  }
};
var lastSavedLibraryItemsHash = 0;
var librarySaveCounter = 0;
var getLibraryItemsHash = (items) => {
  return hashString(
    items.map((item) => {
      return `${item.id}:${hashElementsVersion(item.elements)}`;
    }).sort().join()
  );
};
var persistLibraryUpdate = async (adapter, update) => {
  try {
    librarySaveCounter++;
    return await AdapterTransaction.run(adapter, async (transaction) => {
      const nextLibraryItemsMap = arrayToMap(
        await transaction.getLibraryItems("save")
      );
      for (const [id] of update.deletedItems) {
        nextLibraryItemsMap.delete(id);
      }
      const addedItems = [];
      for (const [id, item] of update.addedItems) {
        if (nextLibraryItemsMap.has(id)) {
          nextLibraryItemsMap.set(id, item);
        } else {
          addedItems.push(item);
        }
      }
      const nextLibraryItems = addedItems.concat(
        Array.from(nextLibraryItemsMap.values())
      );
      const version = getLibraryItemsHash(nextLibraryItems);
      if (version !== lastSavedLibraryItemsHash) {
        await adapter.save({ libraryItems: nextLibraryItems });
      }
      lastSavedLibraryItemsHash = version;
      return nextLibraryItems;
    });
  } finally {
    librarySaveCounter--;
  }
};
var useHandleLibrary = (opts) => {
  const { excalidrawAPI } = opts;
  const optsRef = useRef15(opts);
  optsRef.current = opts;
  const isLibraryLoadedRef = useRef15(false);
  useEffect18(() => {
    if (!excalidrawAPI) {
      return;
    }
    isLibraryLoadedRef.current = false;
    const importLibraryFromURL = async ({
      libraryUrl,
      idToken
    }) => {
      const libraryPromise = new Promise(async (resolve, reject) => {
        try {
          const request = await fetch(decodeURIComponent(libraryUrl));
          const blob = await request.blob();
          resolve(blob);
        } catch (error) {
          reject(error);
        }
      });
      const shouldPrompt = idToken !== excalidrawAPI.id;
      await (shouldPrompt && document.hidden ? new Promise((resolve) => {
        window.addEventListener("focus", () => resolve(), {
          once: true
        });
      }) : null);
      try {
        await excalidrawAPI.updateLibrary({
          libraryItems: libraryPromise,
          prompt: shouldPrompt,
          merge: true,
          defaultStatus: "published",
          openLibraryMenu: true
        });
      } catch (error) {
        throw error;
      } finally {
        if (window.location.hash.includes(URL_HASH_KEYS.addLibrary)) {
          const hash = new URLSearchParams(window.location.hash.slice(1));
          hash.delete(URL_HASH_KEYS.addLibrary);
          window.history.replaceState({}, APP_NAME, `#${hash.toString()}`);
        } else if (window.location.search.includes(URL_QUERY_KEYS.addLibrary)) {
          const query = new URLSearchParams(window.location.search);
          query.delete(URL_QUERY_KEYS.addLibrary);
          window.history.replaceState({}, APP_NAME, `?${query.toString()}`);
        }
      }
    };
    const onHashChange = (event) => {
      event.preventDefault();
      const libraryUrlTokens2 = parseLibraryTokensFromUrl();
      if (libraryUrlTokens2) {
        event.stopImmediatePropagation();
        window.history.replaceState({}, "", event.oldURL);
        importLibraryFromURL(libraryUrlTokens2);
      }
    };
    const libraryUrlTokens = parseLibraryTokensFromUrl();
    if (libraryUrlTokens) {
      importLibraryFromURL(libraryUrlTokens);
    }
    if ("getInitialLibraryItems" in optsRef.current && optsRef.current.getInitialLibraryItems) {
      console.warn(
        "useHandleLibrar `opts.getInitialLibraryItems` is deprecated. Use `opts.adapter` instead."
      );
      Promise.resolve(optsRef.current.getInitialLibraryItems()).then((libraryItems) => {
        excalidrawAPI.updateLibrary({
          libraryItems,
          // merge with current library items because we may have already
          // populated it (e.g. by installing 3rd party library which can
          // happen before the DB data is loaded)
          merge: true
        });
      }).catch((error) => {
        console.error(
          `UseHandeLibrary getInitialLibraryItems failed: ${error?.message}`
        );
      });
    }
    if ("adapter" in optsRef.current && optsRef.current.adapter) {
      const adapter = optsRef.current.adapter;
      const migrationAdapter = optsRef.current.migrationAdapter;
      const initDataPromise = resolvablePromise();
      if (migrationAdapter) {
        initDataPromise.resolve(
          promiseTry(migrationAdapter.load).then(async (libraryData) => {
            let restoredData = null;
            try {
              if (!libraryData) {
                return AdapterTransaction.getLibraryItems(adapter, "load");
              }
              restoredData = restoreLibraryItems(
                libraryData.libraryItems || [],
                "published"
              );
              const nextItems = await persistLibraryUpdate(
                adapter,
                createLibraryUpdate([], restoredData)
              );
              try {
                await migrationAdapter.clear();
              } catch (error) {
                console.error(
                  `couldn't delete legacy library data: ${error.message}`
                );
              }
              return nextItems;
            } catch (error) {
              console.error(
                `couldn't migrate legacy library data: ${error.message}`
              );
              return restoredData;
            }
          }).catch((error) => {
            console.error(`error during library migration: ${error.message}`);
            return AdapterTransaction.getLibraryItems(adapter, "load");
          })
        );
      } else {
        initDataPromise.resolve(
          promiseTry(AdapterTransaction.getLibraryItems, adapter, "load")
        );
      }
      excalidrawAPI.updateLibrary({
        libraryItems: initDataPromise.then((libraryItems) => {
          const _libraryItems = libraryItems || [];
          lastSavedLibraryItemsHash = getLibraryItemsHash(_libraryItems);
          return _libraryItems;
        }),
        // merge with current library items because we may have already
        // populated it (e.g. by installing 3rd party library which can
        // happen before the DB data is loaded)
        merge: true
      }).finally(() => {
        isLibraryLoadedRef.current = true;
      });
    }
    window.addEventListener("hashchange" /* HASHCHANGE */, onHashChange);
    return () => {
      window.removeEventListener("hashchange" /* HASHCHANGE */, onHashChange);
    };
  }, [
    // important this useEffect only depends on excalidrawAPI so it only reruns
    // on editor remounts (the excalidrawAPI changes)
    excalidrawAPI
  ]);
  useEffect18(
    () => {
      const unsubOnLibraryUpdate = onLibraryUpdateEmitter.on(
        async (update, nextLibraryItems) => {
          const isLoaded = isLibraryLoadedRef.current;
          const adapter = "adapter" in optsRef.current && optsRef.current.adapter || null;
          try {
            if (adapter) {
              if (
                // if nextLibraryItems hash identical to previously saved hash,
                // exit early, even if actual upstream state ends up being
                // different (e.g. has more data than we have locally), as it'd
                // be low-impact scenario.
                lastSavedLibraryItemsHash !== getLibraryItemsHash(nextLibraryItems)
              ) {
                await persistLibraryUpdate(adapter, update);
              }
            }
          } catch (error) {
            console.error(
              `couldn't persist library update: ${error.message}`,
              update
            );
            if (isLoaded && optsRef.current.excalidrawAPI) {
              optsRef.current.excalidrawAPI.updateScene({
                appState: {
                  errorMessage: t("errors.saveLibraryError")
                }
              });
            }
          }
        }
      );
      const onUnload = (event) => {
        if (librarySaveCounter) {
          preventUnload(event);
        }
      };
      window.addEventListener("beforeunload" /* BEFORE_UNLOAD */, onUnload);
      return () => {
        window.removeEventListener("beforeunload" /* BEFORE_UNLOAD */, onUnload);
        unsubOnLibraryUpdate();
        lastSavedLibraryItemsHash = 0;
        librarySaveCounter = 0;
      };
    },
    [
      // this effect must not have any deps so it doesn't rerun
    ]
  );
};

// components/LibraryMenu.tsx
init_random();

// components/LibraryMenuItems.tsx
init_define_import_meta_env();
init_json();
import {
  useCallback as useCallback9,
  useEffect as useEffect24,
  useMemo as useMemo5,
  useRef as useRef19,
  useState as useState18
} from "react";
init_utils2();

// components/Stack.tsx
init_define_import_meta_env();
import { forwardRef as forwardRef2 } from "react";
import clsx22 from "clsx";
import { jsx as jsx50 } from "react/jsx-runtime";
var RowStack = forwardRef2(
  ({ children, gap, align, justifyContent, className, style }, ref) => {
    return /* @__PURE__ */ jsx50(
      "div",
      {
        className: clsx22("Stack Stack_horizontal", className),
        style: {
          "--gap": gap,
          alignItems: align,
          justifyContent,
          ...style
        },
        ref,
        children
      }
    );
  }
);
var ColStack = forwardRef2(
  ({ children, gap, align, justifyContent, className, style }, ref) => {
    return /* @__PURE__ */ jsx50(
      "div",
      {
        className: clsx22("", className),
        style: {
          "--gap": gap,
          justifyItems: align,
          justifyContent,
          ...style
        },
        ref,
        children
      }
    );
  }
);
var Stack_default = {
  Row: RowStack,
  Col: ColStack
};

// components/LibraryMenuItems.tsx
init_constants();
init_newElement();

// components/LibraryMenuControlButtons.tsx
init_define_import_meta_env();

// components/LibraryMenuBrowseButton.tsx
init_define_import_meta_env();
init_constants();
import { jsx as jsx51 } from "react/jsx-runtime";
var LibraryMenuBrowseButton = ({
  theme,
  id,
  libraryReturnUrl
}) => {
  const referrer = libraryReturnUrl || window.location.origin + window.location.pathname;
  return /* @__PURE__ */ jsx51(
    "a",
    {
      className: "library-menu-browse-button",
      href: `${define_import_meta_env_default.VITE_APP_LIBRARY_URL}?target=${window.name || "_blank"}&referrer=${referrer}&useHash=true&token=${id}&theme=${theme}&version=${VERSIONS.excalidrawLibrary}`,
      target: "_excalidraw_libraries",
      children: t("labels.libraries")
    }
  );
};
var LibraryMenuBrowseButton_default = LibraryMenuBrowseButton;

// components/LibraryMenuControlButtons.tsx
import clsx23 from "clsx";
import { jsx as jsx52, jsxs as jsxs27 } from "react/jsx-runtime";
var LibraryMenuControlButtons = ({
  libraryReturnUrl,
  theme,
  id,
  style,
  children,
  className
}) => {
  return /* @__PURE__ */ jsxs27(
    "div",
    {
      className: clsx23("library-menu-control-buttons", className),
      style,
      children: [
        /* @__PURE__ */ jsx52(
          LibraryMenuBrowseButton_default,
          {
            id,
            libraryReturnUrl,
            theme
          }
        ),
        children
      ]
    }
  );
};

// components/LibraryMenuHeaderContent.tsx
init_define_import_meta_env();
import { useCallback as useCallback7, useState as useState15 } from "react";

// components/Trans.tsx
init_define_import_meta_env();
import React20 from "react";
var SPLIT_REGEX = /({{[\w-]+}})|(<[\w-]+>)|(<\/[\w-]+>)/g;
var KEY_REGEXP = /{{([\w-]+)}}/;
var TAG_START_REGEXP = /<([\w-]+)>/;
var TAG_END_REGEXP = /<\/([\w-]+)>/;
var getTransChildren = (format, props) => {
  const stack = [
    {
      name: "",
      children: []
    }
  ];
  format.split(SPLIT_REGEX).filter(Boolean).forEach((match) => {
    const tagStartMatch = match.match(TAG_START_REGEXP);
    const tagEndMatch = match.match(TAG_END_REGEXP);
    const keyMatch = match.match(KEY_REGEXP);
    if (tagStartMatch !== null) {
      const name = tagStartMatch[1];
      if (props.hasOwnProperty(name)) {
        stack.push({
          name,
          children: []
        });
      } else {
        console.warn(
          `Trans: missed to pass in prop ${name} for interpolating ${format}`
        );
      }
    } else if (tagEndMatch !== null) {
      const name = tagEndMatch[1];
      if (name === stack[stack.length - 1].name) {
        const item = stack.pop();
        const itemChildren = React20.createElement(
          React20.Fragment,
          {},
          ...item.children
        );
        const fn = props[item.name];
        if (typeof fn === "function") {
          stack[stack.length - 1].children.push(fn(itemChildren));
        }
      } else {
        console.warn(
          `Trans: unexpected end tag ${match} for interpolating ${format}`
        );
      }
    } else if (keyMatch !== null) {
      const name = keyMatch[1];
      if (props.hasOwnProperty(name)) {
        stack[stack.length - 1].children.push(props[name]);
      } else {
        console.warn(
          `Trans: key ${name} not in props for interpolating ${format}`
        );
      }
    } else {
      stack[stack.length - 1].children.push(match);
    }
  });
  if (stack.length !== 1) {
    console.warn(`Trans: stack not empty for interpolating ${format}`);
  }
  return stack[0].children;
};
var Trans = ({
  i18nKey,
  children,
  ...props
}) => {
  const { t: t2 } = useI18n();
  return React20.createElement(
    React20.Fragment,
    {},
    ...getTransChildren(t2(i18nKey), props)
  );
};
var Trans_default = Trans;

// components/LibraryMenuHeaderContent.tsx
init_json();
init_icons();
init_filesystem();
init_utils2();
import { useAtom as useAtom9 } from "jotai";

// components/ConfirmDialog.tsx
init_define_import_meta_env();

// components/DialogActionButton.tsx
init_define_import_meta_env();
import clsx24 from "clsx";
import { jsx as jsx53, jsxs as jsxs28 } from "react/jsx-runtime";
var DialogActionButton = ({
  label,
  onClick,
  className,
  children,
  actionType,
  type = "button",
  isLoading,
  ...rest
}) => {
  const cs = actionType ? `Dialog__action-button--${actionType}` : "";
  return /* @__PURE__ */ jsxs28(
    "button",
    {
      className: clsx24("Dialog__action-button", cs, className),
      type,
      "aria-label": label,
      onClick,
      ...rest,
      children: [
        children && /* @__PURE__ */ jsx53("div", { style: isLoading ? { visibility: "hidden" } : {}, children }),
        /* @__PURE__ */ jsx53("div", { style: isLoading ? { visibility: "hidden" } : {}, children: label }),
        isLoading && /* @__PURE__ */ jsx53("div", { style: { position: "absolute", inset: 0 }, children: /* @__PURE__ */ jsx53(Spinner_default, {}) })
      ]
    }
  );
};
var DialogActionButton_default = DialogActionButton;

// components/ConfirmDialog.tsx
import { useSetAtom } from "jotai";
import { jsx as jsx54, jsxs as jsxs29 } from "react/jsx-runtime";
var ConfirmDialog = (props) => {
  const {
    onConfirm,
    onCancel,
    children,
    confirmText = t("buttons.confirm"),
    cancelText = t("buttons.cancel"),
    className = "",
    ...rest
  } = props;
  const setAppState = useExcalidrawSetAppState();
  const setIsLibraryMenuOpen = useSetAtom(isLibraryMenuOpenAtom, jotaiScope);
  const { container } = useExcalidrawContainer();
  return /* @__PURE__ */ jsxs29(
    Dialog,
    {
      onCloseRequest: onCancel,
      size: "small",
      ...rest,
      className: `confirm-dialog ${className}`,
      children: [
        children,
        /* @__PURE__ */ jsxs29("div", { className: "confirm-dialog-buttons", children: [
          /* @__PURE__ */ jsx54(
            DialogActionButton_default,
            {
              label: cancelText,
              onClick: () => {
                setAppState({ openMenu: null });
                setIsLibraryMenuOpen(false);
                onCancel();
                container?.focus();
              }
            }
          ),
          /* @__PURE__ */ jsx54(
            DialogActionButton_default,
            {
              label: confirmText,
              onClick: () => {
                setAppState({ openMenu: null });
                setIsLibraryMenuOpen(false);
                onConfirm();
                container?.focus();
              },
              actionType: "danger"
            }
          )
        ] })
      ]
    }
  );
};
var ConfirmDialog_default = ConfirmDialog;

// components/PublishLibrary.tsx
init_define_import_meta_env();
import { useCallback as useCallback6, useEffect as useEffect19, useRef as useRef16, useState as useState14 } from "react";
import OpenColor2 from "open-color";
init_export2();
init_constants();
init_blob();
init_utils2();
init_icons();

// data/EditorLocalStorage.ts
init_define_import_meta_env();
var EditorLocalStorage = class {
  static has(key) {
    try {
      return !!window.localStorage.getItem(key);
    } catch (error) {
      console.warn(`localStorage.getItem error: ${error.message}`);
      return false;
    }
  }
  static get(key) {
    try {
      const value = window.localStorage.getItem(key);
      if (value) {
        return JSON.parse(value);
      }
      return null;
    } catch (error) {
      console.warn(`localStorage.getItem error: ${error.message}`);
      return null;
    }
  }
  static set = (key, value) => {
    try {
      window.localStorage.setItem(key, JSON.stringify(value));
      return true;
    } catch (error) {
      console.warn(`localStorage.setItem error: ${error.message}`);
      return false;
    }
  };
  static delete = (name) => {
    try {
      window.localStorage.removeItem(name);
    } catch (error) {
      console.warn(`localStorage.removeItem error: ${error.message}`);
    }
  };
};

// components/PublishLibrary.tsx
import { jsx as jsx55, jsxs as jsxs30 } from "react/jsx-runtime";
var generatePreviewImage = async (libraryItems) => {
  const MAX_ITEMS_PER_ROW = 6;
  const BOX_SIZE = 128;
  const BOX_PADDING = Math.round(BOX_SIZE / 16);
  const BORDER_WIDTH = Math.max(Math.round(BOX_SIZE / 64), 2);
  const rows = chunk(libraryItems, MAX_ITEMS_PER_ROW);
  const canvas2 = document.createElement("canvas");
  canvas2.width = rows[0].length * BOX_SIZE + (rows[0].length + 1) * (BOX_PADDING * 2) - BOX_PADDING * 2;
  canvas2.height = rows.length * BOX_SIZE + (rows.length + 1) * (BOX_PADDING * 2) - BOX_PADDING * 2;
  const ctx = canvas2.getContext("2d");
  ctx.fillStyle = OpenColor2.white;
  ctx.fillRect(0, 0, canvas2.width, canvas2.height);
  for (const [index, item] of libraryItems.entries()) {
    const itemCanvas = await exportToCanvas2({
      elements: item.elements,
      files: null,
      maxWidthOrHeight: BOX_SIZE
    });
    const { width, height } = itemCanvas;
    const rowOffset = Math.floor(index / MAX_ITEMS_PER_ROW) * (BOX_SIZE + BOX_PADDING * 2);
    const colOffset = index % MAX_ITEMS_PER_ROW * (BOX_SIZE + BOX_PADDING * 2);
    ctx.drawImage(
      itemCanvas,
      colOffset + (BOX_SIZE - width) / 2 + BOX_PADDING,
      rowOffset + (BOX_SIZE - height) / 2 + BOX_PADDING
    );
    ctx.lineWidth = BORDER_WIDTH;
    ctx.strokeStyle = OpenColor2.gray[4];
    ctx.strokeRect(
      colOffset + BOX_PADDING / 2,
      rowOffset + BOX_PADDING / 2,
      BOX_SIZE + BOX_PADDING,
      BOX_SIZE + BOX_PADDING
    );
  }
  return await resizeImageFile(
    new File([await canvasToBlob(canvas2)], "preview", { type: MIME_TYPES.png }),
    {
      outputType: MIME_TYPES.jpg,
      maxWidthOrHeight: 5e3
    }
  );
};
var SingleLibraryItem = ({
  libItem,
  appState,
  index,
  onChange,
  onRemove
}) => {
  const svgRef = useRef16(null);
  const inputRef = useRef16(null);
  useEffect19(() => {
    const node = svgRef.current;
    if (!node) {
      return;
    }
    (async () => {
      const svg = await exportToSvg2({
        elements: libItem.elements,
        appState: {
          ...appState,
          viewBackgroundColor: OpenColor2.white,
          exportBackground: true
        },
        files: null,
        skipInliningFonts: true
      });
      node.innerHTML = svg.outerHTML;
    })();
  }, [libItem.elements, appState]);
  return /* @__PURE__ */ jsxs30("div", { className: "single-library-item", children: [
    libItem.status === "published" && /* @__PURE__ */ jsx55("span", { className: "single-library-item-status", children: t("labels.statusPublished") }),
    /* @__PURE__ */ jsx55("div", { ref: svgRef, className: "single-library-item__svg" }),
    /* @__PURE__ */ jsx55(
      ToolButton,
      {
        "aria-label": t("buttons.remove"),
        type: "button",
        icon: CloseIcon,
        className: "single-library-item--remove",
        onClick: onRemove.bind(null, libItem.id),
        title: t("buttons.remove")
      }
    ),
    /* @__PURE__ */ jsxs30(
      "div",
      {
        style: {
          display: "flex",
          margin: "0.8rem 0",
          width: "100%",
          fontSize: "14px",
          fontWeight: 500,
          flexDirection: "column"
        },
        children: [
          /* @__PURE__ */ jsxs30(
            "label",
            {
              style: {
                display: "flex",
                justifyContent: "space-between",
                flexDirection: "column"
              },
              children: [
                /* @__PURE__ */ jsxs30("div", { style: { padding: "0.5em 0" }, children: [
                  /* @__PURE__ */ jsx55("span", { style: { fontWeight: 500, color: OpenColor2.gray[6] }, children: t("publishDialog.itemName") }),
                  /* @__PURE__ */ jsx55("span", { "aria-hidden": "true", className: "required", children: "*" })
                ] }),
                /* @__PURE__ */ jsx55(
                  "input",
                  {
                    type: "text",
                    ref: inputRef,
                    style: { width: "80%", padding: "0.2rem" },
                    defaultValue: libItem.name,
                    placeholder: "Item name",
                    onChange: (event) => {
                      onChange(event.target.value, index);
                    }
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ jsx55("span", { className: "error", children: libItem.error })
        ]
      }
    )
  ] });
};
var PublishLibrary = ({
  onClose,
  libraryItems,
  appState,
  onSuccess,
  onError,
  updateItemsInStorage,
  onRemove
}) => {
  const [libraryData, setLibraryData] = useState14({
    authorName: "",
    githubHandle: "",
    name: "",
    description: "",
    twitterHandle: "",
    website: ""
  });
  const [isSubmitting, setIsSubmitting] = useState14(false);
  useEffect19(() => {
    const data = EditorLocalStorage.get(
      EDITOR_LS_KEYS.PUBLISH_LIBRARY
    );
    if (data) {
      setLibraryData(data);
    }
  }, []);
  const [clonedLibItems, setClonedLibItems] = useState14(
    libraryItems.slice()
  );
  useEffect19(() => {
    setClonedLibItems(libraryItems.slice());
  }, [libraryItems]);
  const onInputChange = (event) => {
    setLibraryData({
      ...libraryData,
      [event.target.name]: event.target.value
    });
  };
  const onSubmit = async (event) => {
    event.preventDefault();
    setIsSubmitting(true);
    const erroredLibItems = [];
    let isError = false;
    clonedLibItems.forEach((libItem) => {
      let error = "";
      if (!libItem.name) {
        error = t("publishDialog.errors.required");
        isError = true;
      }
      erroredLibItems.push({ ...libItem, error });
    });
    if (isError) {
      setClonedLibItems(erroredLibItems);
      setIsSubmitting(false);
      return;
    }
    const previewImage = await generatePreviewImage(clonedLibItems);
    const libContent = {
      type: EXPORT_DATA_TYPES.excalidrawLibrary,
      version: VERSIONS.excalidrawLibrary,
      source: EXPORT_SOURCE,
      libraryItems: clonedLibItems
    };
    const content = JSON.stringify(libContent, null, 2);
    const lib = new Blob([content], { type: "application/json" });
    const formData = new FormData();
    formData.append("excalidrawLib", lib);
    formData.append("previewImage", previewImage);
    formData.append("previewImageType", previewImage.type);
    formData.append("title", libraryData.name);
    formData.append("authorName", libraryData.authorName);
    formData.append("githubHandle", libraryData.githubHandle);
    formData.append("name", libraryData.name);
    formData.append("description", libraryData.description);
    formData.append("twitterHandle", libraryData.twitterHandle);
    formData.append("website", libraryData.website);
    fetch(`${define_import_meta_env_default.VITE_APP_LIBRARY_BACKEND}/submit`, {
      method: "post",
      body: formData
    }).then(
      (response) => {
        if (response.ok) {
          return response.json().then(({ url }) => {
            EditorLocalStorage.delete(EDITOR_LS_KEYS.PUBLISH_LIBRARY);
            onSuccess({
              url,
              authorName: libraryData.authorName,
              items: clonedLibItems
            });
          });
        }
        return response.json().catch(() => {
          throw new Error(response.statusText || "something went wrong");
        }).then((error) => {
          throw new Error(
            error.message || response.statusText || "something went wrong"
          );
        });
      },
      (err) => {
        console.error(err);
        onError(err);
        setIsSubmitting(false);
      }
    ).catch((err) => {
      console.error(err);
      onError(err);
      setIsSubmitting(false);
    });
  };
  const renderLibraryItems = () => {
    const items = [];
    clonedLibItems.forEach((libItem, index) => {
      items.push(
        /* @__PURE__ */ jsx55("div", { className: "single-library-item-wrapper", children: /* @__PURE__ */ jsx55(
          SingleLibraryItem,
          {
            libItem,
            appState,
            index,
            onChange: (val, index2) => {
              const items2 = clonedLibItems.slice();
              items2[index2].name = val;
              setClonedLibItems(items2);
            },
            onRemove
          }
        ) }, index)
      );
    });
    return /* @__PURE__ */ jsx55("div", { className: "selected-library-items", children: items });
  };
  const onDialogClose = useCallback6(() => {
    updateItemsInStorage(clonedLibItems);
    EditorLocalStorage.set(EDITOR_LS_KEYS.PUBLISH_LIBRARY, libraryData);
    onClose();
  }, [clonedLibItems, onClose, updateItemsInStorage, libraryData]);
  const shouldRenderForm = !!libraryItems.length;
  const containsPublishedItems = libraryItems.some(
    (item) => item.status === "published"
  );
  return /* @__PURE__ */ jsx55(
    Dialog,
    {
      onCloseRequest: onDialogClose,
      title: t("publishDialog.title"),
      className: "publish-library",
      children: shouldRenderForm ? /* @__PURE__ */ jsxs30("form", { onSubmit, children: [
        /* @__PURE__ */ jsx55("div", { className: "publish-library-note", children: /* @__PURE__ */ jsx55(
          Trans_default,
          {
            i18nKey: "publishDialog.noteDescription",
            link: (el) => /* @__PURE__ */ jsx55(
              "a",
              {
                href: "https://libraries.excalidraw.com",
                target: "_blank",
                rel: "noopener noreferrer",
                children: el
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsx55("span", { className: "publish-library-note", children: /* @__PURE__ */ jsx55(
          Trans_default,
          {
            i18nKey: "publishDialog.noteGuidelines",
            link: (el) => /* @__PURE__ */ jsx55(
              "a",
              {
                href: "https://github.com/excalidraw/excalidraw-libraries#guidelines",
                target: "_blank",
                rel: "noopener noreferrer",
                children: el
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsx55("div", { className: "publish-library-note", children: t("publishDialog.noteItems") }),
        containsPublishedItems && /* @__PURE__ */ jsx55("span", { className: "publish-library-note publish-library-warning", children: t("publishDialog.republishWarning") }),
        renderLibraryItems(),
        /* @__PURE__ */ jsxs30("div", { className: "publish-library__fields", children: [
          /* @__PURE__ */ jsxs30("label", { children: [
            /* @__PURE__ */ jsxs30("div", { children: [
              /* @__PURE__ */ jsx55("span", { children: t("publishDialog.libraryName") }),
              /* @__PURE__ */ jsx55("span", { "aria-hidden": "true", className: "required", children: "*" })
            ] }),
            /* @__PURE__ */ jsx55(
              "input",
              {
                type: "text",
                name: "name",
                required: true,
                value: libraryData.name,
                onChange: onInputChange,
                placeholder: t("publishDialog.placeholder.libraryName")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs30("label", { style: { alignItems: "flex-start" }, children: [
            /* @__PURE__ */ jsxs30("div", { children: [
              /* @__PURE__ */ jsx55("span", { children: t("publishDialog.libraryDesc") }),
              /* @__PURE__ */ jsx55("span", { "aria-hidden": "true", className: "required", children: "*" })
            ] }),
            /* @__PURE__ */ jsx55(
              "textarea",
              {
                name: "description",
                rows: 4,
                required: true,
                value: libraryData.description,
                onChange: onInputChange,
                placeholder: t("publishDialog.placeholder.libraryDesc")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs30("label", { children: [
            /* @__PURE__ */ jsxs30("div", { children: [
              /* @__PURE__ */ jsx55("span", { children: t("publishDialog.authorName") }),
              /* @__PURE__ */ jsx55("span", { "aria-hidden": "true", className: "required", children: "*" })
            ] }),
            /* @__PURE__ */ jsx55(
              "input",
              {
                type: "text",
                name: "authorName",
                required: true,
                value: libraryData.authorName,
                onChange: onInputChange,
                placeholder: t("publishDialog.placeholder.authorName")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs30("label", { children: [
            /* @__PURE__ */ jsx55("span", { children: t("publishDialog.githubUsername") }),
            /* @__PURE__ */ jsx55(
              "input",
              {
                type: "text",
                name: "githubHandle",
                value: libraryData.githubHandle,
                onChange: onInputChange,
                placeholder: t("publishDialog.placeholder.githubHandle")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs30("label", { children: [
            /* @__PURE__ */ jsx55("span", { children: t("publishDialog.twitterUsername") }),
            /* @__PURE__ */ jsx55(
              "input",
              {
                type: "text",
                name: "twitterHandle",
                value: libraryData.twitterHandle,
                onChange: onInputChange,
                placeholder: t("publishDialog.placeholder.twitterHandle")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs30("label", { children: [
            /* @__PURE__ */ jsx55("span", { children: t("publishDialog.website") }),
            /* @__PURE__ */ jsx55(
              "input",
              {
                type: "text",
                name: "website",
                pattern: "https?://.+",
                title: t("publishDialog.errors.website"),
                value: libraryData.website,
                onChange: onInputChange,
                placeholder: t("publishDialog.placeholder.website")
              }
            )
          ] }),
          /* @__PURE__ */ jsx55("span", { className: "publish-library-note", children: /* @__PURE__ */ jsx55(
            Trans_default,
            {
              i18nKey: "publishDialog.noteLicense",
              link: (el) => /* @__PURE__ */ jsx55(
                "a",
                {
                  href: "https://github.com/excalidraw/excalidraw-libraries/blob/main/LICENSE",
                  target: "_blank",
                  rel: "noopener noreferrer",
                  children: el
                }
              )
            }
          ) })
        ] }),
        /* @__PURE__ */ jsxs30("div", { className: "publish-library__buttons", children: [
          /* @__PURE__ */ jsx55(
            DialogActionButton_default,
            {
              label: t("buttons.cancel"),
              onClick: onDialogClose,
              "data-testid": "cancel-clear-canvas-button"
            }
          ),
          /* @__PURE__ */ jsx55(
            DialogActionButton_default,
            {
              type: "submit",
              label: t("buttons.submit"),
              actionType: "primary",
              isLoading: isSubmitting
            }
          )
        ] })
      ] }) : /* @__PURE__ */ jsx55("p", { style: { padding: "1em", textAlign: "center", fontWeight: 500 }, children: t("publishDialog.atleastOneLibItem") })
    }
  );
};
var PublishLibrary_default = PublishLibrary;

// components/dropdownMenu/DropdownMenu.tsx
init_define_import_meta_env();

// components/dropdownMenu/DropdownMenuTrigger.tsx
init_define_import_meta_env();
import clsx25 from "clsx";
import { jsx as jsx56 } from "react/jsx-runtime";
var MenuTrigger = ({
  className = "",
  children,
  onToggle,
  title,
  ...rest
}) => {
  const device = useDevice();
  const classNames = clsx25(
    `dropdown-menu-button ${className}`,
    "zen-mode-transition",
    {
      "dropdown-menu-button--mobile": device.editor.isMobile
    }
  ).trim();
  return /* @__PURE__ */ jsx56(
    "button",
    {
      "data-prevent-outside-click": true,
      className: classNames,
      onClick: onToggle,
      type: "button",
      "data-testid": "dropdown-menu-button",
      title,
      ...rest,
      children
    }
  );
};
var DropdownMenuTrigger_default = MenuTrigger;
MenuTrigger.displayName = "DropdownMenuTrigger";

// components/dropdownMenu/DropdownMenuSeparator.tsx
init_define_import_meta_env();
import { jsx as jsx57 } from "react/jsx-runtime";
var MenuSeparator = () => /* @__PURE__ */ jsx57(
  "div",
  {
    style: {
      height: "1px",
      backgroundColor: "var(--default-border-color)",
      margin: ".5rem 0"
    }
  }
);
var DropdownMenuSeparator_default = MenuSeparator;
MenuSeparator.displayName = "DropdownMenuSeparator";

// components/dropdownMenu/DropdownMenuContent.tsx
init_define_import_meta_env();
import clsx26 from "clsx";
import { useEffect as useEffect20, useRef as useRef17 } from "react";
init_keys();
init_constants();
import { jsx as jsx58 } from "react/jsx-runtime";
var MenuContent = ({
  children,
  onClickOutside,
  className = "",
  onSelect,
  style
}) => {
  const device = useDevice();
  const menuRef = useRef17(null);
  const callbacksRef = useStable({ onClickOutside });
  useOutsideClick(menuRef, () => {
    callbacksRef.onClickOutside?.();
  });
  useEffect20(() => {
    const onKeyDown = (event) => {
      if (event.key === KEYS.ESCAPE) {
        event.stopImmediatePropagation();
        callbacksRef.onClickOutside?.();
      }
    };
    const option = {
      // so that we can stop propagation of the event before it reaches
      // event handlers that were bound before this one
      capture: true
    };
    document.addEventListener("keydown" /* KEYDOWN */, onKeyDown, option);
    return () => {
      document.removeEventListener("keydown" /* KEYDOWN */, onKeyDown, option);
    };
  }, [callbacksRef]);
  const classNames = clsx26(`dropdown-menu ${className}`, {
    "dropdown-menu--mobile": device.editor.isMobile
  }).trim();
  return /* @__PURE__ */ jsx58(DropdownMenuContentPropsContext.Provider, { value: { onSelect }, children: /* @__PURE__ */ jsx58(
    "div",
    {
      ref: menuRef,
      className: classNames,
      style,
      "data-testid": "dropdown-menu",
      children: device.editor.isMobile ? /* @__PURE__ */ jsx58(Stack_default.Col, { className: "dropdown-menu-container", children }) : /* @__PURE__ */ jsx58(
        Island,
        {
          className: "dropdown-menu-container",
          padding: 2,
          style: { zIndex: 2 },
          children
        }
      )
    }
  ) });
};
MenuContent.displayName = "DropdownMenuContent";
var DropdownMenuContent_default = MenuContent;

// components/dropdownMenu/DropdownMenuItemLink.tsx
init_define_import_meta_env();
import { jsx as jsx59 } from "react/jsx-runtime";
var DropdownMenuItemLink = ({
  icon,
  shortcut,
  href,
  children,
  onSelect,
  className = "",
  selected,
  rel = "noreferrer",
  ...rest
}) => {
  const handleClick = useHandleDropdownMenuItemClick(rest.onClick, onSelect);
  return /* @__PURE__ */ jsx59(
    "a",
    {
      ...rest,
      href,
      target: "_blank",
      rel: "noreferrer",
      className: getDropdownMenuItemClassName(className, selected),
      title: rest.title ?? rest["aria-label"],
      onClick: handleClick,
      children: /* @__PURE__ */ jsx59(DropdownMenuItemContent_default, { icon, shortcut, children })
    }
  );
};
var DropdownMenuItemLink_default = DropdownMenuItemLink;
DropdownMenuItemLink.displayName = "DropdownMenuItemLink";

// components/dropdownMenu/DropdownMenuItemCustom.tsx
init_define_import_meta_env();
import { jsx as jsx60 } from "react/jsx-runtime";
var DropdownMenuItemCustom = ({
  children,
  className = "",
  selected,
  ...rest
}) => {
  return /* @__PURE__ */ jsx60(
    "div",
    {
      ...rest,
      className: `dropdown-menu-item-base dropdown-menu-item-custom ${className} ${selected ? `dropdown-menu-item--selected` : ``}`.trim(),
      children
    }
  );
};
var DropdownMenuItemCustom_default = DropdownMenuItemCustom;

// components/dropdownMenu/dropdownMenuUtils.ts
init_define_import_meta_env();
import React22 from "react";
var getMenuTriggerComponent = (children) => {
  const comp = React22.Children.toArray(children).find(
    (child) => React22.isValidElement(child) && typeof child.type !== "string" && //@ts-ignore
    child?.type.displayName && //@ts-ignore
    child.type.displayName === "DropdownMenuTrigger"
  );
  if (!comp) {
    return null;
  }
  return comp;
};
var getMenuContentComponent = (children) => {
  const comp = React22.Children.toArray(children).find(
    (child) => React22.isValidElement(child) && typeof child.type !== "string" && //@ts-ignore
    child?.type.displayName && //@ts-ignore
    child.type.displayName === "DropdownMenuContent"
  );
  if (!comp) {
    return null;
  }
  return comp;
};

// components/dropdownMenu/DropdownMenu.tsx
import { Fragment as Fragment7, jsxs as jsxs31 } from "react/jsx-runtime";
var DropdownMenu = ({
  children,
  open
}) => {
  const MenuTriggerComp = getMenuTriggerComponent(children);
  const MenuContentComp = getMenuContentComponent(children);
  return /* @__PURE__ */ jsxs31(Fragment7, { children: [
    MenuTriggerComp,
    open && MenuContentComp
  ] });
};
DropdownMenu.Trigger = DropdownMenuTrigger_default;
DropdownMenu.Content = DropdownMenuContent_default;
DropdownMenu.Item = DropdownMenuItem_default;
DropdownMenu.ItemLink = DropdownMenuItemLink_default;
DropdownMenu.ItemCustom = DropdownMenuItemCustom_default;
DropdownMenu.Group = DropdownMenuGroup_default;
DropdownMenu.Separator = DropdownMenuSeparator_default;
var DropdownMenu_default = DropdownMenu;
DropdownMenu.displayName = "DropdownMenu";

// components/LibraryMenuHeaderContent.tsx
import clsx27 from "clsx";
import { jsx as jsx61, jsxs as jsxs32 } from "react/jsx-runtime";
var getSelectedItems = (libraryItems, selectedItems) => libraryItems.filter((item) => selectedItems.includes(item.id));
var LibraryDropdownMenuButton = ({
  setAppState,
  selectedItems,
  library,
  onRemoveFromLibrary,
  resetLibrary,
  onSelectItems,
  appState,
  className
}) => {
  const [libraryItemsData] = useAtom9(libraryItemsAtom, jotaiScope);
  const [isLibraryMenuOpen, setIsLibraryMenuOpen] = useAtom9(
    isLibraryMenuOpenAtom,
    jotaiScope
  );
  const renderRemoveLibAlert = () => {
    const content = selectedItems.length ? t("alerts.removeItemsFromsLibrary", { count: selectedItems.length }) : t("alerts.resetLibrary");
    const title = selectedItems.length ? t("confirmDialog.removeItemsFromLib") : t("confirmDialog.resetLibrary");
    return /* @__PURE__ */ jsx61(
      ConfirmDialog_default,
      {
        onConfirm: () => {
          if (selectedItems.length) {
            onRemoveFromLibrary();
          } else {
            resetLibrary();
          }
          setShowRemoveLibAlert(false);
        },
        onCancel: () => {
          setShowRemoveLibAlert(false);
        },
        title,
        children: /* @__PURE__ */ jsx61("p", { children: content })
      }
    );
  };
  const [showRemoveLibAlert, setShowRemoveLibAlert] = useState15(false);
  const itemsSelected = !!selectedItems.length;
  const items = itemsSelected ? libraryItemsData.libraryItems.filter(
    (item) => selectedItems.includes(item.id)
  ) : libraryItemsData.libraryItems;
  const resetLabel = itemsSelected ? t("buttons.remove") : t("buttons.resetLibrary");
  const [showPublishLibraryDialog, setShowPublishLibraryDialog] = useState15(false);
  const [publishLibSuccess, setPublishLibSuccess] = useState15(null);
  const renderPublishSuccess = useCallback7(() => {
    return /* @__PURE__ */ jsxs32(
      Dialog,
      {
        onCloseRequest: () => setPublishLibSuccess(null),
        title: t("publishSuccessDialog.title"),
        className: "publish-library-success",
        size: "small",
        children: [
          /* @__PURE__ */ jsx61("p", { children: /* @__PURE__ */ jsx61(
            Trans_default,
            {
              i18nKey: "publishSuccessDialog.content",
              authorName: publishLibSuccess.authorName,
              link: (el) => /* @__PURE__ */ jsx61(
                "a",
                {
                  href: publishLibSuccess?.url,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  children: el
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsx61(
            ToolButton,
            {
              type: "button",
              title: t("buttons.close"),
              "aria-label": t("buttons.close"),
              label: t("buttons.close"),
              onClick: () => setPublishLibSuccess(null),
              "data-testid": "publish-library-success-close",
              className: "publish-library-success-close"
            }
          )
        ]
      }
    );
  }, [setPublishLibSuccess, publishLibSuccess]);
  const onPublishLibSuccess = (data, libraryItems) => {
    setShowPublishLibraryDialog(false);
    setPublishLibSuccess({ url: data.url, authorName: data.authorName });
    const nextLibItems = libraryItems.slice();
    nextLibItems.forEach((libItem) => {
      if (selectedItems.includes(libItem.id)) {
        libItem.status = "published";
      }
    });
    library.setLibrary(nextLibItems);
  };
  const onLibraryImport = async () => {
    try {
      await library.updateLibrary({
        libraryItems: fileOpen({
          description: "Excalidraw library files"
          // ToDo: Be over-permissive until https://bugs.webkit.org/show_bug.cgi?id=34442
          // gets resolved. Else, iOS users cannot open `.excalidraw` files.
          /*
            extensions: [".json", ".excalidrawlib"],
            */
        }),
        merge: true,
        openLibraryMenu: true
      });
    } catch (error) {
      if (error?.name === "AbortError") {
        console.warn(error);
        return;
      }
      setAppState({ errorMessage: t("errors.importLibraryError") });
    }
  };
  const onLibraryExport = async () => {
    const libraryItems = itemsSelected ? items : await library.getLatestLibrary();
    saveLibraryAsJSON(libraryItems).catch(muteFSAbortError).catch((error) => {
      setAppState({ errorMessage: error.message });
    });
  };
  const renderLibraryMenu = () => {
    return /* @__PURE__ */ jsxs32(DropdownMenu_default, { open: isLibraryMenuOpen, children: [
      /* @__PURE__ */ jsx61(
        DropdownMenu_default.Trigger,
        {
          onToggle: () => setIsLibraryMenuOpen(!isLibraryMenuOpen),
          children: DotsIcon
        }
      ),
      /* @__PURE__ */ jsxs32(
        DropdownMenu_default.Content,
        {
          onClickOutside: () => setIsLibraryMenuOpen(false),
          onSelect: () => setIsLibraryMenuOpen(false),
          className: "library-menu",
          children: [
            !itemsSelected && /* @__PURE__ */ jsx61(
              DropdownMenu_default.Item,
              {
                onSelect: onLibraryImport,
                icon: LoadIcon,
                "data-testid": "lib-dropdown--load",
                children: t("buttons.load")
              }
            ),
            !!items.length && /* @__PURE__ */ jsx61(
              DropdownMenu_default.Item,
              {
                onSelect: onLibraryExport,
                icon: ExportIcon,
                "data-testid": "lib-dropdown--export",
                children: t("buttons.export")
              }
            ),
            !!items.length && /* @__PURE__ */ jsx61(
              DropdownMenu_default.Item,
              {
                onSelect: () => setShowRemoveLibAlert(true),
                icon: TrashIcon,
                children: resetLabel
              }
            ),
            itemsSelected && /* @__PURE__ */ jsx61(
              DropdownMenu_default.Item,
              {
                icon: publishIcon,
                onSelect: () => setShowPublishLibraryDialog(true),
                "data-testid": "lib-dropdown--remove",
                children: t("buttons.publishLibrary")
              }
            )
          ]
        }
      )
    ] });
  };
  return /* @__PURE__ */ jsxs32("div", { className: clsx27("library-menu-dropdown-container", className), children: [
    renderLibraryMenu(),
    selectedItems.length > 0 && /* @__PURE__ */ jsx61("div", { className: "library-actions-counter", children: selectedItems.length }),
    showRemoveLibAlert && renderRemoveLibAlert(),
    showPublishLibraryDialog && /* @__PURE__ */ jsx61(
      PublishLibrary_default,
      {
        onClose: () => setShowPublishLibraryDialog(false),
        libraryItems: getSelectedItems(
          libraryItemsData.libraryItems,
          selectedItems
        ),
        appState,
        onSuccess: (data) => onPublishLibSuccess(data, libraryItemsData.libraryItems),
        onError: (error) => window.alert(error),
        updateItemsInStorage: () => library.setLibrary(libraryItemsData.libraryItems),
        onRemove: (id) => onSelectItems(selectedItems.filter((_id) => _id !== id))
      }
    ),
    publishLibSuccess && renderPublishSuccess()
  ] });
};
var LibraryDropdownMenu = ({
  selectedItems,
  onSelectItems,
  className
}) => {
  const { library } = useApp();
  const { clearLibraryCache, deleteItemsFromLibraryCache } = useLibraryCache();
  const appState = useUIAppState();
  const setAppState = useExcalidrawSetAppState();
  const [libraryItemsData] = useAtom9(libraryItemsAtom, jotaiScope);
  const removeFromLibrary = async (libraryItems) => {
    const nextItems = libraryItems.filter(
      (item) => !selectedItems.includes(item.id)
    );
    library.setLibrary(nextItems).catch(() => {
      setAppState({ errorMessage: t("alerts.errorRemovingFromLibrary") });
    });
    deleteItemsFromLibraryCache(selectedItems);
    onSelectItems([]);
  };
  const resetLibrary = () => {
    library.resetLibrary();
    clearLibraryCache();
  };
  return /* @__PURE__ */ jsx61(
    LibraryDropdownMenuButton,
    {
      appState,
      setAppState,
      selectedItems,
      onSelectItems,
      library,
      onRemoveFromLibrary: () => removeFromLibrary(libraryItemsData.libraryItems),
      resetLibrary,
      className
    }
  );
};

// components/LibraryMenuSection.tsx
init_define_import_meta_env();
import { memo as memo2, useEffect as useEffect22, useState as useState17 } from "react";

// components/LibraryUnit.tsx
init_define_import_meta_env();
import clsx28 from "clsx";
import { memo, useEffect as useEffect21, useRef as useRef18, useState as useState16 } from "react";
init_icons();
import { jsx as jsx62, jsxs as jsxs33 } from "react/jsx-runtime";
var LibraryUnit = memo(
  ({
    id,
    elements,
    isPending,
    onClick,
    selected,
    onToggle,
    onDrag,
    svgCache
  }) => {
    const ref = useRef18(null);
    const svg = useLibraryItemSvg(id, elements, svgCache);
    useEffect21(() => {
      const node = ref.current;
      if (!node) {
        return;
      }
      if (svg) {
        node.innerHTML = svg.outerHTML;
      }
      return () => {
        node.innerHTML = "";
      };
    }, [svg]);
    const [isHovered, setIsHovered] = useState16(false);
    const isMobile = useDevice().editor.isMobile;
    const adder = isPending && /* @__PURE__ */ jsx62("div", { className: "library-unit__adder", children: PlusIcon });
    return /* @__PURE__ */ jsxs33(
      "div",
      {
        className: clsx28("library-unit", {
          "library-unit__active": elements,
          "library-unit--hover": elements && isHovered,
          "library-unit--selected": selected,
          "library-unit--skeleton": !svg
        }),
        onMouseEnter: () => setIsHovered(true),
        onMouseLeave: () => setIsHovered(false),
        children: [
          /* @__PURE__ */ jsx62(
            "div",
            {
              className: clsx28("library-unit__dragger", {
                "library-unit__pulse": !!isPending
              }),
              ref,
              draggable: !!elements,
              onClick: !!elements || !!isPending ? (event) => {
                if (id && event.shiftKey) {
                  onToggle(id, event);
                } else {
                  onClick(id);
                }
              } : void 0,
              onDragStart: (event) => {
                if (!id) {
                  event.preventDefault();
                  return;
                }
                setIsHovered(false);
                onDrag(id, event);
              }
            }
          ),
          adder,
          id && elements && (isHovered || isMobile || selected) && /* @__PURE__ */ jsx62(
            CheckboxItem,
            {
              checked: selected,
              onChange: (checked, event) => onToggle(id, event),
              className: "library-unit__checkbox"
            }
          )
        ]
      }
    );
  }
);
var EmptyLibraryUnit = () => /* @__PURE__ */ jsx62("div", { className: "library-unit library-unit--skeleton" });

// hooks/useTransition.ts
init_define_import_meta_env();
import React23, { useCallback as useCallback8 } from "react";
function useTransitionPolyfill() {
  const startTransition = useCallback8((callback) => callback(), []);
  return [false, startTransition];
}
var useTransition = React23.useTransition || useTransitionPolyfill;

// components/LibraryMenuSection.tsx
import { Fragment as Fragment8, jsx as jsx63 } from "react/jsx-runtime";
var LibraryMenuSectionGrid = ({
  children
}) => {
  return /* @__PURE__ */ jsx63("div", { className: "library-menu-items-container__grid", children });
};
var LibraryMenuSection = memo2(
  ({
    items,
    onItemSelectToggle,
    onItemDrag,
    isItemSelected,
    onClick,
    svgCache,
    itemsRenderedPerBatch
  }) => {
    const [, startTransition] = useTransition();
    const [index, setIndex] = useState17(0);
    useEffect22(() => {
      if (index < items.length) {
        startTransition(() => {
          setIndex(index + itemsRenderedPerBatch);
        });
      }
    }, [index, items.length, startTransition, itemsRenderedPerBatch]);
    return /* @__PURE__ */ jsx63(Fragment8, { children: items.map((item, i) => {
      return i < index ? /* @__PURE__ */ jsx63(
        LibraryUnit,
        {
          elements: item?.elements,
          isPending: !item?.id && !!item?.elements,
          onClick,
          svgCache,
          id: item?.id,
          selected: isItemSelected(item.id),
          onToggle: onItemSelectToggle,
          onDrag: onItemDrag
        },
        item?.id ?? i
      ) : /* @__PURE__ */ jsx63(EmptyLibraryUnit, {}, i);
    }) });
  }
);

// hooks/useScrollPosition.ts
init_define_import_meta_env();
import { useEffect as useEffect23 } from "react";
import { atom as atom6, useAtom as useAtom10 } from "jotai";
import throttle2 from "lodash.throttle";
var scrollPositionAtom = atom6(0);
var useScrollPosition = (elementRef) => {
  const [scrollPosition, setScrollPosition] = useAtom10(scrollPositionAtom);
  useEffect23(() => {
    const { current: element } = elementRef;
    if (!element) {
      return;
    }
    const handleScroll = throttle2(() => {
      const { scrollTop } = element;
      setScrollPosition(scrollTop);
    }, 200);
    element.addEventListener("scroll", handleScroll);
    return () => {
      handleScroll.cancel();
      element.removeEventListener("scroll", handleScroll);
    };
  }, [elementRef, setScrollPosition]);
  return scrollPosition;
};

// components/LibraryMenuItems.tsx
import { Fragment as Fragment9, jsx as jsx64, jsxs as jsxs34 } from "react/jsx-runtime";
var ITEMS_RENDERED_PER_BATCH = 17;
var CACHED_ITEMS_RENDERED_PER_BATCH = 64;
function LibraryMenuItems({
  isLoading,
  libraryItems,
  onAddToLibrary,
  onInsertLibraryItems,
  pendingElements,
  theme,
  id,
  libraryReturnUrl,
  onSelectItems,
  selectedItems
}) {
  const libraryContainerRef = useRef19(null);
  const scrollPosition = useScrollPosition(libraryContainerRef);
  useEffect24(() => {
    if (scrollPosition > 0) {
      libraryContainerRef.current?.scrollTo(0, scrollPosition);
    }
  }, []);
  const { svgCache } = useLibraryCache();
  const unpublishedItems = useMemo5(
    () => libraryItems.filter((item) => item.status !== "published"),
    [libraryItems]
  );
  const publishedItems = useMemo5(
    () => libraryItems.filter((item) => item.status === "published"),
    [libraryItems]
  );
  const showBtn = !libraryItems.length && !pendingElements.length;
  const isLibraryEmpty = !pendingElements.length && !unpublishedItems.length && !publishedItems.length;
  const [lastSelectedItem, setLastSelectedItem] = useState18(null);
  const onItemSelectToggle = useCallback9(
    (id2, event) => {
      const shouldSelect = !selectedItems.includes(id2);
      const orderedItems = [...unpublishedItems, ...publishedItems];
      if (shouldSelect) {
        if (event.shiftKey && lastSelectedItem) {
          const rangeStart = orderedItems.findIndex(
            (item) => item.id === lastSelectedItem
          );
          const rangeEnd = orderedItems.findIndex((item) => item.id === id2);
          if (rangeStart === -1 || rangeEnd === -1) {
            onSelectItems([...selectedItems, id2]);
            return;
          }
          const selectedItemsMap = arrayToMap(selectedItems);
          const nextSelectedIds = orderedItems.reduce(
            (acc, item, idx) => {
              if (idx >= rangeStart && idx <= rangeEnd || selectedItemsMap.has(item.id)) {
                acc.push(item.id);
              }
              return acc;
            },
            []
          );
          onSelectItems(nextSelectedIds);
        } else {
          onSelectItems([...selectedItems, id2]);
        }
        setLastSelectedItem(id2);
      } else {
        setLastSelectedItem(null);
        onSelectItems(selectedItems.filter((_id) => _id !== id2));
      }
    },
    [
      lastSelectedItem,
      onSelectItems,
      publishedItems,
      selectedItems,
      unpublishedItems
    ]
  );
  const getInsertedElements = useCallback9(
    (id2) => {
      let targetElements;
      if (selectedItems.includes(id2)) {
        targetElements = libraryItems.filter(
          (item) => selectedItems.includes(item.id)
        );
      } else {
        targetElements = libraryItems.filter((item) => item.id === id2);
      }
      return targetElements.map((item) => {
        return {
          ...item,
          // duplicate each library item before inserting on canvas to confine
          // ids and bindings to each library item. See #6465
          elements: duplicateElements(item.elements, { randomizeSeed: true })
        };
      });
    },
    [libraryItems, selectedItems]
  );
  const onItemDrag = useCallback9(
    (id2, event) => {
      event.dataTransfer.setData(
        MIME_TYPES.excalidrawlib,
        serializeLibraryAsJSON(getInsertedElements(id2))
      );
    },
    [getInsertedElements]
  );
  const isItemSelected = useCallback9(
    (id2) => {
      if (!id2) {
        return false;
      }
      return selectedItems.includes(id2);
    },
    [selectedItems]
  );
  const onAddToLibraryClick = useCallback9(() => {
    onAddToLibrary(pendingElements);
  }, [pendingElements, onAddToLibrary]);
  const onItemClick = useCallback9(
    (id2) => {
      if (id2) {
        onInsertLibraryItems(getInsertedElements(id2));
      }
    },
    [getInsertedElements, onInsertLibraryItems]
  );
  const itemsRenderedPerBatch = svgCache.size >= libraryItems.length ? CACHED_ITEMS_RENDERED_PER_BATCH : ITEMS_RENDERED_PER_BATCH;
  return /* @__PURE__ */ jsxs34(
    "div",
    {
      className: "library-menu-items-container",
      style: pendingElements.length || unpublishedItems.length || publishedItems.length ? { justifyContent: "flex-start" } : { borderBottom: 0 },
      children: [
        !isLibraryEmpty && /* @__PURE__ */ jsx64(
          LibraryDropdownMenu,
          {
            selectedItems,
            onSelectItems,
            className: "library-menu-dropdown-container--in-heading"
          }
        ),
        /* @__PURE__ */ jsxs34(
          Stack_default.Col,
          {
            className: "library-menu-items-container__items",
            align: "start",
            gap: 1,
            style: {
              flex: publishedItems.length > 0 ? 1 : "0 1 auto",
              marginBottom: 0
            },
            ref: libraryContainerRef,
            children: [
              /* @__PURE__ */ jsxs34(Fragment9, { children: [
                !isLibraryEmpty && /* @__PURE__ */ jsx64("div", { className: "library-menu-items-container__header", children: t("labels.personalLib") }),
                isLoading && /* @__PURE__ */ jsx64(
                  "div",
                  {
                    style: {
                      position: "absolute",
                      top: "var(--container-padding-y)",
                      right: "var(--container-padding-x)",
                      transform: "translateY(50%)"
                    },
                    children: /* @__PURE__ */ jsx64(Spinner_default, {})
                  }
                ),
                !pendingElements.length && !unpublishedItems.length ? /* @__PURE__ */ jsxs34("div", { className: "library-menu-items__no-items", children: [
                  /* @__PURE__ */ jsx64("div", { className: "library-menu-items__no-items__label", children: t("library.noItems") }),
                  /* @__PURE__ */ jsx64("div", { className: "library-menu-items__no-items__hint", children: publishedItems.length > 0 ? t("library.hint_emptyPrivateLibrary") : t("library.hint_emptyLibrary") })
                ] }) : /* @__PURE__ */ jsxs34(LibraryMenuSectionGrid, { children: [
                  pendingElements.length > 0 && /* @__PURE__ */ jsx64(
                    LibraryMenuSection,
                    {
                      itemsRenderedPerBatch,
                      items: [{ id: null, elements: pendingElements }],
                      onItemSelectToggle,
                      onItemDrag,
                      onClick: onAddToLibraryClick,
                      isItemSelected,
                      svgCache
                    }
                  ),
                  /* @__PURE__ */ jsx64(
                    LibraryMenuSection,
                    {
                      itemsRenderedPerBatch,
                      items: unpublishedItems,
                      onItemSelectToggle,
                      onItemDrag,
                      onClick: onItemClick,
                      isItemSelected,
                      svgCache
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxs34(Fragment9, { children: [
                (publishedItems.length > 0 || pendingElements.length > 0 || unpublishedItems.length > 0) && /* @__PURE__ */ jsx64("div", { className: "library-menu-items-container__header library-menu-items-container__header--excal", children: t("labels.excalidrawLib") }),
                publishedItems.length > 0 ? /* @__PURE__ */ jsx64(LibraryMenuSectionGrid, { children: /* @__PURE__ */ jsx64(
                  LibraryMenuSection,
                  {
                    itemsRenderedPerBatch,
                    items: publishedItems,
                    onItemSelectToggle,
                    onItemDrag,
                    onClick: onItemClick,
                    isItemSelected,
                    svgCache
                  }
                ) }) : unpublishedItems.length > 0 ? /* @__PURE__ */ jsx64(
                  "div",
                  {
                    style: {
                      margin: "1rem 0",
                      display: "flex",
                      flexDirection: "column",
                      alignItems: "center",
                      justifyContent: "center",
                      width: "100%",
                      fontSize: ".9rem"
                    },
                    children: t("library.noItems")
                  }
                ) : null
              ] }),
              showBtn && /* @__PURE__ */ jsx64(
                LibraryMenuControlButtons,
                {
                  style: { padding: "16px 0", width: "100%" },
                  id,
                  libraryReturnUrl,
                  theme,
                  children: /* @__PURE__ */ jsx64(
                    LibraryDropdownMenu,
                    {
                      selectedItems,
                      onSelectItems
                    }
                  )
                }
              )
            ]
          }
        )
      ]
    }
  );
}

// components/LibraryMenu.tsx
import { atom as atom7, useAtom as useAtom11 } from "jotai";
init_scene();
init_utils2();
init_constants();
import { jsx as jsx65, jsxs as jsxs35 } from "react/jsx-runtime";
var isLibraryMenuOpenAtom = atom7(false);
var LibraryMenuWrapper = ({ children }) => {
  return /* @__PURE__ */ jsx65("div", { className: "layer-ui__library", children });
};
var LibraryMenuContent = ({
  onInsertLibraryItems,
  pendingElements,
  onAddToLibrary,
  setAppState,
  libraryReturnUrl,
  library,
  id,
  theme,
  selectedItems,
  onSelectItems
}) => {
  const [libraryItemsData] = useAtom11(libraryItemsAtom, jotaiScope);
  const _onAddToLibrary = useCallback10(
    (elements) => {
      const addToLibrary = async (processedElements, libraryItems2) => {
        trackEvent("element", "addToLibrary", "ui");
        for (const type of LIBRARY_DISABLED_TYPES) {
          if (processedElements.some((element) => element.type === type)) {
            return setAppState({
              errorMessage: t(`errors.libraryElementTypeError.${type}`)
            });
          }
        }
        const nextItems = [
          {
            status: "unpublished",
            elements: processedElements,
            id: randomId(),
            created: Date.now()
          },
          ...libraryItems2
        ];
        onAddToLibrary();
        library.setLibrary(nextItems).catch(() => {
          setAppState({ errorMessage: t("alerts.errorAddingToLibrary") });
        });
      };
      addToLibrary(elements, libraryItemsData.libraryItems);
    },
    [onAddToLibrary, library, setAppState, libraryItemsData.libraryItems]
  );
  const libraryItems = useMemo6(
    () => libraryItemsData.libraryItems,
    [libraryItemsData]
  );
  if (libraryItemsData.status === "loading" && !libraryItemsData.isInitialized) {
    return /* @__PURE__ */ jsx65(LibraryMenuWrapper, { children: /* @__PURE__ */ jsx65("div", { className: "layer-ui__library-message", children: /* @__PURE__ */ jsxs35("div", { children: [
      /* @__PURE__ */ jsx65(Spinner_default, { size: "2em" }),
      /* @__PURE__ */ jsx65("span", { children: t("labels.libraryLoadingMessage") })
    ] }) }) });
  }
  const showBtn = libraryItemsData.libraryItems.length > 0 || pendingElements.length > 0;
  return /* @__PURE__ */ jsxs35(LibraryMenuWrapper, { children: [
    /* @__PURE__ */ jsx65(
      LibraryMenuItems,
      {
        isLoading: libraryItemsData.status === "loading",
        libraryItems,
        onAddToLibrary: _onAddToLibrary,
        onInsertLibraryItems,
        pendingElements,
        id,
        libraryReturnUrl,
        theme,
        onSelectItems,
        selectedItems
      }
    ),
    showBtn && /* @__PURE__ */ jsx65(
      LibraryMenuControlButtons,
      {
        className: "library-menu-control-buttons--at-bottom",
        style: { padding: "16px 12px 0 12px" },
        id,
        libraryReturnUrl,
        theme
      }
    )
  ] });
};
var usePendingElementsMemo = (appState, elements) => {
  const create = () => getSelectedElements(elements, appState, {
    includeBoundTextElement: true,
    includeElementsInFrames: true
  });
  const val = useRef20(create());
  const prevAppState = useRef20(appState);
  const prevElements = useRef20(elements);
  if (!isShallowEqual(
    appState.selectedElementIds,
    prevAppState.current.selectedElementIds
  ) || !isShallowEqual(elements, prevElements.current)) {
    val.current = create();
    prevAppState.current = appState;
    prevElements.current = elements;
  }
  return val.current;
};
var LibraryMenu = () => {
  const { library, id, onInsertElements } = useApp();
  const appProps = useAppProps();
  const appState = useUIAppState();
  const setAppState = useExcalidrawSetAppState();
  const elements = useExcalidrawElements();
  const [selectedItems, setSelectedItems] = useState19([]);
  const memoizedLibrary = useMemo6(() => library, [library]);
  const pendingElements = usePendingElementsMemo(appState, elements);
  const onInsertLibraryItems = useCallback10(
    (libraryItems) => {
      onInsertElements(distributeLibraryItemsOnSquareGrid(libraryItems));
    },
    [onInsertElements]
  );
  const deselectItems = useCallback10(() => {
    setAppState({
      selectedElementIds: {},
      selectedGroupIds: {},
      activeEmbeddable: null
    });
  }, [setAppState]);
  return /* @__PURE__ */ jsx65(
    LibraryMenuContent,
    {
      pendingElements,
      onInsertLibraryItems,
      onAddToLibrary: deselectItems,
      setAppState,
      libraryReturnUrl: appProps.libraryReturnUrl,
      library: memoizedLibrary,
      id,
      theme: appState.theme,
      selectedItems,
      onSelectItems: setSelectedItems
    }
  );
};

// components/Dialog.tsx
init_icons();
import { jsx as jsx66, jsxs as jsxs36 } from "react/jsx-runtime";
function getDialogSize(size) {
  if (size && typeof size === "number") {
    return size;
  }
  switch (size) {
    case "small":
      return 550;
    case "wide":
      return 1024;
    case "regular":
    default:
      return 800;
  }
}
var Dialog = (props) => {
  const [islandNode, setIslandNode] = useCallbackRefState();
  const [lastActiveElement] = useState20(document.activeElement);
  const { id } = useExcalidrawContainer();
  const isFullscreen = useDevice().viewport.isMobile;
  useEffect25(() => {
    if (!islandNode) {
      return;
    }
    const focusableElements = queryFocusableElements(islandNode);
    setTimeout(() => {
      if (focusableElements.length > 0 && props.autofocus !== false) {
        (focusableElements[1] || focusableElements[0]).focus();
      }
    });
    const handleKeyDown = (event) => {
      if (event.key === KEYS.TAB) {
        const focusableElements2 = queryFocusableElements(islandNode);
        const { activeElement } = document;
        const currentIndex = focusableElements2.findIndex(
          (element) => element === activeElement
        );
        if (currentIndex === 0 && event.shiftKey) {
          focusableElements2[focusableElements2.length - 1].focus();
          event.preventDefault();
        } else if (currentIndex === focusableElements2.length - 1 && !event.shiftKey) {
          focusableElements2[0].focus();
          event.preventDefault();
        }
      }
    };
    islandNode.addEventListener("keydown", handleKeyDown);
    return () => islandNode.removeEventListener("keydown", handleKeyDown);
  }, [islandNode, props.autofocus]);
  const setAppState = useExcalidrawSetAppState();
  const setIsLibraryMenuOpen = useSetAtom2(isLibraryMenuOpenAtom, jotaiScope);
  const onClose = () => {
    setAppState({ openMenu: null });
    setIsLibraryMenuOpen(false);
    lastActiveElement.focus();
    props.onCloseRequest();
  };
  return /* @__PURE__ */ jsx66(
    Modal,
    {
      className: clsx29("Dialog", props.className, {
        "Dialog--fullscreen": isFullscreen
      }),
      labelledBy: "dialog-title",
      maxWidth: getDialogSize(props.size),
      onCloseRequest: onClose,
      closeOnClickOutside: props.closeOnClickOutside,
      children: /* @__PURE__ */ jsxs36(Island, { ref: setIslandNode, children: [
        props.title && /* @__PURE__ */ jsx66("h2", { id: `${id}-dialog-title`, className: "Dialog__title", children: /* @__PURE__ */ jsx66("span", { className: "Dialog__titleContent", children: props.title }) }),
        isFullscreen && /* @__PURE__ */ jsx66(
          "button",
          {
            className: "Dialog__close",
            onClick: onClose,
            title: t("buttons.close"),
            "aria-label": t("buttons.close"),
            type: "button",
            children: CloseIcon
          }
        ),
        /* @__PURE__ */ jsx66("div", { className: "Dialog__content", children: props.children })
      ] })
    }
  );
};

// components/TextField.tsx
init_define_import_meta_env();
import {
  forwardRef as forwardRef3,
  useRef as useRef21,
  useImperativeHandle,
  useLayoutEffect as useLayoutEffect5,
  useState as useState21
} from "react";
import clsx31 from "clsx";

// components/Button.tsx
init_define_import_meta_env();
init_utils2();
import clsx30 from "clsx";
import { jsx as jsx67 } from "react/jsx-runtime";
var Button = ({
  type = "button",
  onSelect,
  selected,
  children,
  className = "",
  ...rest
}) => {
  return /* @__PURE__ */ jsx67(
    "button",
    {
      onClick: composeEventHandlers(rest.onClick, (event) => {
        onSelect();
      }),
      type,
      className: clsx30("excalidraw-button", className, { selected }),
      ...rest,
      children
    }
  );
};

// components/TextField.tsx
init_icons();
import { jsx as jsx68, jsxs as jsxs37 } from "react/jsx-runtime";
var TextField = forwardRef3(
  ({
    onChange,
    label,
    fullWidth,
    placeholder,
    readonly,
    selectOnRender,
    onKeyDown,
    isRedacted = false,
    icon,
    className,
    ...rest
  }, ref) => {
    const innerRef = useRef21(null);
    useImperativeHandle(ref, () => innerRef.current);
    useLayoutEffect5(() => {
      if (selectOnRender) {
        innerRef.current?.focus();
        innerRef.current?.select();
      }
    }, [selectOnRender]);
    const [isTemporarilyUnredacted, setIsTemporarilyUnredacted] = useState21(false);
    return /* @__PURE__ */ jsxs37(
      "div",
      {
        className: clsx31("ExcTextField", className, {
          "ExcTextField--fullWidth": fullWidth,
          "ExcTextField--hasIcon": !!icon
        }),
        onClick: () => {
          innerRef.current?.focus();
        },
        children: [
          icon,
          label && /* @__PURE__ */ jsx68("div", { className: "ExcTextField__label", children: label }),
          /* @__PURE__ */ jsxs37(
            "div",
            {
              className: clsx31("ExcTextField__input", {
                "ExcTextField__input--readonly": readonly
              }),
              children: [
                /* @__PURE__ */ jsx68(
                  "input",
                  {
                    className: clsx31({
                      "is-redacted": "value" in rest && rest.value && isRedacted && !isTemporarilyUnredacted
                    }),
                    readOnly: readonly,
                    value: "value" in rest ? rest.value : void 0,
                    defaultValue: "defaultValue" in rest ? rest.defaultValue : void 0,
                    placeholder,
                    ref: innerRef,
                    onChange: (event) => onChange?.(event.target.value),
                    onKeyDown
                  }
                ),
                isRedacted && /* @__PURE__ */ jsx68(
                  Button,
                  {
                    onSelect: () => setIsTemporarilyUnredacted(!isTemporarilyUnredacted),
                    style: { border: 0, userSelect: "none" },
                    children: isTemporarilyUnredacted ? eyeClosedIcon : eyeIcon
                  }
                )
              ]
            }
          )
        ]
      }
    );
  }
);

// components/CommandPalette/CommandPalette.tsx
init_scene();
import clsx33 from "clsx";

// actions/shortcuts.ts
init_define_import_meta_env();
init_constants();
init_utils2();
var shortcutMap = {
  toggleTheme: [getShortcutKey("Shift+Alt+D")],
  saveScene: [getShortcutKey("CtrlOrCmd+S")],
  loadScene: [getShortcutKey("CtrlOrCmd+O")],
  clearCanvas: [getShortcutKey("CtrlOrCmd+Delete")],
  imageExport: [getShortcutKey("CtrlOrCmd+Shift+E")],
  commandPalette: [
    getShortcutKey("CtrlOrCmd+/"),
    getShortcutKey("CtrlOrCmd+Shift+P")
  ],
  cut: [getShortcutKey("CtrlOrCmd+X")],
  copy: [getShortcutKey("CtrlOrCmd+C")],
  paste: [getShortcutKey("CtrlOrCmd+V")],
  copyStyles: [getShortcutKey("CtrlOrCmd+Alt+C")],
  pasteStyles: [getShortcutKey("CtrlOrCmd+Alt+V")],
  selectAll: [getShortcutKey("CtrlOrCmd+A")],
  deleteSelectedElements: [getShortcutKey("Delete")],
  duplicateSelection: [
    getShortcutKey("CtrlOrCmd+D"),
    getShortcutKey(`Alt+${t("helpDialog.drag")}`)
  ],
  sendBackward: [getShortcutKey("CtrlOrCmd+[")],
  bringForward: [getShortcutKey("CtrlOrCmd+]")],
  sendToBack: [
    isDarwin ? getShortcutKey("CtrlOrCmd+Alt+[") : getShortcutKey("CtrlOrCmd+Shift+[")
  ],
  bringToFront: [
    isDarwin ? getShortcutKey("CtrlOrCmd+Alt+]") : getShortcutKey("CtrlOrCmd+Shift+]")
  ],
  copyAsPng: [getShortcutKey("Shift+Alt+C")],
  copyAsSvg: [],
  group: [getShortcutKey("CtrlOrCmd+G")],
  ungroup: [getShortcutKey("CtrlOrCmd+Shift+G")],
  gridMode: [getShortcutKey("CtrlOrCmd+'")],
  zenMode: [getShortcutKey("Alt+Z")],
  objectsSnapMode: [getShortcutKey("Alt+S")],
  stats: [getShortcutKey("Alt+/")],
  addToLibrary: [],
  flipHorizontal: [getShortcutKey("Shift+H")],
  flipVertical: [getShortcutKey("Shift+V")],
  viewMode: [getShortcutKey("Alt+R")],
  hyperlink: [getShortcutKey("CtrlOrCmd+K")],
  toggleElementLock: [getShortcutKey("CtrlOrCmd+Shift+L")],
  resetZoom: [getShortcutKey("CtrlOrCmd+0")],
  zoomOut: [getShortcutKey("CtrlOrCmd+-")],
  zoomIn: [getShortcutKey("CtrlOrCmd++")],
  zoomToFitSelection: [getShortcutKey("Shift+3")],
  zoomToFit: [getShortcutKey("Shift+1")],
  zoomToFitSelectionInViewport: [getShortcutKey("Shift+2")],
  toggleEraserTool: [getShortcutKey("E")],
  toggleHandTool: [getShortcutKey("H")],
  setFrameAsActiveTool: [getShortcutKey("F")],
  saveFileToDisk: [getShortcutKey("CtrlOrCmd+S")],
  saveToActiveFile: [getShortcutKey("CtrlOrCmd+S")],
  toggleShortcuts: [getShortcutKey("?")],
  searchMenu: [getShortcutKey("CtrlOrCmd+F")]
};
var getShortcutFromShortcutName = (name, idx = 0) => {
  const shortcuts = shortcutMap[name];
  return shortcuts && shortcuts.length > 0 ? shortcuts[idx] || shortcuts[0] : "";
};

// components/CommandPalette/CommandPalette.tsx
init_constants();
init_icons();
import fuzzy from "fuzzy";
init_utils2();
import { atom as atom9, useAtom as useAtom13 } from "jotai";

// deburr.ts
init_define_import_meta_env();
var rsComboMarksRange = "\\u0300-\\u036f";
var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange = "\\u20d0-\\u20ff";
var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
var rsCombo = `[${rsComboRange}]`;
var reComboMark = RegExp(rsCombo, "g");
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var deburredLetters = {
  "\xC0": "A",
  "\xC1": "A",
  "\xC2": "A",
  "\xC3": "A",
  "\xC4": "A",
  "\xC5": "A",
  "\xE0": "a",
  "\xE1": "a",
  "\xE2": "a",
  "\xE3": "a",
  "\xE4": "a",
  "\xE5": "a",
  "\xC7": "C",
  "\xE7": "c",
  "\xD0": "D",
  "\xF0": "d",
  "\xC8": "E",
  "\xC9": "E",
  "\xCA": "E",
  "\xCB": "E",
  "\xE8": "e",
  "\xE9": "e",
  "\xEA": "e",
  "\xEB": "e",
  "\xCC": "I",
  "\xCD": "I",
  "\xCE": "I",
  "\xCF": "I",
  "\xEC": "i",
  "\xED": "i",
  "\xEE": "i",
  "\xEF": "i",
  "\xD1": "N",
  "\xF1": "n",
  "\xD2": "O",
  "\xD3": "O",
  "\xD4": "O",
  "\xD5": "O",
  "\xD6": "O",
  "\xD8": "O",
  "\xF2": "o",
  "\xF3": "o",
  "\xF4": "o",
  "\xF5": "o",
  "\xF6": "o",
  "\xF8": "o",
  "\xD9": "U",
  "\xDA": "U",
  "\xDB": "U",
  "\xDC": "U",
  "\xF9": "u",
  "\xFA": "u",
  "\xFB": "u",
  "\xFC": "u",
  "\xDD": "Y",
  "\xFD": "y",
  "\xFF": "y",
  // normaly Ae/ae
  "\xC6": "E",
  "\xE6": "e",
  // normally Th/th
  "\xDE": "T",
  "\xFE": "t",
  // normally ss
  "\xDF": "s",
  "\u0100": "A",
  "\u0102": "A",
  "\u0104": "A",
  "\u0101": "a",
  "\u0103": "a",
  "\u0105": "a",
  "\u0106": "C",
  "\u0108": "C",
  "\u010A": "C",
  "\u010C": "C",
  "\u0107": "c",
  "\u0109": "c",
  "\u010B": "c",
  "\u010D": "c",
  "\u010E": "D",
  "\u0110": "D",
  "\u010F": "d",
  "\u0111": "d",
  "\u0112": "E",
  "\u0114": "E",
  "\u0116": "E",
  "\u0118": "E",
  "\u011A": "E",
  "\u0113": "e",
  "\u0115": "e",
  "\u0117": "e",
  "\u0119": "e",
  "\u011B": "e",
  "\u011C": "G",
  "\u011E": "G",
  "\u0120": "G",
  "\u0122": "G",
  "\u011D": "g",
  "\u011F": "g",
  "\u0121": "g",
  "\u0123": "g",
  "\u0124": "H",
  "\u0126": "H",
  "\u0125": "h",
  "\u0127": "h",
  "\u0128": "I",
  "\u012A": "I",
  "\u012C": "I",
  "\u012E": "I",
  "\u0130": "I",
  "\u0129": "i",
  "\u012B": "i",
  "\u012D": "i",
  "\u012F": "i",
  "\u0131": "i",
  "\u0134": "J",
  "\u0135": "j",
  "\u0136": "K",
  "\u0137": "k",
  "\u0138": "k",
  "\u0139": "L",
  "\u013B": "L",
  "\u013D": "L",
  "\u013F": "L",
  "\u0141": "L",
  "\u013A": "l",
  "\u013C": "l",
  "\u013E": "l",
  "\u0140": "l",
  "\u0142": "l",
  "\u0143": "N",
  "\u0145": "N",
  "\u0147": "N",
  "\u014A": "N",
  "\u0144": "n",
  "\u0146": "n",
  "\u0148": "n",
  "\u014B": "n",
  "\u014C": "O",
  "\u014E": "O",
  "\u0150": "O",
  "\u014D": "o",
  "\u014F": "o",
  "\u0151": "o",
  "\u0154": "R",
  "\u0156": "R",
  "\u0158": "R",
  "\u0155": "r",
  "\u0157": "r",
  "\u0159": "r",
  "\u015A": "S",
  "\u015C": "S",
  "\u015E": "S",
  "\u0160": "S",
  "\u015B": "s",
  "\u015D": "s",
  "\u015F": "s",
  "\u0161": "s",
  "\u0162": "T",
  "\u0164": "T",
  "\u0166": "T",
  "\u0163": "t",
  "\u0165": "t",
  "\u0167": "t",
  "\u0168": "U",
  "\u016A": "U",
  "\u016C": "U",
  "\u016E": "U",
  "\u0170": "U",
  "\u0172": "U",
  "\u0169": "u",
  "\u016B": "u",
  "\u016D": "u",
  "\u016F": "u",
  "\u0171": "u",
  "\u0173": "u",
  "\u0174": "W",
  "\u0175": "w",
  "\u0176": "Y",
  "\u0177": "y",
  "\u0178": "Y",
  "\u0179": "Z",
  "\u017B": "Z",
  "\u017D": "Z",
  "\u017A": "z",
  "\u017C": "z",
  "\u017E": "z",
  // normally IJ/ij
  "\u0132": "I",
  "\u0133": "i",
  // normally OE/oe
  "\u0152": "E",
  "\u0153": "e",
  // normally "'n"
  "\u0149": "n",
  "\u017F": "s"
};
var deburr = (str) => {
  return str.replace(reLatin, (key) => {
    return deburredLetters[key] || key;
  }).replace(reComboMark, "");
};

// components/InlineIcon.tsx
init_define_import_meta_env();
import { jsx as jsx69 } from "react/jsx-runtime";
var InlineIcon = ({ icon }) => {
  return /* @__PURE__ */ jsx69(
    "span",
    {
      style: {
        width: "1em",
        margin: "0 0.5ex 0 0.5ex",
        display: "inline-block",
        lineHeight: 0,
        verticalAlign: "middle"
      },
      children: icon
    }
  );
};

// components/CommandPalette/CommandPalette.tsx
init_shapes();

// components/Actions.tsx
init_define_import_meta_env();
import { useState as useState22 } from "react";
init_scene();
init_shapes();
init_utils2();
init_comparisons();
init_typeChecks();
import clsx32 from "clsx";
init_textElement();
init_icons();
init_keys();

// context/tunnels.ts
init_define_import_meta_env();
import React28 from "react";
import tunnel from "tunnel-rat";
var TunnelsContext = React28.createContext(null);
var useTunnels = () => React28.useContext(TunnelsContext);
var useInitializeTunnels = () => {
  return React28.useMemo(() => {
    return {
      MainMenuTunnel: tunnel(),
      WelcomeScreenMenuHintTunnel: tunnel(),
      WelcomeScreenToolbarHintTunnel: tunnel(),
      WelcomeScreenHelpHintTunnel: tunnel(),
      WelcomeScreenCenterTunnel: tunnel(),
      FooterCenterTunnel: tunnel(),
      DefaultSidebarTriggerTunnel: tunnel(),
      DefaultSidebarTabTriggersTunnel: tunnel(),
      OverwriteConfirmDialogTunnel: tunnel(),
      TTDDialogTriggerTunnel: tunnel(),
      jotaiScope: Symbol()
    };
  }, []);
};

// components/Actions.tsx
init_constants();
import { Fragment as Fragment10, jsx as jsx70, jsxs as jsxs38 } from "react/jsx-runtime";
var canChangeStrokeColor = (appState, targetElements) => {
  let commonSelectedType = targetElements[0]?.type || null;
  for (const element of targetElements) {
    if (element.type !== commonSelectedType) {
      commonSelectedType = null;
      break;
    }
  }
  return hasStrokeColor(appState.activeTool.type) && appState.activeTool.type !== "image" && commonSelectedType !== "image" && commonSelectedType !== "frame" && commonSelectedType !== "magicframe" || targetElements.some((element) => hasStrokeColor(element.type));
};
var canChangeBackgroundColor = (appState, targetElements) => {
  return hasBackground(appState.activeTool.type) || targetElements.some((element) => hasBackground(element.type));
};
var SelectedShapeActions = ({
  appState,
  elementsMap,
  renderAction
}) => {
  const targetElements = getTargetElements(elementsMap, appState);
  let isSingleElementBoundContainer = false;
  if (targetElements.length === 2 && (hasBoundTextElement(targetElements[0]) || hasBoundTextElement(targetElements[1]))) {
    isSingleElementBoundContainer = true;
  }
  const isEditingTextOrNewElement = Boolean(
    appState.editingTextElement || appState.newElement
  );
  const device = useDevice();
  const isRTL2 = document.documentElement.getAttribute("dir") === "rtl";
  const showFillIcons = hasBackground(appState.activeTool.type) && !isTransparent(appState.currentItemBackgroundColor) || targetElements.some(
    (element) => hasBackground(element.type) && !isTransparent(element.backgroundColor)
  );
  const showLinkIcon = targetElements.length === 1 || isSingleElementBoundContainer;
  const showLineEditorAction = !appState.editingLinearElement && targetElements.length === 1 && isLinearElement(targetElements[0]) && !isElbowArrow(targetElements[0]);
  return /* @__PURE__ */ jsxs38("div", { className: "panelColumn", children: [
    /* @__PURE__ */ jsx70("div", { children: canChangeStrokeColor(appState, targetElements) && renderAction("changeStrokeColor") }),
    canChangeBackgroundColor(appState, targetElements) && /* @__PURE__ */ jsx70("div", { children: renderAction("changeBackgroundColor") }),
    showFillIcons && renderAction("changeFillStyle"),
    (hasStrokeWidth(appState.activeTool.type) || targetElements.some((element) => hasStrokeWidth(element.type))) && renderAction("changeStrokeWidth"),
    (appState.activeTool.type === "freedraw" || targetElements.some((element) => element.type === "freedraw")) && renderAction("changeStrokeShape"),
    (hasStrokeStyle(appState.activeTool.type) || targetElements.some((element) => hasStrokeStyle(element.type))) && /* @__PURE__ */ jsxs38(Fragment10, { children: [
      renderAction("changeStrokeStyle"),
      renderAction("changeSloppiness")
    ] }),
    (canChangeRoundness(appState.activeTool.type) || targetElements.some((element) => canChangeRoundness(element.type))) && /* @__PURE__ */ jsx70(Fragment10, { children: renderAction("changeRoundness") }),
    (toolIsArrow(appState.activeTool.type) || targetElements.some((element) => toolIsArrow(element.type))) && /* @__PURE__ */ jsx70(Fragment10, { children: renderAction("changeArrowType") }),
    (appState.activeTool.type === "text" || targetElements.some(isTextElement)) && /* @__PURE__ */ jsxs38(Fragment10, { children: [
      renderAction("changeFontFamily"),
      renderAction("changeFontSize"),
      (appState.activeTool.type === "text" || suppportsHorizontalAlign(targetElements, elementsMap)) && renderAction("changeTextAlign")
    ] }),
    shouldAllowVerticalAlign(targetElements, elementsMap) && renderAction("changeVerticalAlign"),
    (canHaveArrowheads(appState.activeTool.type) || targetElements.some((element) => canHaveArrowheads(element.type))) && /* @__PURE__ */ jsx70(Fragment10, { children: renderAction("changeArrowhead") }),
    renderAction("changeOpacity"),
    /* @__PURE__ */ jsxs38("fieldset", { children: [
      /* @__PURE__ */ jsx70("legend", { children: t("labels.layers") }),
      /* @__PURE__ */ jsxs38("div", { className: "buttonList", children: [
        renderAction("sendToBack"),
        renderAction("sendBackward"),
        renderAction("bringForward"),
        renderAction("bringToFront")
      ] })
    ] }),
    targetElements.length > 1 && !isSingleElementBoundContainer && /* @__PURE__ */ jsxs38("fieldset", { children: [
      /* @__PURE__ */ jsx70("legend", { children: t("labels.align") }),
      /* @__PURE__ */ jsxs38("div", { className: "buttonList", children: [
        isRTL2 ? /* @__PURE__ */ jsxs38(Fragment10, { children: [
          renderAction("alignRight"),
          renderAction("alignHorizontallyCentered"),
          renderAction("alignLeft")
        ] }) : /* @__PURE__ */ jsxs38(Fragment10, { children: [
          renderAction("alignLeft"),
          renderAction("alignHorizontallyCentered"),
          renderAction("alignRight")
        ] }),
        targetElements.length > 2 && renderAction("distributeHorizontally"),
        /* @__PURE__ */ jsx70("div", { style: { flexBasis: "100%", height: 0 } }),
        /* @__PURE__ */ jsxs38(
          "div",
          {
            style: {
              display: "flex",
              flexWrap: "wrap",
              gap: ".5rem",
              marginTop: "-0.5rem"
            },
            children: [
              renderAction("alignTop"),
              renderAction("alignVerticallyCentered"),
              renderAction("alignBottom"),
              targetElements.length > 2 && renderAction("distributeVertically")
            ]
          }
        )
      ] })
    ] }),
    !isEditingTextOrNewElement && targetElements.length > 0 && /* @__PURE__ */ jsxs38("fieldset", { children: [
      /* @__PURE__ */ jsx70("legend", { children: t("labels.actions") }),
      /* @__PURE__ */ jsxs38("div", { className: "buttonList", children: [
        !device.editor.isMobile && renderAction("duplicateSelection"),
        !device.editor.isMobile && renderAction("deleteSelectedElements"),
        renderAction("group"),
        renderAction("ungroup"),
        showLinkIcon && renderAction("hyperlink"),
        showLineEditorAction && renderAction("toggleLinearEditor")
      ] })
    ] })
  ] });
};
var ShapesSwitcher = ({
  activeTool,
  appState,
  app,
  UIOptions
}) => {
  const [isExtraToolsMenuOpen, setIsExtraToolsMenuOpen] = useState22(false);
  const frameToolSelected = activeTool.type === "frame";
  const laserToolSelected = activeTool.type === "laser";
  const embeddableToolSelected = activeTool.type === "embeddable";
  const { TTDDialogTriggerTunnel } = useTunnels();
  return /* @__PURE__ */ jsxs38(Fragment10, { children: [
    SHAPES.map(({ value, icon, key, numericKey, fillable }, index) => {
      if (UIOptions.tools?.[value] === false) {
        return null;
      }
      const label = t(`toolBar.${value}`);
      const letter = key && capitalizeString(typeof key === "string" ? key : key[0]);
      const shortcut = letter ? `${letter} ${t("helpDialog.or")} ${numericKey}` : `${numericKey}`;
      return /* @__PURE__ */ jsx70(
        ToolButton,
        {
          className: clsx32("Shape", { fillable }),
          type: "radio",
          icon,
          checked: activeTool.type === value,
          name: "editor-current-shape",
          title: `${capitalizeString(label)} \u2014 ${shortcut}`,
          keyBindingLabel: numericKey || letter,
          "aria-label": capitalizeString(label),
          "aria-keyshortcuts": shortcut,
          "data-testid": `toolbar-${value}`,
          onPointerDown: ({ pointerType }) => {
            if (!appState.penDetected && pointerType === "pen") {
              app.togglePenMode(true);
            }
          },
          onChange: ({ pointerType }) => {
            if (appState.activeTool.type !== value) {
              trackEvent("toolbar", value, "ui");
            }
            if (value === "image") {
              app.setActiveTool({
                type: value,
                insertOnCanvasDirectly: pointerType !== "mouse"
              });
            } else {
              app.setActiveTool({ type: value });
            }
          }
        },
        value
      );
    }),
    /* @__PURE__ */ jsx70("div", { className: "App-toolbar__divider" }),
    /* @__PURE__ */ jsxs38(DropdownMenu_default, { open: isExtraToolsMenuOpen, children: [
      /* @__PURE__ */ jsxs38(
        DropdownMenu_default.Trigger,
        {
          className: clsx32("App-toolbar__extra-tools-trigger", {
            "App-toolbar__extra-tools-trigger--selected": frameToolSelected || embeddableToolSelected || // in collab we're already highlighting the laser button
            // outside toolbar, so let's not highlight extra-tools button
            // on top of it
            laserToolSelected && !app.props.isCollaborating
          }),
          onToggle: () => setIsExtraToolsMenuOpen(!isExtraToolsMenuOpen),
          title: t("toolBar.extraTools"),
          children: [
            extraToolsIcon,
            app.props.aiEnabled !== false && /* @__PURE__ */ jsx70(
              "div",
              {
                style: {
                  display: "inline-flex",
                  marginLeft: "auto",
                  padding: "2px 4px",
                  borderRadius: 6,
                  fontSize: 8,
                  fontFamily: "Cascadia, monospace",
                  position: "absolute",
                  background: "var(--color-promo)",
                  color: "var(--color-surface-lowest)",
                  bottom: 3,
                  right: 4
                },
                children: "AI"
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ jsxs38(
        DropdownMenu_default.Content,
        {
          onClickOutside: () => setIsExtraToolsMenuOpen(false),
          onSelect: () => setIsExtraToolsMenuOpen(false),
          className: "App-toolbar__extra-tools-dropdown",
          style: {
            position: "fixed",
            top: 260,
            left: 60,
            width: 240
          },
          children: [
            /* @__PURE__ */ jsx70(
              DropdownMenu_default.Item,
              {
                onSelect: () => app.setActiveTool({ type: "frame" }),
                icon: frameToolIcon,
                shortcut: KEYS.F.toLocaleUpperCase(),
                "data-testid": "toolbar-frame",
                selected: frameToolSelected,
                children: t("toolBar.frame")
              }
            ),
            /* @__PURE__ */ jsx70(
              DropdownMenu_default.Item,
              {
                onSelect: () => app.setActiveTool({ type: "embeddable" }),
                icon: EmbedIcon,
                "data-testid": "toolbar-embeddable",
                selected: embeddableToolSelected,
                children: t("toolBar.embeddable")
              }
            ),
            /* @__PURE__ */ jsx70(
              DropdownMenu_default.Item,
              {
                onSelect: () => app.setActiveTool({ type: "laser" }),
                icon: laserPointerToolIcon,
                "data-testid": "toolbar-laser",
                selected: laserToolSelected,
                shortcut: KEYS.K.toLocaleUpperCase(),
                children: t("toolBar.laser")
              }
            ),
            /* @__PURE__ */ jsx70("div", { style: { margin: "6px 0", fontSize: 14, fontWeight: 600 }, children: "Generate" }),
            app.props.aiEnabled !== false && /* @__PURE__ */ jsx70(TTDDialogTriggerTunnel.Out, {}),
            /* @__PURE__ */ jsx70(
              DropdownMenu_default.Item,
              {
                onSelect: () => app.setOpenDialog({ name: "ttd", tab: "mermaid" }),
                icon: mermaidLogoIcon,
                "data-testid": "toolbar-embeddable",
                children: t("toolBar.mermaidToExcalidraw")
              }
            ),
            app.props.aiEnabled !== false && app.plugins.diagramToCode && /* @__PURE__ */ jsx70(Fragment10, { children: /* @__PURE__ */ jsxs38(
              DropdownMenu_default.Item,
              {
                onSelect: () => app.onMagicframeToolSelect(),
                icon: MagicIcon,
                "data-testid": "toolbar-magicframe",
                children: [
                  t("toolBar.magicframe"),
                  /* @__PURE__ */ jsx70(DropdownMenu_default.Item.Badge, { children: "AI" })
                ]
              }
            ) })
          ]
        }
      )
    ] })
  ] });
};
var ZoomActions = ({
  renderAction,
  zoom
}) => /* @__PURE__ */ jsx70(Stack_default.Col, { gap: 1, className: CLASSES.ZOOM_ACTIONS, children: /* @__PURE__ */ jsxs38(Stack_default.Row, { align: "center", children: [
  renderAction("zoomOut"),
  renderAction("resetZoom"),
  renderAction("zoomIn")
] }) });
var UndoRedoActions = ({
  renderAction,
  className
}) => /* @__PURE__ */ jsxs38("div", { className: `undo-redo-buttons ${className}`, children: [
  /* @__PURE__ */ jsx70("div", { className: "undo-button-container", children: /* @__PURE__ */ jsx70(Tooltip, { label: t("buttons.undo"), children: renderAction("undo") }) }),
  /* @__PURE__ */ jsx70("div", { className: "redo-button-container", children: /* @__PURE__ */ jsxs38(Tooltip, { label: t("buttons.redo"), children: [
    " ",
    renderAction("redo")
  ] }) })
] });
var ExitZenModeAction = ({
  actionManager,
  showExitZenModeBtn
}) => /* @__PURE__ */ jsx70(
  "button",
  {
    type: "button",
    className: clsx32("disable-zen-mode", {
      "disable-zen-mode--visible": showExitZenModeBtn
    }),
    onClick: () => actionManager.executeAction(actionToggleZenMode),
    children: t("buttons.exitZenMode")
  }
);
var FinalizeAction = ({
  renderAction,
  className
}) => /* @__PURE__ */ jsx70("div", { className: `finalize-button ${className}`, children: renderAction("finalize", { size: "small" }) });

// hooks/useStableCallback.ts
init_define_import_meta_env();
import { useRef as useRef22 } from "react";
var useStableCallback = (userFn) => {
  const stableRef = useRef22({ userFn });
  stableRef.current.userFn = userFn;
  if (!stableRef.current.stableFn) {
    stableRef.current.stableFn = (...args) => stableRef.current.userFn(...args);
  }
  return stableRef.current.stableFn;
};

// components/ActiveConfirmDialog.tsx
init_define_import_meta_env();
import { atom as atom8, useAtom as useAtom12 } from "jotai";
import { jsx as jsx71, jsxs as jsxs39 } from "react/jsx-runtime";
var activeConfirmDialogAtom = atom8(null);
var ActiveConfirmDialog = () => {
  const [activeConfirmDialog, setActiveConfirmDialog] = useAtom12(
    activeConfirmDialogAtom,
    jotaiScope
  );
  const actionManager = useExcalidrawActionManager();
  if (!activeConfirmDialog) {
    return null;
  }
  if (activeConfirmDialog === "clearCanvas") {
    return /* @__PURE__ */ jsx71(
      ConfirmDialog_default,
      {
        onConfirm: () => {
          actionManager.executeAction(actionClearCanvas);
          setActiveConfirmDialog(null);
        },
        onCancel: () => setActiveConfirmDialog(null),
        title: t("clearCanvasDialog.title"),
        children: /* @__PURE__ */ jsxs39("p", { className: "clear-canvas__content", children: [
          " ",
          t("alerts.clearReset")
        ] })
      }
    );
  }
  return null;
};

// components/CommandPalette/defaultCommandPaletteItems.ts
var defaultCommandPaletteItems_exports = {};
__export(defaultCommandPaletteItems_exports, {
  toggleTheme: () => toggleTheme
});
init_define_import_meta_env();
var toggleTheme = {
  ...actionToggleTheme,
  category: "App",
  label: "Toggle theme",
  perform: ({ actionManager }) => {
    actionManager.executeAction(actionToggleTheme, "commandPalette");
  }
};

// components/CommandPalette/CommandPalette.tsx
import { jsx as jsx72, jsxs as jsxs40 } from "react/jsx-runtime";
var lastUsedPaletteItem = atom9(null);
var DEFAULT_CATEGORIES = {
  app: "App",
  export: "Export",
  tools: "Tools",
  editor: "Editor",
  elements: "Elements",
  links: "Links"
};
var getCategoryOrder = (category) => {
  switch (category) {
    case DEFAULT_CATEGORIES.app:
      return 1;
    case DEFAULT_CATEGORIES.export:
      return 2;
    case DEFAULT_CATEGORIES.editor:
      return 3;
    case DEFAULT_CATEGORIES.tools:
      return 4;
    case DEFAULT_CATEGORIES.elements:
      return 5;
    case DEFAULT_CATEGORIES.links:
      return 6;
    default:
      return 10;
  }
};
var CommandShortcutHint = ({
  shortcut,
  className,
  children
}) => {
  const shortcuts = shortcut.replace("++", "+$").split("+");
  return /* @__PURE__ */ jsxs40("div", { className: clsx33("shortcut", className), children: [
    shortcuts.map((item, idx) => {
      return /* @__PURE__ */ jsx72("div", { className: "shortcut-wrapper", children: /* @__PURE__ */ jsx72("div", { className: "shortcut-key", children: item === "$" ? "+" : item }) }, item);
    }),
    /* @__PURE__ */ jsx72("div", { className: "shortcut-desc", children })
  ] });
};
var isCommandPaletteToggleShortcut = (event) => {
  return !event.altKey && event[KEYS.CTRL_OR_CMD] && (event.shiftKey && event.key.toLowerCase() === KEYS.P || event.key === KEYS.SLASH);
};
var CommandPalette = Object.assign(
  (props) => {
    const uiAppState = useUIAppState();
    const setAppState = useExcalidrawSetAppState();
    useEffect26(() => {
      const commandPaletteShortcut = (event) => {
        if (isCommandPaletteToggleShortcut(event)) {
          event.preventDefault();
          event.stopPropagation();
          setAppState((appState) => {
            const nextState = appState.openDialog?.name === "commandPalette" ? null : { name: "commandPalette" };
            if (nextState) {
              trackEvent("command_palette", "open", "shortcut");
            }
            return {
              openDialog: nextState
            };
          });
        }
      };
      window.addEventListener("keydown" /* KEYDOWN */, commandPaletteShortcut, {
        capture: true
      });
      return () => window.removeEventListener("keydown" /* KEYDOWN */, commandPaletteShortcut, {
        capture: true
      });
    }, [setAppState]);
    if (uiAppState.openDialog?.name !== "commandPalette") {
      return null;
    }
    return /* @__PURE__ */ jsx72(CommandPaletteInner, { ...props });
  },
  {
    defaultItems: defaultCommandPaletteItems_exports
  }
);
function CommandPaletteInner({
  customCommandPaletteItems
}) {
  const app = useApp();
  const uiAppState = useUIAppState();
  const setAppState = useExcalidrawSetAppState();
  const appProps = useAppProps();
  const actionManager = useExcalidrawActionManager();
  const [lastUsed, setLastUsed] = useAtom13(lastUsedPaletteItem);
  const [allCommands, setAllCommands] = useState23(null);
  const inputRef = useRef23(null);
  const stableDeps = useStable({
    uiAppState,
    customCommandPaletteItems,
    appProps
  });
  useEffect26(() => {
    const { uiAppState: uiAppState2, customCommandPaletteItems: customCommandPaletteItems2, appProps: appProps2 } = stableDeps;
    const getActionLabel = (action) => {
      let label = "";
      if (action.label) {
        if (typeof action.label === "function") {
          label = t(
            action.label(
              app.scene.getNonDeletedElements(),
              uiAppState2,
              app
            )
          );
        } else {
          label = t(action.label);
        }
      }
      return label;
    };
    const getActionIcon = (action) => {
      if (typeof action.icon === "function") {
        return action.icon(uiAppState2, app.scene.getNonDeletedElements());
      }
      return action.icon;
    };
    let commandsFromActions = [];
    const actionToCommand = (action, category, transformer) => {
      const command = {
        label: getActionLabel(action),
        icon: getActionIcon(action),
        category,
        shortcut: getShortcutFromShortcutName(action.name),
        keywords: action.keywords,
        predicate: action.predicate,
        viewMode: action.viewMode,
        perform: () => {
          actionManager.executeAction(action, "commandPalette");
        }
      };
      return transformer ? transformer(command, action) : command;
    };
    if (uiAppState2 && app.scene && actionManager) {
      const elementsCommands = [
        actionManager.actions.group,
        actionManager.actions.ungroup,
        actionManager.actions.cut,
        actionManager.actions.copy,
        actionManager.actions.deleteSelectedElements,
        actionManager.actions.copyStyles,
        actionManager.actions.pasteStyles,
        actionManager.actions.bringToFront,
        actionManager.actions.bringForward,
        actionManager.actions.sendBackward,
        actionManager.actions.sendToBack,
        actionManager.actions.alignTop,
        actionManager.actions.alignBottom,
        actionManager.actions.alignLeft,
        actionManager.actions.alignRight,
        actionManager.actions.alignVerticallyCentered,
        actionManager.actions.alignHorizontallyCentered,
        actionManager.actions.duplicateSelection,
        actionManager.actions.flipHorizontal,
        actionManager.actions.flipVertical,
        actionManager.actions.zoomToFitSelection,
        actionManager.actions.zoomToFitSelectionInViewport,
        actionManager.actions.increaseFontSize,
        actionManager.actions.decreaseFontSize,
        actionManager.actions.toggleLinearEditor,
        actionLink
      ].map(
        (action) => actionToCommand(
          action,
          DEFAULT_CATEGORIES.elements,
          (command, action2) => ({
            ...command,
            predicate: action2.predicate ? action2.predicate : (elements, appState, appProps3, app2) => {
              const selectedElements = getSelectedElements(
                elements,
                appState
              );
              return selectedElements.length > 0;
            }
          })
        )
      );
      const toolCommands = [
        actionManager.actions.toggleHandTool,
        actionManager.actions.setFrameAsActiveTool
      ].map((action) => actionToCommand(action, DEFAULT_CATEGORIES.tools));
      const editorCommands = [
        actionManager.actions.undo,
        actionManager.actions.redo,
        actionManager.actions.zoomIn,
        actionManager.actions.zoomOut,
        actionManager.actions.resetZoom,
        actionManager.actions.zoomToFit,
        actionManager.actions.zenMode,
        actionManager.actions.viewMode,
        actionManager.actions.gridMode,
        actionManager.actions.objectsSnapMode,
        actionManager.actions.toggleShortcuts,
        actionManager.actions.selectAll,
        actionManager.actions.toggleElementLock,
        actionManager.actions.unlockAllElements,
        actionManager.actions.stats
      ].map((action) => actionToCommand(action, DEFAULT_CATEGORIES.editor));
      const exportCommands = [
        actionManager.actions.saveToActiveFile,
        actionManager.actions.saveFileToDisk,
        actionManager.actions.copyAsPng,
        actionManager.actions.copyAsSvg
      ].map((action) => actionToCommand(action, DEFAULT_CATEGORIES.export));
      commandsFromActions = [
        ...elementsCommands,
        ...editorCommands,
        {
          label: getActionLabel(actionClearCanvas),
          icon: getActionIcon(actionClearCanvas),
          shortcut: getShortcutFromShortcutName(
            actionClearCanvas.name
          ),
          category: DEFAULT_CATEGORIES.editor,
          keywords: ["delete", "destroy"],
          viewMode: false,
          perform: () => {
            jotaiStore.set(activeConfirmDialogAtom, "clearCanvas");
          }
        },
        {
          label: t("buttons.exportImage"),
          category: DEFAULT_CATEGORIES.export,
          icon: ExportImageIcon,
          shortcut: getShortcutFromShortcutName("imageExport"),
          keywords: [
            "export",
            "image",
            "png",
            "jpeg",
            "svg",
            "clipboard",
            "picture"
          ],
          perform: () => {
            setAppState({ openDialog: { name: "imageExport" } });
          }
        },
        ...exportCommands
      ];
      const additionalCommands = [
        {
          label: t("toolBar.library"),
          category: DEFAULT_CATEGORIES.app,
          icon: LibraryIcon,
          viewMode: false,
          perform: () => {
            if (uiAppState2.openSidebar) {
              setAppState({
                openSidebar: null
              });
            } else {
              setAppState({
                openSidebar: {
                  name: DEFAULT_SIDEBAR.name,
                  tab: DEFAULT_SIDEBAR.defaultTab
                }
              });
            }
          }
        },
        {
          label: t("search.title"),
          category: DEFAULT_CATEGORIES.app,
          icon: searchIcon,
          viewMode: true,
          perform: () => {
            actionManager.executeAction(actionToggleSearchMenu);
          }
        },
        {
          label: t("labels.changeStroke"),
          keywords: ["color", "outline"],
          category: DEFAULT_CATEGORIES.elements,
          icon: bucketFillIcon,
          viewMode: false,
          predicate: (elements, appState) => {
            const selectedElements = getSelectedElements(elements, appState);
            return selectedElements.length > 0 && canChangeStrokeColor(appState, selectedElements);
          },
          perform: () => {
            setAppState((prevState) => ({
              openMenu: prevState.openMenu === "shape" ? null : "shape",
              openPopup: "elementStroke"
            }));
          }
        },
        {
          label: t("labels.changeBackground"),
          keywords: ["color", "fill"],
          icon: bucketFillIcon,
          category: DEFAULT_CATEGORIES.elements,
          viewMode: false,
          predicate: (elements, appState) => {
            const selectedElements = getSelectedElements(elements, appState);
            return selectedElements.length > 0 && canChangeBackgroundColor(appState, selectedElements);
          },
          perform: () => {
            setAppState((prevState) => ({
              openMenu: prevState.openMenu === "shape" ? null : "shape",
              openPopup: "elementBackground"
            }));
          }
        },
        {
          label: t("labels.canvasBackground"),
          keywords: ["color"],
          icon: bucketFillIcon,
          category: DEFAULT_CATEGORIES.editor,
          viewMode: false,
          perform: () => {
            setAppState((prevState) => ({
              openMenu: prevState.openMenu === "canvas" ? null : "canvas",
              openPopup: "canvasBackground"
            }));
          }
        },
        ...SHAPES.reduce((acc, shape) => {
          const { value, icon, key, numericKey } = shape;
          if (appProps2.UIOptions.tools?.[value] === false) {
            return acc;
          }
          const letter = key && capitalizeString(typeof key === "string" ? key : key[0]);
          const shortcut = letter || numericKey;
          const command = {
            label: t(`toolBar.${value}`),
            category: DEFAULT_CATEGORIES.tools,
            shortcut,
            icon,
            keywords: ["toolbar"],
            viewMode: false,
            perform: ({ event }) => {
              if (value === "image") {
                app.setActiveTool({
                  type: value,
                  insertOnCanvasDirectly: event.type === "keydown" /* KEYDOWN */
                });
              } else {
                app.setActiveTool({ type: value });
              }
            }
          };
          acc.push(command);
          return acc;
        }, []),
        ...toolCommands,
        {
          label: t("toolBar.lock"),
          category: DEFAULT_CATEGORIES.tools,
          icon: uiAppState2.activeTool.locked ? LockedIcon : UnlockedIcon,
          shortcut: KEYS.Q.toLocaleUpperCase(),
          viewMode: false,
          perform: () => {
            app.toggleLock();
          }
        },
        {
          label: `${t("labels.textToDiagram")}...`,
          category: DEFAULT_CATEGORIES.tools,
          icon: brainIconThin,
          viewMode: false,
          predicate: appProps2.aiEnabled,
          perform: () => {
            setAppState((state) => ({
              ...state,
              openDialog: {
                name: "ttd",
                tab: "text-to-diagram"
              }
            }));
          }
        },
        {
          label: `${t("toolBar.mermaidToExcalidraw")}...`,
          category: DEFAULT_CATEGORIES.tools,
          icon: mermaidLogoIcon,
          viewMode: false,
          predicate: appProps2.aiEnabled,
          perform: () => {
            setAppState((state) => ({
              ...state,
              openDialog: {
                name: "ttd",
                tab: "mermaid"
              }
            }));
          }
        }
        // {
        //   label: `${t("toolBar.magicframe")}...`,
        //   category: DEFAULT_CATEGORIES.tools,
        //   icon: MagicIconThin,
        //   viewMode: false,
        //   predicate: appProps.aiEnabled,
        //   perform: () => {
        //     app.onMagicframeToolSelect();
        //   },
        // },
      ];
      const allCommands2 = [
        ...commandsFromActions,
        ...additionalCommands,
        ...customCommandPaletteItems2 || []
      ].map((command) => {
        return {
          ...command,
          icon: command.icon || boltIcon,
          order: command.order ?? getCategoryOrder(command.category),
          haystack: `${deburr(command.label.toLocaleLowerCase())} ${command.keywords?.join(" ") || ""}`
        };
      });
      setAllCommands(allCommands2);
      setLastUsed(
        allCommands2.find((command) => command.label === lastUsed?.label) ?? null
      );
    }
  }, [
    stableDeps,
    app,
    actionManager,
    setAllCommands,
    lastUsed?.label,
    setLastUsed,
    setAppState
  ]);
  const [commandSearch, setCommandSearch] = useState23("");
  const [currentCommand, setCurrentCommand] = useState23(null);
  const [commandsByCategory, setCommandsByCategory] = useState23({});
  const closeCommandPalette = (cb) => {
    setAppState(
      {
        openDialog: null
      },
      cb
    );
    setCommandSearch("");
  };
  const executeCommand = (command, event) => {
    if (uiAppState.openDialog?.name === "commandPalette") {
      event.stopPropagation();
      event.preventDefault();
      document.body.classList.add("excalidraw-animations-disabled");
      closeCommandPalette(() => {
        command.perform({ actionManager, event });
        setLastUsed(command);
        requestAnimationFrame(() => {
          document.body.classList.remove("excalidraw-animations-disabled");
        });
      });
    }
  };
  const isCommandAvailable = useStableCallback(
    (command) => {
      if (command.viewMode === false && uiAppState.viewModeEnabled) {
        return false;
      }
      return typeof command.predicate === "function" ? command.predicate(
        app.scene.getNonDeletedElements(),
        uiAppState,
        appProps,
        app
      ) : command.predicate === void 0 || command.predicate;
    }
  );
  const handleKeyDown = useStableCallback((event) => {
    const ignoreAlphanumerics = isWritableElement(event.target) || isCommandPaletteToggleShortcut(event) || event.key === KEYS.ESCAPE;
    if (ignoreAlphanumerics && event.key !== KEYS.ARROW_UP && event.key !== KEYS.ARROW_DOWN && event.key !== KEYS.ENTER) {
      return;
    }
    const matchingCommands = Object.values(commandsByCategory).flat();
    const shouldConsiderLastUsed = lastUsed && !commandSearch && isCommandAvailable(lastUsed);
    if (event.key === KEYS.ARROW_UP) {
      event.preventDefault();
      const index = matchingCommands.findIndex(
        (item) => item.label === currentCommand?.label
      );
      if (shouldConsiderLastUsed) {
        if (index === 0) {
          setCurrentCommand(lastUsed);
          return;
        }
        if (currentCommand === lastUsed) {
          const nextItem2 = matchingCommands[matchingCommands.length - 1];
          if (nextItem2) {
            setCurrentCommand(nextItem2);
          }
          return;
        }
      }
      let nextIndex;
      if (index === -1) {
        nextIndex = matchingCommands.length - 1;
      } else {
        nextIndex = index === 0 ? matchingCommands.length - 1 : (index - 1) % matchingCommands.length;
      }
      const nextItem = matchingCommands[nextIndex];
      if (nextItem) {
        setCurrentCommand(nextItem);
      }
      return;
    }
    if (event.key === KEYS.ARROW_DOWN) {
      event.preventDefault();
      const index = matchingCommands.findIndex(
        (item) => item.label === currentCommand?.label
      );
      if (shouldConsiderLastUsed) {
        if (!currentCommand || index === matchingCommands.length - 1) {
          setCurrentCommand(lastUsed);
          return;
        }
        if (currentCommand === lastUsed) {
          const nextItem2 = matchingCommands[0];
          if (nextItem2) {
            setCurrentCommand(nextItem2);
          }
          return;
        }
      }
      const nextIndex = (index + 1) % matchingCommands.length;
      const nextItem = matchingCommands[nextIndex];
      if (nextItem) {
        setCurrentCommand(nextItem);
      }
      return;
    }
    if (event.key === KEYS.ENTER) {
      if (currentCommand) {
        setTimeout(() => {
          executeCommand(currentCommand, event);
        });
      }
    }
    if (ignoreAlphanumerics) {
      return;
    }
    event.stopPropagation();
    if (/^[a-zA-Z0-9]$/.test(event.key)) {
      inputRef?.current?.focus();
      return;
    }
    event.preventDefault();
  });
  useEffect26(() => {
    window.addEventListener("keydown" /* KEYDOWN */, handleKeyDown, {
      capture: true
    });
    return () => window.removeEventListener("keydown" /* KEYDOWN */, handleKeyDown, {
      capture: true
    });
  }, [handleKeyDown]);
  useEffect26(() => {
    if (!allCommands) {
      return;
    }
    const getNextCommandsByCategory = (commands) => {
      const nextCommandsByCategory = {};
      for (const command of commands) {
        if (nextCommandsByCategory[command.category]) {
          nextCommandsByCategory[command.category].push(command);
        } else {
          nextCommandsByCategory[command.category] = [command];
        }
      }
      return nextCommandsByCategory;
    };
    let matchingCommands = allCommands.filter(isCommandAvailable).sort((a, b) => a.order - b.order);
    const showLastUsed = !commandSearch && lastUsed && isCommandAvailable(lastUsed);
    if (!commandSearch) {
      setCommandsByCategory(
        getNextCommandsByCategory(
          showLastUsed ? matchingCommands.filter(
            (command) => command.label !== lastUsed?.label
          ) : matchingCommands
        )
      );
      setCurrentCommand(showLastUsed ? lastUsed : matchingCommands[0] || null);
      return;
    }
    const _query = deburr(
      commandSearch.toLocaleLowerCase().replace(/[<>_| -]/g, "")
    );
    matchingCommands = fuzzy.filter(_query, matchingCommands, {
      extract: (command) => command.haystack
    }).sort((a, b) => b.score - a.score).map((item) => item.original);
    setCommandsByCategory(getNextCommandsByCategory(matchingCommands));
    setCurrentCommand(matchingCommands[0] ?? null);
  }, [commandSearch, allCommands, isCommandAvailable, lastUsed]);
  return /* @__PURE__ */ jsxs40(
    Dialog,
    {
      onCloseRequest: () => closeCommandPalette(),
      closeOnClickOutside: true,
      title: false,
      size: 720,
      autofocus: true,
      className: "command-palette-dialog",
      children: [
        /* @__PURE__ */ jsx72(
          TextField,
          {
            value: commandSearch,
            placeholder: t("commandPalette.search.placeholder"),
            onChange: (value) => {
              setCommandSearch(value);
            },
            selectOnRender: true,
            ref: inputRef
          }
        ),
        !app.device.viewport.isMobile && /* @__PURE__ */ jsxs40("div", { className: "shortcuts-wrapper", children: [
          /* @__PURE__ */ jsx72(CommandShortcutHint, { shortcut: "\u2191\u2193", children: t("commandPalette.shortcuts.select") }),
          /* @__PURE__ */ jsx72(CommandShortcutHint, { shortcut: "\u21B5", children: t("commandPalette.shortcuts.confirm") }),
          /* @__PURE__ */ jsx72(CommandShortcutHint, { shortcut: getShortcutKey("Esc"), children: t("commandPalette.shortcuts.close") })
        ] }),
        /* @__PURE__ */ jsxs40("div", { className: "commands", children: [
          lastUsed && !commandSearch && /* @__PURE__ */ jsxs40("div", { className: "command-category", children: [
            /* @__PURE__ */ jsxs40("div", { className: "command-category-title", children: [
              t("commandPalette.recents"),
              /* @__PURE__ */ jsx72(
                "div",
                {
                  className: "icon",
                  style: {
                    marginLeft: "6px"
                  },
                  children: clockIcon
                }
              )
            ] }),
            /* @__PURE__ */ jsx72(
              CommandItem,
              {
                command: lastUsed,
                isSelected: lastUsed.label === currentCommand?.label,
                onClick: (event) => executeCommand(lastUsed, event),
                disabled: !isCommandAvailable(lastUsed),
                onMouseMove: () => setCurrentCommand(lastUsed),
                showShortcut: !app.device.viewport.isMobile,
                appState: uiAppState
              }
            )
          ] }),
          Object.keys(commandsByCategory).length > 0 ? Object.keys(commandsByCategory).map((category, idx) => {
            return /* @__PURE__ */ jsxs40("div", { className: "command-category", children: [
              /* @__PURE__ */ jsx72("div", { className: "command-category-title", children: category }),
              commandsByCategory[category].map((command) => /* @__PURE__ */ jsx72(
                CommandItem,
                {
                  command,
                  isSelected: command.label === currentCommand?.label,
                  onClick: (event) => executeCommand(command, event),
                  onMouseMove: () => setCurrentCommand(command),
                  showShortcut: !app.device.viewport.isMobile,
                  appState: uiAppState
                },
                command.label
              ))
            ] }, category);
          }) : allCommands ? /* @__PURE__ */ jsxs40("div", { className: "no-match", children: [
            /* @__PURE__ */ jsx72("div", { className: "icon", children: searchIcon }),
            " ",
            t("commandPalette.search.noMatch")
          ] }) : null
        ] })
      ]
    }
  );
}
var CommandItem = ({
  command,
  isSelected,
  disabled,
  onMouseMove,
  onClick,
  showShortcut,
  appState
}) => {
  const noop = () => {
  };
  return /* @__PURE__ */ jsxs40(
    "div",
    {
      className: clsx33("command-item", {
        "item-selected": isSelected,
        "item-disabled": disabled
      }),
      ref: (ref) => {
        if (isSelected && !disabled) {
          ref?.scrollIntoView?.({
            block: "nearest"
          });
        }
      },
      onClick: disabled ? noop : onClick,
      onMouseMove: disabled ? noop : onMouseMove,
      title: disabled ? t("commandPalette.itemNotAvailable") : "",
      children: [
        /* @__PURE__ */ jsxs40("div", { className: "name", children: [
          command.icon && /* @__PURE__ */ jsx72(
            InlineIcon,
            {
              icon: typeof command.icon === "function" ? command.icon(appState) : command.icon
            }
          ),
          command.label
        ] }),
        showShortcut && command.shortcut && /* @__PURE__ */ jsx72(CommandShortcutHint, { shortcut: command.shortcut })
      ]
    }
  );
};

// actions/actionLinearEditor.tsx
init_linearElementEditor();
init_typeChecks();
init_store();
init_register();
init_icons();
import { jsx as jsx73 } from "react/jsx-runtime";
var actionToggleLinearEditor = register({
  name: "toggleLinearEditor",
  category: DEFAULT_CATEGORIES.elements,
  label: (elements, appState, app) => {
    const selectedElement = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds
    })[0];
    return selectedElement?.type === "arrow" ? "labels.lineEditor.editArrow" : "labels.lineEditor.edit";
  },
  keywords: ["line"],
  trackEvent: {
    category: "element"
  },
  predicate: (elements, appState, _, app) => {
    const selectedElements = app.scene.getSelectedElements(appState);
    if (!appState.editingLinearElement && selectedElements.length === 1 && isLinearElement(selectedElements[0]) && !isElbowArrow(selectedElements[0])) {
      return true;
    }
    return false;
  },
  perform(elements, appState, _, app) {
    const selectedElement = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds,
      includeBoundTextElement: true
    })[0];
    const editingLinearElement = appState.editingLinearElement?.elementId === selectedElement.id ? null : new LinearElementEditor(selectedElement);
    return {
      appState: {
        ...appState,
        editingLinearElement
      },
      storeAction: StoreAction.CAPTURE
    };
  },
  PanelComponent: ({ appState, updateData, app }) => {
    const selectedElement = app.scene.getSelectedElements({
      selectedElementIds: appState.selectedElementIds
    })[0];
    const label = t(
      selectedElement.type === "arrow" ? "labels.lineEditor.editArrow" : "labels.lineEditor.edit"
    );
    return /* @__PURE__ */ jsx73(
      ToolButton,
      {
        type: "button",
        icon: lineEditorIcon,
        title: label,
        "aria-label": label,
        onClick: () => updateData(null)
      }
    );
  }
});

// actions/actionToggleSearchMenu.ts
init_define_import_meta_env();
init_keys();
init_register();
init_icons();
init_store();
init_constants();
var actionToggleSearchMenu = register({
  name: "searchMenu",
  icon: searchIcon,
  keywords: ["search", "find"],
  label: "search.title",
  viewMode: true,
  trackEvent: {
    category: "search_menu",
    action: "toggle",
    predicate: (appState) => appState.gridModeEnabled
  },
  perform(elements, appState, _, app) {
    if (appState.openSidebar?.name === DEFAULT_SIDEBAR.name && appState.openSidebar.tab === CANVAS_SEARCH_TAB) {
      const searchInput = app.excalidrawContainerValue.container?.querySelector(
        `.${CLASSES.SEARCH_MENU_INPUT_WRAPPER} input`
      );
      if (searchInput?.matches(":focus")) {
        return {
          appState: { ...appState, openSidebar: null },
          storeAction: StoreAction.NONE
        };
      }
      searchInput?.focus();
      searchInput?.select();
      return false;
    }
    return {
      appState: {
        ...appState,
        openSidebar: { name: DEFAULT_SIDEBAR.name, tab: CANVAS_SEARCH_TAB },
        openDialog: null
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.gridModeEnabled,
  predicate: (element, appState, props) => {
    return props.gridModeEnabled === void 0;
  },
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.F
});

// actions/actionHistory.tsx
init_define_import_meta_env();
init_icons();

// history.ts
init_define_import_meta_env();
init_emitter();
var HistoryChangedEvent = class {
  constructor(isUndoStackEmpty = true, isRedoStackEmpty = true) {
    this.isUndoStackEmpty = isUndoStackEmpty;
    this.isRedoStackEmpty = isRedoStackEmpty;
  }
};
var History = class _History {
  onHistoryChangedEmitter = new Emitter();
  undoStack = [];
  redoStack = [];
  get isUndoStackEmpty() {
    return this.undoStack.length === 0;
  }
  get isRedoStackEmpty() {
    return this.redoStack.length === 0;
  }
  clear() {
    this.undoStack.length = 0;
    this.redoStack.length = 0;
  }
  /**
   * Record a local change which will go into the history
   */
  record(elementsChange, appStateChange) {
    const entry = HistoryEntry.create(appStateChange, elementsChange);
    if (!entry.isEmpty()) {
      this.undoStack.push(entry.inverse());
      if (!entry.elementsChange.isEmpty()) {
        this.redoStack.length = 0;
      }
      this.onHistoryChangedEmitter.trigger(
        new HistoryChangedEvent(this.isUndoStackEmpty, this.isRedoStackEmpty)
      );
    }
  }
  undo(elements, appState, snapshot) {
    return this.perform(
      elements,
      appState,
      snapshot,
      () => _History.pop(this.undoStack),
      (entry) => _History.push(this.redoStack, entry, elements)
    );
  }
  redo(elements, appState, snapshot) {
    return this.perform(
      elements,
      appState,
      snapshot,
      () => _History.pop(this.redoStack),
      (entry) => _History.push(this.undoStack, entry, elements)
    );
  }
  perform(elements, appState, snapshot, pop, push) {
    try {
      let historyEntry = pop();
      if (historyEntry === null) {
        return;
      }
      let nextElements = elements;
      let nextAppState = appState;
      let containsVisibleChange = false;
      while (historyEntry) {
        try {
          [nextElements, nextAppState, containsVisibleChange] = historyEntry.applyTo(nextElements, nextAppState, snapshot);
        } finally {
          push(historyEntry);
        }
        if (containsVisibleChange) {
          break;
        }
        historyEntry = pop();
      }
      return [nextElements, nextAppState];
    } finally {
      this.onHistoryChangedEmitter.trigger(
        new HistoryChangedEvent(this.isUndoStackEmpty, this.isRedoStackEmpty)
      );
    }
  }
  static pop(stack) {
    if (!stack.length) {
      return null;
    }
    const entry = stack.pop();
    if (entry !== void 0) {
      return entry;
    }
    return null;
  }
  static push(stack, entry, prevElements) {
    const updatedEntry = entry.inverse().applyLatestChanges(prevElements);
    return stack.push(updatedEntry);
  }
};
var HistoryEntry = class _HistoryEntry {
  constructor(appStateChange, elementsChange) {
    this.appStateChange = appStateChange;
    this.elementsChange = elementsChange;
  }
  static create(appStateChange, elementsChange) {
    return new _HistoryEntry(appStateChange, elementsChange);
  }
  inverse() {
    return new _HistoryEntry(
      this.appStateChange.inverse(),
      this.elementsChange.inverse()
    );
  }
  applyTo(elements, appState, snapshot) {
    const [nextElements, elementsContainVisibleChange] = this.elementsChange.applyTo(elements, snapshot.elements);
    const [nextAppState, appStateContainsVisibleChange] = this.appStateChange.applyTo(appState, nextElements);
    const appliedVisibleChanges = elementsContainVisibleChange || appStateContainsVisibleChange;
    return [nextElements, nextAppState, appliedVisibleChanges];
  }
  /**
   * Apply latest (remote) changes to the history entry, creates new instance of `HistoryEntry`.
   */
  applyLatestChanges(elements) {
    const updatedElementsChange = this.elementsChange.applyLatestChanges(elements);
    return _HistoryEntry.create(this.appStateChange, updatedElementsChange);
  }
  isEmpty() {
    return this.appStateChange.isEmpty() && this.elementsChange.isEmpty();
  }
};

// actions/actionHistory.tsx
init_keys();
init_utils2();
init_constants();
init_store();

// hooks/useEmitter.ts
init_define_import_meta_env();
import { useEffect as useEffect27, useState as useState24 } from "react";
var useEmitter = (emitter, initialState) => {
  const [event, setEvent] = useState24(initialState);
  useEffect27(() => {
    const unsubscribe = emitter.on((event2) => {
      setEvent(event2);
    });
    return () => {
      unsubscribe();
    };
  }, [emitter]);
  return event;
};

// actions/actionHistory.tsx
import { jsx as jsx74 } from "react/jsx-runtime";
var executeHistoryAction = (app, appState, updater) => {
  if (!appState.multiElement && !appState.resizingElement && !appState.editingTextElement && !appState.newElement && !appState.selectedElementsAreBeingDragged && !appState.selectionElement && !app.flowChartCreator.isCreatingChart) {
    const result = updater();
    if (!result) {
      return { storeAction: StoreAction.NONE };
    }
    const [nextElementsMap, nextAppState] = result;
    const nextElements = Array.from(nextElementsMap.values());
    return {
      appState: nextAppState,
      elements: nextElements,
      storeAction: StoreAction.UPDATE
    };
  }
  return { storeAction: StoreAction.NONE };
};
var createUndoAction = (history, store) => ({
  name: "undo",
  label: "buttons.undo",
  icon: UndoIcon,
  trackEvent: { category: "history" },
  viewMode: false,
  perform: (elements, appState, value, app) => executeHistoryAction(
    app,
    appState,
    () => history.undo(
      arrayToMap(elements),
      // TODO: #7348 refactor action manager to already include `SceneElementsMap`
      appState,
      store.snapshot
    )
  ),
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key.toLowerCase() === KEYS.Z && !event.shiftKey,
  PanelComponent: ({ updateData, data }) => {
    const { isUndoStackEmpty } = useEmitter(
      history.onHistoryChangedEmitter,
      new HistoryChangedEvent(
        history.isUndoStackEmpty,
        history.isRedoStackEmpty
      )
    );
    return /* @__PURE__ */ jsx74(
      ToolButton,
      {
        type: "button",
        icon: UndoIcon,
        "aria-label": t("buttons.undo"),
        onClick: updateData,
        size: data?.size || "medium",
        disabled: isUndoStackEmpty,
        "data-testid": "button-undo"
      }
    );
  }
});
var createRedoAction = (history, store) => ({
  name: "redo",
  label: "buttons.redo",
  icon: RedoIcon,
  trackEvent: { category: "history" },
  viewMode: false,
  perform: (elements, appState, _, app) => executeHistoryAction(
    app,
    appState,
    () => history.redo(
      arrayToMap(elements),
      // TODO: #7348 refactor action manager to already include `SceneElementsMap`
      appState,
      store.snapshot
    )
  ),
  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key.toLowerCase() === KEYS.Z || isWindows && event.ctrlKey && !event.shiftKey && event.key === KEYS.Y,
  PanelComponent: ({ updateData, data }) => {
    const { isRedoStackEmpty } = useEmitter(
      history.onHistoryChangedEmitter,
      new HistoryChangedEvent(
        history.isUndoStackEmpty,
        history.isRedoStackEmpty
      )
    );
    return /* @__PURE__ */ jsx74(
      ToolButton,
      {
        type: "button",
        icon: RedoIcon,
        "aria-label": t("buttons.redo"),
        onClick: updateData,
        size: data?.size || "medium",
        disabled: isRedoStackEmpty,
        "data-testid": "button-redo"
      }
    );
  }
});

// actions/manager.tsx
init_define_import_meta_env();
init_utils2();
import { jsx as jsx75 } from "react/jsx-runtime";
var trackAction = (action, source, appState, elements, app, value) => {
  if (action.trackEvent) {
    try {
      if (typeof action.trackEvent === "object") {
        const shouldTrack = action.trackEvent.predicate ? action.trackEvent.predicate(appState, elements, value) : true;
        if (shouldTrack) {
          trackEvent(
            action.trackEvent.category,
            action.trackEvent.action || action.name,
            `${source} (${app.device.editor.isMobile ? "mobile" : "desktop"})`
          );
        }
      }
    } catch (error) {
      console.error("error while logging action:", error);
    }
  }
};
var ActionManager = class {
  actions = {};
  updater;
  getAppState;
  getElementsIncludingDeleted;
  app;
  constructor(updater, getAppState, getElementsIncludingDeleted, app) {
    this.updater = (actionResult) => {
      if (isPromiseLike(actionResult)) {
        actionResult.then((actionResult2) => {
          return updater(actionResult2);
        });
      } else {
        return updater(actionResult);
      }
    };
    this.getAppState = getAppState;
    this.getElementsIncludingDeleted = getElementsIncludingDeleted;
    this.app = app;
  }
  registerAction(action) {
    this.actions[action.name] = action;
  }
  registerAll(actions2) {
    actions2.forEach((action) => this.registerAction(action));
  }
  handleKeyDown(event) {
    const canvasActions = this.app.props.UIOptions.canvasActions;
    const data = Object.values(this.actions).sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0)).filter(
      (action2) => (action2.name in canvasActions ? canvasActions[action2.name] : true) && action2.keyTest && action2.keyTest(
        event,
        this.getAppState(),
        this.getElementsIncludingDeleted(),
        this.app
      )
    );
    if (data.length !== 1) {
      if (data.length > 1) {
        console.warn("Canceling as multiple actions match this shortcut", data);
      }
      return false;
    }
    const action = data[0];
    if (this.getAppState().viewModeEnabled && action.viewMode !== true) {
      return false;
    }
    const elements = this.getElementsIncludingDeleted();
    const appState = this.getAppState();
    const value = null;
    trackAction(action, "keyboard", appState, elements, this.app, null);
    event.preventDefault();
    event.stopPropagation();
    this.updater(data[0].perform(elements, appState, value, this.app));
    return true;
  }
  executeAction(action, source = "api", value = null) {
    const elements = this.getElementsIncludingDeleted();
    const appState = this.getAppState();
    trackAction(action, source, appState, elements, this.app, value);
    this.updater(action.perform(elements, appState, value, this.app));
  }
  /**
   * @param data additional data sent to the PanelComponent
   */
  renderAction = (name, data) => {
    const canvasActions = this.app.props.UIOptions.canvasActions;
    if (this.actions[name] && "PanelComponent" in this.actions[name] && (name in canvasActions ? canvasActions[name] : true)) {
      const action = this.actions[name];
      const PanelComponent = action.PanelComponent;
      PanelComponent.displayName = "PanelComponent";
      const elements = this.getElementsIncludingDeleted();
      const appState = this.getAppState();
      const updateData = (formState) => {
        trackAction(action, "ui", appState, elements, this.app, formState);
        this.updater(
          action.perform(
            this.getElementsIncludingDeleted(),
            this.getAppState(),
            formState,
            this.app
          )
        );
      };
      return /* @__PURE__ */ jsx75(
        PanelComponent,
        {
          elements: this.getElementsIncludingDeleted(),
          appState: this.getAppState(),
          updateData,
          appProps: this.app.props,
          app: this.app,
          data
        }
      );
    }
    return null;
  };
  isActionEnabled = (action) => {
    const elements = this.getElementsIncludingDeleted();
    const appState = this.getAppState();
    return !action.predicate || action.predicate(elements, appState, this.app.props, this.app);
  };
};

// components/App.tsx
init_register();
init_appState();
init_clipboard();
init_constants();
init_constants();
init_restore();
init_element();
init_binding();
init_linearElementEditor();
init_mutateElement();
init_newElement();
init_typeChecks();

// gesture.ts
init_define_import_meta_env();
var getCenter = (pointers) => {
  const allCoords = Array.from(pointers.values());
  return {
    x: sum(allCoords, (coords) => coords.x) / allCoords.length,
    y: sum(allCoords, (coords) => coords.y) / allCoords.length
  };
};
var getDistance = ([a, b]) => Math.hypot(a.x - b.x, a.y - b.y);
var sum = (array, mapper) => array.reduce((acc, item) => acc + mapper(item), 0);

// components/App.tsx
init_groups();
init_keys();
init_sizeHelpers();
init_scene();
init_Scene();
init_shapes();
init_shape();
init_collision();
init_utils2();
init_embeddable();

// components/ContextMenu.tsx
init_define_import_meta_env();
import clsx34 from "clsx";
import React29 from "react";
import { jsx as jsx76, jsxs as jsxs41 } from "react/jsx-runtime";
var CONTEXT_MENU_SEPARATOR = "separator";
var ContextMenu = React29.memo(
  ({ actionManager, items, top, left, onClose }) => {
    const appState = useExcalidrawAppState();
    const elements = useExcalidrawElements();
    const filteredItems = items.reduce((acc, item) => {
      if (item && (item === CONTEXT_MENU_SEPARATOR || !item.predicate || item.predicate(
        elements,
        appState,
        actionManager.app.props,
        actionManager.app
      ))) {
        acc.push(item);
      }
      return acc;
    }, []);
    return /* @__PURE__ */ jsx76(
      Popover3,
      {
        onCloseRequest: () => {
          onClose();
        },
        top,
        left,
        fitInViewport: true,
        offsetLeft: appState.offsetLeft,
        offsetTop: appState.offsetTop,
        viewportWidth: appState.width,
        viewportHeight: appState.height,
        children: /* @__PURE__ */ jsx76(
          "ul",
          {
            className: "context-menu",
            onContextMenu: (event) => event.preventDefault(),
            children: filteredItems.map((item, idx) => {
              if (item === CONTEXT_MENU_SEPARATOR) {
                if (!filteredItems[idx - 1] || filteredItems[idx - 1] === CONTEXT_MENU_SEPARATOR) {
                  return null;
                }
                return /* @__PURE__ */ jsx76("hr", { className: "context-menu-item-separator" }, idx);
              }
              const actionName = item.name;
              let label = "";
              if (item.label) {
                if (typeof item.label === "function") {
                  label = t(
                    item.label(
                      elements,
                      appState,
                      actionManager.app
                    )
                  );
                } else {
                  label = t(item.label);
                }
              }
              return /* @__PURE__ */ jsx76(
                "li",
                {
                  "data-testid": actionName,
                  onClick: () => {
                    onClose(() => {
                      actionManager.executeAction(item, "contextMenu");
                    });
                  },
                  children: /* @__PURE__ */ jsxs41(
                    "button",
                    {
                      type: "button",
                      className: clsx34("context-menu-item", {
                        dangerous: actionName === "deleteSelectedElements",
                        checkmark: item.checked?.(appState)
                      }),
                      children: [
                        /* @__PURE__ */ jsx76("div", { className: "context-menu-item__label", children: label }),
                        /* @__PURE__ */ jsx76("kbd", { className: "context-menu-item__shortcut", children: actionName ? getShortcutFromShortcutName(actionName) : "" })
                      ]
                    }
                  )
                },
                idx
              );
            })
          }
        )
      }
    );
  }
);

// components/LayerUI.tsx
init_define_import_meta_env();
init_constants();
init_element();
import clsx54 from "clsx";
import React40 from "react";
init_scene();
init_utils2();

// components/ErrorDialog.tsx
init_define_import_meta_env();
import React30, { useState as useState25 } from "react";
import { Fragment as Fragment11, jsx as jsx77 } from "react/jsx-runtime";
var ErrorDialog = ({
  children,
  onClose
}) => {
  const [modalIsShown, setModalIsShown] = useState25(!!children);
  const { container: excalidrawContainer } = useExcalidrawContainer();
  const handleClose = React30.useCallback(() => {
    setModalIsShown(false);
    if (onClose) {
      onClose();
    }
    excalidrawContainer?.focus();
  }, [onClose, excalidrawContainer]);
  return /* @__PURE__ */ jsx77(Fragment11, { children: modalIsShown && /* @__PURE__ */ jsx77(
    Dialog,
    {
      size: "small",
      onCloseRequest: handleClose,
      title: t("errorDialog.title"),
      children: /* @__PURE__ */ jsx77("div", { style: { whiteSpace: "pre-wrap" }, children })
    }
  ) });
};

// components/ImageExportDialog.tsx
init_define_import_meta_env();
import { useEffect as useEffect28, useRef as useRef25, useState as useState28 } from "react";
init_clipboard();
init_constants();
init_blob();
init_filesystem();
init_scene();
init_export2();
init_icons();

// components/RadioGroup.tsx
init_define_import_meta_env();
import clsx35 from "clsx";
import { jsx as jsx78, jsxs as jsxs42 } from "react/jsx-runtime";
var RadioGroup = function({
  onChange,
  value,
  choices,
  name
}) {
  return /* @__PURE__ */ jsx78("div", { className: "RadioGroup", children: choices.map((choice) => /* @__PURE__ */ jsxs42(
    "div",
    {
      className: clsx35("RadioGroup__choice", {
        active: choice.value === value
      }),
      title: choice.ariaLabel,
      children: [
        /* @__PURE__ */ jsx78(
          "input",
          {
            name,
            type: "radio",
            checked: choice.value === value,
            onChange: () => onChange(choice.value),
            "aria-label": choice.ariaLabel
          }
        ),
        choice.label
      ]
    },
    String(choice.value)
  )) });
};

// components/Switch.tsx
init_define_import_meta_env();
import clsx36 from "clsx";
import { jsx as jsx79 } from "react/jsx-runtime";
var Switch = ({
  title,
  name,
  checked,
  onChange,
  disabled = false
}) => {
  return /* @__PURE__ */ jsx79("div", { className: clsx36("Switch", { toggled: checked, disabled }), children: /* @__PURE__ */ jsx79(
    "input",
    {
      name,
      id: name,
      title,
      type: "checkbox",
      checked,
      disabled,
      onChange: () => onChange(!checked),
      onKeyDown: (event) => {
        if (event.key === " ") {
          onChange(!checked);
        }
      }
    }
  ) });
};

// components/FilledButton.tsx
init_define_import_meta_env();
import { forwardRef as forwardRef4, useState as useState26 } from "react";
import clsx37 from "clsx";
init_errors();
init_utils2();
init_icons();
import { jsx as jsx80, jsxs as jsxs43 } from "react/jsx-runtime";
var FilledButton = forwardRef4(
  ({
    children,
    icon,
    onClick,
    label,
    variant = "filled",
    color = "primary",
    size = "medium",
    fullWidth,
    className,
    status
  }, ref) => {
    const [isLoading, setIsLoading] = useState26(false);
    const _onClick = async (event) => {
      const ret = onClick?.(event);
      if (isPromiseLike(ret)) {
        const timer = window.setTimeout(() => {
          setIsLoading(true);
        }, 50);
        try {
          await ret;
        } catch (error) {
          if (!(error instanceof AbortError)) {
            throw error;
          } else {
            console.warn(error);
          }
        } finally {
          clearTimeout(timer);
          setIsLoading(false);
        }
      }
    };
    const _status = isLoading ? "loading" : status;
    color = _status === "success" ? "success" : color;
    return /* @__PURE__ */ jsx80(
      "button",
      {
        className: clsx37(
          "ExcButton",
          `ExcButton--color-${color}`,
          `ExcButton--variant-${variant}`,
          `ExcButton--size-${size}`,
          `ExcButton--status-${_status}`,
          { "ExcButton--fullWidth": fullWidth },
          className
        ),
        onClick: _onClick,
        type: "button",
        "aria-label": label,
        ref,
        disabled: _status === "loading" || _status === "success",
        children: /* @__PURE__ */ jsxs43("div", { className: "ExcButton__contents", children: [
          _status === "loading" ? /* @__PURE__ */ jsx80(Spinner_default, { className: "ExcButton__statusIcon" }) : _status === "success" && /* @__PURE__ */ jsx80("div", { className: "ExcButton__statusIcon", children: tablerCheckIcon }),
          icon && /* @__PURE__ */ jsx80("div", { className: "ExcButton__icon", "aria-hidden": true, children: icon }),
          variant !== "icon" && (children ?? label)
        ] })
      }
    );
  }
);

// components/ImageExportDialog.tsx
init_utils2();

// hooks/useCopiedIndicator.ts
init_define_import_meta_env();
import { useCallback as useCallback11, useRef as useRef24, useState as useState27 } from "react";
var TIMEOUT = 2e3;
var useCopyStatus = () => {
  const [copyStatus, setCopyStatus] = useState27(null);
  const timeoutRef = useRef24(0);
  const onCopy = () => {
    clearTimeout(timeoutRef.current);
    setCopyStatus("success");
    timeoutRef.current = window.setTimeout(() => {
      setCopyStatus(null);
    }, TIMEOUT);
  };
  const resetCopyStatus = useCallback11(() => {
    setCopyStatus(null);
  }, []);
  return {
    copyStatus,
    resetCopyStatus,
    onCopy
  };
};

// components/ImageExportDialog.tsx
import { jsx as jsx81, jsxs as jsxs44 } from "react/jsx-runtime";
var supportsContextFilters = "filter" in document.createElement("canvas").getContext("2d");
var ErrorCanvasPreview = () => {
  return /* @__PURE__ */ jsxs44("div", { children: [
    /* @__PURE__ */ jsx81("h3", { children: t("canvasError.cannotShowPreview") }),
    /* @__PURE__ */ jsx81("p", { children: /* @__PURE__ */ jsx81("span", { children: t("canvasError.canvasTooBig") }) }),
    /* @__PURE__ */ jsxs44("em", { children: [
      "(",
      t("canvasError.canvasTooBigTip"),
      ")"
    ] })
  ] });
};
var ImageExportModal = ({
  appStateSnapshot,
  elementsSnapshot,
  files,
  actionManager,
  onExportImage,
  name
}) => {
  const hasSelection = isSomeElementSelected(
    elementsSnapshot,
    appStateSnapshot
  );
  const [projectName, setProjectName] = useState28(name);
  const [exportSelectionOnly, setExportSelectionOnly] = useState28(hasSelection);
  const [exportWithBackground, setExportWithBackground] = useState28(
    appStateSnapshot.exportBackground
  );
  const [exportDarkMode, setExportDarkMode] = useState28(
    appStateSnapshot.exportWithDarkMode
  );
  const [embedScene, setEmbedScene] = useState28(
    appStateSnapshot.exportEmbedScene
  );
  const [exportScale, setExportScale] = useState28(appStateSnapshot.exportScale);
  const previewRef = useRef25(null);
  const [renderError, setRenderError] = useState28(null);
  const { onCopy, copyStatus, resetCopyStatus } = useCopyStatus();
  useEffect28(() => {
    resetCopyStatus();
  }, [
    projectName,
    exportWithBackground,
    exportDarkMode,
    exportScale,
    embedScene,
    resetCopyStatus
  ]);
  const { exportedElements, exportingFrame } = prepareElementsForExport(
    elementsSnapshot,
    appStateSnapshot,
    exportSelectionOnly
  );
  useEffect28(() => {
    const previewNode = previewRef.current;
    if (!previewNode) {
      return;
    }
    const maxWidth = previewNode.offsetWidth;
    const maxHeight = previewNode.offsetHeight;
    if (!maxWidth) {
      return;
    }
    exportToCanvas2({
      elements: exportedElements,
      appState: {
        ...appStateSnapshot,
        name: projectName,
        exportBackground: exportWithBackground,
        exportWithDarkMode: exportDarkMode,
        exportScale,
        exportEmbedScene: embedScene
      },
      files,
      exportPadding: DEFAULT_EXPORT_PADDING,
      maxWidthOrHeight: Math.max(maxWidth, maxHeight),
      exportingFrame
    }).then((canvas2) => {
      setRenderError(null);
      return canvasToBlob(canvas2).then(() => {
        previewNode.replaceChildren(canvas2);
      }).catch((e) => {
        if (e.name === "CANVAS_POSSIBLY_TOO_BIG") {
          throw new Error(t("canvasError.canvasTooBig"));
        }
        throw e;
      });
    }).catch((error) => {
      console.error(error);
      setRenderError(error);
    });
  }, [
    appStateSnapshot,
    files,
    exportedElements,
    exportingFrame,
    projectName,
    exportWithBackground,
    exportDarkMode,
    exportScale,
    embedScene
  ]);
  return /* @__PURE__ */ jsxs44("div", { className: "ImageExportModal", children: [
    /* @__PURE__ */ jsx81("h3", { children: t("imageExportDialog.header") }),
    /* @__PURE__ */ jsxs44("div", { className: "ImageExportModal__preview", children: [
      /* @__PURE__ */ jsx81("div", { className: "ImageExportModal__preview__canvas", ref: previewRef, children: renderError && /* @__PURE__ */ jsx81(ErrorCanvasPreview, {}) }),
      /* @__PURE__ */ jsx81("div", { className: "ImageExportModal__preview__filename", children: !nativeFileSystemSupported && /* @__PURE__ */ jsx81(
        "input",
        {
          type: "text",
          className: "TextInput",
          value: projectName,
          style: { width: "30ch" },
          onChange: (event) => {
            setProjectName(event.target.value);
            actionManager.executeAction(
              actionChangeProjectName,
              "ui",
              event.target.value
            );
          }
        }
      ) })
    ] }),
    /* @__PURE__ */ jsxs44("div", { className: "ImageExportModal__settings", children: [
      /* @__PURE__ */ jsx81("h3", { children: t("imageExportDialog.header") }),
      hasSelection && /* @__PURE__ */ jsx81(
        ExportSetting,
        {
          label: t("imageExportDialog.label.onlySelected"),
          name: "exportOnlySelected",
          children: /* @__PURE__ */ jsx81(
            Switch,
            {
              name: "exportOnlySelected",
              checked: exportSelectionOnly,
              onChange: (checked) => {
                setExportSelectionOnly(checked);
              }
            }
          )
        }
      ),
      /* @__PURE__ */ jsx81(
        ExportSetting,
        {
          label: t("imageExportDialog.label.withBackground"),
          name: "exportBackgroundSwitch",
          children: /* @__PURE__ */ jsx81(
            Switch,
            {
              name: "exportBackgroundSwitch",
              checked: exportWithBackground,
              onChange: (checked) => {
                setExportWithBackground(checked);
                actionManager.executeAction(
                  actionChangeExportBackground,
                  "ui",
                  checked
                );
              }
            }
          )
        }
      ),
      supportsContextFilters && /* @__PURE__ */ jsx81(
        ExportSetting,
        {
          label: t("imageExportDialog.label.darkMode"),
          name: "exportDarkModeSwitch",
          children: /* @__PURE__ */ jsx81(
            Switch,
            {
              name: "exportDarkModeSwitch",
              checked: exportDarkMode,
              onChange: (checked) => {
                setExportDarkMode(checked);
                actionManager.executeAction(
                  actionExportWithDarkMode,
                  "ui",
                  checked
                );
              }
            }
          )
        }
      ),
      /* @__PURE__ */ jsx81(
        ExportSetting,
        {
          label: t("imageExportDialog.label.embedScene"),
          tooltip: t("imageExportDialog.tooltip.embedScene"),
          name: "exportEmbedSwitch",
          children: /* @__PURE__ */ jsx81(
            Switch,
            {
              name: "exportEmbedSwitch",
              checked: embedScene,
              onChange: (checked) => {
                setEmbedScene(checked);
                actionManager.executeAction(
                  actionChangeExportEmbedScene,
                  "ui",
                  checked
                );
              }
            }
          )
        }
      ),
      /* @__PURE__ */ jsx81(
        ExportSetting,
        {
          label: t("imageExportDialog.label.scale"),
          name: "exportScale",
          children: /* @__PURE__ */ jsx81(
            RadioGroup,
            {
              name: "exportScale",
              value: exportScale,
              onChange: (scale) => {
                setExportScale(scale);
                actionManager.executeAction(actionChangeExportScale, "ui", scale);
              },
              choices: EXPORT_SCALES.map((scale) => ({
                value: scale,
                label: `${scale}\xD7`
              }))
            }
          )
        }
      ),
      /* @__PURE__ */ jsxs44("div", { className: "ImageExportModal__settings__buttons", children: [
        /* @__PURE__ */ jsx81(
          FilledButton,
          {
            className: "ImageExportModal__settings__buttons__button",
            label: t("imageExportDialog.title.exportToPng"),
            onClick: () => onExportImage(EXPORT_IMAGE_TYPES.png, exportedElements, {
              exportingFrame
            }),
            icon: downloadIcon,
            children: t("imageExportDialog.button.exportToPng")
          }
        ),
        /* @__PURE__ */ jsx81(
          FilledButton,
          {
            className: "ImageExportModal__settings__buttons__button",
            label: t("imageExportDialog.title.exportToSvg"),
            onClick: () => onExportImage(EXPORT_IMAGE_TYPES.svg, exportedElements, {
              exportingFrame
            }),
            icon: downloadIcon,
            children: t("imageExportDialog.button.exportToSvg")
          }
        ),
        (probablySupportsClipboardBlob || isFirefox) && /* @__PURE__ */ jsx81(
          FilledButton,
          {
            className: "ImageExportModal__settings__buttons__button",
            label: t("imageExportDialog.title.copyPngToClipboard"),
            status: copyStatus,
            onClick: async () => {
              await onExportImage(
                EXPORT_IMAGE_TYPES.clipboard,
                exportedElements,
                {
                  exportingFrame
                }
              );
              onCopy();
            },
            icon: copyIcon,
            children: t("imageExportDialog.button.copyPngToClipboard")
          }
        )
      ] })
    ] })
  ] });
};
var ExportSetting = ({
  label,
  children,
  tooltip,
  name
}) => {
  return /* @__PURE__ */ jsxs44("div", { className: "ImageExportModal__settings__setting", title: label, children: [
    /* @__PURE__ */ jsxs44(
      "label",
      {
        htmlFor: name,
        className: "ImageExportModal__settings__setting__label",
        children: [
          label,
          tooltip && /* @__PURE__ */ jsx81(Tooltip, { label: tooltip, long: true, children: helpIcon })
        ]
      }
    ),
    /* @__PURE__ */ jsx81("div", { className: "ImageExportModal__settings__setting__content", children })
  ] });
};
var ImageExportDialog = ({
  elements,
  appState,
  files,
  actionManager,
  onExportImage,
  onCloseRequest,
  name
}) => {
  const [{ appStateSnapshot, elementsSnapshot }] = useState28(() => {
    return {
      appStateSnapshot: cloneJSON(appState),
      elementsSnapshot: cloneJSON(elements)
    };
  });
  return /* @__PURE__ */ jsx81(Dialog, { onCloseRequest, size: "wide", title: false, children: /* @__PURE__ */ jsx81(
    ImageExportModal,
    {
      elementsSnapshot,
      appStateSnapshot,
      files,
      actionManager,
      onExportImage,
      name
    }
  ) });
};

// components/FixedSideContainer.tsx
init_define_import_meta_env();
import clsx38 from "clsx";
import { jsx as jsx82 } from "react/jsx-runtime";
var FixedSideContainer = ({
  children,
  side,
  className
}) => /* @__PURE__ */ jsx82(
  "div",
  {
    className: clsx38(
      "FixedSideContainer",
      `FixedSideContainer_side_${side}`,
      className
    ),
    children
  }
);

// components/HintViewer.tsx
init_define_import_meta_env();
init_typeChecks();
init_utils2();
init_appState();

// element/flowchart.ts
init_define_import_meta_env();
init_heading();
init_binding();
init_linearElementEditor();
init_newElement();
init_keys();
init_mutateElement();
init_frame();
init_typeChecks();
init_utils2();
init_math();
init_shapes();
var VERTICAL_OFFSET = 100;
var HORIZONTAL_OFFSET = 100;
var getLinkDirectionFromKey = (key) => {
  switch (key) {
    case KEYS.ARROW_UP:
      return "up";
    case KEYS.ARROW_DOWN:
      return "down";
    case KEYS.ARROW_RIGHT:
      return "right";
    case KEYS.ARROW_LEFT:
      return "left";
    default:
      return "right";
  }
};
var getNodeRelatives = (type, node, elementsMap, direction) => {
  const items = [...elementsMap.values()].reduce(
    (acc, el) => {
      let oppositeBinding;
      if (isElbowArrow(el) && // we want check existence of the opposite binding, in the direction
      // we're interested in
      (oppositeBinding = el[type === "predecessors" ? "startBinding" : "endBinding"]) && // similarly, we need to filter only arrows bound to target node
      el[type === "predecessors" ? "endBinding" : "startBinding"]?.elementId === node.id) {
        const relative = elementsMap.get(oppositeBinding.elementId);
        if (!relative) {
          return acc;
        }
        invariant(
          isBindableElement(relative),
          "not an ExcalidrawBindableElement"
        );
        const edgePoint = type === "predecessors" ? el.points[el.points.length - 1] : [0, 0];
        const heading = headingForPointFromElement(node, aabbForElement(node), [
          edgePoint[0] + el.x,
          edgePoint[1] + el.y
        ]);
        acc.push({
          relative,
          heading
        });
      }
      return acc;
    },
    []
  );
  switch (direction) {
    case "up":
      return items.filter((item) => compareHeading(item.heading, HEADING_UP)).map((item) => item.relative);
    case "down":
      return items.filter((item) => compareHeading(item.heading, HEADING_DOWN)).map((item) => item.relative);
    case "right":
      return items.filter((item) => compareHeading(item.heading, HEADING_RIGHT)).map((item) => item.relative);
    case "left":
      return items.filter((item) => compareHeading(item.heading, HEADING_LEFT)).map((item) => item.relative);
  }
};
var getSuccessors = (node, elementsMap, direction) => {
  return getNodeRelatives("successors", node, elementsMap, direction);
};
var getPredecessors = (node, elementsMap, direction) => {
  return getNodeRelatives("predecessors", node, elementsMap, direction);
};
var getOffsets = (element, linkedNodes, direction) => {
  const _HORIZONTAL_OFFSET = HORIZONTAL_OFFSET + element.width;
  if (direction === "up" || direction === "down") {
    const _VERTICAL_OFFSET2 = VERTICAL_OFFSET + element.height;
    const minX = element.x;
    const maxX = element.x + element.width;
    if (linkedNodes.every(
      (linkedNode) => linkedNode.x + linkedNode.width < minX || linkedNode.x > maxX
    )) {
      return {
        x: 0,
        y: _VERTICAL_OFFSET2 * (direction === "up" ? -1 : 1)
      };
    }
  } else if (direction === "right" || direction === "left") {
    const minY = element.y;
    const maxY = element.y + element.height;
    if (linkedNodes.every(
      (linkedNode) => linkedNode.y + linkedNode.height < minY || linkedNode.y > maxY
    )) {
      return {
        x: (HORIZONTAL_OFFSET + element.width) * (direction === "left" ? -1 : 1),
        y: 0
      };
    }
  }
  if (direction === "up" || direction === "down") {
    const _VERTICAL_OFFSET2 = VERTICAL_OFFSET + element.height;
    const y2 = linkedNodes.length === 0 ? _VERTICAL_OFFSET2 : _VERTICAL_OFFSET2;
    const x2 = linkedNodes.length === 0 ? 0 : (linkedNodes.length + 1) % 2 === 0 ? (linkedNodes.length + 1) / 2 * _HORIZONTAL_OFFSET : linkedNodes.length / 2 * _HORIZONTAL_OFFSET * -1;
    if (direction === "up") {
      return {
        x: x2,
        y: y2 * -1
      };
    }
    return {
      x: x2,
      y: y2
    };
  }
  const _VERTICAL_OFFSET = VERTICAL_OFFSET + element.height;
  const x = (linkedNodes.length === 0 ? HORIZONTAL_OFFSET : HORIZONTAL_OFFSET) + element.width;
  const y = linkedNodes.length === 0 ? 0 : (linkedNodes.length + 1) % 2 === 0 ? (linkedNodes.length + 1) / 2 * _VERTICAL_OFFSET : linkedNodes.length / 2 * _VERTICAL_OFFSET * -1;
  if (direction === "left") {
    return {
      x: x * -1,
      y
    };
  }
  return {
    x,
    y
  };
};
var addNewNode = (element, elementsMap, appState, direction) => {
  const successors = getSuccessors(element, elementsMap, direction);
  const predeccessors = getPredecessors(element, elementsMap, direction);
  const offsets = getOffsets(
    element,
    [...successors, ...predeccessors],
    direction
  );
  const nextNode = newElement({
    type: element.type,
    x: element.x + offsets.x,
    y: element.y + offsets.y,
    // TODO: extract this to a util
    width: element.width,
    height: element.height,
    roundness: element.roundness,
    roughness: element.roughness,
    backgroundColor: element.backgroundColor,
    strokeColor: element.strokeColor,
    strokeWidth: element.strokeWidth
  });
  invariant(
    isFlowchartNodeElement(nextNode),
    "not an ExcalidrawFlowchartNodeElement"
  );
  const bindingArrow = createBindingArrow(
    element,
    nextNode,
    elementsMap,
    direction,
    appState
  );
  return {
    nextNode,
    bindingArrow
  };
};
var addNewNodes = (startNode, elementsMap, appState, direction, numberOfNodes) => {
  const newNodes = [];
  for (let i = 0; i < numberOfNodes; i++) {
    let nextX;
    let nextY;
    if (direction === "left" || direction === "right") {
      const totalHeight = VERTICAL_OFFSET * (numberOfNodes - 1) + numberOfNodes * startNode.height;
      const startY = startNode.y + startNode.height / 2 - totalHeight / 2;
      let offsetX = HORIZONTAL_OFFSET + startNode.width;
      if (direction === "left") {
        offsetX *= -1;
      }
      nextX = startNode.x + offsetX;
      const offsetY = (VERTICAL_OFFSET + startNode.height) * i;
      nextY = startY + offsetY;
    } else {
      const totalWidth = HORIZONTAL_OFFSET * (numberOfNodes - 1) + numberOfNodes * startNode.width;
      const startX = startNode.x + startNode.width / 2 - totalWidth / 2;
      let offsetY = VERTICAL_OFFSET + startNode.height;
      if (direction === "up") {
        offsetY *= -1;
      }
      nextY = startNode.y + offsetY;
      const offsetX = (HORIZONTAL_OFFSET + startNode.width) * i;
      nextX = startX + offsetX;
    }
    const nextNode = newElement({
      type: startNode.type,
      x: nextX,
      y: nextY,
      // TODO: extract this to a util
      width: startNode.width,
      height: startNode.height,
      roundness: startNode.roundness,
      roughness: startNode.roughness,
      backgroundColor: startNode.backgroundColor,
      strokeColor: startNode.strokeColor,
      strokeWidth: startNode.strokeWidth
    });
    invariant(
      isFlowchartNodeElement(nextNode),
      "not an ExcalidrawFlowchartNodeElement"
    );
    const bindingArrow = createBindingArrow(
      startNode,
      nextNode,
      elementsMap,
      direction,
      appState
    );
    newNodes.push(nextNode);
    newNodes.push(bindingArrow);
  }
  return newNodes;
};
var createBindingArrow = (startBindingElement, endBindingElement, elementsMap, direction, appState) => {
  let startX;
  let startY;
  const PADDING = 6;
  switch (direction) {
    case "up": {
      startX = startBindingElement.x + startBindingElement.width / 2;
      startY = startBindingElement.y - PADDING;
      break;
    }
    case "down": {
      startX = startBindingElement.x + startBindingElement.width / 2;
      startY = startBindingElement.y + startBindingElement.height + PADDING;
      break;
    }
    case "right": {
      startX = startBindingElement.x + startBindingElement.width + PADDING;
      startY = startBindingElement.y + startBindingElement.height / 2;
      break;
    }
    case "left": {
      startX = startBindingElement.x - PADDING;
      startY = startBindingElement.y + startBindingElement.height / 2;
      break;
    }
  }
  let endX;
  let endY;
  switch (direction) {
    case "up": {
      endX = endBindingElement.x + endBindingElement.width / 2 - startX;
      endY = endBindingElement.y + endBindingElement.height - startY + PADDING;
      break;
    }
    case "down": {
      endX = endBindingElement.x + endBindingElement.width / 2 - startX;
      endY = endBindingElement.y - startY - PADDING;
      break;
    }
    case "right": {
      endX = endBindingElement.x - startX - PADDING;
      endY = endBindingElement.y - startY + endBindingElement.height / 2;
      break;
    }
    case "left": {
      endX = endBindingElement.x + endBindingElement.width - startX + PADDING;
      endY = endBindingElement.y - startY + endBindingElement.height / 2;
      break;
    }
  }
  const bindingArrow = newArrowElement({
    type: "arrow",
    x: startX,
    y: startY,
    startArrowhead: appState.currentItemStartArrowhead,
    endArrowhead: appState.currentItemEndArrowhead,
    strokeColor: appState.currentItemStrokeColor,
    strokeStyle: appState.currentItemStrokeStyle,
    strokeWidth: appState.currentItemStrokeWidth,
    points: [pointFrom(0, 0), pointFrom(endX, endY)],
    elbowed: true
  });
  bindLinearElement(
    bindingArrow,
    startBindingElement,
    "start",
    elementsMap
  );
  bindLinearElement(
    bindingArrow,
    endBindingElement,
    "end",
    elementsMap
  );
  const changedElements = /* @__PURE__ */ new Map();
  changedElements.set(
    startBindingElement.id,
    startBindingElement
  );
  changedElements.set(
    endBindingElement.id,
    endBindingElement
  );
  changedElements.set(
    bindingArrow.id,
    bindingArrow
  );
  LinearElementEditor.movePoints(
    bindingArrow,
    [
      {
        index: 1,
        point: bindingArrow.points[1]
      }
    ],
    elementsMap,
    void 0,
    {
      changedElements
    }
  );
  return bindingArrow;
};
var FlowChartNavigator = class {
  isExploring = false;
  // nodes that are ONE link away (successor and predecessor both included)
  sameLevelNodes = [];
  sameLevelIndex = 0;
  // set it to the opposite of the defalut creation direction
  direction = null;
  // for speedier navigation
  visitedNodes = /* @__PURE__ */ new Set();
  clear() {
    this.isExploring = false;
    this.sameLevelNodes = [];
    this.sameLevelIndex = 0;
    this.direction = null;
    this.visitedNodes.clear();
  }
  exploreByDirection(element, elementsMap, direction) {
    if (!isBindableElement(element)) {
      return null;
    }
    if (direction !== this.direction) {
      this.clear();
    }
    if (!this.visitedNodes.has(element.id)) {
      this.visitedNodes.add(element.id);
    }
    if (this.isExploring && direction === this.direction && this.sameLevelNodes.length > 1) {
      this.sameLevelIndex = (this.sameLevelIndex + 1) % this.sameLevelNodes.length;
      return this.sameLevelNodes[this.sameLevelIndex].id;
    }
    const nodes = [
      ...getSuccessors(element, elementsMap, direction),
      ...getPredecessors(element, elementsMap, direction)
    ];
    if (nodes.length > 0) {
      this.sameLevelIndex = 0;
      this.isExploring = true;
      this.sameLevelNodes = nodes;
      this.direction = direction;
      this.visitedNodes.add(nodes[0].id);
      return nodes[0].id;
    }
    if (direction === this.direction || !this.isExploring) {
      if (!this.isExploring) {
        this.visitedNodes.add(element.id);
      }
      const otherDirections = [
        "up",
        "right",
        "down",
        "left"
      ].filter((dir) => dir !== direction);
      const otherLinkedNodes = otherDirections.map((dir) => [
        ...getSuccessors(element, elementsMap, dir),
        ...getPredecessors(element, elementsMap, dir)
      ]).flat().filter((linkedNode) => !this.visitedNodes.has(linkedNode.id));
      for (const linkedNode of otherLinkedNodes) {
        if (!this.visitedNodes.has(linkedNode.id)) {
          this.visitedNodes.add(linkedNode.id);
          this.isExploring = true;
          this.direction = direction;
          return linkedNode.id;
        }
      }
    }
    return null;
  }
};
var FlowChartCreator = class {
  isCreatingChart = false;
  numberOfNodes = 0;
  direction = "right";
  pendingNodes = null;
  createNodes(startNode, elementsMap, appState, direction) {
    if (direction !== this.direction) {
      const { nextNode, bindingArrow } = addNewNode(
        startNode,
        elementsMap,
        appState,
        direction
      );
      this.numberOfNodes = 1;
      this.isCreatingChart = true;
      this.direction = direction;
      this.pendingNodes = [nextNode, bindingArrow];
    } else {
      this.numberOfNodes += 1;
      const newNodes = addNewNodes(
        startNode,
        elementsMap,
        appState,
        direction,
        this.numberOfNodes
      );
      this.isCreatingChart = true;
      this.direction = direction;
      this.pendingNodes = newNodes;
    }
    if (startNode.frameId) {
      const frame = elementsMap.get(startNode.frameId);
      invariant(
        frame && isFrameElement(frame),
        "not an ExcalidrawFrameElement"
      );
      if (frame && this.pendingNodes.every(
        (node) => elementsAreInFrameBounds([node], frame, elementsMap) || elementOverlapsWithFrame(node, frame, elementsMap)
      )) {
        this.pendingNodes = this.pendingNodes.map(
          (node) => mutateElement(
            node,
            {
              frameId: startNode.frameId
            },
            false
          )
        );
      }
    }
  }
  clear() {
    this.isCreatingChart = false;
    this.pendingNodes = null;
    this.direction = null;
    this.numberOfNodes = 0;
  }
};
var isNodeInFlowchart = (element, elementsMap) => {
  for (const [, el] of elementsMap) {
    if (el.type === "arrow" && (el.startBinding?.elementId === element.id || el.endBinding?.elementId === element.id)) {
      return true;
    }
  }
  return false;
};

// components/HintViewer.tsx
init_snapping();
init_constants();
import { jsx as jsx83 } from "react/jsx-runtime";
var getHints = ({
  appState,
  isMobile,
  device,
  app
}) => {
  const { activeTool, isResizing, isRotating, lastPointerDownWith } = appState;
  const multiMode = appState.multiElement !== null;
  if (appState.openSidebar?.name === DEFAULT_SIDEBAR.name && appState.openSidebar.tab === CANVAS_SEARCH_TAB && appState.searchMatches?.length) {
    return t("hints.dismissSearch");
  }
  if (appState.openSidebar && !device.editor.canFitSidebar) {
    return null;
  }
  if (isEraserActive(appState)) {
    return t("hints.eraserRevert");
  }
  if (activeTool.type === "arrow" || activeTool.type === "line") {
    if (multiMode) {
      return t("hints.linearElementMulti");
    }
    if (activeTool.type === "arrow") {
      return t("hints.arrowTool", { arrowShortcut: getShortcutKey("A") });
    }
    return t("hints.linearElement");
  }
  if (activeTool.type === "freedraw") {
    return t("hints.freeDraw");
  }
  if (activeTool.type === "text") {
    return t("hints.text");
  }
  if (activeTool.type === "embeddable") {
    return t("hints.embeddable");
  }
  if (appState.activeTool.type === "image" && appState.pendingImageElementId) {
    return t("hints.placeImage");
  }
  const selectedElements = app.scene.getSelectedElements(appState);
  if (isResizing && lastPointerDownWith === "mouse" && selectedElements.length === 1) {
    const targetElement = selectedElements[0];
    if (isLinearElement(targetElement) && targetElement.points.length === 2) {
      return t("hints.lockAngle");
    }
    return isImageElement(targetElement) ? t("hints.resizeImage") : t("hints.resize");
  }
  if (isRotating && lastPointerDownWith === "mouse") {
    return t("hints.rotate");
  }
  if (selectedElements.length === 1 && isTextElement(selectedElements[0])) {
    return t("hints.text_selected");
  }
  if (appState.editingTextElement) {
    return t("hints.text_editing");
  }
  if (activeTool.type === "selection") {
    if (appState.selectionElement && !selectedElements.length && !appState.editingTextElement && !appState.editingLinearElement) {
      if (isGridModeEnabled(app) && appState.selectedElementsAreBeingDragged) {
        return t("hints.disableSnapping");
      }
    }
    if (selectedElements.length === 1) {
      if (isLinearElement(selectedElements[0])) {
        if (appState.editingLinearElement) {
          return appState.editingLinearElement.selectedPointsIndices ? t("hints.lineEditor_pointSelected") : t("hints.lineEditor_nothingSelected");
        }
        return t("hints.lineEditor_info");
      }
      if (!appState.newElement && !appState.selectedElementsAreBeingDragged && isTextBindableContainer(selectedElements[0])) {
        if (isFlowchartNodeElement(selectedElements[0])) {
          if (isNodeInFlowchart(
            selectedElements[0],
            app.scene.getNonDeletedElementsMap()
          )) {
            return [t("hints.bindTextToElement"), t("hints.createFlowchart")];
          }
          return [t("hints.bindTextToElement"), t("hints.createFlowchart")];
        }
        return t("hints.bindTextToElement");
      }
    }
  }
  return null;
};
var HintViewer = ({
  appState,
  isMobile,
  device,
  app
}) => {
  const hints = getHints({
    appState,
    isMobile,
    device,
    app
  });
  if (!hints) {
    return null;
  }
  const hint = Array.isArray(hints) ? hints.map((hint2) => {
    return getShortcutKey(hint2).replace(/\. ?$/, "");
  }).join(". ") : getShortcutKey(hints);
  return /* @__PURE__ */ jsx83("div", { className: "HintViewer", children: /* @__PURE__ */ jsx83("span", { children: hint }) });
};

// components/LockButton.tsx
init_define_import_meta_env();
init_icons();
import clsx39 from "clsx";
import { jsx as jsx84, jsxs as jsxs45 } from "react/jsx-runtime";
var DEFAULT_SIZE = "medium";
var ICONS2 = {
  CHECKED: LockedIcon,
  UNCHECKED: UnlockedIcon
};
var LockButton = (props) => {
  return /* @__PURE__ */ jsxs45(
    "label",
    {
      className: clsx39(
        "ToolIcon ToolIcon__lock",
        `ToolIcon_size_${DEFAULT_SIZE}`,
        {
          "is-mobile": props.isMobile
        }
      ),
      title: `${props.title} \u2014 Q`,
      children: [
        /* @__PURE__ */ jsx84(
          "input",
          {
            className: "ToolIcon_type_checkbox",
            type: "checkbox",
            name: props.name,
            onChange: props.onChange,
            checked: props.checked,
            "aria-label": props.title,
            "data-testid": "toolbar-lock"
          }
        ),
        /* @__PURE__ */ jsx84("div", { className: "ToolIcon__icon", children: props.checked ? ICONS2.CHECKED : ICONS2.UNCHECKED })
      ]
    }
  );
};

// components/MobileMenu.tsx
init_define_import_meta_env();
init_element();
init_scene();

// components/Section.tsx
init_define_import_meta_env();
import { Fragment as Fragment12, jsx as jsx85, jsxs as jsxs46 } from "react/jsx-runtime";
var Section = ({ heading, children, ...props }) => {
  const { id } = useExcalidrawContainer();
  const header = /* @__PURE__ */ jsx85("h2", { className: "visually-hidden", id: `${id}-${heading}-title`, children: t(`headings.${heading}`) });
  return /* @__PURE__ */ jsx85("section", { ...props, "aria-labelledby": `${id}-${heading}-title`, style: { marginTop: 80 }, children: typeof children === "function" ? children(header) : /* @__PURE__ */ jsxs46(Fragment12, { children: [
    header,
    children
  ] }) });
};

// scene/scrollbars.ts
init_define_import_meta_env();
init_element();
init_utils2();
var SCROLLBAR_MARGIN = 4;
var SCROLLBAR_WIDTH = 6;
var SCROLLBAR_COLOR = "rgba(0,0,0,0.3)";
var getScrollBars = (elements, viewportWidth, viewportHeight, appState) => {
  if (!elements.length) {
    return {
      horizontal: null,
      vertical: null
    };
  }
  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] = getCommonBounds(elements);
  const viewportWidthWithZoom = viewportWidth / appState.zoom.value;
  const viewportHeightWithZoom = viewportHeight / appState.zoom.value;
  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;
  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;
  const safeArea = {
    top: parseInt(getGlobalCSSVariable("sat")) || 0,
    bottom: parseInt(getGlobalCSSVariable("sab")) || 0,
    left: parseInt(getGlobalCSSVariable("sal")) || 0,
    right: parseInt(getGlobalCSSVariable("sar")) || 0
  };
  const isRTL2 = getLanguage().rtl;
  const viewportMinX = -appState.scrollX + viewportWidthDiff / 2 + safeArea.left;
  const viewportMinY = -appState.scrollY + viewportHeightDiff / 2 + safeArea.top;
  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;
  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;
  const sceneMinX = Math.min(elementsMinX, viewportMinX);
  const sceneMinY = Math.min(elementsMinY, viewportMinY);
  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);
  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);
  return {
    horizontal: viewportMinX === sceneMinX && viewportMaxX === sceneMaxX ? null : {
      x: Math.max(safeArea.left, SCROLLBAR_MARGIN) + (viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX) * viewportWidth,
      y: viewportHeight - SCROLLBAR_WIDTH - Math.max(SCROLLBAR_MARGIN, safeArea.bottom),
      width: (viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX) * viewportWidth - Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),
      height: SCROLLBAR_WIDTH
    },
    vertical: viewportMinY === sceneMinY && viewportMaxY === sceneMaxY ? null : {
      x: isRTL2 ? Math.max(safeArea.left, SCROLLBAR_MARGIN) : viewportWidth - SCROLLBAR_WIDTH - Math.max(safeArea.right, SCROLLBAR_MARGIN),
      y: (viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY) * viewportHeight + Math.max(safeArea.top, SCROLLBAR_MARGIN),
      width: SCROLLBAR_WIDTH,
      height: (viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY) * viewportHeight - Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom)
    }
  };
};
var isOverScrollBars = (scrollBars, x, y) => {
  const [isOverHorizontal, isOverVertical] = [
    scrollBars.horizontal,
    scrollBars.vertical
  ].map((scrollBar) => {
    return scrollBar != null && scrollBar.x <= x && x <= scrollBar.x + scrollBar.width && scrollBar.y <= y && y <= scrollBar.y + scrollBar.height;
  });
  const isOverEither = isOverHorizontal || isOverVertical;
  return { isOverEither, isOverHorizontal, isOverVertical };
};

// components/PenModeButton.tsx
init_define_import_meta_env();
init_icons();
import clsx40 from "clsx";
import { jsx as jsx86, jsxs as jsxs47 } from "react/jsx-runtime";
var DEFAULT_SIZE2 = "medium";
var PenModeButton = (props) => {
  if (!props.penDetected) {
    return null;
  }
  return /* @__PURE__ */ jsxs47(
    "label",
    {
      className: clsx40(
        "ToolIcon ToolIcon__penMode",
        `ToolIcon_size_${DEFAULT_SIZE2}`,
        {
          "is-mobile": props.isMobile
        }
      ),
      title: `${props.title}`,
      children: [
        /* @__PURE__ */ jsx86(
          "input",
          {
            className: "ToolIcon_type_checkbox",
            type: "checkbox",
            name: props.name,
            onChange: props.onChange,
            checked: props.checked,
            "aria-label": props.title
          }
        ),
        /* @__PURE__ */ jsx86("div", { className: "ToolIcon__icon", children: PenModeIcon })
      ]
    }
  );
};

// components/HandButton.tsx
init_define_import_meta_env();
import clsx41 from "clsx";
init_icons();
init_keys();
import { jsx as jsx87 } from "react/jsx-runtime";
var HandButton = (props) => {
  return /* @__PURE__ */ jsx87(
    ToolButton,
    {
      className: clsx41("Shape", { fillable: false }),
      type: "radio",
      icon: handIcon,
      name: "editor-current-shape",
      checked: props.checked,
      title: `${props.title} \u2014 H`,
      keyBindingLabel: !props.isMobile ? KEYS.H.toLocaleUpperCase() : void 0,
      "aria-label": `${props.title} \u2014 H`,
      "aria-keyshortcuts": KEYS.H,
      "data-testid": `toolbar-hand`,
      onChange: () => props.onChange?.()
    }
  );
};

// components/MobileMenu.tsx
init_appState();
import { Fragment as Fragment13, jsx as jsx88, jsxs as jsxs48 } from "react/jsx-runtime";
var MobileMenu = ({
  appState,
  elements,
  actionManager,
  setAppState,
  onLockToggle,
  onHandToolToggle,
  onPenModeToggle,
  renderTopRightUI,
  renderCustomStats,
  renderSidebars,
  device,
  renderWelcomeScreen,
  UIOptions,
  app
}) => {
  const {
    WelcomeScreenCenterTunnel,
    MainMenuTunnel,
    DefaultSidebarTriggerTunnel
  } = useTunnels();
  const renderToolbar = () => {
    return /* @__PURE__ */ jsxs48(FixedSideContainer, { side: "top", className: "App-top-bar", children: [
      renderWelcomeScreen && /* @__PURE__ */ jsx88(WelcomeScreenCenterTunnel.Out, {}),
      /* @__PURE__ */ jsx88(Section, { heading: "shapes", children: (heading) => /* @__PURE__ */ jsx88(Stack_default.Col, { gap: 4, align: "center", children: /* @__PURE__ */ jsxs48(Stack_default.Row, { gap: 1, className: "App-toolbar-container", children: [
        /* @__PURE__ */ jsxs48(Island, { padding: 1, className: "App-toolbar App-toolbar--mobile", children: [
          heading,
          /* @__PURE__ */ jsx88(Stack_default.Row, { gap: 1, children: /* @__PURE__ */ jsx88(
            ShapesSwitcher,
            {
              appState,
              activeTool: appState.activeTool,
              UIOptions,
              app
            }
          ) })
        ] }),
        renderTopRightUI && renderTopRightUI(true, appState),
        /* @__PURE__ */ jsxs48("div", { className: "mobile-misc-tools-container", children: [
          !appState.viewModeEnabled && /* @__PURE__ */ jsx88(DefaultSidebarTriggerTunnel.Out, {}),
          /* @__PURE__ */ jsx88(
            PenModeButton,
            {
              checked: appState.penMode,
              onChange: () => onPenModeToggle(null),
              title: t("toolBar.penMode"),
              isMobile: true,
              penDetected: appState.penDetected
            }
          ),
          /* @__PURE__ */ jsx88(
            LockButton,
            {
              checked: appState.activeTool.locked,
              onChange: onLockToggle,
              title: t("toolBar.lock"),
              isMobile: true
            }
          ),
          /* @__PURE__ */ jsx88(
            HandButton,
            {
              checked: isHandToolActive(appState),
              onChange: () => onHandToolToggle(),
              title: t("toolBar.hand"),
              isMobile: true
            }
          )
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsx88(
        HintViewer,
        {
          appState,
          isMobile: true,
          device,
          app
        }
      )
    ] });
  };
  const renderAppToolbar = () => {
    if (appState.viewModeEnabled) {
      return /* @__PURE__ */ jsx88("div", { className: "App-toolbar-content", children: /* @__PURE__ */ jsx88(MainMenuTunnel.Out, {}) });
    }
    return /* @__PURE__ */ jsxs48("div", { className: "App-toolbar-content", children: [
      /* @__PURE__ */ jsx88(MainMenuTunnel.Out, {}),
      actionManager.renderAction("toggleEditMenu"),
      actionManager.renderAction("undo"),
      actionManager.renderAction("redo"),
      actionManager.renderAction(
        appState.multiElement ? "finalize" : "duplicateSelection"
      ),
      actionManager.renderAction("deleteSelectedElements")
    ] });
  };
  return /* @__PURE__ */ jsxs48(Fragment13, { children: [
    renderSidebars(),
    !appState.viewModeEnabled && renderToolbar(),
    /* @__PURE__ */ jsx88(
      "div",
      {
        className: "App-bottom-bar",
        style: {
          marginBottom: SCROLLBAR_WIDTH + SCROLLBAR_MARGIN * 2,
          marginLeft: SCROLLBAR_WIDTH + SCROLLBAR_MARGIN * 2,
          marginRight: SCROLLBAR_WIDTH + SCROLLBAR_MARGIN * 2
        },
        children: /* @__PURE__ */ jsxs48(Island, { padding: 0, children: [
          appState.openMenu === "shape" && !appState.viewModeEnabled && showSelectedShapeActions(appState, elements) ? /* @__PURE__ */ jsx88(Section, { className: "App-mobile-menu", heading: "selectedShapeActions", children: /* @__PURE__ */ jsx88(
            SelectedShapeActions,
            {
              appState,
              elementsMap: app.scene.getNonDeletedElementsMap(),
              renderAction: actionManager.renderAction
            }
          ) }) : null,
          /* @__PURE__ */ jsxs48("footer", { className: "App-toolbar", children: [
            renderAppToolbar(),
            appState.scrolledOutside && !appState.openMenu && !appState.openSidebar && /* @__PURE__ */ jsx88(
              "button",
              {
                type: "button",
                className: "scroll-back-to-content",
                onClick: () => {
                  setAppState((appState2) => ({
                    ...calculateScrollCenter(elements, appState2)
                  }));
                },
                children: t("buttons.scrollBackToContent")
              }
            )
          ] })
        ] })
      }
    )
  ] });
};

// components/PasteChartDialog.tsx
init_define_import_meta_env();
import oc3 from "open-color";
import React33, { useLayoutEffect as useLayoutEffect6, useRef as useRef26, useState as useState29 } from "react";
init_charts();
init_export();
import { jsx as jsx89, jsxs as jsxs49 } from "react/jsx-runtime";
var ChartPreviewBtn = (props) => {
  const previewRef = useRef26(null);
  const [chartElements, setChartElements] = useState29(
    null
  );
  useLayoutEffect6(() => {
    if (!props.spreadsheet) {
      return;
    }
    const elements = renderSpreadsheet(
      props.chartType,
      props.spreadsheet,
      0,
      0
    );
    setChartElements(elements);
    let svg;
    const previewNode = previewRef.current;
    (async () => {
      svg = await exportToSvg(
        elements,
        {
          exportBackground: false,
          viewBackgroundColor: oc3.white
        },
        null
        // files
      );
      svg.querySelector(".style-fonts")?.remove();
      previewNode.replaceChildren();
      previewNode.appendChild(svg);
      if (props.selected) {
        previewNode.parentNode.focus();
      }
    })();
    return () => {
      previewNode.replaceChildren();
    };
  }, [props.spreadsheet, props.chartType, props.selected]);
  return /* @__PURE__ */ jsx89(
    "button",
    {
      type: "button",
      className: "ChartPreview",
      onClick: () => {
        if (chartElements) {
          props.onClick(props.chartType, chartElements);
        }
      },
      children: /* @__PURE__ */ jsx89("div", { ref: previewRef })
    }
  );
};
var PasteChartDialog = ({
  setAppState,
  appState,
  onClose
}) => {
  const { onInsertElements } = useApp();
  const handleClose = React33.useCallback(() => {
    if (onClose) {
      onClose();
    }
  }, [onClose]);
  const handleChartClick = (chartType, elements) => {
    onInsertElements(elements);
    trackEvent("paste", "chart", chartType);
    setAppState({
      currentChartType: chartType,
      pasteDialog: {
        shown: false,
        data: null
      }
    });
  };
  return /* @__PURE__ */ jsx89(
    Dialog,
    {
      size: "small",
      onCloseRequest: handleClose,
      title: t("labels.pasteCharts"),
      className: "PasteChartDialog",
      autofocus: false,
      children: /* @__PURE__ */ jsxs49("div", { className: "container", children: [
        /* @__PURE__ */ jsx89(
          ChartPreviewBtn,
          {
            chartType: "bar",
            spreadsheet: appState.pasteDialog.data,
            selected: appState.currentChartType === "bar",
            onClick: handleChartClick
          }
        ),
        /* @__PURE__ */ jsx89(
          ChartPreviewBtn,
          {
            chartType: "line",
            spreadsheet: appState.pasteDialog.data,
            selected: appState.currentChartType === "line",
            onClick: handleChartClick
          }
        )
      ] })
    }
  );
};

// components/HelpDialog.tsx
init_define_import_meta_env();
import React34 from "react";
init_keys();
init_utils2();
init_clipboard();
init_constants();
import { Fragment as Fragment14, jsx as jsx90, jsxs as jsxs50 } from "react/jsx-runtime";
var Section2 = (props) => /* @__PURE__ */ jsxs50(Fragment14, { children: [
  /* @__PURE__ */ jsx90("h3", { children: props.title }),
  /* @__PURE__ */ jsx90("div", { className: "HelpDialog__islands-container", children: props.children })
] });
var ShortcutIsland = (props) => /* @__PURE__ */ jsxs50("div", { className: `HelpDialog__island ${props.className}`, children: [
  /* @__PURE__ */ jsx90("h4", { className: "HelpDialog__island-title", children: props.caption }),
  /* @__PURE__ */ jsx90("div", { className: "HelpDialog__island-content", children: props.children })
] });
function* intersperse(as, delim) {
  let first = true;
  for (const x of as) {
    if (!first) {
      yield delim;
    }
    first = false;
    yield x;
  }
}
var upperCaseSingleChars = (str) => {
  return str.replace(/\b[a-z]\b/, (c) => c.toUpperCase());
};
var Shortcut = ({
  label,
  shortcuts,
  isOr = true
}) => {
  const splitShortcutKeys = shortcuts.map((shortcut) => {
    const keys = shortcut.endsWith("++") ? [...shortcut.slice(0, -2).split("+"), "+"] : shortcut.split("+");
    return keys.map((key) => /* @__PURE__ */ jsx90(ShortcutKey, { children: upperCaseSingleChars(key) }, key));
  });
  return /* @__PURE__ */ jsxs50("div", { className: "HelpDialog__shortcut", children: [
    /* @__PURE__ */ jsx90("div", { children: label }),
    /* @__PURE__ */ jsx90("div", { className: "HelpDialog__key-container", children: [...intersperse(splitShortcutKeys, isOr ? t("helpDialog.or") : null)] })
  ] });
};
var ShortcutKey = (props) => /* @__PURE__ */ jsx90("kbd", { className: "HelpDialog__key", ...props });
var HelpDialog = ({ onClose }) => {
  const handleClose = React34.useCallback(() => {
    if (onClose) {
      onClose();
    }
  }, [onClose]);
  return /* @__PURE__ */ jsx90(Fragment14, { children: /* @__PURE__ */ jsx90(
    Dialog,
    {
      onCloseRequest: handleClose,
      title: t("helpDialog.title"),
      className: "HelpDialog",
      children: /* @__PURE__ */ jsxs50(Section2, { title: t("helpDialog.shortcuts"), children: [
        /* @__PURE__ */ jsxs50(
          ShortcutIsland,
          {
            className: "HelpDialog__island--tools",
            caption: t("helpDialog.tools"),
            children: [
              /* @__PURE__ */ jsx90(Shortcut, { label: t("toolBar.hand"), shortcuts: [KEYS.H] }),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.selection"),
                  shortcuts: [KEYS.V, KEYS["1"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.rectangle"),
                  shortcuts: [KEYS.R, KEYS["2"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.diamond"),
                  shortcuts: [KEYS.D, KEYS["3"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.ellipse"),
                  shortcuts: [KEYS.O, KEYS["4"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.arrow"),
                  shortcuts: [KEYS.A, KEYS["5"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.line"),
                  shortcuts: [KEYS.L, KEYS["6"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.freedraw"),
                  shortcuts: [KEYS.P, KEYS["7"]]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.text"),
                  shortcuts: [KEYS.T, KEYS["8"]]
                }
              ),
              /* @__PURE__ */ jsx90(Shortcut, { label: t("toolBar.image"), shortcuts: [KEYS["9"]] }),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.eraser"),
                  shortcuts: [KEYS.E, KEYS["0"]]
                }
              ),
              /* @__PURE__ */ jsx90(Shortcut, { label: t("toolBar.frame"), shortcuts: [KEYS.F] }),
              /* @__PURE__ */ jsx90(Shortcut, { label: t("toolBar.laser"), shortcuts: [KEYS.K] }),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.eyeDropper"),
                  shortcuts: [KEYS.I, "Shift+S", "Shift+G"]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.editLineArrowPoints"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Enter")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.editText"),
                  shortcuts: [getShortcutKey("Enter")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.textNewLine"),
                  shortcuts: [
                    getShortcutKey("Enter"),
                    getShortcutKey("Shift+Enter")
                  ]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.textFinish"),
                  shortcuts: [
                    getShortcutKey("Esc"),
                    getShortcutKey("CtrlOrCmd+Enter")
                  ]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.curvedArrow"),
                  shortcuts: [
                    "A",
                    t("helpDialog.click"),
                    t("helpDialog.click"),
                    t("helpDialog.click")
                  ],
                  isOr: false
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.curvedLine"),
                  shortcuts: [
                    "L",
                    t("helpDialog.click"),
                    t("helpDialog.click"),
                    t("helpDialog.click")
                  ],
                  isOr: false
                }
              ),
              /* @__PURE__ */ jsx90(Shortcut, { label: t("toolBar.lock"), shortcuts: [KEYS.Q] }),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.preventBinding"),
                  shortcuts: [getShortcutKey("CtrlOrCmd")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("toolBar.link"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+K")]
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxs50(
          ShortcutIsland,
          {
            className: "HelpDialog__island--view",
            caption: t("helpDialog.view"),
            children: [
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.zoomIn"),
                  shortcuts: [getShortcutKey("CtrlOrCmd++")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.zoomOut"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+-")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.resetZoom"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+0")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.zoomToFit"),
                  shortcuts: ["Shift+1"]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.zoomToSelection"),
                  shortcuts: ["Shift+2"]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.movePageUpDown"),
                  shortcuts: ["PgUp/PgDn"]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.movePageLeftRight"),
                  shortcuts: ["Shift+PgUp/PgDn"]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.zenMode"),
                  shortcuts: [getShortcutKey("Alt+Z")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.objectsSnapMode"),
                  shortcuts: [getShortcutKey("Alt+S")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.toggleGrid"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+'")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.viewMode"),
                  shortcuts: [getShortcutKey("Alt+R")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.toggleTheme"),
                  shortcuts: [getShortcutKey("Alt+Shift+D")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("stats.fullTitle"),
                  shortcuts: [getShortcutKey("Alt+/")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("search.title"),
                  shortcuts: [getShortcutFromShortcutName("searchMenu")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("commandPalette.title"),
                  shortcuts: isFirefox ? [getShortcutFromShortcutName("commandPalette")] : [
                    getShortcutFromShortcutName("commandPalette"),
                    getShortcutFromShortcutName("commandPalette", 1)
                  ]
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxs50(
          ShortcutIsland,
          {
            className: "HelpDialog__island--editor",
            caption: t("helpDialog.editor"),
            children: [
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.createFlowchart"),
                  shortcuts: [getShortcutKey(`CtrlOrCmd+Arrow Key`)],
                  isOr: true
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.navigateFlowchart"),
                  shortcuts: [getShortcutKey(`Alt+Arrow Key`)],
                  isOr: true
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.moveCanvas"),
                  shortcuts: [
                    getShortcutKey(`Space+${t("helpDialog.drag")}`),
                    getShortcutKey(`Wheel+${t("helpDialog.drag")}`)
                  ],
                  isOr: true
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.clearReset"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Delete")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.delete"),
                  shortcuts: [getShortcutKey("Delete")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.cut"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+X")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.copy"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+C")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.paste"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+V")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.pasteAsPlaintext"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+V")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.selectAll"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+A")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.multiSelect"),
                  shortcuts: [getShortcutKey(`Shift+${t("helpDialog.click")}`)]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.deepSelect"),
                  shortcuts: [getShortcutKey(`CtrlOrCmd+${t("helpDialog.click")}`)]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.deepBoxSelect"),
                  shortcuts: [getShortcutKey(`CtrlOrCmd+${t("helpDialog.drag")}`)]
                }
              ),
              (probablySupportsClipboardBlob || isFirefox) && /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.copyAsPng"),
                  shortcuts: [getShortcutKey("Shift+Alt+C")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.copyStyles"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Alt+C")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.pasteStyles"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Alt+V")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.sendToBack"),
                  shortcuts: [
                    isDarwin ? getShortcutKey("CtrlOrCmd+Alt+[") : getShortcutKey("CtrlOrCmd+Shift+[")
                  ]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.bringToFront"),
                  shortcuts: [
                    isDarwin ? getShortcutKey("CtrlOrCmd+Alt+]") : getShortcutKey("CtrlOrCmd+Shift+]")
                  ]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.sendBackward"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+[")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.bringForward"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+]")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.alignTop"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+Up")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.alignBottom"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+Down")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.alignLeft"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+Left")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.alignRight"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+Right")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.duplicateSelection"),
                  shortcuts: [
                    getShortcutKey("CtrlOrCmd+D"),
                    getShortcutKey(`Alt+${t("helpDialog.drag")}`)
                  ]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("helpDialog.toggleElementLock"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+L")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.undo"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Z")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("buttons.redo"),
                  shortcuts: isWindows ? [
                    getShortcutKey("CtrlOrCmd+Y"),
                    getShortcutKey("CtrlOrCmd+Shift+Z")
                  ] : [getShortcutKey("CtrlOrCmd+Shift+Z")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.group"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+G")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.ungroup"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+G")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.flipHorizontal"),
                  shortcuts: [getShortcutKey("Shift+H")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.flipVertical"),
                  shortcuts: [getShortcutKey("Shift+V")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.showStroke"),
                  shortcuts: [getShortcutKey("S")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.showBackground"),
                  shortcuts: [getShortcutKey("G")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.showFonts"),
                  shortcuts: [getShortcutKey("Shift+F")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.decreaseFontSize"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+<")]
                }
              ),
              /* @__PURE__ */ jsx90(
                Shortcut,
                {
                  label: t("labels.increaseFontSize"),
                  shortcuts: [getShortcutKey("CtrlOrCmd+Shift+>")]
                }
              )
            ]
          }
        )
      ] })
    }
  ) });
};

// components/UserList.tsx
init_define_import_meta_env();
import React35, { useLayoutEffect as useLayoutEffect7 } from "react";
import clsx42 from "clsx";
import * as Popover6 from "@radix-ui/react-popover";
init_utils2();
init_constants();
import { Fragment as Fragment15, jsx as jsx91, jsxs as jsxs51 } from "react/jsx-runtime";
var DEFAULT_MAX_AVATARS = 4;
var SHOW_COLLABORATORS_FILTER_AT = 8;
var ConditionalTooltipWrapper = ({
  shouldWrap,
  children,
  username
}) => shouldWrap ? /* @__PURE__ */ jsx91(Tooltip, { label: username || "Unknown user", children }) : /* @__PURE__ */ jsx91(Fragment15, { children });
var renderCollaborator = ({
  actionManager,
  collaborator,
  socketId,
  withName = false,
  shouldWrapWithTooltip = false,
  isBeingFollowed
}) => {
  const data = {
    socketId,
    collaborator,
    withName,
    isBeingFollowed
  };
  const avatarJSX = actionManager.renderAction("goToCollaborator", data);
  return /* @__PURE__ */ jsx91(
    ConditionalTooltipWrapper,
    {
      username: collaborator.username,
      shouldWrap: shouldWrapWithTooltip,
      children: avatarJSX
    },
    socketId
  );
};
var collaboratorComparatorKeys = [
  "avatarUrl",
  "id",
  "socketId",
  "username",
  "isInCall",
  "isSpeaking",
  "isMuted"
];
var UserList = React35.memo(
  ({ className, mobile, collaborators, userToFollow }) => {
    const actionManager = useExcalidrawActionManager();
    const uniqueCollaboratorsMap = /* @__PURE__ */ new Map();
    collaborators.forEach((collaborator, socketId) => {
      const userId = collaborator.id || socketId;
      uniqueCollaboratorsMap.set(
        // filter on user id, else fall back on unique socketId
        userId,
        { ...collaborator, socketId }
      );
    });
    const uniqueCollaboratorsArray = Array.from(
      uniqueCollaboratorsMap.values()
    ).filter((collaborator) => collaborator.username?.trim());
    const [searchTerm, setSearchTerm] = React35.useState("");
    const filteredCollaborators = uniqueCollaboratorsArray.filter(
      (collaborator) => collaborator.username?.toLowerCase().includes(searchTerm)
    );
    const userListWrapper = React35.useRef(null);
    useLayoutEffect7(() => {
      if (userListWrapper.current) {
        const updateMaxAvatars = (width) => {
          const maxAvatars2 = Math.max(1, Math.min(8, Math.floor(width / 38)));
          setMaxAvatars(maxAvatars2);
        };
        updateMaxAvatars(userListWrapper.current.clientWidth);
        if (!supportsResizeObserver) {
          return;
        }
        const resizeObserver = new ResizeObserver((entries) => {
          for (const entry of entries) {
            const { width } = entry.contentRect;
            updateMaxAvatars(width);
          }
        });
        resizeObserver.observe(userListWrapper.current);
        return () => {
          resizeObserver.disconnect();
        };
      }
    }, []);
    const [maxAvatars, setMaxAvatars] = React35.useState(DEFAULT_MAX_AVATARS);
    const firstNCollaborators = uniqueCollaboratorsArray.slice(
      0,
      maxAvatars - 1
    );
    const firstNAvatarsJSX = firstNCollaborators.map(
      (collaborator) => renderCollaborator({
        actionManager,
        collaborator,
        socketId: collaborator.socketId,
        shouldWrapWithTooltip: true,
        isBeingFollowed: collaborator.socketId === userToFollow
      })
    );
    return mobile ? /* @__PURE__ */ jsx91("div", { className: clsx42("UserList UserList_mobile", className), children: uniqueCollaboratorsArray.map(
      (collaborator) => renderCollaborator({
        actionManager,
        collaborator,
        socketId: collaborator.socketId,
        shouldWrapWithTooltip: true,
        isBeingFollowed: collaborator.socketId === userToFollow
      })
    ) }) : /* @__PURE__ */ jsx91("div", { className: "UserList__wrapper", ref: userListWrapper, children: /* @__PURE__ */ jsxs51(
      "div",
      {
        className: clsx42("UserList", className),
        style: { [`--max-avatars`]: maxAvatars },
        children: [
          firstNAvatarsJSX,
          uniqueCollaboratorsArray.length > maxAvatars - 1 && /* @__PURE__ */ jsxs51(Popover6.Root, { children: [
            /* @__PURE__ */ jsxs51(Popover6.Trigger, { className: "UserList__more", children: [
              "+",
              uniqueCollaboratorsArray.length - maxAvatars + 1
            ] }),
            /* @__PURE__ */ jsx91(
              Popover6.Content,
              {
                style: {
                  zIndex: 2,
                  width: "15rem",
                  textAlign: "left"
                },
                align: "end",
                sideOffset: 10,
                children: /* @__PURE__ */ jsxs51(Island, { padding: 2, children: [
                  uniqueCollaboratorsArray.length >= SHOW_COLLABORATORS_FILTER_AT && /* @__PURE__ */ jsx91(
                    QuickSearch,
                    {
                      placeholder: t("quickSearch.placeholder"),
                      onChange: setSearchTerm
                    }
                  ),
                  /* @__PURE__ */ jsx91(
                    ScrollableList,
                    {
                      className: "dropdown-menu UserList__collaborators",
                      placeholder: t("userList.empty"),
                      children: filteredCollaborators.length > 0 ? [
                        /* @__PURE__ */ jsx91("div", { className: "hint", children: t("userList.hint.text") }),
                        filteredCollaborators.map(
                          (collaborator) => renderCollaborator({
                            actionManager,
                            collaborator,
                            socketId: collaborator.socketId,
                            withName: true,
                            isBeingFollowed: collaborator.socketId === userToFollow
                          })
                        )
                      ] : []
                    }
                  ),
                  /* @__PURE__ */ jsx91(
                    Popover6.Arrow,
                    {
                      width: 20,
                      height: 10,
                      style: {
                        fill: "var(--popup-bg-color)",
                        filter: "drop-shadow(rgba(0, 0, 0, 0.05) 0px 3px 2px)"
                      }
                    }
                  )
                ] })
              }
            )
          ] })
        ]
      }
    ) });
  },
  (prev, next) => {
    if (prev.collaborators.size !== next.collaborators.size || prev.mobile !== next.mobile || prev.className !== next.className || prev.userToFollow !== next.userToFollow) {
      return false;
    }
    const nextCollaboratorSocketIds = next.collaborators.keys();
    for (const [socketId, collaborator] of prev.collaborators) {
      const nextCollaborator = next.collaborators.get(socketId);
      if (!nextCollaborator || // this checks order of collaborators in the map is the same
      // as previous render
      socketId !== nextCollaboratorSocketIds.next().value || !isShallowEqual(
        collaborator,
        nextCollaborator,
        collaboratorComparatorKeys
      )) {
        return false;
      }
    }
    return true;
  }
);

// components/JSONExportDialog.tsx
init_define_import_meta_env();
import React36 from "react";
init_icons();

// components/Card.tsx
init_define_import_meta_env();
import OpenColor3 from "open-color";
import { jsx as jsx92 } from "react/jsx-runtime";
var Card = ({ children, color }) => {
  return /* @__PURE__ */ jsx92(
    "div",
    {
      className: "Card",
      style: {
        ["--card-color"]: color === "primary" ? "var(--color-primary)" : OpenColor3[color][7],
        ["--card-color-darker"]: color === "primary" ? "var(--color-primary-darker)" : OpenColor3[color][8],
        ["--card-color-darkest"]: color === "primary" ? "var(--color-primary-darkest)" : OpenColor3[color][9]
      },
      children
    }
  );
};

// components/JSONExportDialog.tsx
init_filesystem();
init_utils2();
import { Fragment as Fragment16, jsx as jsx93, jsxs as jsxs52 } from "react/jsx-runtime";
var JSONExportModal = ({
  elements,
  appState,
  setAppState,
  files,
  actionManager,
  exportOpts,
  canvas: canvas2,
  onCloseRequest
}) => {
  const { onExportToBackend } = exportOpts;
  return /* @__PURE__ */ jsx93("div", { className: "ExportDialog ExportDialog--json", children: /* @__PURE__ */ jsxs52("div", { className: "ExportDialog-cards", children: [
    exportOpts.saveFileToDisk && /* @__PURE__ */ jsxs52(Card, { color: "lime", children: [
      /* @__PURE__ */ jsx93("div", { className: "Card-icon", children: exportToFileIcon }),
      /* @__PURE__ */ jsx93("h2", { children: t("exportDialog.disk_title") }),
      /* @__PURE__ */ jsxs52("div", { className: "Card-details", children: [
        t("exportDialog.disk_details"),
        !nativeFileSystemSupported && actionManager.renderAction("changeProjectName")
      ] }),
      /* @__PURE__ */ jsx93(
        ToolButton,
        {
          className: "Card-button",
          type: "button",
          title: t("exportDialog.disk_button"),
          "aria-label": t("exportDialog.disk_button"),
          showAriaLabel: true,
          onClick: () => {
            actionManager.executeAction(actionSaveFileToDisk, "ui");
          }
        }
      )
    ] }),
    onExportToBackend && /* @__PURE__ */ jsxs52(Card, { color: "pink", children: [
      /* @__PURE__ */ jsx93("div", { className: "Card-icon", children: LinkIcon }),
      /* @__PURE__ */ jsx93("h2", { children: t("exportDialog.link_title") }),
      /* @__PURE__ */ jsx93("div", { className: "Card-details", children: t("exportDialog.link_details") }),
      /* @__PURE__ */ jsx93(
        ToolButton,
        {
          className: "Card-button",
          type: "button",
          title: t("exportDialog.link_button"),
          "aria-label": t("exportDialog.link_button"),
          showAriaLabel: true,
          onClick: async () => {
            try {
              trackEvent("export", "link", `ui (${getFrame()})`);
              await onExportToBackend(elements, appState, files);
              onCloseRequest();
            } catch (error) {
              setAppState({ errorMessage: error.message });
            }
          }
        }
      )
    ] }),
    exportOpts.renderCustomUI && exportOpts.renderCustomUI(elements, appState, files, canvas2)
  ] }) });
};
var JSONExportDialog = ({
  elements,
  appState,
  files,
  actionManager,
  exportOpts,
  canvas: canvas2,
  setAppState
}) => {
  const handleClose = React36.useCallback(() => {
    setAppState({ openDialog: null });
  }, [setAppState]);
  return /* @__PURE__ */ jsx93(Fragment16, { children: appState.openDialog?.name === "jsonExport" && /* @__PURE__ */ jsx93(Dialog, { onCloseRequest: handleClose, title: t("buttons.export"), children: /* @__PURE__ */ jsx93(
    JSONExportModal,
    {
      elements,
      appState,
      setAppState,
      files,
      actionManager,
      onCloseRequest: handleClose,
      exportOpts,
      canvas: canvas2
    }
  ) }) });
};

// components/footer/Footer.tsx
init_define_import_meta_env();
import clsx43 from "clsx";

// components/HelpButton.tsx
init_define_import_meta_env();
init_icons();
import { jsx as jsx94 } from "react/jsx-runtime";
var HelpButton = (props) => /* @__PURE__ */ jsx94(
  "button",
  {
    className: "help-icon",
    onClick: props.onClick,
    type: "button",
    title: `${t("helpDialog.title")} \u2014 ?`,
    "aria-label": t("helpDialog.title"),
    children: HelpIcon
  }
);

// components/footer/Footer.tsx
import { jsx as jsx95, jsxs as jsxs53 } from "react/jsx-runtime";
var Footer = ({
  appState,
  actionManager,
  showExitZenModeBtn,
  renderWelcomeScreen
}) => {
  const { FooterCenterTunnel, WelcomeScreenHelpHintTunnel } = useTunnels();
  const device = useDevice();
  const showFinalize = !appState.viewModeEnabled && appState.multiElement && device.isTouchScreen;
  return /* @__PURE__ */ jsxs53(
    "footer",
    {
      role: "contentinfo",
      className: "layer-ui__wrapper__footer App-menu App-menu_bottom",
      children: [
        /* @__PURE__ */ jsx95(
          "div",
          {
            className: clsx43("layer-ui__wrapper__footer-left zen-mode-transition", {
              "layer-ui__wrapper__footer-left--transition-left": appState.zenModeEnabled
            }),
            children: /* @__PURE__ */ jsx95(Stack_default.Col, { gap: 2, children: /* @__PURE__ */ jsxs53(Section, { heading: "canvasActions", children: [
              /* @__PURE__ */ jsx95(
                ZoomActions,
                {
                  renderAction: actionManager.renderAction,
                  zoom: appState.zoom
                }
              ),
              !appState.viewModeEnabled && /* @__PURE__ */ jsx95(
                UndoRedoActions,
                {
                  renderAction: actionManager.renderAction,
                  className: clsx43("zen-mode-transition", {
                    "layer-ui__wrapper__footer-left--transition-bottom": appState.zenModeEnabled
                  })
                }
              ),
              showFinalize && /* @__PURE__ */ jsx95(
                FinalizeAction,
                {
                  renderAction: actionManager.renderAction,
                  className: clsx43("zen-mode-transition", {
                    "layer-ui__wrapper__footer-left--transition-left": appState.zenModeEnabled
                  })
                }
              )
            ] }) })
          }
        ),
        /* @__PURE__ */ jsx95(FooterCenterTunnel.Out, {}),
        /* @__PURE__ */ jsx95(
          "div",
          {
            className: clsx43("layer-ui__wrapper__footer-right zen-mode-transition", {
              "transition-right": appState.zenModeEnabled
            }),
            children: /* @__PURE__ */ jsxs53("div", { style: { position: "relative" }, children: [
              renderWelcomeScreen && /* @__PURE__ */ jsx95(WelcomeScreenHelpHintTunnel.Out, {}),
              /* @__PURE__ */ jsx95(
                HelpButton,
                {
                  onClick: () => actionManager.executeAction(actionShortcuts)
                }
              )
            ] })
          }
        ),
        /* @__PURE__ */ jsx95(
          ExitZenModeAction,
          {
            actionManager,
            showExitZenModeBtn
          }
        )
      ]
    }
  );
};
var Footer_default = Footer;
Footer.displayName = "Footer";

// components/Sidebar/Sidebar.tsx
init_define_import_meta_env();
import {
  useEffect as useEffect29,
  useLayoutEffect as useLayoutEffect8,
  useRef as useRef27,
  useState as useState30,
  forwardRef as forwardRef5,
  useImperativeHandle as useImperativeHandle2,
  useCallback as useCallback12
} from "react";
import { atom as atom10, useSetAtom as useSetAtom3 } from "jotai";

// components/Sidebar/common.ts
init_define_import_meta_env();
import React37 from "react";
var SidebarPropsContext = React37.createContext({});

// components/Sidebar/SidebarHeader.tsx
init_define_import_meta_env();
import clsx44 from "clsx";
import { useContext as useContext2 } from "react";
init_icons();
import { jsx as jsx96, jsxs as jsxs54 } from "react/jsx-runtime";
var SidebarHeader = ({
  children,
  className
}) => {
  const device = useDevice();
  const props = useContext2(SidebarPropsContext);
  const renderDockButton = !!(device.editor.canFitSidebar && props.shouldRenderDockButton);
  return /* @__PURE__ */ jsxs54(
    "div",
    {
      className: clsx44("sidebar__header", className),
      "data-testid": "sidebar-header",
      children: [
        children,
        /* @__PURE__ */ jsxs54("div", { className: "sidebar__header__buttons", children: [
          renderDockButton && /* @__PURE__ */ jsx96(Tooltip, { label: t("labels.sidebarLock"), children: /* @__PURE__ */ jsx96(
            Button,
            {
              onSelect: () => props.onDock?.(!props.docked),
              selected: !!props.docked,
              className: "sidebar__dock",
              "data-testid": "sidebar-dock",
              "aria-label": t("labels.sidebarLock"),
              children: PinIcon
            }
          ) }),
          /* @__PURE__ */ jsx96(
            Button,
            {
              "data-testid": "sidebar-close",
              className: "sidebar__close",
              onSelect: props.onCloseRequest,
              "aria-label": t("buttons.close"),
              children: CloseIcon
            }
          )
        ] })
      ]
    }
  );
};
SidebarHeader.displayName = "SidebarHeader";

// components/Sidebar/Sidebar.tsx
import clsx46 from "clsx";
init_utils2();
init_keys();
init_constants();

// components/Sidebar/SidebarTrigger.tsx
init_define_import_meta_env();
import clsx45 from "clsx";
import { jsx as jsx97, jsxs as jsxs55 } from "react/jsx-runtime";
var SidebarTrigger = ({
  name,
  tab,
  icon,
  title,
  children,
  onToggle,
  className,
  style
}) => {
  const setAppState = useExcalidrawSetAppState();
  const appState = useUIAppState();
  return /* @__PURE__ */ jsxs55("label", { title, className: "sidebar-trigger__label-element", children: [
    /* @__PURE__ */ jsx97(
      "input",
      {
        className: "ToolIcon_type_checkbox",
        type: "checkbox",
        onChange: (event) => {
          document.querySelector(".layer-ui__wrapper")?.classList.remove("animate");
          const isOpen = event.target.checked;
          setAppState({ openSidebar: isOpen ? { name, tab } : null });
          onToggle?.(isOpen);
        },
        checked: appState.openSidebar?.name === name,
        "aria-label": title,
        "aria-keyshortcuts": "0"
      }
    ),
    /* @__PURE__ */ jsxs55("div", { className: clsx45("sidebar-trigger", className), style, children: [
      icon && /* @__PURE__ */ jsx97("div", { children: icon }),
      children && /* @__PURE__ */ jsx97("div", { className: "sidebar-trigger__label", children })
    ] })
  ] });
};
SidebarTrigger.displayName = "SidebarTrigger";

// components/Sidebar/SidebarTabTriggers.tsx
init_define_import_meta_env();
import * as RadixTabs from "@radix-ui/react-tabs";
import { jsx as jsx98 } from "react/jsx-runtime";
var SidebarTabTriggers = ({
  children,
  ...rest
}) => {
  return /* @__PURE__ */ jsx98(RadixTabs.List, { className: "sidebar-triggers", ...rest, children });
};
SidebarTabTriggers.displayName = "SidebarTabTriggers";

// components/Sidebar/SidebarTabTrigger.tsx
init_define_import_meta_env();
import * as RadixTabs2 from "@radix-ui/react-tabs";
import { jsx as jsx99 } from "react/jsx-runtime";
var SidebarTabTrigger = ({
  children,
  tab,
  onSelect,
  ...rest
}) => {
  return /* @__PURE__ */ jsx99(RadixTabs2.Trigger, { value: tab, asChild: true, onSelect, children: /* @__PURE__ */ jsx99(
    "button",
    {
      type: "button",
      className: `excalidraw-button sidebar-tab-trigger`,
      ...rest,
      children
    }
  ) });
};
SidebarTabTrigger.displayName = "SidebarTabTrigger";

// components/Sidebar/SidebarTabs.tsx
init_define_import_meta_env();
import * as RadixTabs3 from "@radix-ui/react-tabs";
import { jsx as jsx100 } from "react/jsx-runtime";
var SidebarTabs = ({
  children,
  ...rest
}) => {
  const appState = useUIAppState();
  const setAppState = useExcalidrawSetAppState();
  if (!appState.openSidebar) {
    return null;
  }
  const { name } = appState.openSidebar;
  return /* @__PURE__ */ jsx100(
    RadixTabs3.Root,
    {
      className: "sidebar-tabs-root",
      value: appState.openSidebar.tab,
      onValueChange: (tab) => setAppState((state) => ({
        ...state,
        openSidebar: { ...state.openSidebar, name, tab }
      })),
      ...rest,
      children
    }
  );
};
SidebarTabs.displayName = "SidebarTabs";

// components/Sidebar/SidebarTab.tsx
init_define_import_meta_env();
import * as RadixTabs4 from "@radix-ui/react-tabs";
import { jsx as jsx101 } from "react/jsx-runtime";
var SidebarTab = ({
  tab,
  children,
  ...rest
}) => {
  return /* @__PURE__ */ jsx101(RadixTabs4.Content, { ...rest, value: tab, "data-testid": tab, children });
};
SidebarTab.displayName = "SidebarTab";

// components/Sidebar/Sidebar.tsx
import { jsx as jsx102 } from "react/jsx-runtime";
import { createElement } from "react";
var isSidebarDockedAtom = atom10(false);
var SidebarInner = forwardRef5(
  ({
    name,
    children,
    onDock,
    docked,
    className,
    ...rest
  }, ref) => {
    if (define_import_meta_env_default.DEV && onDock && docked == null) {
      console.warn(
        "Sidebar: `docked` must be set when `onDock` is supplied for the sidebar to be user-dockable. To hide this message, either pass `docked` or remove `onDock`"
      );
    }
    const setAppState = useExcalidrawSetAppState();
    const setIsSidebarDockedAtom = useSetAtom3(isSidebarDockedAtom, jotaiScope);
    useLayoutEffect8(() => {
      setIsSidebarDockedAtom(!!docked);
      return () => {
        setIsSidebarDockedAtom(false);
      };
    }, [setIsSidebarDockedAtom, docked]);
    const headerPropsRef = useRef27(
      {}
    );
    headerPropsRef.current.onCloseRequest = () => {
      setAppState({ openSidebar: null });
    };
    headerPropsRef.current.onDock = (isDocked) => onDock?.(isDocked);
    headerPropsRef.current = updateObject(headerPropsRef.current, {
      docked,
      // explicit prop to rerender on update
      shouldRenderDockButton: !!onDock && docked != null
    });
    const islandRef = useRef27(null);
    useImperativeHandle2(ref, () => {
      return islandRef.current;
    });
    const device = useDevice();
    const closeLibrary = useCallback12(() => {
      const isDialogOpen = !!document.querySelector(".Dialog");
      if (isDialogOpen) {
        return;
      }
      setAppState({ openSidebar: null });
    }, [setAppState]);
    useOutsideClick(
      islandRef,
      useCallback12(
        (event) => {
          if (event.target.closest(".sidebar-trigger")) {
            return;
          }
          if (!docked || !device.editor.canFitSidebar) {
            closeLibrary();
          }
        },
        [closeLibrary, docked, device.editor.canFitSidebar]
      )
    );
    useEffect29(() => {
      const handleKeyDown = (event) => {
        if (event.key === KEYS.ESCAPE && (!docked || !device.editor.canFitSidebar)) {
          closeLibrary();
        }
      };
      document.addEventListener("keydown" /* KEYDOWN */, handleKeyDown);
      return () => {
        document.removeEventListener("keydown" /* KEYDOWN */, handleKeyDown);
      };
    }, [closeLibrary, docked, device.editor.canFitSidebar]);
    return /* @__PURE__ */ jsx102(
      Island,
      {
        ...rest,
        className: clsx46("sidebar", { "sidebar--docked": docked }, className),
        ref: islandRef,
        children: /* @__PURE__ */ jsx102(SidebarPropsContext.Provider, { value: headerPropsRef.current, children })
      }
    );
  }
);
SidebarInner.displayName = "SidebarInner";
var Sidebar = Object.assign(
  forwardRef5((props, ref) => {
    const appState = useUIAppState();
    const { onStateChange } = props;
    const refPrevOpenSidebar = useRef27(appState.openSidebar);
    useEffect29(() => {
      if (
        // closing sidebar
        (!appState.openSidebar && refPrevOpenSidebar?.current?.name === props.name || // opening current sidebar
        appState.openSidebar?.name === props.name && refPrevOpenSidebar?.current?.name !== props.name || // switching tabs or switching to a different sidebar
        refPrevOpenSidebar.current?.name === props.name) && appState.openSidebar !== refPrevOpenSidebar.current
      ) {
        onStateChange?.(
          appState.openSidebar?.name !== props.name ? null : appState.openSidebar
        );
      }
      refPrevOpenSidebar.current = appState.openSidebar;
    }, [appState.openSidebar, onStateChange, props.name]);
    const [mounted, setMounted] = useState30(false);
    useLayoutEffect8(() => {
      setMounted(true);
      return () => setMounted(false);
    }, []);
    const shouldRender = mounted && appState.openSidebar?.name === props.name;
    if (!shouldRender) {
      return null;
    }
    return /* @__PURE__ */ createElement(SidebarInner, { ...props, ref, key: props.name });
  }),
  {
    Header: SidebarHeader,
    TabTriggers: SidebarTabTriggers,
    TabTrigger: SidebarTabTrigger,
    Tabs: SidebarTabs,
    Tab: SidebarTab,
    Trigger: SidebarTrigger
  }
);
Sidebar.displayName = "Sidebar";

// components/LayerUI.tsx
import { Provider, useAtom as useAtom18, useAtomValue as useAtomValue2 } from "jotai";

// components/main-menu/MainMenu.tsx
init_define_import_meta_env();

// components/main-menu/DefaultItems.tsx
var DefaultItems_exports = {};
__export(DefaultItems_exports, {
  ChangeCanvasBackground: () => ChangeCanvasBackground,
  ClearCanvas: () => ClearCanvas,
  CommandPalette: () => CommandPalette2,
  Export: () => Export,
  Help: () => Help,
  LiveCollaborationTrigger: () => LiveCollaborationTrigger,
  LoadScene: () => LoadScene,
  SaveAsImage: () => SaveAsImage,
  SaveToActiveFile: () => SaveToActiveFile,
  SearchMenu: () => SearchMenu,
  Socials: () => Socials,
  ToggleTheme: () => ToggleTheme
});
init_define_import_meta_env();
init_icons();
import clsx47 from "clsx";
import { useSetAtom as useSetAtom4 } from "jotai";

// components/OverwriteConfirm/OverwriteConfirmState.ts
init_define_import_meta_env();
import { atom as atom11 } from "jotai";
var overwriteConfirmStateAtom = atom11({
  active: false
});
async function openConfirmModal({
  title,
  description,
  actionLabel,
  color
}) {
  return new Promise((resolve) => {
    jotaiStore.set(overwriteConfirmStateAtom, {
      active: true,
      onConfirm: () => resolve(true),
      onClose: () => resolve(false),
      onReject: () => resolve(false),
      title,
      description,
      actionLabel,
      color
    });
  });
}

// components/dropdownMenu/DropdownMenuItemContentRadio.tsx
init_define_import_meta_env();
import { Fragment as Fragment17, jsx as jsx103, jsxs as jsxs56 } from "react/jsx-runtime";
var DropdownMenuItemContentRadio = ({
  value,
  shortcut,
  onChange,
  choices,
  children,
  name
}) => {
  const device = useDevice();
  return /* @__PURE__ */ jsxs56(Fragment17, { children: [
    /* @__PURE__ */ jsxs56("div", { className: "dropdown-menu-item-base dropdown-menu-item-bare", children: [
      /* @__PURE__ */ jsx103("label", { className: "dropdown-menu-item__text", htmlFor: name, children }),
      /* @__PURE__ */ jsx103(
        RadioGroup,
        {
          name,
          value,
          onChange,
          choices
        }
      )
    ] }),
    shortcut && !device.editor.isMobile && /* @__PURE__ */ jsx103("div", { className: "dropdown-menu-item__shortcut dropdown-menu-item__shortcut--orphaned", children: shortcut })
  ] });
};
DropdownMenuItemContentRadio.displayName = "DropdownMenuItemContentRadio";
var DropdownMenuItemContentRadio_default = DropdownMenuItemContentRadio;

// components/main-menu/DefaultItems.tsx
init_constants();
import { Fragment as Fragment18, jsx as jsx104, jsxs as jsxs57 } from "react/jsx-runtime";
var LoadScene = () => {
  const { t: t2 } = useI18n();
  const actionManager = useExcalidrawActionManager();
  const elements = useExcalidrawElements();
  if (!actionManager.isActionEnabled(actionLoadScene)) {
    return null;
  }
  const handleSelect = async () => {
    if (!elements.length || await openConfirmModal({
      title: t2("overwriteConfirm.modal.loadFromFile.title"),
      actionLabel: t2("overwriteConfirm.modal.loadFromFile.button"),
      color: "warning",
      description: /* @__PURE__ */ jsx104(
        Trans_default,
        {
          i18nKey: "overwriteConfirm.modal.loadFromFile.description",
          bold: (text) => /* @__PURE__ */ jsx104("strong", { children: text }),
          br: () => /* @__PURE__ */ jsx104("br", {})
        }
      )
    })) {
      actionManager.executeAction(actionLoadScene);
    }
  };
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      icon: LoadIcon,
      onSelect: handleSelect,
      "data-testid": "load-button",
      shortcut: getShortcutFromShortcutName("loadScene"),
      "aria-label": t2("buttons.load"),
      children: t2("buttons.load")
    }
  );
};
LoadScene.displayName = "LoadScene";
var SaveToActiveFile = () => {
  const { t: t2 } = useI18n();
  const actionManager = useExcalidrawActionManager();
  if (!actionManager.isActionEnabled(actionSaveToActiveFile)) {
    return null;
  }
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      shortcut: getShortcutFromShortcutName("saveScene"),
      "data-testid": "save-button",
      onSelect: () => actionManager.executeAction(actionSaveToActiveFile),
      icon: save,
      "aria-label": `${t2("buttons.save")}`,
      children: `${t2("buttons.save")}`
    }
  );
};
SaveToActiveFile.displayName = "SaveToActiveFile";
var SaveAsImage = () => {
  const setAppState = useExcalidrawSetAppState();
  const { t: t2 } = useI18n();
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      icon: ExportImageIcon,
      "data-testid": "image-export-button",
      onSelect: () => setAppState({ openDialog: { name: "imageExport" } }),
      shortcut: getShortcutFromShortcutName("imageExport"),
      "aria-label": t2("buttons.exportImage"),
      children: t2("buttons.exportImage")
    }
  );
};
SaveAsImage.displayName = "SaveAsImage";
var CommandPalette2 = (opts) => {
  const setAppState = useExcalidrawSetAppState();
  const { t: t2 } = useI18n();
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      icon: boltIcon,
      "data-testid": "command-palette-button",
      onSelect: () => {
        trackEvent("command_palette", "open", "menu");
        setAppState({ openDialog: { name: "commandPalette" } });
      },
      shortcut: getShortcutFromShortcutName("commandPalette"),
      "aria-label": t2("commandPalette.title"),
      className: opts?.className,
      children: t2("commandPalette.title")
    }
  );
};
CommandPalette2.displayName = "CommandPalette";
var SearchMenu = (opts) => {
  const { t: t2 } = useI18n();
  const actionManager = useExcalidrawActionManager();
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      icon: searchIcon,
      "data-testid": "search-menu-button",
      onSelect: () => {
        actionManager.executeAction(actionToggleSearchMenu);
      },
      shortcut: getShortcutFromShortcutName("searchMenu"),
      "aria-label": t2("search.title"),
      className: opts?.className,
      children: t2("search.title")
    }
  );
};
SearchMenu.displayName = "SearchMenu";
var Help = () => {
  const { t: t2 } = useI18n();
  const actionManager = useExcalidrawActionManager();
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      "data-testid": "help-menu-item",
      icon: HelpIcon,
      onSelect: () => actionManager.executeAction(actionShortcuts),
      shortcut: "?",
      "aria-label": t2("helpDialog.title"),
      children: t2("helpDialog.title")
    }
  );
};
Help.displayName = "Help";
var ClearCanvas = () => {
  const { t: t2 } = useI18n();
  const setActiveConfirmDialog = useSetAtom4(
    activeConfirmDialogAtom,
    jotaiScope
  );
  const actionManager = useExcalidrawActionManager();
  if (!actionManager.isActionEnabled(actionClearCanvas)) {
    return null;
  }
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      icon: TrashIcon,
      onSelect: () => setActiveConfirmDialog("clearCanvas"),
      "data-testid": "clear-canvas-button",
      "aria-label": t2("buttons.clearReset"),
      children: t2("buttons.clearReset")
    }
  );
};
ClearCanvas.displayName = "ClearCanvas";
var ToggleTheme = (props) => {
  const { t: t2 } = useI18n();
  const appState = useUIAppState();
  const actionManager = useExcalidrawActionManager();
  const shortcut = getShortcutFromShortcutName("toggleTheme");
  if (!actionManager.isActionEnabled(actionToggleTheme)) {
    return null;
  }
  if (props?.allowSystemTheme) {
    return /* @__PURE__ */ jsx104(
      DropdownMenuItemContentRadio_default,
      {
        name: "theme",
        value: props.theme,
        onChange: (value) => props.onSelect(value),
        choices: [
          {
            value: THEME.LIGHT,
            label: SunIcon,
            ariaLabel: `${t2("buttons.lightMode")} - ${shortcut}`
          },
          {
            value: THEME.DARK,
            label: MoonIcon,
            ariaLabel: `${t2("buttons.darkMode")} - ${shortcut}`
          },
          {
            value: "system",
            label: DeviceDesktopIcon,
            ariaLabel: t2("buttons.systemMode")
          }
        ],
        children: t2("labels.theme")
      }
    );
  }
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      onSelect: (event) => {
        event.preventDefault();
        if (props?.onSelect) {
          props.onSelect(
            appState.theme === THEME.DARK ? THEME.LIGHT : THEME.DARK
          );
        } else {
          return actionManager.executeAction(actionToggleTheme);
        }
      },
      icon: appState.theme === THEME.DARK ? SunIcon : MoonIcon,
      "data-testid": "toggle-dark-mode",
      shortcut,
      "aria-label": appState.theme === THEME.DARK ? t2("buttons.lightMode") : t2("buttons.darkMode"),
      children: appState.theme === THEME.DARK ? t2("buttons.lightMode") : t2("buttons.darkMode")
    }
  );
};
ToggleTheme.displayName = "ToggleTheme";
var ChangeCanvasBackground = () => {
  const { t: t2 } = useI18n();
  const appState = useUIAppState();
  const actionManager = useExcalidrawActionManager();
  const appProps = useAppProps();
  if (appState.viewModeEnabled || !appProps.UIOptions.canvasActions.changeViewBackgroundColor) {
    return null;
  }
  return /* @__PURE__ */ jsxs57("div", { style: { marginTop: "0.5rem" }, children: [
    /* @__PURE__ */ jsx104(
      "div",
      {
        "data-testid": "canvas-background-label",
        style: { fontSize: ".75rem", marginBottom: ".5rem" },
        children: t2("labels.canvasBackground")
      }
    ),
    /* @__PURE__ */ jsx104("div", { style: { padding: "0 0.625rem" }, children: actionManager.renderAction("changeViewBackgroundColor") })
  ] });
};
ChangeCanvasBackground.displayName = "ChangeCanvasBackground";
var Export = () => {
  const { t: t2 } = useI18n();
  const setAppState = useExcalidrawSetAppState();
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      icon: ExportIcon,
      onSelect: () => {
        setAppState({ openDialog: { name: "jsonExport" } });
      },
      "data-testid": "json-export-button",
      "aria-label": t2("buttons.export"),
      children: t2("buttons.export")
    }
  );
};
Export.displayName = "Export";
var Socials = () => {
  const { t: t2 } = useI18n();
  return /* @__PURE__ */ jsx104(Fragment18, {});
};
Socials.displayName = "Socials";
var LiveCollaborationTrigger = ({
  onSelect,
  isCollaborating
}) => {
  const { t: t2 } = useI18n();
  return /* @__PURE__ */ jsx104(
    DropdownMenuItem_default,
    {
      "data-testid": "collab-button",
      icon: usersIcon,
      className: clsx47({
        "active-collab": isCollaborating
      }),
      onSelect,
      children: t2("labels.liveCollaboration")
    }
  );
};
LiveCollaborationTrigger.displayName = "LiveCollaborationTrigger";

// components/main-menu/MainMenu.tsx
init_icons();

// components/hoc/withInternalFallback.tsx
init_define_import_meta_env();
import { atom as atom12, useAtom as useAtom14 } from "jotai";
import { useLayoutEffect as useLayoutEffect9, useRef as useRef28 } from "react";
import { jsx as jsx105 } from "react/jsx-runtime";
var withInternalFallback = (componentName, Component) => {
  const renderAtom = atom12(0);
  const WrapperComponent = (props) => {
    const { jotaiScope: jotaiScope2 } = useTunnels();
    const [, setCounter] = useAtom14(renderAtom, jotaiScope2);
    const metaRef = useRef28({
      // flag set on initial render to tell the fallback component to skip the
      // render until mount counter are initialized. This is because the counter
      // is initialized in an effect, and thus we could end rendering both
      // components at the same time until counter is initialized.
      preferHost: false,
      counter: 0
    });
    useLayoutEffect9(() => {
      const meta = metaRef.current;
      setCounter((c) => {
        const next = c + 1;
        meta.counter = next;
        return next;
      });
      return () => {
        setCounter((c) => {
          const next = c - 1;
          meta.counter = next;
          if (!next) {
            meta.preferHost = false;
          }
          return next;
        });
      };
    }, [setCounter]);
    if (!props.__fallback) {
      metaRef.current.preferHost = true;
    }
    if (
      // either before the counters are initialized
      !metaRef.current.counter && props.__fallback && metaRef.current.preferHost || // or after the counters are initialized, and both are rendered
      // (this is the default when host renders as well)
      metaRef.current.counter > 1 && props.__fallback
    ) {
      return null;
    }
    return /* @__PURE__ */ jsx105(Component, { ...props });
  };
  WrapperComponent.displayName = componentName;
  return WrapperComponent;
};

// components/main-menu/MainMenu.tsx
init_utils2();
import { jsx as jsx106, jsxs as jsxs58 } from "react/jsx-runtime";
var MainMenu = Object.assign(
  withInternalFallback(
    "MainMenu",
    ({
      children,
      onSelect
    }) => {
      const { MainMenuTunnel } = useTunnels();
      const device = useDevice();
      const appState = useUIAppState();
      const setAppState = useExcalidrawSetAppState();
      const onClickOutside = device.editor.isMobile ? void 0 : () => setAppState({ openMenu: null });
      return /* @__PURE__ */ jsx106(MainMenuTunnel.In, { children: /* @__PURE__ */ jsxs58(DropdownMenu_default, { open: appState.openMenu === "canvas", children: [
        /* @__PURE__ */ jsx106(
          DropdownMenu_default.Trigger,
          {
            onToggle: () => {
              setAppState({
                openMenu: appState.openMenu === "canvas" ? null : "canvas"
              });
            },
            "data-testid": "main-menu-trigger",
            className: "main-menu-trigger",
            children: HamburgerMenuIcon
          }
        ),
        /* @__PURE__ */ jsxs58(
          DropdownMenu_default.Content,
          {
            onClickOutside,
            onSelect: composeEventHandlers(onSelect, () => {
              setAppState({ openMenu: null });
            }),
            children: [
              children,
              device.editor.isMobile && appState.collaborators.size > 0 && /* @__PURE__ */ jsxs58("fieldset", { className: "UserList-Wrapper", children: [
                /* @__PURE__ */ jsx106("legend", { children: t("labels.collaborators") }),
                /* @__PURE__ */ jsx106(
                  UserList,
                  {
                    mobile: true,
                    collaborators: appState.collaborators,
                    userToFollow: appState.userToFollow?.socketId || null
                  }
                )
              ] })
            ]
          }
        )
      ] }) });
    }
  ),
  {
    Trigger: DropdownMenu_default.Trigger,
    Item: DropdownMenu_default.Item,
    ItemLink: DropdownMenu_default.ItemLink,
    ItemCustom: DropdownMenu_default.ItemCustom,
    Group: DropdownMenu_default.Group,
    Separator: DropdownMenu_default.Separator,
    DefaultItems: DefaultItems_exports
  }
);
var MainMenu_default = MainMenu;

// components/OverwriteConfirm/OverwriteConfirm.tsx
init_define_import_meta_env();
import { useAtom as useAtom15 } from "jotai";
init_icons();

// components/OverwriteConfirm/OverwriteConfirmActions.tsx
init_define_import_meta_env();
import { jsx as jsx107, jsxs as jsxs59 } from "react/jsx-runtime";
var Action = ({
  title,
  children,
  actionLabel,
  onClick
}) => {
  return /* @__PURE__ */ jsxs59("div", { className: "OverwriteConfirm__Actions__Action", children: [
    /* @__PURE__ */ jsx107("h4", { children: title }),
    /* @__PURE__ */ jsx107("div", { className: "OverwriteConfirm__Actions__Action__content", children }),
    /* @__PURE__ */ jsx107(
      FilledButton,
      {
        variant: "outlined",
        color: "muted",
        label: actionLabel,
        size: "large",
        fullWidth: true,
        onClick
      }
    )
  ] });
};
var ExportToImage = () => {
  const { t: t2 } = useI18n();
  const actionManager = useExcalidrawActionManager();
  const setAppState = useExcalidrawSetAppState();
  return /* @__PURE__ */ jsx107(
    Action,
    {
      title: t2("overwriteConfirm.action.exportToImage.title"),
      actionLabel: t2("overwriteConfirm.action.exportToImage.button"),
      onClick: () => {
        actionManager.executeAction(actionChangeExportEmbedScene, "ui", true);
        setAppState({ openDialog: { name: "imageExport" } });
      },
      children: t2("overwriteConfirm.action.exportToImage.description")
    }
  );
};
var SaveToDisk = () => {
  const { t: t2 } = useI18n();
  const actionManager = useExcalidrawActionManager();
  return /* @__PURE__ */ jsx107(
    Action,
    {
      title: t2("overwriteConfirm.action.saveToDisk.title"),
      actionLabel: t2("overwriteConfirm.action.saveToDisk.button"),
      onClick: () => {
        actionManager.executeAction(actionSaveFileToDisk, "ui");
      },
      children: t2("overwriteConfirm.action.saveToDisk.description")
    }
  );
};
var Actions = Object.assign(
  ({ children }) => {
    return /* @__PURE__ */ jsx107("div", { className: "OverwriteConfirm__Actions", children });
  },
  {
    ExportToImage,
    SaveToDisk
  }
);

// components/OverwriteConfirm/OverwriteConfirm.tsx
import { jsx as jsx108, jsxs as jsxs60 } from "react/jsx-runtime";
var OverwriteConfirmDialog = Object.assign(
  withInternalFallback(
    "OverwriteConfirmDialog",
    ({ children }) => {
      const { OverwriteConfirmDialogTunnel } = useTunnels();
      const [overwriteConfirmState, setState] = useAtom15(
        overwriteConfirmStateAtom,
        jotaiScope
      );
      if (!overwriteConfirmState.active) {
        return null;
      }
      const handleClose = () => {
        overwriteConfirmState.onClose();
        setState((state) => ({ ...state, active: false }));
      };
      const handleConfirm = () => {
        overwriteConfirmState.onConfirm();
        setState((state) => ({ ...state, active: false }));
      };
      return /* @__PURE__ */ jsx108(OverwriteConfirmDialogTunnel.In, { children: /* @__PURE__ */ jsx108(Dialog, { onCloseRequest: handleClose, title: false, size: 916, children: /* @__PURE__ */ jsxs60("div", { className: "OverwriteConfirm", children: [
        /* @__PURE__ */ jsx108("h3", { children: overwriteConfirmState.title }),
        /* @__PURE__ */ jsxs60(
          "div",
          {
            className: `OverwriteConfirm__Description OverwriteConfirm__Description--color-${overwriteConfirmState.color}`,
            children: [
              /* @__PURE__ */ jsx108("div", { className: "OverwriteConfirm__Description__icon", children: alertTriangleIcon }),
              /* @__PURE__ */ jsx108("div", { children: overwriteConfirmState.description }),
              /* @__PURE__ */ jsx108("div", { className: "OverwriteConfirm__Description__spacer" }),
              /* @__PURE__ */ jsx108(
                FilledButton,
                {
                  color: overwriteConfirmState.color,
                  size: "large",
                  label: overwriteConfirmState.actionLabel,
                  onClick: handleConfirm
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsx108(Actions, { children })
      ] }) }) });
    }
  ),
  {
    Actions,
    Action
  }
);

// components/LayerUI.tsx
init_appState();

// components/DefaultSidebar.tsx
init_define_import_meta_env();
init_constants();
import clsx49 from "clsx";
init_utils2();

// components/SearchMenu.tsx
init_define_import_meta_env();
init_icons();
import { Fragment as Fragment19, memo as memo3, useEffect as useEffect30, useRef as useRef29, useState as useState31 } from "react";
init_element();
init_textElement();
init_utils2();
init_keys();
import { debounce as debounce2 } from "lodash";
import clsx48 from "clsx";
import { atom as atom13, useAtom as useAtom16 } from "jotai";
init_sizeHelpers();
init_random();
init_constants();
init_math();
import { Fragment as Fragment20, jsx as jsx109, jsxs as jsxs61 } from "react/jsx-runtime";
var searchQueryAtom = atom13("");
var searchItemInFocusAtom = atom13(null);
var SEARCH_DEBOUNCE = 350;
var SearchMenu2 = () => {
  const app = useApp();
  const setAppState = useExcalidrawSetAppState();
  const searchInputRef = useRef29(null);
  const [inputValue, setInputValue] = useAtom16(searchQueryAtom, jotaiScope);
  const searchQuery = inputValue.trim();
  const [isSearching, setIsSearching] = useState31(false);
  const [searchMatches, setSearchMatches] = useState31({
    nonce: null,
    items: []
  });
  const searchedQueryRef = useRef29(null);
  const lastSceneNonceRef = useRef29(void 0);
  const [focusIndex, setFocusIndex] = useAtom16(
    searchItemInFocusAtom,
    jotaiScope
  );
  const elementsMap = app.scene.getNonDeletedElementsMap();
  useEffect30(() => {
    if (isSearching) {
      return;
    }
    if (searchQuery !== searchedQueryRef.current || app.scene.getSceneNonce() !== lastSceneNonceRef.current) {
      searchedQueryRef.current = null;
      handleSearch(searchQuery, app, (matchItems, index) => {
        setSearchMatches({
          nonce: randomInteger(),
          items: matchItems
        });
        searchedQueryRef.current = searchQuery;
        lastSceneNonceRef.current = app.scene.getSceneNonce();
        setAppState({
          searchMatches: matchItems.map((searchMatch) => ({
            id: searchMatch.textElement.id,
            focus: false,
            matchedLines: searchMatch.matchedLines
          }))
        });
      });
    }
  }, [
    isSearching,
    searchQuery,
    elementsMap,
    app,
    setAppState,
    setFocusIndex,
    lastSceneNonceRef
  ]);
  const goToNextItem = () => {
    if (searchMatches.items.length > 0) {
      setFocusIndex((focusIndex2) => {
        if (focusIndex2 === null) {
          return 0;
        }
        return (focusIndex2 + 1) % searchMatches.items.length;
      });
    }
  };
  const goToPreviousItem = () => {
    if (searchMatches.items.length > 0) {
      setFocusIndex((focusIndex2) => {
        if (focusIndex2 === null) {
          return 0;
        }
        return focusIndex2 - 1 < 0 ? searchMatches.items.length - 1 : focusIndex2 - 1;
      });
    }
  };
  useEffect30(() => {
    setAppState((state) => {
      return {
        searchMatches: state.searchMatches.map((match, index) => {
          if (index === focusIndex) {
            return { ...match, focus: true };
          }
          return { ...match, focus: false };
        })
      };
    });
  }, [focusIndex, setAppState]);
  useEffect30(() => {
    if (searchMatches.items.length > 0 && focusIndex !== null) {
      const match = searchMatches.items[focusIndex];
      if (match) {
        const zoomValue = app.state.zoom.value;
        const matchAsElement = newTextElement({
          text: match.searchQuery,
          x: match.textElement.x + (match.matchedLines[0]?.offsetX ?? 0),
          y: match.textElement.y + (match.matchedLines[0]?.offsetY ?? 0),
          width: match.matchedLines[0]?.width,
          height: match.matchedLines[0]?.height,
          fontSize: match.textElement.fontSize,
          fontFamily: match.textElement.fontFamily
        });
        const FONT_SIZE_LEGIBILITY_THRESHOLD = 14;
        const fontSize = match.textElement.fontSize;
        const isTextTiny = fontSize * zoomValue < FONT_SIZE_LEGIBILITY_THRESHOLD;
        if (!isElementCompletelyInViewport(
          [matchAsElement],
          app.canvas.width / window.devicePixelRatio,
          app.canvas.height / window.devicePixelRatio,
          {
            offsetLeft: app.state.offsetLeft,
            offsetTop: app.state.offsetTop,
            scrollX: app.state.scrollX,
            scrollY: app.state.scrollY,
            zoom: app.state.zoom
          },
          app.scene.getNonDeletedElementsMap(),
          app.getEditorUIOffsets()
        ) || isTextTiny) {
          let zoomOptions;
          if (isTextTiny) {
            if (fontSize >= FONT_SIZE_LEGIBILITY_THRESHOLD) {
              zoomOptions = { fitToContent: true };
            } else {
              zoomOptions = {
                fitToViewport: true,
                // calculate zoom level to make the fontSize ~equal to FONT_SIZE_THRESHOLD, rounded to nearest 10%
                maxZoom: round(FONT_SIZE_LEGIBILITY_THRESHOLD / fontSize, 1)
              };
            }
          } else {
            zoomOptions = { fitToContent: true };
          }
          app.scrollToContent(matchAsElement, {
            animate: true,
            duration: 300,
            ...zoomOptions,
            canvasOffsets: app.getEditorUIOffsets()
          });
        }
      }
    }
  }, [focusIndex, searchMatches, app]);
  useEffect30(() => {
    return () => {
      setFocusIndex(null);
      searchedQueryRef.current = null;
      lastSceneNonceRef.current = void 0;
      setAppState({
        searchMatches: []
      });
      setIsSearching(false);
    };
  }, [setAppState, setFocusIndex]);
  const stableState = useStable({
    goToNextItem,
    goToPreviousItem,
    searchMatches
  });
  useEffect30(() => {
    const eventHandler = (event) => {
      if (event.key === KEYS.ESCAPE && !app.state.openDialog && !app.state.openPopup) {
        event.preventDefault();
        event.stopPropagation();
        setAppState({
          openSidebar: null
        });
        return;
      }
      if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.F) {
        event.preventDefault();
        event.stopPropagation();
        if (!searchInputRef.current?.matches(":focus")) {
          if (app.state.openDialog) {
            setAppState({
              openDialog: null
            });
          }
          searchInputRef.current?.focus();
          searchInputRef.current?.select();
        } else {
          setAppState({
            openSidebar: null
          });
        }
      }
      if (event.target instanceof HTMLElement && event.target.closest(".layer-ui__search")) {
        if (stableState.searchMatches.items.length) {
          if (event.key === KEYS.ENTER) {
            event.stopPropagation();
            stableState.goToNextItem();
          }
          if (event.key === KEYS.ARROW_UP) {
            event.stopPropagation();
            stableState.goToPreviousItem();
          } else if (event.key === KEYS.ARROW_DOWN) {
            event.stopPropagation();
            stableState.goToNextItem();
          }
        }
      }
    };
    return addEventListener(window, "keydown" /* KEYDOWN */, eventHandler, {
      capture: true
    });
  }, [setAppState, stableState, app]);
  const matchCount = `${searchMatches.items.length} ${searchMatches.items.length === 1 ? t("search.singleResult") : t("search.multipleResults")}`;
  return /* @__PURE__ */ jsxs61("div", { className: "layer-ui__search", children: [
    /* @__PURE__ */ jsx109("div", { className: "layer-ui__search-header", children: /* @__PURE__ */ jsx109(
      TextField,
      {
        className: CLASSES.SEARCH_MENU_INPUT_WRAPPER,
        value: inputValue,
        ref: searchInputRef,
        placeholder: t("search.placeholder"),
        icon: searchIcon,
        onChange: (value) => {
          setInputValue(value);
          setIsSearching(true);
          const searchQuery2 = value.trim();
          handleSearch(searchQuery2, app, (matchItems, index) => {
            setSearchMatches({
              nonce: randomInteger(),
              items: matchItems
            });
            setFocusIndex(index);
            searchedQueryRef.current = searchQuery2;
            lastSceneNonceRef.current = app.scene.getSceneNonce();
            setAppState({
              searchMatches: matchItems.map((searchMatch) => ({
                id: searchMatch.textElement.id,
                focus: false,
                matchedLines: searchMatch.matchedLines
              }))
            });
            setIsSearching(false);
          });
        },
        selectOnRender: true
      }
    ) }),
    /* @__PURE__ */ jsxs61("div", { className: "layer-ui__search-count", children: [
      searchMatches.items.length > 0 && /* @__PURE__ */ jsxs61(Fragment20, { children: [
        focusIndex !== null && focusIndex > -1 ? /* @__PURE__ */ jsxs61("div", { children: [
          focusIndex + 1,
          " / ",
          matchCount
        ] }) : /* @__PURE__ */ jsx109("div", { children: matchCount }),
        /* @__PURE__ */ jsxs61("div", { className: "result-nav", children: [
          /* @__PURE__ */ jsx109(
            Button,
            {
              onSelect: () => {
                goToNextItem();
              },
              className: "result-nav-btn",
              children: collapseDownIcon
            }
          ),
          /* @__PURE__ */ jsx109(
            Button,
            {
              onSelect: () => {
                goToPreviousItem();
              },
              className: "result-nav-btn",
              children: upIcon
            }
          )
        ] })
      ] }),
      searchMatches.items.length === 0 && searchQuery && searchedQueryRef.current && /* @__PURE__ */ jsx109("div", { style: { margin: "1rem auto" }, children: t("search.noMatch") })
    ] }),
    /* @__PURE__ */ jsx109(
      MatchList,
      {
        matches: searchMatches,
        onItemClick: setFocusIndex,
        focusIndex,
        searchQuery
      }
    )
  ] });
};
var ListItem = (props) => {
  const preview = [
    props.preview.moreBefore ? "..." : "",
    props.preview.previewText.slice(0, props.preview.indexInSearchQuery),
    props.preview.previewText.slice(
      props.preview.indexInSearchQuery,
      props.preview.indexInSearchQuery + props.searchQuery.length
    ),
    props.preview.previewText.slice(
      props.preview.indexInSearchQuery + props.searchQuery.length
    ),
    props.preview.moreAfter ? "..." : ""
  ];
  return /* @__PURE__ */ jsx109(
    "div",
    {
      tabIndex: -1,
      className: clsx48("layer-ui__result-item", {
        active: props.highlighted
      }),
      onClick: props.onClick,
      ref: (ref) => {
        if (props.highlighted) {
          ref?.scrollIntoView({ behavior: "auto", block: "nearest" });
        }
      },
      children: /* @__PURE__ */ jsx109("div", { className: "preview-text", children: preview.flatMap((text, idx) => /* @__PURE__ */ jsx109(Fragment19, { children: idx === 2 ? /* @__PURE__ */ jsx109("b", { children: text }) : text }, idx)) })
    }
  );
};
var MatchListBase = (props) => {
  return /* @__PURE__ */ jsx109("div", { className: "layer-ui__search-result-container", children: props.matches.items.map((searchMatch, index) => /* @__PURE__ */ jsx109(
    ListItem,
    {
      searchQuery: props.searchQuery,
      preview: searchMatch.preview,
      highlighted: index === props.focusIndex,
      onClick: () => props.onItemClick(index)
    },
    searchMatch.textElement.id + searchMatch.index
  )) });
};
var areEqual = (prevProps, nextProps) => {
  return prevProps.matches.nonce === nextProps.matches.nonce && prevProps.focusIndex === nextProps.focusIndex;
};
var MatchList = memo3(MatchListBase, areEqual);
var getMatchPreview = (text, index, searchQuery) => {
  const WORDS_BEFORE = 2;
  const WORDS_AFTER = 5;
  const substrBeforeQuery = text.slice(0, index);
  const wordsBeforeQuery = substrBeforeQuery.split(/\s+/);
  const isQueryCompleteBefore = substrBeforeQuery.endsWith(" ");
  const startWordIndex = wordsBeforeQuery.length - WORDS_BEFORE - 1 - (isQueryCompleteBefore ? 0 : 1);
  let wordsBeforeAsString = wordsBeforeQuery.slice(startWordIndex <= 0 ? 0 : startWordIndex).join(" ") + (isQueryCompleteBefore ? " " : "");
  const MAX_ALLOWED_CHARS = 20;
  wordsBeforeAsString = wordsBeforeAsString.length > MAX_ALLOWED_CHARS ? wordsBeforeAsString.slice(-MAX_ALLOWED_CHARS) : wordsBeforeAsString;
  const substrAfterQuery = text.slice(index + searchQuery.length);
  const wordsAfter = substrAfterQuery.split(/\s+/);
  const isQueryCompleteAfter = !substrAfterQuery.startsWith(" ");
  const numberOfWordsToTake = isQueryCompleteAfter ? WORDS_AFTER + 1 : WORDS_AFTER;
  const wordsAfterAsString = (isQueryCompleteAfter ? "" : " ") + wordsAfter.slice(0, numberOfWordsToTake).join(" ");
  return {
    indexInSearchQuery: wordsBeforeAsString.length,
    previewText: wordsBeforeAsString + searchQuery + wordsAfterAsString,
    moreBefore: startWordIndex > 0,
    moreAfter: wordsAfter.length > numberOfWordsToTake
  };
};
var normalizeWrappedText = (wrappedText, originalText) => {
  const wrappedLines = wrappedText.split("\n");
  const normalizedLines = [];
  let originalIndex = 0;
  for (let i = 0; i < wrappedLines.length; i++) {
    let currentLine = wrappedLines[i];
    const nextLine = wrappedLines[i + 1];
    if (nextLine) {
      const nextLineIndexInOriginal = originalText.indexOf(
        nextLine,
        originalIndex
      );
      if (nextLineIndexInOriginal > currentLine.length + originalIndex) {
        let j = nextLineIndexInOriginal - (currentLine.length + originalIndex);
        while (j > 0) {
          currentLine += " ";
          j--;
        }
      }
    }
    normalizedLines.push(currentLine);
    originalIndex = originalIndex + currentLine.length;
  }
  return normalizedLines.join("\n");
};
var getMatchedLines = (textElement, searchQuery, index) => {
  const normalizedText = normalizeWrappedText(
    textElement.text,
    textElement.originalText
  );
  const lines = normalizedText.split("\n");
  const lineIndexRanges = [];
  let currentIndex = 0;
  let lineNumber = 0;
  for (const line of lines) {
    const startIndex2 = currentIndex;
    const endIndex = startIndex2 + line.length - 1;
    lineIndexRanges.push({
      line,
      startIndex: startIndex2,
      endIndex,
      lineNumber
    });
    currentIndex = endIndex + 1;
    lineNumber++;
  }
  let startIndex = index;
  let remainingQuery = textElement.originalText.slice(
    index,
    index + searchQuery.length
  );
  const matchedLines = [];
  for (const lineIndexRange of lineIndexRanges) {
    if (remainingQuery === "") {
      break;
    }
    if (startIndex >= lineIndexRange.startIndex && startIndex <= lineIndexRange.endIndex) {
      const matchCapacity = lineIndexRange.endIndex + 1 - startIndex;
      const textToStart = lineIndexRange.line.slice(
        0,
        startIndex - lineIndexRange.startIndex
      );
      const matchedWord = remainingQuery.slice(0, matchCapacity);
      remainingQuery = remainingQuery.slice(matchCapacity);
      const offset2 = measureText(
        textToStart,
        getFontString(textElement),
        textElement.lineHeight,
        true
      );
      if (textToStart === "") {
        offset2.width = 0;
      }
      if (textElement.textAlign !== "left" && lineIndexRange.line.length > 0) {
        const lineLength = measureText(
          lineIndexRange.line,
          getFontString(textElement),
          textElement.lineHeight,
          true
        );
        const spaceToStart = textElement.textAlign === "center" ? (textElement.width - lineLength.width) / 2 : textElement.width - lineLength.width;
        offset2.width += spaceToStart;
      }
      const { width, height } = measureText(
        matchedWord,
        getFontString(textElement),
        textElement.lineHeight
      );
      const offsetX = offset2.width;
      const offsetY = lineIndexRange.lineNumber * offset2.height;
      matchedLines.push({
        offsetX,
        offsetY,
        width,
        height
      });
      startIndex += matchCapacity;
    }
  }
  return matchedLines;
};
var escapeSpecialCharacters = (string) => {
  return string.replace(/[.*+?^${}()|[\]\\-]/g, "\\$&");
};
var handleSearch = debounce2(
  (searchQuery, app, cb) => {
    if (!searchQuery || searchQuery === "") {
      cb([], null);
      return;
    }
    const elements = app.scene.getNonDeletedElements();
    const texts = elements.filter(
      (el) => isTextElement(el)
    );
    texts.sort((a, b) => a.y - b.y);
    const matchItems = [];
    const regex = new RegExp(escapeSpecialCharacters(searchQuery), "gi");
    for (const textEl of texts) {
      let match = null;
      const text = textEl.originalText;
      while ((match = regex.exec(text)) !== null) {
        const preview = getMatchPreview(text, match.index, searchQuery);
        const matchedLines = getMatchedLines(textEl, searchQuery, match.index);
        if (matchedLines.length > 0) {
          matchItems.push({
            textElement: textEl,
            searchQuery,
            preview,
            index: match.index,
            matchedLines
          });
        }
      }
    }
    const visibleIds = new Set(
      app.visibleElements.map((visibleElement) => visibleElement.id)
    );
    const focusIndex = matchItems.findIndex(
      (matchItem) => visibleIds.has(matchItem.textElement.id)
    ) ?? null;
    cb(matchItems, focusIndex);
  },
  SEARCH_DEBOUNCE
);

// components/DefaultSidebar.tsx
init_icons();
import { jsx as jsx110, jsxs as jsxs62 } from "react/jsx-runtime";
import { createElement as createElement2 } from "react";
var DefaultSidebarTrigger = withInternalFallback(
  "DefaultSidebarTrigger",
  (props) => {
    const { DefaultSidebarTriggerTunnel } = useTunnels();
    return /* @__PURE__ */ jsx110(DefaultSidebarTriggerTunnel.In, { children: /* @__PURE__ */ jsx110(
      Sidebar.Trigger,
      {
        ...props,
        className: "default-sidebar-trigger",
        name: DEFAULT_SIDEBAR.name
      }
    ) });
  }
);
DefaultSidebarTrigger.displayName = "DefaultSidebarTrigger";
var DefaultTabTriggers = ({ children }) => {
  const { DefaultSidebarTabTriggersTunnel } = useTunnels();
  return /* @__PURE__ */ jsx110(DefaultSidebarTabTriggersTunnel.In, { children });
};
DefaultTabTriggers.displayName = "DefaultTabTriggers";
var DefaultSidebar = Object.assign(
  withInternalFallback(
    "DefaultSidebar",
    ({
      children,
      className,
      onDock,
      docked,
      ...rest
    }) => {
      const appState = useUIAppState();
      const setAppState = useExcalidrawSetAppState();
      const { DefaultSidebarTabTriggersTunnel } = useTunnels();
      const isForceDocked = appState.openSidebar?.tab === CANVAS_SEARCH_TAB;
      return /* @__PURE__ */ createElement2(
        Sidebar,
        {
          ...rest,
          name: "default",
          key: "default",
          className: clsx49("default-sidebar", className),
          docked: isForceDocked || (docked ?? appState.defaultSidebarDockedPreference),
          onDock: (
            // `onDock=false` disables docking.
            // if `docked` passed, but no onDock passed, disable manual docking.
            isForceDocked || onDock === false || !onDock && docked != null ? void 0 : (
              // compose to allow the host app to listen on default behavior
              composeEventHandlers(onDock, (docked2) => {
                setAppState({ defaultSidebarDockedPreference: docked2 });
              })
            )
          )
        },
        /* @__PURE__ */ jsxs62(Sidebar.Tabs, { children: [
          /* @__PURE__ */ jsx110(Sidebar.Header, { children: /* @__PURE__ */ jsxs62(Sidebar.TabTriggers, { children: [
            /* @__PURE__ */ jsx110(Sidebar.TabTrigger, { tab: CANVAS_SEARCH_TAB, children: searchIcon }),
            /* @__PURE__ */ jsx110(Sidebar.TabTrigger, { tab: LIBRARY_SIDEBAR_TAB, children: LibraryIcon }),
            /* @__PURE__ */ jsx110(DefaultSidebarTabTriggersTunnel.Out, {})
          ] }) }),
          /* @__PURE__ */ jsx110(Sidebar.Tab, { tab: LIBRARY_SIDEBAR_TAB, children: /* @__PURE__ */ jsx110(LibraryMenu, {}) }),
          /* @__PURE__ */ jsx110(Sidebar.Tab, { tab: CANVAS_SEARCH_TAB, children: /* @__PURE__ */ jsx110(SearchMenu2, {}) }),
          children
        ] })
      );
    }
  ),
  {
    Trigger: DefaultSidebarTrigger,
    TabTriggers: DefaultTabTriggers
  }
);

// components/LayerUI.tsx
init_mutateElement();
init_ShapeCache();
init_Scene();

// components/LaserPointerButton.tsx
init_define_import_meta_env();
init_icons();
import clsx50 from "clsx";
import { jsx as jsx111, jsxs as jsxs63 } from "react/jsx-runtime";
var DEFAULT_SIZE3 = "small";
var LaserPointerButton = (props) => {
  return /* @__PURE__ */ jsxs63(
    "label",
    {
      className: clsx50(
        "ToolIcon ToolIcon__LaserPointer",
        `ToolIcon_size_${DEFAULT_SIZE3}`,
        {
          "is-mobile": props.isMobile
        }
      ),
      title: `${props.title}`,
      children: [
        /* @__PURE__ */ jsx111(
          "input",
          {
            className: "ToolIcon_type_checkbox",
            type: "checkbox",
            name: props.name,
            onChange: props.onChange,
            checked: props.checked,
            "aria-label": props.title,
            "data-testid": "toolbar-LaserPointer"
          }
        ),
        /* @__PURE__ */ jsx111("div", { className: "ToolIcon__icon", children: laserPointerToolIcon })
      ]
    }
  );
};

// components/TTDDialog/TTDDialog.tsx
init_define_import_meta_env();

// components/TTDDialog/MermaidToExcalidraw.tsx
init_define_import_meta_env();
import { useState as useState32, useRef as useRef31, useEffect as useEffect32, useDeferredValue } from "react";
init_icons();

// components/TTDDialog/common.ts
init_define_import_meta_env();
init_constants();
init_blob();
var resetPreview = ({
  canvasRef,
  setError
}) => {
  const canvasNode = canvasRef.current;
  if (!canvasNode) {
    return;
  }
  const parent = canvasNode.parentElement;
  if (!parent) {
    return;
  }
  parent.style.background = "";
  setError(null);
  canvasNode.replaceChildren();
};
var convertMermaidToExcalidraw = async ({
  canvasRef,
  mermaidToExcalidrawLib,
  mermaidDefinition,
  setError,
  data
}) => {
  const canvasNode = canvasRef.current;
  const parent = canvasNode?.parentElement;
  if (!canvasNode || !parent) {
    return;
  }
  if (!mermaidDefinition) {
    resetPreview({ canvasRef, setError });
    return;
  }
  try {
    const api = await mermaidToExcalidrawLib.api;
    let ret;
    try {
      ret = await api.parseMermaidToExcalidraw(mermaidDefinition);
    } catch (err) {
      ret = await api.parseMermaidToExcalidraw(
        mermaidDefinition.replace(/"/g, "'")
      );
    }
    const { elements, files } = ret;
    setError(null);
    data.current = {
      elements: convertToExcalidrawElements(elements, {
        regenerateIds: true
      }),
      files
    };
    const canvas2 = await exportToCanvas2({
      elements: data.current.elements,
      files: data.current.files,
      exportPadding: DEFAULT_EXPORT_PADDING,
      maxWidthOrHeight: Math.max(parent.offsetWidth, parent.offsetHeight) * window.devicePixelRatio
    });
    try {
      await canvasToBlob(canvas2);
    } catch (e) {
      if (e.name === "CANVAS_POSSIBLY_TOO_BIG") {
        throw new Error(t("canvasError.canvasTooBig"));
      }
      throw e;
    }
    parent.style.background = "var(--default-bg-color)";
    canvasNode.replaceChildren(canvas2);
  } catch (err) {
    parent.style.background = "var(--default-bg-color)";
    if (mermaidDefinition) {
      setError(err);
    }
    throw err;
  }
};
var saveMermaidDataToStorage = (mermaidDefinition) => {
  EditorLocalStorage.set(
    EDITOR_LS_KEYS.MERMAID_TO_EXCALIDRAW,
    mermaidDefinition
  );
};
var insertToEditor = ({
  app,
  data,
  text,
  shouldSaveMermaidDataToStorage
}) => {
  const { elements: newElements, files } = data.current;
  if (!newElements.length) {
    return;
  }
  app.addElementsFromPasteOrLibrary({
    elements: newElements,
    files,
    position: "center",
    fitToContent: true
  });
  app.setOpenDialog(null);
  if (shouldSaveMermaidDataToStorage && text) {
    saveMermaidDataToStorage(text);
  }
};

// components/TTDDialog/TTDDialogPanels.tsx
init_define_import_meta_env();
import { jsx as jsx112 } from "react/jsx-runtime";
var TTDDialogPanels = ({ children }) => {
  return /* @__PURE__ */ jsx112("div", { className: "ttd-dialog-panels", children });
};

// components/TTDDialog/TTDDialogPanel.tsx
init_define_import_meta_env();
import clsx51 from "clsx";
import { jsx as jsx113, jsxs as jsxs64 } from "react/jsx-runtime";
var TTDDialogPanel = ({
  label,
  children,
  panelAction,
  panelActionDisabled = false,
  onTextSubmitInProgess,
  renderTopRight,
  renderSubmitShortcut,
  renderBottomRight
}) => {
  return /* @__PURE__ */ jsxs64("div", { className: "ttd-dialog-panel", children: [
    /* @__PURE__ */ jsxs64("div", { className: "ttd-dialog-panel__header", children: [
      /* @__PURE__ */ jsx113("label", { children: label }),
      renderTopRight?.()
    ] }),
    children,
    /* @__PURE__ */ jsxs64(
      "div",
      {
        className: clsx51("ttd-dialog-panel-button-container", {
          invisible: !panelAction
        }),
        style: { display: "flex", alignItems: "center" },
        children: [
          /* @__PURE__ */ jsxs64(
            Button,
            {
              className: "ttd-dialog-panel-button",
              onSelect: panelAction ? panelAction.action : () => {
              },
              disabled: panelActionDisabled || onTextSubmitInProgess,
              children: [
                /* @__PURE__ */ jsxs64("div", { className: clsx51({ invisible: onTextSubmitInProgess }), children: [
                  panelAction?.label,
                  panelAction?.icon && /* @__PURE__ */ jsx113("span", { children: panelAction.icon })
                ] }),
                onTextSubmitInProgess && /* @__PURE__ */ jsx113(Spinner_default, {})
              ]
            }
          ),
          !panelActionDisabled && !onTextSubmitInProgess && renderSubmitShortcut?.(),
          renderBottomRight?.()
        ]
      }
    )
  ] });
};

// components/TTDDialog/TTDDialogInput.tsx
init_define_import_meta_env();
init_constants();
init_keys();
import { useEffect as useEffect31, useRef as useRef30 } from "react";
import { jsx as jsx114 } from "react/jsx-runtime";
var TTDDialogInput = ({
  input,
  placeholder,
  onChange,
  onKeyboardSubmit
}) => {
  const ref = useRef30(null);
  const callbackRef = useRef30(onKeyboardSubmit);
  callbackRef.current = onKeyboardSubmit;
  useEffect31(() => {
    if (!callbackRef.current) {
      return;
    }
    const textarea = ref.current;
    if (textarea) {
      const handleKeyDown = (event) => {
        if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.ENTER) {
          event.preventDefault();
          callbackRef.current?.();
        }
      };
      textarea.addEventListener("keydown" /* KEYDOWN */, handleKeyDown);
      return () => {
        textarea.removeEventListener("keydown" /* KEYDOWN */, handleKeyDown);
      };
    }
  }, []);
  return /* @__PURE__ */ jsx114(
    "textarea",
    {
      className: "ttd-dialog-input",
      onChange,
      value: input,
      placeholder,
      autoFocus: true,
      ref
    }
  );
};

// components/TTDDialog/TTDDialogOutput.tsx
init_define_import_meta_env();
import { jsx as jsx115, jsxs as jsxs65 } from "react/jsx-runtime";
var ErrorComp = ({ error }) => {
  return /* @__PURE__ */ jsxs65(
    "div",
    {
      "data-testid": "ttd-dialog-output-error",
      className: "ttd-dialog-output-error",
      children: [
        "Error! ",
        /* @__PURE__ */ jsx115("p", { children: error })
      ]
    }
  );
};
var TTDDialogOutput = ({
  error,
  canvasRef,
  loaded
}) => {
  return /* @__PURE__ */ jsxs65("div", { className: "ttd-dialog-output-wrapper", children: [
    error && /* @__PURE__ */ jsx115(ErrorComp, { error: error.message }),
    loaded ? /* @__PURE__ */ jsx115(
      "div",
      {
        ref: canvasRef,
        style: { opacity: error ? "0.15" : 1 },
        className: "ttd-dialog-output-canvas-container"
      }
    ) : /* @__PURE__ */ jsx115(Spinner_default, { size: "2rem" })
  ] });
};

// components/TTDDialog/MermaidToExcalidraw.tsx
init_constants();
init_utils2();

// components/TTDDialog/TTDDialogSubmitShortcut.tsx
init_define_import_meta_env();
init_utils2();
import { jsx as jsx116, jsxs as jsxs66 } from "react/jsx-runtime";
var TTDDialogSubmitShortcut = () => {
  return /* @__PURE__ */ jsxs66("div", { className: "ttd-dialog-submit-shortcut", children: [
    /* @__PURE__ */ jsx116("div", { className: "ttd-dialog-submit-shortcut__key", children: getShortcutKey("CtrlOrCmd") }),
    /* @__PURE__ */ jsx116("div", { className: "ttd-dialog-submit-shortcut__key", children: getShortcutKey("Enter") })
  ] });
};

// components/TTDDialog/MermaidToExcalidraw.tsx
import { Fragment as Fragment21, jsx as jsx117, jsxs as jsxs67 } from "react/jsx-runtime";
var MERMAID_EXAMPLE = "flowchart TD\n A[Christmas] -->|Get money| B(Go shopping)\n B --> C{Let me think}\n C -->|One| D[Laptop]\n C -->|Two| E[iPhone]\n C -->|Three| F[Car]";
var debouncedSaveMermaidDefinition = debounce(saveMermaidDataToStorage, 300);
var MermaidToExcalidraw = ({
  mermaidToExcalidrawLib
}) => {
  const [text, setText] = useState32(
    () => EditorLocalStorage.get(EDITOR_LS_KEYS.MERMAID_TO_EXCALIDRAW) || MERMAID_EXAMPLE
  );
  const deferredText = useDeferredValue(text.trim());
  const [error, setError] = useState32(null);
  const canvasRef = useRef31(null);
  const data = useRef31({ elements: [], files: null });
  const app = useApp();
  useEffect32(() => {
    convertMermaidToExcalidraw({
      canvasRef,
      data,
      mermaidToExcalidrawLib,
      setError,
      mermaidDefinition: deferredText
    }).catch((err) => {
      if (isDevEnv()) {
        console.error("Failed to parse mermaid definition", err);
      }
    });
    debouncedSaveMermaidDefinition(deferredText);
  }, [deferredText, mermaidToExcalidrawLib]);
  useEffect32(
    () => () => {
      debouncedSaveMermaidDefinition.flush();
    },
    []
  );
  const onInsertToEditor = () => {
    insertToEditor({
      app,
      data,
      text,
      shouldSaveMermaidDataToStorage: true
    });
  };
  return /* @__PURE__ */ jsxs67(Fragment21, { children: [
    /* @__PURE__ */ jsx117("div", { className: "ttd-dialog-desc", children: /* @__PURE__ */ jsx117(
      Trans_default,
      {
        i18nKey: "mermaid.description",
        flowchartLink: (el) => /* @__PURE__ */ jsx117("a", { href: "https://mermaid.js.org/syntax/flowchart.html", children: el }),
        sequenceLink: (el) => /* @__PURE__ */ jsx117("a", { href: "https://mermaid.js.org/syntax/sequenceDiagram.html", children: el }),
        classLink: (el) => /* @__PURE__ */ jsx117("a", { href: "https://mermaid.js.org/syntax/classDiagram.html", children: el })
      }
    ) }),
    /* @__PURE__ */ jsxs67(TTDDialogPanels, { children: [
      /* @__PURE__ */ jsx117(TTDDialogPanel, { label: t("mermaid.syntax"), children: /* @__PURE__ */ jsx117(
        TTDDialogInput,
        {
          input: text,
          placeholder: "Write Mermaid diagram defintion here...",
          onChange: (event) => setText(event.target.value),
          onKeyboardSubmit: () => {
            onInsertToEditor();
          }
        }
      ) }),
      /* @__PURE__ */ jsx117(
        TTDDialogPanel,
        {
          label: t("mermaid.preview"),
          panelAction: {
            action: () => {
              onInsertToEditor();
            },
            label: t("mermaid.button"),
            icon: ArrowRightIcon
          },
          renderSubmitShortcut: () => /* @__PURE__ */ jsx117(TTDDialogSubmitShortcut, {}),
          children: /* @__PURE__ */ jsx117(
            TTDDialogOutput,
            {
              canvasRef,
              loaded: mermaidToExcalidrawLib.loaded,
              error
            }
          )
        }
      )
    ] })
  ] });
};
var MermaidToExcalidraw_default = MermaidToExcalidraw;

// components/TTDDialog/TTDDialogTabs.tsx
init_define_import_meta_env();
import * as RadixTabs5 from "@radix-ui/react-tabs";
import { useRef as useRef32 } from "react";
init_utils2();
import { jsx as jsx118 } from "react/jsx-runtime";
var TTDDialogTabs = (props) => {
  const setAppState = useExcalidrawSetAppState();
  const rootRef = useRef32(null);
  const minHeightRef = useRef32(0);
  return /* @__PURE__ */ jsx118(
    RadixTabs5.Root,
    {
      ref: rootRef,
      className: "ttd-dialog-tabs-root",
      value: props.tab,
      onValueChange: (tab) => {
        if (!tab) {
          return;
        }
        const modalContentNode = rootRef.current?.closest(".Modal__content");
        if (modalContentNode) {
          const currHeight = modalContentNode.offsetHeight || 0;
          if (currHeight > minHeightRef.current) {
            minHeightRef.current = currHeight;
            modalContentNode.style.minHeight = `min(${minHeightRef.current}px, 100%)`;
          }
        }
        if (props.dialog === "ttd" && isMemberOf(["text-to-diagram", "mermaid"], tab)) {
          setAppState({
            openDialog: { name: props.dialog, tab }
          });
        }
      },
      children: props.children
    }
  );
};
TTDDialogTabs.displayName = "TTDDialogTabs";
var TTDDialogTabs_default = TTDDialogTabs;

// components/TTDDialog/TTDDialog.tsx
import { useEffect as useEffect33, useRef as useRef33, useState as useState33 } from "react";

// components/TTDDialog/TTDDialogTabTriggers.tsx
init_define_import_meta_env();
import * as RadixTabs6 from "@radix-ui/react-tabs";
import { jsx as jsx119 } from "react/jsx-runtime";
var TTDDialogTabTriggers = ({
  children,
  ...rest
}) => {
  return /* @__PURE__ */ jsx119(RadixTabs6.List, { className: "ttd-dialog-triggers", ...rest, children });
};
TTDDialogTabTriggers.displayName = "TTDDialogTabTriggers";

// components/TTDDialog/TTDDialogTabTrigger.tsx
init_define_import_meta_env();
import * as RadixTabs7 from "@radix-ui/react-tabs";
import { jsx as jsx120 } from "react/jsx-runtime";
var TTDDialogTabTrigger = ({
  children,
  tab,
  onSelect,
  ...rest
}) => {
  return /* @__PURE__ */ jsx120(RadixTabs7.Trigger, { value: tab, asChild: true, onSelect, children: /* @__PURE__ */ jsx120("button", { type: "button", className: "ttd-dialog-tab-trigger", ...rest, children }) });
};
TTDDialogTabTrigger.displayName = "TTDDialogTabTrigger";

// components/TTDDialog/TTDDialogTab.tsx
init_define_import_meta_env();
import * as RadixTabs8 from "@radix-ui/react-tabs";
import { jsx as jsx121 } from "react/jsx-runtime";
var TTDDialogTab = ({
  tab,
  children,
  ...rest
}) => {
  return /* @__PURE__ */ jsx121(RadixTabs8.Content, { ...rest, value: tab, children });
};
TTDDialogTab.displayName = "TTDDialogTab";

// components/TTDDialog/TTDDialog.tsx
init_icons();
import { atom as atom14, useAtom as useAtom17 } from "jotai";
init_math();
import { jsx as jsx122, jsxs as jsxs68 } from "react/jsx-runtime";
var MIN_PROMPT_LENGTH = 3;
var MAX_PROMPT_LENGTH = 1e3;
var rateLimitsAtom = atom14(null);
var ttdGenerationAtom = atom14(null);
var TTDDialog = (props) => {
  const appState = useUIAppState();
  if (appState.openDialog?.name !== "ttd") {
    return null;
  }
  return /* @__PURE__ */ jsx122(TTDDialogBase, { ...props, tab: appState.openDialog.tab });
};
var TTDDialogBase = withInternalFallback(
  "TTDDialogBase",
  ({
    tab,
    ...rest
  }) => {
    const app = useApp();
    const setAppState = useExcalidrawSetAppState();
    const someRandomDivRef = useRef33(null);
    const [ttdGeneration, setTtdGeneration] = useAtom17(ttdGenerationAtom);
    const [text, setText] = useState33(ttdGeneration?.prompt ?? "");
    const prompt = text.trim();
    const handleTextChange = (event) => {
      setText(event.target.value);
      setTtdGeneration((s) => ({
        generatedResponse: s?.generatedResponse ?? null,
        prompt: event.target.value
      }));
    };
    const [onTextSubmitInProgess, setOnTextSubmitInProgess] = useState33(false);
    const [rateLimits, setRateLimits] = useAtom17(rateLimitsAtom);
    const onGenerate = async () => {
      if (prompt.length > MAX_PROMPT_LENGTH || prompt.length < MIN_PROMPT_LENGTH || onTextSubmitInProgess || rateLimits?.rateLimitRemaining === 0 || // means this is not a text-to-diagram dialog (needed for TS only)
      "__fallback" in rest) {
        if (prompt.length < MIN_PROMPT_LENGTH) {
          setError(
            new Error(
              `Prompt is too short (min ${MIN_PROMPT_LENGTH} characters)`
            )
          );
        }
        if (prompt.length > MAX_PROMPT_LENGTH) {
          setError(
            new Error(
              `Prompt is too long (max ${MAX_PROMPT_LENGTH} characters)`
            )
          );
        }
        return;
      }
      try {
        setOnTextSubmitInProgess(true);
        trackEvent("ai", "generate", "ttd");
        const { generatedResponse, error: error2, rateLimit, rateLimitRemaining } = await rest.onTextSubmit(prompt);
        if (typeof generatedResponse === "string") {
          setTtdGeneration((s) => ({
            generatedResponse,
            prompt: s?.prompt ?? null
          }));
        }
        if (isFiniteNumber(rateLimit) && isFiniteNumber(rateLimitRemaining)) {
          setRateLimits({ rateLimit, rateLimitRemaining });
        }
        if (error2) {
          setError(error2);
          return;
        }
        if (!generatedResponse) {
          setError(new Error("Generation failed"));
          return;
        }
        try {
          await convertMermaidToExcalidraw({
            canvasRef: someRandomDivRef,
            data,
            mermaidToExcalidrawLib,
            setError,
            mermaidDefinition: generatedResponse
          });
          trackEvent("ai", "mermaid parse success", "ttd");
        } catch (error3) {
          console.info(
            `%cTTD mermaid render errror: ${error3.message}`,
            "color: red"
          );
          console.info(
            `>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TTD mermaid definition render errror: ${error3.message}`,
            "color: yellow"
          );
          trackEvent("ai", "mermaid parse failed", "ttd");
          setError(
            new Error(
              "Generated an invalid diagram :(. You may also try a different prompt."
            )
          );
        }
      } catch (error2) {
        let message = error2.message;
        if (!message || message === "Failed to fetch") {
          message = "Request failed";
        }
        setError(new Error(message));
      } finally {
        setOnTextSubmitInProgess(false);
      }
    };
    const refOnGenerate = useRef33(onGenerate);
    refOnGenerate.current = onGenerate;
    const [mermaidToExcalidrawLib, setMermaidToExcalidrawLib] = useState33({
      loaded: false,
      api: import("@excalidraw/mermaid-to-excalidraw")
    });
    useEffect33(() => {
      const fn = async () => {
        await mermaidToExcalidrawLib.api;
        setMermaidToExcalidrawLib((prev) => ({ ...prev, loaded: true }));
      };
      fn();
    }, [mermaidToExcalidrawLib.api]);
    const data = useRef33({ elements: [], files: null });
    const [error, setError] = useState33(null);
    return /* @__PURE__ */ jsx122(
      Dialog,
      {
        className: "ttd-dialog",
        onCloseRequest: () => {
          app.setOpenDialog(null);
        },
        size: 1200,
        title: false,
        ...rest,
        autofocus: false,
        children: /* @__PURE__ */ jsxs68(TTDDialogTabs_default, { dialog: "ttd", tab, children: [
          "__fallback" in rest && rest.__fallback ? /* @__PURE__ */ jsx122("p", { className: "dialog-mermaid-title", children: t("mermaid.title") }) : /* @__PURE__ */ jsxs68(TTDDialogTabTriggers, { children: [
            /* @__PURE__ */ jsx122(TTDDialogTabTrigger, { tab: "text-to-diagram", children: /* @__PURE__ */ jsxs68("div", { style: { display: "flex", alignItems: "center" }, children: [
              t("labels.textToDiagram"),
              /* @__PURE__ */ jsx122(
                "div",
                {
                  style: {
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "1px 6px",
                    marginLeft: "10px",
                    fontSize: 10,
                    borderRadius: "12px",
                    background: "var(--color-promo)",
                    color: "var(--color-surface-lowest)"
                  },
                  children: "AI Beta"
                }
              )
            ] }) }),
            /* @__PURE__ */ jsx122(TTDDialogTabTrigger, { tab: "mermaid", children: "Mermaid" })
          ] }),
          /* @__PURE__ */ jsx122(TTDDialogTab, { className: "ttd-dialog-content", tab: "mermaid", children: /* @__PURE__ */ jsx122(
            MermaidToExcalidraw_default,
            {
              mermaidToExcalidrawLib
            }
          ) }),
          !("__fallback" in rest) && /* @__PURE__ */ jsxs68(TTDDialogTab, { className: "ttd-dialog-content", tab: "text-to-diagram", children: [
            /* @__PURE__ */ jsx122("div", { className: "ttd-dialog-desc", children: "Currently we use Mermaid as a middle step, so you'll get best results if you describe a diagram, workflow, flow chart, and similar." }),
            /* @__PURE__ */ jsxs68(TTDDialogPanels, { children: [
              /* @__PURE__ */ jsx122(
                TTDDialogPanel,
                {
                  label: t("labels.prompt"),
                  panelAction: {
                    action: onGenerate,
                    label: "Generate",
                    icon: ArrowRightIcon
                  },
                  onTextSubmitInProgess,
                  panelActionDisabled: prompt.length > MAX_PROMPT_LENGTH || rateLimits?.rateLimitRemaining === 0,
                  renderTopRight: () => {
                    if (!rateLimits) {
                      return null;
                    }
                    return /* @__PURE__ */ jsxs68(
                      "div",
                      {
                        className: "ttd-dialog-rate-limit",
                        style: {
                          fontSize: 12,
                          marginLeft: "auto",
                          color: rateLimits.rateLimitRemaining === 0 ? "var(--color-danger)" : void 0
                        },
                        children: [
                          rateLimits.rateLimitRemaining,
                          " requests left today"
                        ]
                      }
                    );
                  },
                  renderSubmitShortcut: () => /* @__PURE__ */ jsx122(TTDDialogSubmitShortcut, {}),
                  renderBottomRight: () => {
                    if (typeof ttdGeneration?.generatedResponse === "string") {
                      return /* @__PURE__ */ jsxs68(
                        "div",
                        {
                          className: "excalidraw-link",
                          style: { marginLeft: "auto", fontSize: 14 },
                          onClick: () => {
                            if (typeof ttdGeneration?.generatedResponse === "string") {
                              saveMermaidDataToStorage(
                                ttdGeneration.generatedResponse
                              );
                              setAppState({
                                openDialog: { name: "ttd", tab: "mermaid" }
                              });
                            }
                          },
                          children: [
                            "View as Mermaid",
                            /* @__PURE__ */ jsx122(InlineIcon, { icon: ArrowRightIcon })
                          ]
                        }
                      );
                    }
                    const ratio = prompt.length / MAX_PROMPT_LENGTH;
                    if (ratio > 0.8) {
                      return /* @__PURE__ */ jsxs68(
                        "div",
                        {
                          style: {
                            marginLeft: "auto",
                            fontSize: 12,
                            fontFamily: "monospace",
                            color: ratio > 1 ? "var(--color-danger)" : void 0
                          },
                          children: [
                            "Length: ",
                            prompt.length,
                            "/",
                            MAX_PROMPT_LENGTH
                          ]
                        }
                      );
                    }
                    return null;
                  },
                  children: /* @__PURE__ */ jsx122(
                    TTDDialogInput,
                    {
                      onChange: handleTextChange,
                      input: text,
                      placeholder: "Describe what you want to see...",
                      onKeyboardSubmit: () => {
                        refOnGenerate.current();
                      }
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx122(
                TTDDialogPanel,
                {
                  label: "Preview",
                  panelAction: {
                    action: () => {
                      console.info("Panel action clicked");
                      insertToEditor({ app, data });
                    },
                    label: "Insert",
                    icon: ArrowRightIcon
                  },
                  children: /* @__PURE__ */ jsx122(
                    TTDDialogOutput,
                    {
                      canvasRef: someRandomDivRef,
                      error,
                      loaded: mermaidToExcalidrawLib.loaded
                    }
                  )
                }
              )
            ] })
          ] })
        ] })
      }
    );
  }
);

// components/Stats/index.tsx
init_define_import_meta_env();
init_bounds();
import { useEffect as useEffect35, useMemo as useMemo9, useState as useState35, memo as memo4 } from "react";
init_icons();
import { throttle as throttle3 } from "lodash";

// components/Stats/Dimension.tsx
init_define_import_meta_env();

// components/Stats/DragInput.tsx
init_define_import_meta_env();
init_constants();
init_keys();
init_newElement();
import { useEffect as useEffect34, useRef as useRef34, useState as useState34 } from "react";
import clsx52 from "clsx";

// components/Stats/utils.ts
init_define_import_meta_env();
init_math();
init_binding();
init_mutateElement();
init_resizeElements();
init_textElement();
init_typeChecks();
init_groups();
init_utils2();
var SMALLEST_DELTA = 0.01;
var isPropertyEditable = (element, property) => {
  if (property === "height" && isTextElement(element)) {
    return false;
  }
  if (property === "width" && isTextElement(element)) {
    return false;
  }
  if (property === "angle" && isFrameLikeElement(element)) {
    return false;
  }
  return true;
};
var getStepSizedValue = (value, stepSize) => {
  const v = value + stepSize / 2;
  return v - v % stepSize;
};
var getElementsInAtomicUnit = (atomicUnit, elementsMap, originalElementsMap) => {
  return Object.keys(atomicUnit).map((id) => ({
    original: (originalElementsMap ?? elementsMap).get(id),
    latest: elementsMap.get(id)
  })).filter((el) => el.original !== void 0 && el.latest !== void 0);
};
var newOrigin = (x1, y1, w1, h1, w2, h2, angle) => {
  return {
    x: x1 + (w1 - w2) / 2 + (w2 - w1) / 2 * Math.cos(angle) + (h1 - h2) / 2 * Math.sin(angle),
    y: y1 + (h1 - h2) / 2 + (w2 - w1) / 2 * Math.sin(angle) + (h2 - h1) / 2 * Math.cos(angle)
  };
};
var resizeElement = (nextWidth, nextHeight, keepAspectRatio, origElement, elementsMap, elements, scene, shouldInformMutation = true) => {
  const latestElement = elementsMap.get(origElement.id);
  if (!latestElement) {
    return;
  }
  let boundTextFont = {};
  const boundTextElement = getBoundTextElement(latestElement, elementsMap);
  if (boundTextElement) {
    const minWidth = getApproxMinLineWidth(
      getFontString(boundTextElement),
      boundTextElement.lineHeight
    );
    const minHeight = getApproxMinLineHeight(
      boundTextElement.fontSize,
      boundTextElement.lineHeight
    );
    nextWidth = Math.max(nextWidth, minWidth);
    nextHeight = Math.max(nextHeight, minHeight);
  }
  const { width: oldWidth, height: oldHeight } = latestElement;
  mutateElement(
    latestElement,
    {
      ...newOrigin(
        latestElement.x,
        latestElement.y,
        latestElement.width,
        latestElement.height,
        nextWidth,
        nextHeight,
        latestElement.angle
      ),
      width: nextWidth,
      height: nextHeight,
      ...rescalePointsInElement(origElement, nextWidth, nextHeight, true)
    },
    shouldInformMutation
  );
  updateBindings(latestElement, elementsMap, elements, scene, {
    newSize: {
      width: nextWidth,
      height: nextHeight
    }
  });
  if (boundTextElement) {
    boundTextFont = {
      fontSize: boundTextElement.fontSize
    };
    if (keepAspectRatio) {
      const updatedElement = {
        ...latestElement,
        width: nextWidth,
        height: nextHeight
      };
      const nextFont = measureFontSizeFromWidth(
        boundTextElement,
        elementsMap,
        getBoundTextMaxWidth(updatedElement, boundTextElement)
      );
      boundTextFont = {
        fontSize: nextFont?.size ?? boundTextElement.fontSize
      };
    }
  }
  updateBoundElements(latestElement, elementsMap, {
    oldSize: { width: oldWidth, height: oldHeight }
  });
  if (boundTextElement && boundTextFont) {
    mutateElement(boundTextElement, {
      fontSize: boundTextFont.fontSize
    });
  }
  handleBindTextResize(latestElement, elementsMap, "e", keepAspectRatio);
};
var moveElement = (newTopLeftX, newTopLeftY, originalElement, elementsMap, elements, scene, originalElementsMap, shouldInformMutation = true) => {
  const latestElement = elementsMap.get(originalElement.id);
  if (!latestElement) {
    return;
  }
  const [cx, cy] = [
    originalElement.x + originalElement.width / 2,
    originalElement.y + originalElement.height / 2
  ];
  const [topLeftX, topLeftY] = pointRotateRads(
    pointFrom(originalElement.x, originalElement.y),
    pointFrom(cx, cy),
    originalElement.angle
  );
  const changeInX = newTopLeftX - topLeftX;
  const changeInY = newTopLeftY - topLeftY;
  const [x, y] = pointRotateRads(
    pointFrom(newTopLeftX, newTopLeftY),
    pointFrom(cx + changeInX, cy + changeInY),
    -originalElement.angle
  );
  mutateElement(
    latestElement,
    {
      x,
      y
    },
    shouldInformMutation
  );
  updateBindings(latestElement, elementsMap, elements, scene);
  const boundTextElement = getBoundTextElement(
    originalElement,
    originalElementsMap
  );
  if (boundTextElement) {
    const latestBoundTextElement = elementsMap.get(boundTextElement.id);
    latestBoundTextElement && mutateElement(
      latestBoundTextElement,
      {
        x: boundTextElement.x + changeInX,
        y: boundTextElement.y + changeInY
      },
      shouldInformMutation
    );
  }
};
var getAtomicUnits = (targetElements, appState) => {
  const selectedGroupIds = getSelectedGroupIds(appState);
  const _atomicUnits = selectedGroupIds.map((gid) => {
    return getElementsInGroup(targetElements, gid).reduce((acc, el) => {
      acc[el.id] = true;
      return acc;
    }, {});
  });
  targetElements.filter((el) => !isInGroup(el)).forEach((el) => {
    _atomicUnits.push({
      [el.id]: true
    });
  });
  return _atomicUnits;
};
var updateBindings = (latestElement, elementsMap, elements, scene, options) => {
  if (isLinearElement(latestElement)) {
    bindOrUnbindLinearElements(
      [latestElement],
      elementsMap,
      elements,
      scene,
      true,
      []
    );
  } else {
    updateBoundElements(latestElement, elementsMap, options);
  }
};

// components/Stats/DragInput.tsx
init_store();
init_utils2();
import { jsx as jsx123, jsxs as jsxs69 } from "react/jsx-runtime";
var StatsDragInput = ({
  label,
  icon,
  dragInputCallback,
  value,
  elements,
  editable = true,
  shouldKeepAspectRatio,
  property,
  scene,
  appState,
  sensitivity = 1
}) => {
  const app = useApp();
  const inputRef = useRef34(null);
  const labelRef = useRef34(null);
  const [inputValue, setInputValue] = useState34(value.toString());
  const stateRef = useRef34(null);
  if (!stateRef.current) {
    stateRef.current = {
      originalAppState: cloneJSON(appState),
      originalElements: elements,
      lastUpdatedValue: inputValue,
      updatePending: false
    };
  }
  useEffect34(() => {
    const inputValue2 = value.toString();
    setInputValue(inputValue2);
    stateRef.current.lastUpdatedValue = inputValue2;
  }, [value]);
  const handleInputValue = (updatedValue, elements2, appState2) => {
    if (!stateRef.current.updatePending) {
      return false;
    }
    stateRef.current.updatePending = false;
    const parsed = Number(updatedValue);
    if (isNaN(parsed)) {
      setInputValue(value.toString());
      return;
    }
    const rounded = Number(parsed.toFixed(2));
    const original = Number(value);
    if (isNaN(original) || Math.abs(rounded - original) >= SMALLEST_DELTA) {
      stateRef.current.lastUpdatedValue = updatedValue;
      dragInputCallback({
        accumulatedChange: 0,
        instantChange: 0,
        originalElements: elements2,
        originalElementsMap: app.scene.getNonDeletedElementsMap(),
        shouldKeepAspectRatio,
        shouldChangeByStepSize: false,
        scene,
        nextValue: rounded,
        property,
        originalAppState: appState2,
        setInputValue: (value2) => setInputValue(String(value2))
      });
      app.syncActionResult({ storeAction: StoreAction.CAPTURE });
    }
  };
  const callbacksRef = useRef34({});
  callbacksRef.current.handleInputValue = handleInputValue;
  useEffect34(() => {
    const input = inputRef.current;
    const callbacks = callbacksRef.current;
    return () => {
      const nextValue = input?.value;
      if (nextValue) {
        callbacks.handleInputValue?.(
          nextValue,
          stateRef.current.originalElements,
          stateRef.current.originalAppState
        );
      }
      window.removeEventListener(
        "pointermove" /* POINTER_MOVE */,
        callbacks.onPointerMove,
        false
      );
      window.removeEventListener(
        "pointerup" /* POINTER_UP */,
        callbacks.onPointerUp,
        false
      );
    };
  }, [
    // we need to track change of `editable` state as mount/unmount
    // because react doesn't trigger `blur` when a an input is blurred due
    // to being disabled (https://github.com/facebook/react/issues/9142).
    // As such, if we keep rendering disabled inputs, then change in selection
    // to an element that has a given property as non-editable would not trigger
    // blur/unmount and wouldn't update the value.
    editable
  ]);
  if (!editable) {
    return null;
  }
  return /* @__PURE__ */ jsxs69(
    "div",
    {
      className: clsx52("drag-input-container", !editable && "disabled"),
      "data-testid": label,
      children: [
        /* @__PURE__ */ jsx123(
          "div",
          {
            className: "drag-input-label",
            ref: labelRef,
            onPointerDown: (event) => {
              if (inputRef.current && editable) {
                document.body.classList.add("excalidraw-cursor-resize");
                let startValue = Number(inputRef.current.value);
                if (isNaN(startValue)) {
                  startValue = 0;
                }
                let lastPointer = null;
                let originalElementsMap = app.scene.getNonDeletedElements().reduce((acc, element) => {
                  acc.set(element.id, deepCopyElement(element));
                  return acc;
                }, /* @__PURE__ */ new Map());
                let originalElements = elements.map(
                  (element) => originalElementsMap.get(element.id)
                );
                const originalAppState = cloneJSON(appState);
                let accumulatedChange = 0;
                let stepChange = 0;
                const onPointerMove = (event2) => {
                  if (lastPointer && originalElementsMap !== null && originalElements !== null) {
                    const instantChange = event2.clientX - lastPointer.x;
                    if (instantChange !== 0) {
                      stepChange += instantChange;
                      if (Math.abs(stepChange) >= sensitivity) {
                        stepChange = Math.sign(stepChange) * Math.floor(Math.abs(stepChange) / sensitivity);
                        accumulatedChange += stepChange;
                        dragInputCallback({
                          accumulatedChange,
                          instantChange: stepChange,
                          originalElements,
                          originalElementsMap,
                          shouldKeepAspectRatio,
                          shouldChangeByStepSize: event2.shiftKey,
                          property,
                          scene,
                          originalAppState,
                          setInputValue: (value2) => setInputValue(String(value2))
                        });
                        stepChange = 0;
                      }
                    }
                  }
                  lastPointer = {
                    x: event2.clientX,
                    y: event2.clientY
                  };
                };
                const onPointerUp = () => {
                  window.removeEventListener(
                    "pointermove" /* POINTER_MOVE */,
                    onPointerMove,
                    false
                  );
                  app.syncActionResult({ storeAction: StoreAction.CAPTURE });
                  lastPointer = null;
                  accumulatedChange = 0;
                  stepChange = 0;
                  originalElements = null;
                  originalElementsMap = null;
                  document.body.classList.remove("excalidraw-cursor-resize");
                  window.removeEventListener("pointerup" /* POINTER_UP */, onPointerUp, false);
                };
                callbacksRef.current.onPointerMove = onPointerMove;
                callbacksRef.current.onPointerUp = onPointerUp;
                window.addEventListener("pointermove" /* POINTER_MOVE */, onPointerMove, false);
                window.addEventListener("pointerup" /* POINTER_UP */, onPointerUp, false);
              }
            },
            onPointerEnter: () => {
              if (labelRef.current) {
                labelRef.current.style.cursor = "ew-resize";
              }
            },
            children: icon ? /* @__PURE__ */ jsx123(InlineIcon, { icon }) : label
          }
        ),
        /* @__PURE__ */ jsx123(
          "input",
          {
            className: "drag-input",
            autoComplete: "off",
            spellCheck: "false",
            onKeyDown: (event) => {
              if (editable) {
                const eventTarget = event.target;
                if (eventTarget instanceof HTMLInputElement && event.key === KEYS.ENTER) {
                  handleInputValue(eventTarget.value, elements, appState);
                  app.focusContainer();
                }
              }
            },
            ref: inputRef,
            value: inputValue,
            onChange: (event) => {
              stateRef.current.updatePending = true;
              setInputValue(event.target.value);
            },
            onFocus: (event) => {
              event.target.select();
              stateRef.current.originalElements = elements;
              stateRef.current.originalAppState = cloneJSON(appState);
            },
            onBlur: (event) => {
              if (!inputValue) {
                setInputValue(value.toString());
              } else if (editable) {
                handleInputValue(
                  event.target.value,
                  stateRef.current.originalElements,
                  stateRef.current.originalAppState
                );
              }
            },
            disabled: !editable
          }
        )
      ]
    }
  );
};
var DragInput_default = StatsDragInput;

// components/Stats/Dimension.tsx
init_constants();
import { jsx as jsx124 } from "react/jsx-runtime";
var STEP_SIZE = 10;
var _shouldKeepAspectRatio = (element) => {
  return element.type === "image";
};
var handleDimensionChange = ({
  accumulatedChange,
  originalElements,
  shouldKeepAspectRatio,
  shouldChangeByStepSize,
  nextValue,
  property,
  scene
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const elements = scene.getNonDeletedElements();
  const origElement = originalElements[0];
  if (origElement) {
    const keepAspectRatio = shouldKeepAspectRatio || _shouldKeepAspectRatio(origElement);
    const aspectRatio = origElement.width / origElement.height;
    if (nextValue !== void 0) {
      const nextWidth2 = Math.max(
        property === "width" ? nextValue : keepAspectRatio ? nextValue * aspectRatio : origElement.width,
        MIN_WIDTH_OR_HEIGHT
      );
      const nextHeight2 = Math.max(
        property === "height" ? nextValue : keepAspectRatio ? nextValue / aspectRatio : origElement.height,
        MIN_WIDTH_OR_HEIGHT
      );
      resizeElement(
        nextWidth2,
        nextHeight2,
        keepAspectRatio,
        origElement,
        elementsMap,
        elements,
        scene
      );
      return;
    }
    const changeInWidth = property === "width" ? accumulatedChange : 0;
    const changeInHeight = property === "height" ? accumulatedChange : 0;
    let nextWidth = Math.max(0, origElement.width + changeInWidth);
    if (property === "width") {
      if (shouldChangeByStepSize) {
        nextWidth = getStepSizedValue(nextWidth, STEP_SIZE);
      } else {
        nextWidth = Math.round(nextWidth);
      }
    }
    let nextHeight = Math.max(0, origElement.height + changeInHeight);
    if (property === "height") {
      if (shouldChangeByStepSize) {
        nextHeight = getStepSizedValue(nextHeight, STEP_SIZE);
      } else {
        nextHeight = Math.round(nextHeight);
      }
    }
    if (keepAspectRatio) {
      if (property === "width") {
        nextHeight = Math.round(nextWidth / aspectRatio * 100) / 100;
      } else {
        nextWidth = Math.round(nextHeight * aspectRatio * 100) / 100;
      }
    }
    nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);
    nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);
    resizeElement(
      nextWidth,
      nextHeight,
      keepAspectRatio,
      origElement,
      elementsMap,
      elements,
      scene
    );
  }
};
var DimensionDragInput = ({
  property,
  element,
  scene,
  appState
}) => {
  const value = Math.round((property === "width" ? element.width : element.height) * 100) / 100;
  return /* @__PURE__ */ jsx124(
    DragInput_default,
    {
      label: property === "width" ? "W" : "H",
      elements: [element],
      dragInputCallback: handleDimensionChange,
      value,
      editable: isPropertyEditable(element, property),
      scene,
      appState,
      property
    }
  );
};
var Dimension_default = DimensionDragInput;

// components/Stats/Angle.tsx
init_define_import_meta_env();
init_mutateElement();
init_textElement();
init_typeChecks();
init_icons();
init_math();
import { jsx as jsx125 } from "react/jsx-runtime";
var STEP_SIZE2 = 15;
var handleDegreeChange = ({
  accumulatedChange,
  originalElements,
  shouldChangeByStepSize,
  nextValue,
  scene
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const elements = scene.getNonDeletedElements();
  const origElement = originalElements[0];
  if (origElement && !isElbowArrow(origElement)) {
    const latestElement = elementsMap.get(origElement.id);
    if (!latestElement) {
      return;
    }
    if (nextValue !== void 0) {
      const nextAngle2 = degreesToRadians(nextValue);
      mutateElement(latestElement, {
        angle: nextAngle2
      });
      updateBindings(latestElement, elementsMap, elements, scene);
      const boundTextElement2 = getBoundTextElement(latestElement, elementsMap);
      if (boundTextElement2 && !isArrowElement(latestElement)) {
        mutateElement(boundTextElement2, { angle: nextAngle2 });
      }
      return;
    }
    const originalAngleInDegrees = Math.round(radiansToDegrees(origElement.angle) * 100) / 100;
    const changeInDegrees = Math.round(accumulatedChange);
    let nextAngleInDegrees = (originalAngleInDegrees + changeInDegrees) % 360;
    if (shouldChangeByStepSize) {
      nextAngleInDegrees = getStepSizedValue(nextAngleInDegrees, STEP_SIZE2);
    }
    nextAngleInDegrees = nextAngleInDegrees < 0 ? nextAngleInDegrees + 360 : nextAngleInDegrees;
    const nextAngle = degreesToRadians(nextAngleInDegrees);
    mutateElement(latestElement, {
      angle: nextAngle
    });
    updateBindings(latestElement, elementsMap, elements, scene);
    const boundTextElement = getBoundTextElement(latestElement, elementsMap);
    if (boundTextElement && !isArrowElement(latestElement)) {
      mutateElement(boundTextElement, { angle: nextAngle });
    }
  }
};
var Angle = ({ element, scene, appState, property }) => {
  return /* @__PURE__ */ jsx125(
    DragInput_default,
    {
      label: "A",
      icon: angleIcon,
      value: Math.round(radiansToDegrees(element.angle) % 360 * 100) / 100,
      elements: [element],
      dragInputCallback: handleDegreeChange,
      editable: isPropertyEditable(element, "angle"),
      scene,
      appState,
      property
    }
  );
};
var Angle_default = Angle;

// components/Stats/FontSize.tsx
init_define_import_meta_env();
init_mutateElement();
init_icons();
init_element();
init_typeChecks();
init_textElement();
import { jsx as jsx126 } from "react/jsx-runtime";
var MIN_FONT_SIZE2 = 4;
var STEP_SIZE3 = 4;
var handleFontSizeChange = ({
  accumulatedChange,
  originalElements,
  shouldChangeByStepSize,
  nextValue,
  scene
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const origElement = originalElements[0];
  if (origElement) {
    const latestElement = elementsMap.get(origElement.id);
    if (!latestElement || !isTextElement(latestElement)) {
      return;
    }
    let nextFontSize;
    if (nextValue !== void 0) {
      nextFontSize = Math.max(Math.round(nextValue), MIN_FONT_SIZE2);
    } else if (origElement.type === "text") {
      const originalFontSize = Math.round(origElement.fontSize);
      const changeInFontSize = Math.round(accumulatedChange);
      nextFontSize = Math.max(
        originalFontSize + changeInFontSize,
        MIN_FONT_SIZE2
      );
      if (shouldChangeByStepSize) {
        nextFontSize = getStepSizedValue(nextFontSize, STEP_SIZE3);
      }
    }
    if (nextFontSize) {
      mutateElement(latestElement, {
        fontSize: nextFontSize
      });
      redrawTextBoundingBox(
        latestElement,
        scene.getContainerElement(latestElement),
        scene.getNonDeletedElementsMap()
      );
    }
  }
};
var FontSize = ({ element, scene, appState, property }) => {
  const _element = isTextElement(element) ? element : hasBoundTextElement(element) ? getBoundTextElement(element, scene.getNonDeletedElementsMap()) : null;
  if (!_element) {
    return null;
  }
  return /* @__PURE__ */ jsx126(
    DragInput_default,
    {
      label: "F",
      value: Math.round(_element.fontSize * 10) / 10,
      elements: [_element],
      dragInputCallback: handleFontSizeChange,
      icon: fontSizeIcon,
      appState,
      scene,
      property
    }
  );
};
var FontSize_default = FontSize;

// components/Stats/MultiDimension.tsx
init_define_import_meta_env();
init_element();
init_binding();
init_mutateElement();
init_resizeElements();
init_textElement();
import { useMemo as useMemo7 } from "react";
init_constants();
init_math();
import { jsx as jsx127 } from "react/jsx-runtime";
var STEP_SIZE4 = 10;
var getResizedUpdates = (anchorX, anchorY, scale, origElement) => {
  const offsetX = origElement.x - anchorX;
  const offsetY = origElement.y - anchorY;
  const nextWidth = origElement.width * scale;
  const nextHeight = origElement.height * scale;
  const x = anchorX + offsetX * scale;
  const y = anchorY + offsetY * scale;
  return {
    width: nextWidth,
    height: nextHeight,
    x,
    y,
    ...rescalePointsInElement(origElement, nextWidth, nextHeight, false),
    ...isTextElement(origElement) ? { fontSize: origElement.fontSize * scale } : {}
  };
};
var resizeElementInGroup = (anchorX, anchorY, property, scale, latestElement, origElement, elementsMap, originalElementsMap) => {
  const updates = getResizedUpdates(anchorX, anchorY, scale, origElement);
  const { width: oldWidth, height: oldHeight } = latestElement;
  mutateElement(latestElement, updates, false);
  const boundTextElement = getBoundTextElement(
    origElement,
    originalElementsMap
  );
  if (boundTextElement) {
    const newFontSize = boundTextElement.fontSize * scale;
    updateBoundElements(latestElement, elementsMap, {
      oldSize: { width: oldWidth, height: oldHeight }
    });
    const latestBoundTextElement = elementsMap.get(boundTextElement.id);
    if (latestBoundTextElement && isTextElement(latestBoundTextElement)) {
      mutateElement(
        latestBoundTextElement,
        {
          fontSize: newFontSize
        },
        false
      );
      handleBindTextResize(
        latestElement,
        elementsMap,
        property === "width" ? "e" : "s",
        true
      );
    }
  }
};
var resizeGroup = (nextWidth, nextHeight, initialHeight, aspectRatio, anchor, property, latestElements, originalElements, elementsMap, originalElementsMap) => {
  if (property === "width") {
    nextHeight = Math.round(nextWidth / aspectRatio * 100) / 100;
  } else {
    nextWidth = Math.round(nextHeight * aspectRatio * 100) / 100;
  }
  const scale = nextHeight / initialHeight;
  for (let i = 0; i < originalElements.length; i++) {
    const origElement = originalElements[i];
    const latestElement = latestElements[i];
    resizeElementInGroup(
      anchor[0],
      anchor[1],
      property,
      scale,
      latestElement,
      origElement,
      elementsMap,
      originalElementsMap
    );
  }
};
var handleDimensionChange2 = ({
  accumulatedChange,
  originalElements,
  originalElementsMap,
  originalAppState,
  shouldChangeByStepSize,
  nextValue,
  scene,
  property
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const elements = scene.getNonDeletedElements();
  const atomicUnits = getAtomicUnits(originalElements, originalAppState);
  if (nextValue !== void 0) {
    for (const atomicUnit of atomicUnits) {
      const elementsInUnit = getElementsInAtomicUnit(
        atomicUnit,
        elementsMap,
        originalElementsMap
      );
      if (elementsInUnit.length > 1) {
        const latestElements = elementsInUnit.map((el) => el.latest);
        const originalElements2 = elementsInUnit.map((el) => el.original);
        const [x1, y1, x2, y2] = getCommonBounds(originalElements2);
        const initialWidth = x2 - x1;
        const initialHeight = y2 - y1;
        const aspectRatio = initialWidth / initialHeight;
        const nextWidth = Math.max(
          MIN_WIDTH_OR_HEIGHT,
          property === "width" ? Math.max(0, nextValue) : initialWidth
        );
        const nextHeight = Math.max(
          MIN_WIDTH_OR_HEIGHT,
          property === "height" ? Math.max(0, nextValue) : initialHeight
        );
        resizeGroup(
          nextWidth,
          nextHeight,
          initialHeight,
          aspectRatio,
          pointFrom(x1, y1),
          property,
          latestElements,
          originalElements2,
          elementsMap,
          originalElementsMap
        );
      } else {
        const [el] = elementsInUnit;
        const latestElement = el?.latest;
        const origElement = el?.original;
        if (latestElement && origElement && isPropertyEditable(latestElement, property)) {
          let nextWidth = property === "width" ? Math.max(0, nextValue) : latestElement.width;
          if (property === "width") {
            if (shouldChangeByStepSize) {
              nextWidth = getStepSizedValue(nextWidth, STEP_SIZE4);
            } else {
              nextWidth = Math.round(nextWidth);
            }
          }
          let nextHeight = property === "height" ? Math.max(0, nextValue) : latestElement.height;
          if (property === "height") {
            if (shouldChangeByStepSize) {
              nextHeight = getStepSizedValue(nextHeight, STEP_SIZE4);
            } else {
              nextHeight = Math.round(nextHeight);
            }
          }
          nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);
          nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);
          resizeElement(
            nextWidth,
            nextHeight,
            false,
            origElement,
            elementsMap,
            elements,
            scene,
            false
          );
        }
      }
    }
    scene.triggerUpdate();
    return;
  }
  const changeInWidth = property === "width" ? accumulatedChange : 0;
  const changeInHeight = property === "height" ? accumulatedChange : 0;
  for (const atomicUnit of atomicUnits) {
    const elementsInUnit = getElementsInAtomicUnit(
      atomicUnit,
      elementsMap,
      originalElementsMap
    );
    if (elementsInUnit.length > 1) {
      const latestElements = elementsInUnit.map((el) => el.latest);
      const originalElements2 = elementsInUnit.map((el) => el.original);
      const [x1, y1, x2, y2] = getCommonBounds(originalElements2);
      const initialWidth = x2 - x1;
      const initialHeight = y2 - y1;
      const aspectRatio = initialWidth / initialHeight;
      let nextWidth = Math.max(0, initialWidth + changeInWidth);
      if (property === "width") {
        if (shouldChangeByStepSize) {
          nextWidth = getStepSizedValue(nextWidth, STEP_SIZE4);
        } else {
          nextWidth = Math.round(nextWidth);
        }
      }
      let nextHeight = Math.max(0, initialHeight + changeInHeight);
      if (property === "height") {
        if (shouldChangeByStepSize) {
          nextHeight = getStepSizedValue(nextHeight, STEP_SIZE4);
        } else {
          nextHeight = Math.round(nextHeight);
        }
      }
      nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);
      nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);
      resizeGroup(
        nextWidth,
        nextHeight,
        initialHeight,
        aspectRatio,
        pointFrom(x1, y1),
        property,
        latestElements,
        originalElements2,
        elementsMap,
        originalElementsMap
      );
    } else {
      const [el] = elementsInUnit;
      const latestElement = el?.latest;
      const origElement = el?.original;
      if (latestElement && origElement && isPropertyEditable(latestElement, property)) {
        let nextWidth = Math.max(0, origElement.width + changeInWidth);
        if (property === "width") {
          if (shouldChangeByStepSize) {
            nextWidth = getStepSizedValue(nextWidth, STEP_SIZE4);
          } else {
            nextWidth = Math.round(nextWidth);
          }
        }
        let nextHeight = Math.max(0, origElement.height + changeInHeight);
        if (property === "height") {
          if (shouldChangeByStepSize) {
            nextHeight = getStepSizedValue(nextHeight, STEP_SIZE4);
          } else {
            nextHeight = Math.round(nextHeight);
          }
        }
        nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);
        nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);
        resizeElement(
          nextWidth,
          nextHeight,
          false,
          origElement,
          elementsMap,
          elements,
          scene
        );
      }
    }
  }
  scene.triggerUpdate();
};
var MultiDimension = ({
  property,
  elements,
  elementsMap,
  atomicUnits,
  scene,
  appState
}) => {
  const sizes = useMemo7(
    () => atomicUnits.map((atomicUnit) => {
      const elementsInUnit = getElementsInAtomicUnit(atomicUnit, elementsMap);
      if (elementsInUnit.length > 1) {
        const [x1, y1, x2, y2] = getCommonBounds(
          elementsInUnit.map((el2) => el2.latest)
        );
        return Math.round((property === "width" ? x2 - x1 : y2 - y1) * 100) / 100;
      }
      const [el] = elementsInUnit;
      return Math.round(
        (property === "width" ? el.latest.width : el.latest.height) * 100
      ) / 100;
    }),
    [elementsMap, atomicUnits, property]
  );
  const value = new Set(sizes).size === 1 ? Math.round(sizes[0] * 100) / 100 : "Mixed";
  const editable = sizes.length > 0;
  return /* @__PURE__ */ jsx127(
    DragInput_default,
    {
      label: property === "width" ? "W" : "H",
      elements,
      dragInputCallback: handleDimensionChange2,
      value,
      editable,
      appState,
      property,
      scene
    }
  );
};
var MultiDimension_default = MultiDimension;

// components/Stats/index.tsx
init_groups();

// components/Stats/MultiAngle.tsx
init_define_import_meta_env();
init_mutateElement();
init_textElement();
init_typeChecks();
init_groups();
init_icons();
init_math();
import { jsx as jsx128 } from "react/jsx-runtime";
var STEP_SIZE5 = 15;
var handleDegreeChange2 = ({
  accumulatedChange,
  originalElements,
  shouldChangeByStepSize,
  nextValue,
  property,
  scene
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const editableLatestIndividualElements = originalElements.map((el) => elementsMap.get(el.id)).filter((el) => el && !isInGroup(el) && isPropertyEditable(el, property));
  const editableOriginalIndividualElements = originalElements.filter(
    (el) => !isInGroup(el) && isPropertyEditable(el, property)
  );
  if (nextValue !== void 0) {
    const nextAngle = degreesToRadians(nextValue);
    for (const element of editableLatestIndividualElements) {
      if (!element) {
        continue;
      }
      mutateElement(
        element,
        {
          angle: nextAngle
        },
        false
      );
      const boundTextElement = getBoundTextElement(element, elementsMap);
      if (boundTextElement && !isArrowElement(element)) {
        mutateElement(boundTextElement, { angle: nextAngle }, false);
      }
    }
    scene.triggerUpdate();
    return;
  }
  for (let i = 0; i < editableLatestIndividualElements.length; i++) {
    const latestElement = editableLatestIndividualElements[i];
    if (!latestElement) {
      continue;
    }
    const originalElement = editableOriginalIndividualElements[i];
    const originalAngleInDegrees = Math.round(radiansToDegrees(originalElement.angle) * 100) / 100;
    const changeInDegrees = Math.round(accumulatedChange);
    let nextAngleInDegrees = (originalAngleInDegrees + changeInDegrees) % 360;
    if (shouldChangeByStepSize) {
      nextAngleInDegrees = getStepSizedValue(nextAngleInDegrees, STEP_SIZE5);
    }
    nextAngleInDegrees = nextAngleInDegrees < 0 ? nextAngleInDegrees + 360 : nextAngleInDegrees;
    const nextAngle = degreesToRadians(nextAngleInDegrees);
    mutateElement(
      latestElement,
      {
        angle: nextAngle
      },
      false
    );
    const boundTextElement = getBoundTextElement(latestElement, elementsMap);
    if (boundTextElement && !isArrowElement(latestElement)) {
      mutateElement(boundTextElement, { angle: nextAngle }, false);
    }
  }
  scene.triggerUpdate();
};
var MultiAngle = ({
  elements,
  scene,
  appState,
  property
}) => {
  const editableLatestIndividualElements = elements.filter(
    (el) => !isInGroup(el) && isPropertyEditable(el, "angle")
  );
  const angles = editableLatestIndividualElements.map(
    (el) => Math.round(radiansToDegrees(el.angle) % 360 * 100) / 100
  );
  const value = new Set(angles).size === 1 ? angles[0] : "Mixed";
  const editable = editableLatestIndividualElements.some(
    (el) => isPropertyEditable(el, "angle")
  );
  return /* @__PURE__ */ jsx128(
    DragInput_default,
    {
      label: "A",
      icon: angleIcon,
      value,
      elements,
      dragInputCallback: handleDegreeChange2,
      editable,
      appState,
      scene,
      property
    }
  );
};
var MultiAngle_default = MultiAngle;

// components/Stats/MultiFontSize.tsx
init_define_import_meta_env();
init_element();
init_mutateElement();
init_typeChecks();
init_groups();
init_icons();
init_textElement();
import { jsx as jsx129 } from "react/jsx-runtime";
var MIN_FONT_SIZE3 = 4;
var STEP_SIZE6 = 4;
var getApplicableTextElements = (elements, elementsMap) => elements.reduce(
  (acc, el) => {
    if (!el || isInGroup(el)) {
      return acc;
    }
    if (isTextElement(el)) {
      acc.push(el);
      return acc;
    }
    if (hasBoundTextElement(el)) {
      const boundTextElement = getBoundTextElement(el, elementsMap);
      if (boundTextElement) {
        acc.push(boundTextElement);
        return acc;
      }
    }
    return acc;
  },
  []
);
var handleFontSizeChange2 = ({
  accumulatedChange,
  originalElements,
  shouldChangeByStepSize,
  nextValue,
  scene
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const latestTextElements = originalElements.map(
    (el) => elementsMap.get(el.id)
  );
  let nextFontSize;
  if (nextValue) {
    nextFontSize = Math.max(Math.round(nextValue), MIN_FONT_SIZE3);
    for (const textElement of latestTextElements) {
      mutateElement(
        textElement,
        {
          fontSize: nextFontSize
        },
        false
      );
      redrawTextBoundingBox(
        textElement,
        scene.getContainerElement(textElement),
        elementsMap,
        false
      );
    }
    scene.triggerUpdate();
  } else {
    const originalTextElements = originalElements;
    for (let i = 0; i < latestTextElements.length; i++) {
      const latestElement = latestTextElements[i];
      const originalElement = originalTextElements[i];
      const originalFontSize = Math.round(originalElement.fontSize);
      const changeInFontSize = Math.round(accumulatedChange);
      let nextFontSize2 = Math.max(
        originalFontSize + changeInFontSize,
        MIN_FONT_SIZE3
      );
      if (shouldChangeByStepSize) {
        nextFontSize2 = getStepSizedValue(nextFontSize2, STEP_SIZE6);
      }
      mutateElement(
        latestElement,
        {
          fontSize: nextFontSize2
        },
        false
      );
      redrawTextBoundingBox(
        latestElement,
        scene.getContainerElement(latestElement),
        elementsMap,
        false
      );
    }
    scene.triggerUpdate();
  }
};
var MultiFontSize = ({
  elements,
  scene,
  appState,
  property,
  elementsMap
}) => {
  const latestTextElements = getApplicableTextElements(elements, elementsMap);
  if (!latestTextElements.length) {
    return null;
  }
  const fontSizes = latestTextElements.map(
    (textEl) => Math.round(textEl.fontSize * 10) / 10
  );
  const value = new Set(fontSizes).size === 1 ? fontSizes[0] : "Mixed";
  const editable = fontSizes.length > 0;
  return /* @__PURE__ */ jsx129(
    DragInput_default,
    {
      label: "F",
      icon: fontSizeIcon,
      elements: latestTextElements,
      dragInputCallback: handleFontSizeChange2,
      value,
      editable,
      scene,
      property,
      appState
    }
  );
};
var MultiFontSize_default = MultiFontSize;

// components/Stats/Position.tsx
init_define_import_meta_env();
init_math();
import { jsx as jsx130 } from "react/jsx-runtime";
var STEP_SIZE7 = 10;
var handlePositionChange = ({
  accumulatedChange,
  originalElements,
  originalElementsMap,
  shouldChangeByStepSize,
  nextValue,
  property,
  scene
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const elements = scene.getNonDeletedElements();
  const origElement = originalElements[0];
  const [cx, cy] = [
    origElement.x + origElement.width / 2,
    origElement.y + origElement.height / 2
  ];
  const [topLeftX, topLeftY] = pointRotateRads(
    pointFrom(origElement.x, origElement.y),
    pointFrom(cx, cy),
    origElement.angle
  );
  if (nextValue !== void 0) {
    const newTopLeftX2 = property === "x" ? nextValue : topLeftX;
    const newTopLeftY2 = property === "y" ? nextValue : topLeftY;
    moveElement(
      newTopLeftX2,
      newTopLeftY2,
      origElement,
      elementsMap,
      elements,
      scene,
      originalElementsMap
    );
    return;
  }
  const changeInTopX = property === "x" ? accumulatedChange : 0;
  const changeInTopY = property === "y" ? accumulatedChange : 0;
  const newTopLeftX = property === "x" ? Math.round(
    shouldChangeByStepSize ? getStepSizedValue(origElement.x + changeInTopX, STEP_SIZE7) : topLeftX + changeInTopX
  ) : topLeftX;
  const newTopLeftY = property === "y" ? Math.round(
    shouldChangeByStepSize ? getStepSizedValue(origElement.y + changeInTopY, STEP_SIZE7) : topLeftY + changeInTopY
  ) : topLeftY;
  moveElement(
    newTopLeftX,
    newTopLeftY,
    origElement,
    elementsMap,
    elements,
    scene,
    originalElementsMap
  );
};
var Position = ({
  property,
  element,
  elementsMap,
  scene,
  appState
}) => {
  const [topLeftX, topLeftY] = pointRotateRads(
    pointFrom(element.x, element.y),
    pointFrom(element.x + element.width / 2, element.y + element.height / 2),
    element.angle
  );
  const value = Math.round((property === "x" ? topLeftX : topLeftY) * 100) / 100;
  return /* @__PURE__ */ jsx130(
    DragInput_default,
    {
      label: property === "x" ? "X" : "Y",
      elements: [element],
      dragInputCallback: handlePositionChange,
      scene,
      value,
      property,
      appState
    }
  );
};
var Position_default = Position;

// components/Stats/MultiPosition.tsx
init_define_import_meta_env();
init_element();
import { useMemo as useMemo8 } from "react";
init_math();
import { jsx as jsx131 } from "react/jsx-runtime";
var STEP_SIZE8 = 10;
var moveElements = (property, changeInTopX, changeInTopY, elements, originalElements, elementsMap, originalElementsMap, scene) => {
  for (let i = 0; i < elements.length; i++) {
    const origElement = originalElements[i];
    const [cx, cy] = [
      origElement.x + origElement.width / 2,
      origElement.y + origElement.height / 2
    ];
    const [topLeftX, topLeftY] = pointRotateRads(
      pointFrom(origElement.x, origElement.y),
      pointFrom(cx, cy),
      origElement.angle
    );
    const newTopLeftX = property === "x" ? Math.round(topLeftX + changeInTopX) : topLeftX;
    const newTopLeftY = property === "y" ? Math.round(topLeftY + changeInTopY) : topLeftY;
    moveElement(
      newTopLeftX,
      newTopLeftY,
      origElement,
      elementsMap,
      elements,
      scene,
      originalElementsMap,
      false
    );
  }
};
var moveGroupTo = (nextX, nextY, originalElements, elementsMap, elements, originalElementsMap, scene) => {
  const [x1, y1, ,] = getCommonBounds(originalElements);
  const offsetX = nextX - x1;
  const offsetY = nextY - y1;
  for (let i = 0; i < originalElements.length; i++) {
    const origElement = originalElements[i];
    const latestElement = elementsMap.get(origElement.id);
    if (!latestElement) {
      continue;
    }
    if (!isTextElement(latestElement) || !latestElement.containerId) {
      const [cx, cy] = [
        latestElement.x + latestElement.width / 2,
        latestElement.y + latestElement.height / 2
      ];
      const [topLeftX, topLeftY] = pointRotateRads(
        pointFrom(latestElement.x, latestElement.y),
        pointFrom(cx, cy),
        latestElement.angle
      );
      moveElement(
        topLeftX + offsetX,
        topLeftY + offsetY,
        origElement,
        elementsMap,
        elements,
        scene,
        originalElementsMap,
        false
      );
    }
  }
};
var handlePositionChange2 = ({
  accumulatedChange,
  originalElements,
  originalElementsMap,
  shouldChangeByStepSize,
  nextValue,
  property,
  scene,
  originalAppState
}) => {
  const elementsMap = scene.getNonDeletedElementsMap();
  const elements = scene.getNonDeletedElements();
  if (nextValue !== void 0) {
    for (const atomicUnit of getAtomicUnits(
      originalElements,
      originalAppState
    )) {
      const elementsInUnit = getElementsInAtomicUnit(
        atomicUnit,
        elementsMap,
        originalElementsMap
      );
      if (elementsInUnit.length > 1) {
        const [x1, y1, ,] = getCommonBounds(
          elementsInUnit.map((el) => el.latest)
        );
        const newTopLeftX = property === "x" ? nextValue : x1;
        const newTopLeftY = property === "y" ? nextValue : y1;
        moveGroupTo(
          newTopLeftX,
          newTopLeftY,
          elementsInUnit.map((el) => el.original),
          elementsMap,
          elements,
          originalElementsMap,
          scene
        );
      } else {
        const origElement = elementsInUnit[0]?.original;
        const latestElement = elementsInUnit[0]?.latest;
        if (origElement && latestElement && isPropertyEditable(latestElement, property)) {
          const [cx, cy] = [
            origElement.x + origElement.width / 2,
            origElement.y + origElement.height / 2
          ];
          const [topLeftX, topLeftY] = pointRotateRads(
            pointFrom(origElement.x, origElement.y),
            pointFrom(cx, cy),
            origElement.angle
          );
          const newTopLeftX = property === "x" ? nextValue : topLeftX;
          const newTopLeftY = property === "y" ? nextValue : topLeftY;
          moveElement(
            newTopLeftX,
            newTopLeftY,
            origElement,
            elementsMap,
            elements,
            scene,
            originalElementsMap,
            false
          );
        }
      }
    }
    scene.triggerUpdate();
    return;
  }
  const change = shouldChangeByStepSize ? getStepSizedValue(accumulatedChange, STEP_SIZE8) : accumulatedChange;
  const changeInTopX = property === "x" ? change : 0;
  const changeInTopY = property === "y" ? change : 0;
  moveElements(
    property,
    changeInTopX,
    changeInTopY,
    originalElements,
    originalElements,
    elementsMap,
    originalElementsMap,
    scene
  );
  scene.triggerUpdate();
};
var MultiPosition = ({
  property,
  elements,
  elementsMap,
  atomicUnits,
  scene,
  appState
}) => {
  const positions = useMemo8(
    () => atomicUnits.map((atomicUnit) => {
      const elementsInUnit = Object.keys(atomicUnit).map((id) => elementsMap.get(id)).filter((el2) => el2 !== void 0);
      if (elementsInUnit.length > 1) {
        const [x1, y1] = getCommonBounds(elementsInUnit);
        return Math.round((property === "x" ? x1 : y1) * 100) / 100;
      }
      const [el] = elementsInUnit;
      const [cx, cy] = [el.x + el.width / 2, el.y + el.height / 2];
      const [topLeftX, topLeftY] = pointRotateRads(
        pointFrom(el.x, el.y),
        pointFrom(cx, cy),
        el.angle
      );
      return Math.round((property === "x" ? topLeftX : topLeftY) * 100) / 100;
    }),
    [atomicUnits, elementsMap, property]
  );
  const value = new Set(positions).size === 1 ? positions[0] : "Mixed";
  return /* @__PURE__ */ jsx131(
    DragInput_default,
    {
      label: property === "x" ? "X" : "Y",
      elements,
      dragInputCallback: handlePositionChange2,
      value,
      property,
      scene,
      appState
    }
  );
};
var MultiPosition_default = MultiPosition;

// components/Stats/Collapsible.tsx
init_define_import_meta_env();
init_icons();
import { Fragment as Fragment22, jsx as jsx132, jsxs as jsxs70 } from "react/jsx-runtime";
var Collapsible = ({
  label,
  open,
  openTrigger,
  children
}) => {
  return /* @__PURE__ */ jsxs70(Fragment22, { children: [
    /* @__PURE__ */ jsxs70(
      "div",
      {
        style: {
          cursor: "pointer",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center"
        },
        onClick: openTrigger,
        children: [
          label,
          /* @__PURE__ */ jsx132(InlineIcon, { icon: open ? collapseUpIcon : collapseDownIcon })
        ]
      }
    ),
    open && /* @__PURE__ */ jsx132("div", { style: { display: "flex", flexDirection: "column" }, children })
  ] });
};
var Collapsible_default = Collapsible;

// components/Stats/index.tsx
init_constants();
init_typeChecks();

// components/Stats/CanvasGrid.tsx
init_define_import_meta_env();
init_scene();
import { jsx as jsx133 } from "react/jsx-runtime";
var STEP_SIZE9 = 5;
var CanvasGrid = ({
  property,
  scene,
  appState,
  setAppState
}) => {
  return /* @__PURE__ */ jsx133(
    DragInput_default,
    {
      label: "Grid step",
      sensitivity: 8,
      elements: [],
      dragInputCallback: ({
        nextValue,
        instantChange,
        shouldChangeByStepSize,
        setInputValue
      }) => {
        setAppState((state) => {
          let nextGridStep;
          if (nextValue) {
            nextGridStep = nextValue;
          } else if (instantChange) {
            nextGridStep = shouldChangeByStepSize ? getStepSizedValue(
              state.gridStep + STEP_SIZE9 * Math.sign(instantChange),
              STEP_SIZE9
            ) : state.gridStep + instantChange;
          }
          if (!nextGridStep) {
            setInputValue(state.gridStep);
            return null;
          }
          nextGridStep = getNormalizedGridStep(nextGridStep);
          setInputValue(nextGridStep);
          return {
            gridStep: nextGridStep
          };
        });
      },
      scene,
      value: appState.gridStep,
      property,
      appState
    }
  );
};
var CanvasGrid_default = CanvasGrid;

// components/Stats/index.tsx
import clsx53 from "clsx";
init_snapping();
import { Fragment as Fragment23, jsx as jsx134, jsxs as jsxs71 } from "react/jsx-runtime";
var STATS_TIMEOUT = 50;
var Stats = (props) => {
  const appState = useExcalidrawAppState();
  const sceneNonce = props.app.scene.getSceneNonce() || 1;
  const selectedElements = props.app.scene.getSelectedElements({
    selectedElementIds: appState.selectedElementIds,
    includeBoundTextElement: false
  });
  const gridModeEnabled = isGridModeEnabled(props.app);
  return /* @__PURE__ */ jsx134(
    StatsInner,
    {
      ...props,
      appState,
      sceneNonce,
      selectedElements,
      gridModeEnabled
    }
  );
};
var StatsRow = ({
  children,
  columns = 1,
  heading,
  style,
  ...rest
}) => /* @__PURE__ */ jsx134(
  "div",
  {
    className: clsx53("exc-stats__row", { "exc-stats__row--heading": heading }),
    style: {
      gridTemplateColumns: `repeat(${columns}, 1fr)`,
      ...style
    },
    ...rest,
    children
  }
);
StatsRow.displayName = "StatsRow";
var StatsRows = ({
  children,
  order,
  style,
  ...rest
}) => /* @__PURE__ */ jsx134("div", { className: "exc-stats__rows", style: { order, ...style }, ...rest, children });
StatsRows.displayName = "StatsRows";
Stats.StatsRow = StatsRow;
Stats.StatsRows = StatsRows;
var StatsInner = memo4(
  ({
    app,
    onClose,
    renderCustomStats,
    selectedElements,
    appState,
    sceneNonce,
    gridModeEnabled
  }) => {
    const scene = app.scene;
    const elements = scene.getNonDeletedElements();
    const elementsMap = scene.getNonDeletedElementsMap();
    const setAppState = useExcalidrawSetAppState();
    const singleElement = selectedElements.length === 1 ? selectedElements[0] : null;
    const multipleElements = selectedElements.length > 1 ? selectedElements : null;
    const [sceneDimension, setSceneDimension] = useState35({
      width: 0,
      height: 0
    });
    const throttledSetSceneDimension = useMemo9(
      () => throttle3((elements2) => {
        const boundingBox = getCommonBounds(elements2);
        setSceneDimension({
          width: Math.round(boundingBox[2]) - Math.round(boundingBox[0]),
          height: Math.round(boundingBox[3]) - Math.round(boundingBox[1])
        });
      }, STATS_TIMEOUT),
      []
    );
    useEffect35(() => {
      throttledSetSceneDimension(elements);
    }, [sceneNonce, elements, throttledSetSceneDimension]);
    useEffect35(
      () => () => throttledSetSceneDimension.cancel(),
      [throttledSetSceneDimension]
    );
    const atomicUnits = useMemo9(() => {
      return getAtomicUnits(selectedElements, appState);
    }, [selectedElements, appState]);
    return /* @__PURE__ */ jsx134("div", { className: "exc-stats", children: /* @__PURE__ */ jsxs71(Island, { padding: 3, children: [
      /* @__PURE__ */ jsxs71("div", { className: "title", children: [
        /* @__PURE__ */ jsx134("h2", { children: t("stats.title") }),
        /* @__PURE__ */ jsx134("div", { className: "close", onClick: onClose, children: CloseIcon })
      ] }),
      /* @__PURE__ */ jsxs71(
        Collapsible_default,
        {
          label: /* @__PURE__ */ jsx134("h3", { children: t("stats.generalStats") }),
          open: !!(appState.stats.panels & STATS_PANELS.generalStats),
          openTrigger: () => setAppState((state) => {
            return {
              stats: {
                open: true,
                panels: state.stats.panels ^ STATS_PANELS.generalStats
              }
            };
          }),
          children: [
            /* @__PURE__ */ jsxs71(StatsRows, { children: [
              /* @__PURE__ */ jsx134(StatsRow, { heading: true, children: t("stats.scene") }),
              /* @__PURE__ */ jsxs71(StatsRow, { columns: 2, children: [
                /* @__PURE__ */ jsx134("div", { children: t("stats.shapes") }),
                /* @__PURE__ */ jsx134("div", { children: elements.length })
              ] }),
              /* @__PURE__ */ jsxs71(StatsRow, { columns: 2, children: [
                /* @__PURE__ */ jsx134("div", { children: t("stats.width") }),
                /* @__PURE__ */ jsx134("div", { children: sceneDimension.width })
              ] }),
              /* @__PURE__ */ jsxs71(StatsRow, { columns: 2, children: [
                /* @__PURE__ */ jsx134("div", { children: t("stats.height") }),
                /* @__PURE__ */ jsx134("div", { children: sceneDimension.height })
              ] }),
              gridModeEnabled && /* @__PURE__ */ jsxs71(Fragment23, { children: [
                /* @__PURE__ */ jsx134(StatsRow, { heading: true, children: "Canvas" }),
                /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                  CanvasGrid_default,
                  {
                    property: "gridStep",
                    scene,
                    appState,
                    setAppState
                  }
                ) })
              ] })
            ] }),
            renderCustomStats?.(elements, appState)
          ]
        }
      ),
      selectedElements.length > 0 && /* @__PURE__ */ jsx134(
        "div",
        {
          id: "elementStats",
          style: {
            marginTop: 12
          },
          children: /* @__PURE__ */ jsx134(
            Collapsible_default,
            {
              label: /* @__PURE__ */ jsx134("h3", { children: t("stats.elementProperties") }),
              open: !!(appState.stats.panels & STATS_PANELS.elementProperties),
              openTrigger: () => setAppState((state) => {
                return {
                  stats: {
                    open: true,
                    panels: state.stats.panels ^ STATS_PANELS.elementProperties
                  }
                };
              }),
              children: /* @__PURE__ */ jsxs71(StatsRows, { children: [
                singleElement && /* @__PURE__ */ jsxs71(Fragment23, { children: [
                  /* @__PURE__ */ jsx134(StatsRow, { heading: true, "data-testid": "stats-element-type", children: t(`element.${singleElement.type}`) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    Position_default,
                    {
                      element: singleElement,
                      property: "x",
                      elementsMap,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    Position_default,
                    {
                      element: singleElement,
                      property: "y",
                      elementsMap,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    Dimension_default,
                    {
                      property: "width",
                      element: singleElement,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    Dimension_default,
                    {
                      property: "height",
                      element: singleElement,
                      scene,
                      appState
                    }
                  ) }),
                  !isElbowArrow(singleElement) && /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    Angle_default,
                    {
                      property: "angle",
                      element: singleElement,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    FontSize_default,
                    {
                      property: "fontSize",
                      element: singleElement,
                      scene,
                      appState
                    }
                  ) })
                ] }),
                multipleElements && /* @__PURE__ */ jsxs71(Fragment23, { children: [
                  elementsAreInSameGroup(multipleElements) && /* @__PURE__ */ jsx134(StatsRow, { heading: true, children: t("element.group") }),
                  /* @__PURE__ */ jsxs71(StatsRow, { columns: 2, style: { margin: "0.3125rem 0" }, children: [
                    /* @__PURE__ */ jsx134("div", { children: t("stats.shapes") }),
                    /* @__PURE__ */ jsx134("div", { children: selectedElements.length })
                  ] }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    MultiPosition_default,
                    {
                      property: "x",
                      elements: multipleElements,
                      elementsMap,
                      atomicUnits,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    MultiPosition_default,
                    {
                      property: "y",
                      elements: multipleElements,
                      elementsMap,
                      atomicUnits,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    MultiDimension_default,
                    {
                      property: "width",
                      elements: multipleElements,
                      elementsMap,
                      atomicUnits,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    MultiDimension_default,
                    {
                      property: "height",
                      elements: multipleElements,
                      elementsMap,
                      atomicUnits,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    MultiAngle_default,
                    {
                      property: "angle",
                      elements: multipleElements,
                      scene,
                      appState
                    }
                  ) }),
                  /* @__PURE__ */ jsx134(StatsRow, { children: /* @__PURE__ */ jsx134(
                    MultiFontSize_default,
                    {
                      property: "fontSize",
                      elements: multipleElements,
                      scene,
                      appState,
                      elementsMap
                    }
                  ) })
                ] })
              ] })
            }
          )
        }
      )
    ] }) });
  },
  (prev, next) => {
    return prev.sceneNonce === next.sceneNonce && prev.selectedElements === next.selectedElements && prev.appState.stats.panels === next.appState.stats.panels && prev.gridModeEnabled === next.gridModeEnabled && prev.appState.gridStep === next.appState.gridStep;
  }
);

// components/LayerUI.tsx
import { Fragment as Fragment24, jsx as jsx135, jsxs as jsxs72 } from "react/jsx-runtime";
var DefaultMainMenu = ({ UIOptions }) => {
  return /* @__PURE__ */ jsxs72(MainMenu_default, { __fallback: true, children: [
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.LoadScene, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.SaveToActiveFile, {}),
    UIOptions.canvasActions.export && /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.Export, {}),
    UIOptions.canvasActions.saveAsImage && /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.SaveAsImage, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.SearchMenu, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.Help, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.ClearCanvas, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.Separator, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.Group, { title: "Excalidraw links", children: /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.Socials, {}) }),
    /* @__PURE__ */ jsx135(MainMenu_default.Separator, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.ToggleTheme, {}),
    /* @__PURE__ */ jsx135(MainMenu_default.DefaultItems.ChangeCanvasBackground, {})
  ] });
};
var DefaultOverwriteConfirmDialog = () => {
  return /* @__PURE__ */ jsxs72(OverwriteConfirmDialog, { __fallback: true, children: [
    /* @__PURE__ */ jsx135(OverwriteConfirmDialog.Actions.SaveToDisk, {}),
    /* @__PURE__ */ jsx135(OverwriteConfirmDialog.Actions.ExportToImage, {})
  ] });
};
var LayerUI = ({
  actionManager,
  appState,
  files,
  setAppState,
  elements,
  canvas: canvas2,
  onLockToggle,
  onHandToolToggle,
  onPenModeToggle,
  showExitZenModeBtn,
  renderTopRightUI,
  renderCustomStats,
  UIOptions,
  onExportImage,
  renderWelcomeScreen,
  children,
  app,
  isCollaborating
}) => {
  const device = useDevice();
  const tunnels = useInitializeTunnels();
  const [eyeDropperState, setEyeDropperState] = useAtom18(
    activeEyeDropperAtom,
    jotaiScope
  );
  const renderJSONExportDialog = () => {
    if (!UIOptions.canvasActions.export) {
      return null;
    }
    return /* @__PURE__ */ jsx135(
      JSONExportDialog,
      {
        elements,
        appState,
        files,
        actionManager,
        exportOpts: UIOptions.canvasActions.export,
        canvas: canvas2,
        setAppState
      }
    );
  };
  const renderImageExportDialog = () => {
    if (!UIOptions.canvasActions.saveAsImage || appState.openDialog?.name !== "imageExport") {
      return null;
    }
    return /* @__PURE__ */ jsx135(
      ImageExportDialog,
      {
        elements,
        appState,
        files,
        actionManager,
        onExportImage,
        onCloseRequest: () => setAppState({ openDialog: null }),
        name: app.getName()
      }
    );
  };
  const renderCanvasActions = () => /* @__PURE__ */ jsxs72("div", { style: { position: "relative" }, children: [
    /* @__PURE__ */ jsx135(tunnels.MainMenuTunnel.Out, {}),
    renderWelcomeScreen && /* @__PURE__ */ jsx135(tunnels.WelcomeScreenMenuHintTunnel.Out, {})
  ] });
  const renderSelectedShapeActions = () => /* @__PURE__ */ jsx135(
    Section,
    {
      heading: "selectedShapeActions",
      className: clsx54("selected-shape-actions zen-mode-transition", {
        "transition-left": appState.zenModeEnabled
      }),
      children: /* @__PURE__ */ jsx135(
        Island,
        {
          className: CLASSES.SHAPE_ACTIONS_MENU,
          padding: 2,
          style: {
            // we want to make sure this doesn't overflow so subtracting the
            // approximate height of hamburgerMenu + footer
            maxHeight: `${appState.height - 166}px`
          },
          children: /* @__PURE__ */ jsx135(
            SelectedShapeActions,
            {
              appState,
              elementsMap: app.scene.getNonDeletedElementsMap(),
              renderAction: actionManager.renderAction
            }
          )
        }
      )
    }
  );
  const renderFixedSideContainer = () => {
    const shouldRenderSelectedShapeActions = showSelectedShapeActions(
      appState,
      elements
    );
    const shouldShowStats = appState.stats.open && !appState.zenModeEnabled && !appState.viewModeEnabled;
    return /* @__PURE__ */ jsx135(FixedSideContainer, { side: "left", children: /* @__PURE__ */ jsxs72("div", { className: "", children: [
      /* @__PURE__ */ jsxs72(Stack_default.Row, { gap: 6, className: clsx54(""), children: [
        renderCanvasActions(),
        shouldRenderSelectedShapeActions && renderSelectedShapeActions()
      ] }),
      !appState.viewModeEnabled && /* @__PURE__ */ jsx135(Section, { heading: "shapes", className: "", children: (heading) => /* @__PURE__ */ jsxs72("div", { children: [
        renderWelcomeScreen && /* @__PURE__ */ jsx135(tunnels.WelcomeScreenToolbarHintTunnel.Out, {}),
        /* @__PURE__ */ jsx135(Stack_default.Row, { gap: 4, children: /* @__PURE__ */ jsxs72(
          Stack_default.Row,
          {
            gap: 1,
            className: clsx54("", {
              "zen-mode": appState.zenModeEnabled
            }),
            children: [
              /* @__PURE__ */ jsxs72(
                Island,
                {
                  padding: 1,
                  style: {
                    marginTop: 60,
                    marginLeft: 7
                  },
                  className: clsx54(".App-toolbar__tools", {
                    "zen-mode": appState.zenModeEnabled
                  }),
                  children: [
                    /* @__PURE__ */ jsx135(
                      HintViewer,
                      {
                        appState,
                        isMobile: device.editor.isMobile,
                        device,
                        app
                      }
                    ),
                    heading,
                    /* @__PURE__ */ jsx135(
                      PenModeButton,
                      {
                        zenModeEnabled: appState.zenModeEnabled,
                        checked: appState.penMode,
                        onChange: () => onPenModeToggle(null),
                        title: t("toolBar.penMode"),
                        penDetected: appState.penDetected
                      }
                    ),
                    /* @__PURE__ */ jsx135(
                      LockButton,
                      {
                        checked: appState.activeTool.locked,
                        onChange: onLockToggle,
                        title: t("toolBar.lock")
                      }
                    ),
                    /* @__PURE__ */ jsx135("div", { className: "App-toolbar__divider" }),
                    /* @__PURE__ */ jsx135(
                      HandButton,
                      {
                        checked: isHandToolActive(appState),
                        onChange: () => onHandToolToggle(),
                        title: t("toolBar.hand"),
                        isMobile: true
                      }
                    ),
                    /* @__PURE__ */ jsx135(
                      ShapesSwitcher,
                      {
                        appState,
                        activeTool: appState.activeTool,
                        UIOptions,
                        app
                      }
                    )
                  ]
                }
              ),
              isCollaborating && /* @__PURE__ */ jsx135(
                Island,
                {
                  style: {
                    marginLeft: 8,
                    alignSelf: "center",
                    height: "fit-content"
                  },
                  children: /* @__PURE__ */ jsx135(
                    LaserPointerButton,
                    {
                      title: t("toolBar.laser"),
                      checked: appState.activeTool.type === TOOL_TYPE.laser,
                      onChange: () => app.setActiveTool({ type: TOOL_TYPE.laser }),
                      isMobile: true
                    }
                  )
                }
              )
            ]
          }
        ) })
      ] }) }),
      /* @__PURE__ */ jsxs72(
        "div",
        {
          className: clsx54(
            "layer-ui__wrapper__top-right zen-mode-transition",
            {
              "transition-right": appState.zenModeEnabled
            }
          ),
          children: [
            appState.collaborators.size > 0 && /* @__PURE__ */ jsx135(
              UserList,
              {
                collaborators: appState.collaborators,
                userToFollow: appState.userToFollow?.socketId || null
              }
            ),
            renderTopRightUI?.(device.editor.isMobile, appState),
            !appState.viewModeEnabled && // hide button when sidebar docked
            (!isSidebarDocked || appState.openSidebar?.name !== DEFAULT_SIDEBAR.name) && /* @__PURE__ */ jsx135(tunnels.DefaultSidebarTriggerTunnel.Out, {}),
            shouldShowStats && /* @__PURE__ */ jsx135(
              Stats,
              {
                app,
                onClose: () => {
                  actionManager.executeAction(actionToggleStats);
                },
                renderCustomStats
              }
            )
          ]
        }
      )
    ] }) });
  };
  const renderSidebars = () => {
    return /* @__PURE__ */ jsx135(
      DefaultSidebar,
      {
        __fallback: true,
        onDock: (docked) => {
          trackEvent(
            "sidebar",
            `toggleDock (${docked ? "dock" : "undock"})`,
            `(${device.editor.isMobile ? "mobile" : "desktop"})`
          );
        }
      }
    );
  };
  const isSidebarDocked = useAtomValue2(isSidebarDockedAtom, jotaiScope);
  const layerUIJSX = /* @__PURE__ */ jsxs72(Fragment24, { children: [
    children,
    /* @__PURE__ */ jsx135(DefaultMainMenu, { UIOptions }),
    /* @__PURE__ */ jsx135(DefaultOverwriteConfirmDialog, {}),
    appState.openDialog?.name === "ttd" && /* @__PURE__ */ jsx135(TTDDialog, { __fallback: true }),
    appState.isLoading && /* @__PURE__ */ jsx135(LoadingMessage, { delay: 250 }),
    appState.errorMessage && /* @__PURE__ */ jsx135(ErrorDialog, { onClose: () => setAppState({ errorMessage: null }), children: appState.errorMessage }),
    eyeDropperState && !device.editor.isMobile && /* @__PURE__ */ jsx135(
      EyeDropper,
      {
        colorPickerType: eyeDropperState.colorPickerType,
        onCancel: () => {
          setEyeDropperState(null);
        },
        onChange: (colorPickerType, color, selectedElements, { altKey }) => {
          if (colorPickerType !== "elementBackground" && colorPickerType !== "elementStroke") {
            return;
          }
          if (selectedElements.length) {
            for (const element of selectedElements) {
              mutateElement(
                element,
                {
                  [altKey && eyeDropperState.swapPreviewOnAlt ? colorPickerType === "elementBackground" ? "strokeColor" : "backgroundColor" : colorPickerType === "elementBackground" ? "backgroundColor" : "strokeColor"]: color
                },
                false
              );
              ShapeCache.delete(element);
            }
            Scene_default.getScene(selectedElements[0])?.triggerUpdate();
          } else if (colorPickerType === "elementBackground") {
            setAppState({
              currentItemBackgroundColor: color
            });
          } else {
            setAppState({ currentItemStrokeColor: color });
          }
        },
        onSelect: (color, event) => {
          setEyeDropperState((state) => {
            return state?.keepOpenOnAlt && event.altKey ? state : null;
          });
          eyeDropperState?.onSelect?.(color, event);
        }
      }
    ),
    appState.openDialog?.name === "help" && /* @__PURE__ */ jsx135(
      HelpDialog,
      {
        onClose: () => {
          setAppState({ openDialog: null });
        }
      }
    ),
    /* @__PURE__ */ jsx135(ActiveConfirmDialog, {}),
    /* @__PURE__ */ jsx135(tunnels.OverwriteConfirmDialogTunnel.Out, {}),
    renderImageExportDialog(),
    renderJSONExportDialog(),
    appState.pasteDialog.shown && /* @__PURE__ */ jsx135(
      PasteChartDialog,
      {
        setAppState,
        appState,
        onClose: () => setAppState({
          pasteDialog: { shown: false, data: null }
        })
      }
    ),
    device.editor.isMobile && /* @__PURE__ */ jsx135(
      MobileMenu,
      {
        app,
        appState,
        elements,
        actionManager,
        renderJSONExportDialog,
        renderImageExportDialog,
        setAppState,
        onLockToggle,
        onHandToolToggle,
        onPenModeToggle,
        renderTopRightUI,
        renderCustomStats,
        renderSidebars,
        device,
        renderWelcomeScreen,
        UIOptions
      }
    ),
    !device.editor.isMobile && /* @__PURE__ */ jsxs72(Fragment24, { children: [
      /* @__PURE__ */ jsxs72(
        "div",
        {
          className: "layer-ui__wrapper",
          style: appState.openSidebar && isSidebarDocked && device.editor.canFitSidebar ? { width: `calc(100% - ${LIBRARY_SIDEBAR_WIDTH}px)` } : {},
          children: [
            renderWelcomeScreen && /* @__PURE__ */ jsx135(tunnels.WelcomeScreenCenterTunnel.Out, {}),
            renderFixedSideContainer(),
            /* @__PURE__ */ jsx135(
              Footer_default,
              {
                appState,
                actionManager,
                showExitZenModeBtn,
                renderWelcomeScreen
              }
            ),
            appState.scrolledOutside && /* @__PURE__ */ jsx135(
              "button",
              {
                type: "button",
                className: "scroll-back-to-content",
                onClick: () => {
                  setAppState((appState2) => ({
                    ...calculateScrollCenter(elements, appState2)
                  }));
                },
                children: t("buttons.scrollBackToContent")
              }
            )
          ]
        }
      ),
      renderSidebars()
    ] })
  ] });
  return /* @__PURE__ */ jsx135(UIAppStateContext.Provider, { value: appState, children: /* @__PURE__ */ jsx135(Provider, { scope: tunnels.jotaiScope, children: /* @__PURE__ */ jsx135(TunnelsContext.Provider, { value: tunnels, children: layerUIJSX }) }) });
};
var stripIrrelevantAppStateProps = (appState) => {
  const {
    suggestedBindings,
    startBoundElement,
    cursorButton,
    scrollX,
    scrollY,
    ...ret
  } = appState;
  return ret;
};
var areEqual2 = (prevProps, nextProps) => {
  if (prevProps.children !== nextProps.children) {
    return false;
  }
  const { canvas: _pC, appState: prevAppState, ...prev } = prevProps;
  const { canvas: _nC, appState: nextAppState, ...next } = nextProps;
  return isShallowEqual(
    // asserting AppState because we're being passed the whole AppState
    // but resolve to only the UI-relevant props
    stripIrrelevantAppStateProps(prevAppState),
    stripIrrelevantAppStateProps(nextAppState),
    {
      selectedElementIds: isShallowEqual,
      selectedGroupIds: isShallowEqual
    }
  ) && isShallowEqual(prev, next);
};
var LayerUI_default = React40.memo(LayerUI, areEqual2);

// components/Toast.tsx
init_define_import_meta_env();
init_icons();
import { useCallback as useCallback13, useEffect as useEffect36, useRef as useRef35 } from "react";
import { jsx as jsx136, jsxs as jsxs73 } from "react/jsx-runtime";
var DEFAULT_TOAST_TIMEOUT = 5e3;
var Toast = ({
  message,
  onClose,
  closable = false,
  // To prevent autoclose, pass duration as Infinity
  duration = DEFAULT_TOAST_TIMEOUT,
  style
}) => {
  const timerRef = useRef35(0);
  const shouldAutoClose = duration !== Infinity;
  const scheduleTimeout = useCallback13(() => {
    if (!shouldAutoClose) {
      return;
    }
    timerRef.current = window.setTimeout(() => onClose(), duration);
  }, [onClose, duration, shouldAutoClose]);
  useEffect36(() => {
    if (!shouldAutoClose) {
      return;
    }
    scheduleTimeout();
    return () => clearTimeout(timerRef.current);
  }, [scheduleTimeout, message, duration, shouldAutoClose]);
  const onMouseEnter = shouldAutoClose ? () => clearTimeout(timerRef?.current) : void 0;
  const onMouseLeave = shouldAutoClose ? scheduleTimeout : void 0;
  return /* @__PURE__ */ jsxs73(
    "div",
    {
      className: "Toast",
      onMouseEnter,
      onMouseLeave,
      style,
      children: [
        /* @__PURE__ */ jsx136("p", { className: "Toast__message", children: message }),
        closable && /* @__PURE__ */ jsx136(
          ToolButton,
          {
            icon: CloseIcon,
            "aria-label": "close",
            type: "icon",
            onClick: onClose,
            className: "close"
          }
        )
      ]
    }
  );
};

// actions/actionToggleViewMode.tsx
init_define_import_meta_env();
init_icons();
init_keys();
init_store();
init_register();
var actionToggleViewMode = register({
  name: "viewMode",
  label: "labels.viewMode",
  paletteName: "Toggle view mode",
  icon: eyeIcon,
  viewMode: true,
  trackEvent: {
    category: "canvas",
    predicate: (appState) => !appState.viewModeEnabled
  },
  perform(elements, appState) {
    return {
      appState: {
        ...appState,
        viewModeEnabled: !this.checked(appState)
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.viewModeEnabled,
  predicate: (elements, appState, appProps) => {
    return typeof appProps.viewModeEnabled === "undefined";
  },
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.R
});

// components/App.tsx
init_blob();
init_image2();
init_filesystem();
init_textElement();
import throttle4 from "lodash.throttle";
init_url();
init_transformHandles();
init_fonts();
init_frame();
init_selection();

// actions/actionFrame.ts
init_define_import_meta_env();
init_element();
init_frame();
init_frame();
init_keys();
init_utils2();
init_cursor();
init_register();
init_typeChecks();
init_icons();
init_store();
var isSingleFrameSelected = (appState, app) => {
  const selectedElements = app.scene.getSelectedElements(appState);
  return selectedElements.length === 1 && isFrameLikeElement(selectedElements[0]);
};
var actionSelectAllElementsInFrame = register({
  name: "selectAllElementsInFrame",
  label: "labels.selectAllElementsInFrame",
  trackEvent: { category: "canvas" },
  perform: (elements, appState, _, app) => {
    const selectedElement = app.scene.getSelectedElements(appState).at(0) || null;
    if (isFrameLikeElement(selectedElement)) {
      const elementsInFrame = getFrameChildren(
        getNonDeletedElements2(elements),
        selectedElement.id
      ).filter((element) => !(element.type === "text" && element.containerId));
      return {
        elements,
        appState: {
          ...appState,
          selectedElementIds: elementsInFrame.reduce((acc, element) => {
            acc[element.id] = true;
            return acc;
          }, {})
        },
        storeAction: StoreAction.CAPTURE
      };
    }
    return {
      elements,
      appState,
      storeAction: StoreAction.NONE
    };
  },
  predicate: (elements, appState, _, app) => isSingleFrameSelected(appState, app)
});
var actionRemoveAllElementsFromFrame = register({
  name: "removeAllElementsFromFrame",
  label: "labels.removeAllElementsFromFrame",
  trackEvent: { category: "history" },
  perform: (elements, appState, _, app) => {
    const selectedElement = app.scene.getSelectedElements(appState).at(0) || null;
    if (isFrameLikeElement(selectedElement)) {
      return {
        elements: removeAllElementsFromFrame(elements, selectedElement),
        appState: {
          ...appState,
          selectedElementIds: {
            [selectedElement.id]: true
          }
        },
        storeAction: StoreAction.CAPTURE
      };
    }
    return {
      elements,
      appState,
      storeAction: StoreAction.NONE
    };
  },
  predicate: (elements, appState, _, app) => isSingleFrameSelected(appState, app)
});
var actionupdateFrameRendering = register({
  name: "updateFrameRendering",
  label: "labels.updateFrameRendering",
  viewMode: true,
  trackEvent: { category: "canvas" },
  perform: (elements, appState) => {
    return {
      elements,
      appState: {
        ...appState,
        frameRendering: {
          ...appState.frameRendering,
          enabled: !appState.frameRendering.enabled
        }
      },
      storeAction: StoreAction.NONE
    };
  },
  checked: (appState) => appState.frameRendering.enabled
});
var actionSetFrameAsActiveTool = register({
  name: "setFrameAsActiveTool",
  label: "toolBar.frame",
  trackEvent: { category: "toolbar" },
  icon: frameToolIcon,
  viewMode: false,
  perform: (elements, appState, _, app) => {
    const nextActiveTool = updateActiveTool(appState, {
      type: "frame"
    });
    setCursorForShape(app.interactiveCanvas, {
      ...appState,
      activeTool: nextActiveTool
    });
    return {
      elements,
      appState: {
        ...appState,
        activeTool: updateActiveTool(appState, {
          type: "frame"
        })
      },
      storeAction: StoreAction.NONE
    };
  },
  keyTest: (event) => !event[KEYS.CTRL_OR_CMD] && !event.shiftKey && !event.altKey && event.key.toLocaleLowerCase() === KEYS.F
});

// components/App.tsx
init_errors();
init_snapping();

// components/BraveMeasureTextError.tsx
init_define_import_meta_env();
import { jsx as jsx137, jsxs as jsxs74 } from "react/jsx-runtime";
var BraveMeasureTextError = () => {
  return /* @__PURE__ */ jsxs74("div", { "data-testid": "brave-measure-text-error", children: [
    /* @__PURE__ */ jsx137("p", { children: /* @__PURE__ */ jsx137(
      Trans_default,
      {
        i18nKey: "errors.brave_measure_text_error.line1",
        bold: (el) => /* @__PURE__ */ jsx137("span", { style: { fontWeight: 600 }, children: el })
      }
    ) }),
    /* @__PURE__ */ jsx137("p", { children: /* @__PURE__ */ jsx137(
      Trans_default,
      {
        i18nKey: "errors.brave_measure_text_error.line2",
        bold: (el) => /* @__PURE__ */ jsx137("span", { style: { fontWeight: 600 }, children: el })
      }
    ) }),
    /* @__PURE__ */ jsx137("p", { children: /* @__PURE__ */ jsx137(
      Trans_default,
      {
        i18nKey: "errors.brave_measure_text_error.line3",
        link: (el) => /* @__PURE__ */ jsx137("a", { href: "http://docs.excalidraw.com/docs/@excalidraw/excalidraw/faq#turning-off-aggresive-block-fingerprinting-in-brave-browser", children: el })
      }
    ) }),
    /* @__PURE__ */ jsx137("p", { children: /* @__PURE__ */ jsx137(
      Trans_default,
      {
        i18nKey: "errors.brave_measure_text_error.line4",
        issueLink: (el) => /* @__PURE__ */ jsx137("a", { href: "https://github.com/excalidraw/excalidraw/issues/new", children: el }),
        discordLink: (el) => /* @__PURE__ */ jsxs74("a", { href: "https://discord.gg/UexuTaE", children: [
          el,
          "."
        ] })
      }
    ) })
  ] });
};
var BraveMeasureTextError_default = BraveMeasureTextError;

// data/transform.ts
init_define_import_meta_env();
init_constants();
init_element();
init_binding();
init_newElement();
init_textElement();
init_utils2();
init_points();
init_random();
init_fractionalIndex();
init_fonts();
init_typeChecks();
init_math();
var DEFAULT_LINEAR_ELEMENT_PROPS = {
  width: 100,
  height: 0
};
var DEFAULT_DIMENSION = 100;
var bindTextToContainer = (container, textProps, elementsMap) => {
  const textElement = newTextElement({
    x: 0,
    y: 0,
    textAlign: TEXT_ALIGN.CENTER,
    verticalAlign: VERTICAL_ALIGN.MIDDLE,
    ...textProps,
    containerId: container.id,
    strokeColor: textProps.strokeColor || container.strokeColor
  });
  Object.assign(container, {
    boundElements: (container.boundElements || []).concat({
      type: "text",
      id: textElement.id
    })
  });
  redrawTextBoundingBox(textElement, container, elementsMap);
  return [container, textElement];
};
var bindLinearElementToElement = (linearElement, start2, end, elementStore, elementsMap) => {
  let startBoundElement;
  let endBoundElement;
  Object.assign(linearElement, {
    startBinding: linearElement?.startBinding || null,
    endBinding: linearElement.endBinding || null
  });
  if (start2) {
    const width = start2?.width ?? DEFAULT_DIMENSION;
    const height = start2?.height ?? DEFAULT_DIMENSION;
    let existingElement;
    if (start2.id) {
      existingElement = elementStore.getElement(start2.id);
      if (!existingElement) {
        console.error(`No element for start binding with id ${start2.id} found`);
      }
    }
    const startX = start2.x || linearElement.x - width;
    const startY = start2.y || linearElement.y - height / 2;
    const startType = existingElement ? existingElement.type : start2.type;
    if (startType) {
      if (startType === "text") {
        let text = "";
        if (existingElement && existingElement.type === "text") {
          text = existingElement.text;
        } else if (start2.type === "text") {
          text = start2.text;
        }
        if (!text) {
          console.error(
            `No text found for start binding text element for ${linearElement.id}`
          );
        }
        startBoundElement = newTextElement({
          x: startX,
          y: startY,
          type: "text",
          ...existingElement,
          ...start2,
          text
        });
        Object.assign(startBoundElement, {
          x: start2.x || linearElement.x - startBoundElement.width,
          y: start2.y || linearElement.y - startBoundElement.height / 2
        });
      } else {
        switch (startType) {
          case "rectangle":
          case "ellipse":
          case "diamond": {
            startBoundElement = newElement({
              x: startX,
              y: startY,
              width,
              height,
              ...existingElement,
              ...start2,
              type: startType
            });
            break;
          }
          default: {
            assertNever(
              linearElement,
              `Unhandled element start type "${start2.type}"`,
              true
            );
          }
        }
      }
      bindLinearElement(
        linearElement,
        startBoundElement,
        "start",
        elementsMap
      );
    }
  }
  if (end) {
    const height = end?.height ?? DEFAULT_DIMENSION;
    const width = end?.width ?? DEFAULT_DIMENSION;
    let existingElement;
    if (end.id) {
      existingElement = elementStore.getElement(end.id);
      if (!existingElement) {
        console.error(`No element for end binding with id ${end.id} found`);
      }
    }
    const endX = end.x || linearElement.x + linearElement.width;
    const endY = end.y || linearElement.y - height / 2;
    const endType = existingElement ? existingElement.type : end.type;
    if (endType) {
      if (endType === "text") {
        let text = "";
        if (existingElement && existingElement.type === "text") {
          text = existingElement.text;
        } else if (end.type === "text") {
          text = end.text;
        }
        if (!text) {
          console.error(
            `No text found for end binding text element for ${linearElement.id}`
          );
        }
        endBoundElement = newTextElement({
          x: endX,
          y: endY,
          type: "text",
          ...existingElement,
          ...end,
          text
        });
        Object.assign(endBoundElement, {
          y: end.y || linearElement.y - endBoundElement.height / 2
        });
      } else {
        switch (endType) {
          case "rectangle":
          case "ellipse":
          case "diamond": {
            endBoundElement = newElement({
              x: endX,
              y: endY,
              width,
              height,
              ...existingElement,
              ...end,
              type: endType
            });
            break;
          }
          default: {
            assertNever(
              linearElement,
              `Unhandled element end type "${endType}"`,
              true
            );
          }
        }
      }
      bindLinearElement(
        linearElement,
        endBoundElement,
        "end",
        elementsMap
      );
    }
  }
  if (linearElement.points.length < 2) {
    return {
      linearElement,
      startBoundElement,
      endBoundElement
    };
  }
  const endPointIndex = linearElement.points.length - 1;
  const delta = 0.5;
  const newPoints = cloneJSON(linearElement.points);
  if (linearElement.points[endPointIndex][0] > linearElement.points[endPointIndex - 1][0]) {
    newPoints[0][0] = delta;
    newPoints[endPointIndex][0] -= delta;
  }
  if (linearElement.points[endPointIndex][0] < linearElement.points[endPointIndex - 1][0]) {
    newPoints[0][0] = -delta;
    newPoints[endPointIndex][0] += delta;
  }
  if (linearElement.points[endPointIndex][1] > linearElement.points[endPointIndex - 1][1]) {
    newPoints[0][1] = delta;
    newPoints[endPointIndex][1] -= delta;
  }
  if (linearElement.points[endPointIndex][1] < linearElement.points[endPointIndex - 1][1]) {
    newPoints[0][1] = -delta;
    newPoints[endPointIndex][1] += delta;
  }
  Object.assign(linearElement, { points: newPoints });
  return {
    linearElement,
    startBoundElement,
    endBoundElement
  };
};
var ElementStore = class {
  excalidrawElements = /* @__PURE__ */ new Map();
  add = (ele) => {
    if (!ele) {
      return;
    }
    this.excalidrawElements.set(ele.id, ele);
  };
  getElements = () => {
    return syncInvalidIndices(Array.from(this.excalidrawElements.values()));
  };
  getElementsMap = () => {
    return toBrandedType(
      arrayToMap(this.getElements())
    );
  };
  getElement = (id) => {
    return this.excalidrawElements.get(id);
  };
};
var convertToExcalidrawElements = (elementsSkeleton, opts) => {
  if (!elementsSkeleton) {
    return [];
  }
  const elements = cloneJSON(elementsSkeleton);
  const elementStore = new ElementStore();
  const elementsWithIds = /* @__PURE__ */ new Map();
  const oldToNewElementIdMap = /* @__PURE__ */ new Map();
  for (const element of elements) {
    let excalidrawElement;
    const originalId = element.id;
    if (opts?.regenerateIds !== false) {
      Object.assign(element, { id: randomId() });
    }
    switch (element.type) {
      case "rectangle":
      case "ellipse":
      case "diamond": {
        const width = element?.label?.text && element.width === void 0 ? 0 : element?.width || DEFAULT_DIMENSION;
        const height = element?.label?.text && element.height === void 0 ? 0 : element?.height || DEFAULT_DIMENSION;
        excalidrawElement = newElement({
          ...element,
          width,
          height
        });
        break;
      }
      case "line": {
        const width = element.width || DEFAULT_LINEAR_ELEMENT_PROPS.width;
        const height = element.height || DEFAULT_LINEAR_ELEMENT_PROPS.height;
        excalidrawElement = newLinearElement({
          width,
          height,
          points: [pointFrom(0, 0), pointFrom(width, height)],
          ...element
        });
        break;
      }
      case "arrow": {
        const width = element.width || DEFAULT_LINEAR_ELEMENT_PROPS.width;
        const height = element.height || DEFAULT_LINEAR_ELEMENT_PROPS.height;
        excalidrawElement = newArrowElement({
          width,
          height,
          endArrowhead: "arrow",
          points: [pointFrom(0, 0), pointFrom(width, height)],
          ...element,
          type: "arrow"
        });
        Object.assign(
          excalidrawElement,
          getSizeFromPoints(excalidrawElement.points)
        );
        break;
      }
      case "text": {
        const fontFamily = element?.fontFamily || DEFAULT_FONT_FAMILY;
        const fontSize = element?.fontSize || DEFAULT_FONT_SIZE;
        const lineHeight = element?.lineHeight || getLineHeight(fontFamily);
        const text = element.text ?? "";
        const normalizedText = normalizeText(text);
        const metrics = measureText(
          normalizedText,
          getFontString({ fontFamily, fontSize }),
          lineHeight
        );
        excalidrawElement = newTextElement({
          width: metrics.width,
          height: metrics.height,
          fontFamily,
          fontSize,
          ...element
        });
        break;
      }
      case "image": {
        excalidrawElement = newImageElement({
          width: element?.width || DEFAULT_DIMENSION,
          height: element?.height || DEFAULT_DIMENSION,
          ...element
        });
        break;
      }
      case "frame": {
        excalidrawElement = newFrameElement({
          x: 0,
          y: 0,
          ...element
        });
        break;
      }
      case "magicframe": {
        excalidrawElement = newMagicFrameElement({
          x: 0,
          y: 0,
          ...element
        });
        break;
      }
      case "freedraw":
      case "iframe":
      case "embeddable": {
        excalidrawElement = element;
        break;
      }
      default: {
        excalidrawElement = element;
        assertNever(
          element,
          `Unhandled element type "${element.type}"`,
          true
        );
      }
    }
    const existingElement = elementStore.getElement(excalidrawElement.id);
    if (existingElement) {
      console.error(`Duplicate id found for ${excalidrawElement.id}`);
    } else {
      elementStore.add(excalidrawElement);
      elementsWithIds.set(excalidrawElement.id, element);
      if (originalId) {
        oldToNewElementIdMap.set(originalId, excalidrawElement.id);
      }
    }
  }
  const elementsMap = elementStore.getElementsMap();
  for (const [id, element] of elementsWithIds) {
    const excalidrawElement = elementStore.getElement(id);
    switch (element.type) {
      case "rectangle":
      case "ellipse":
      case "diamond":
      case "arrow": {
        if (element.label?.text) {
          let [container, text] = bindTextToContainer(
            excalidrawElement,
            element?.label,
            elementsMap
          );
          elementStore.add(container);
          elementStore.add(text);
          if (isArrowElement(container)) {
            const originalStart = element.type === "arrow" ? element?.start : void 0;
            const originalEnd = element.type === "arrow" ? element?.end : void 0;
            if (originalStart && originalStart.id) {
              const newStartId = oldToNewElementIdMap.get(originalStart.id);
              if (newStartId) {
                Object.assign(originalStart, { id: newStartId });
              }
            }
            if (originalEnd && originalEnd.id) {
              const newEndId = oldToNewElementIdMap.get(originalEnd.id);
              if (newEndId) {
                Object.assign(originalEnd, { id: newEndId });
              }
            }
            const { linearElement, startBoundElement, endBoundElement } = bindLinearElementToElement(
              container,
              originalStart,
              originalEnd,
              elementStore,
              elementsMap
            );
            container = linearElement;
            elementStore.add(linearElement);
            elementStore.add(startBoundElement);
            elementStore.add(endBoundElement);
          }
        } else {
          switch (element.type) {
            case "arrow": {
              const { start: start2, end } = element;
              if (start2 && start2.id) {
                const newStartId = oldToNewElementIdMap.get(start2.id);
                Object.assign(start2, { id: newStartId });
              }
              if (end && end.id) {
                const newEndId = oldToNewElementIdMap.get(end.id);
                Object.assign(end, { id: newEndId });
              }
              const { linearElement, startBoundElement, endBoundElement } = bindLinearElementToElement(
                excalidrawElement,
                start2,
                end,
                elementStore,
                elementsMap
              );
              elementStore.add(linearElement);
              elementStore.add(startBoundElement);
              elementStore.add(endBoundElement);
              break;
            }
          }
        }
        break;
      }
    }
  }
  for (const [id, element] of elementsWithIds) {
    if (element.type !== "frame" && element.type !== "magicframe") {
      continue;
    }
    const frame = elementStore.getElement(id);
    if (!frame) {
      throw new Error(`Excalidraw element with id ${id} doesn't exist`);
    }
    const childrenElements = [];
    element.children.forEach((id2) => {
      const newElementId = oldToNewElementIdMap.get(id2);
      if (!newElementId) {
        throw new Error(`Element with ${id2} wasn't mapped correctly`);
      }
      const elementInFrame = elementStore.getElement(newElementId);
      if (!elementInFrame) {
        throw new Error(`Frame element with id ${newElementId} doesn't exist`);
      }
      Object.assign(elementInFrame, { frameId: frame.id });
      elementInFrame?.boundElements?.forEach((boundElement) => {
        const ele = elementStore.getElement(boundElement.id);
        if (!ele) {
          throw new Error(
            `Bound element with id ${boundElement.id} doesn't exist`
          );
        }
        Object.assign(ele, { frameId: frame.id });
        childrenElements.push(ele);
      });
      childrenElements.push(elementInFrame);
    });
    let [minX, minY, maxX, maxY] = getCommonBounds(childrenElements);
    const PADDING = 10;
    minX = minX - PADDING;
    minY = minY - PADDING;
    maxX = maxX + PADDING;
    maxY = maxY + PADDING;
    const frameX = frame?.x || minX;
    const frameY = frame?.y || minY;
    const frameWidth = frame?.width || maxX - minX;
    const frameHeight = frame?.height || maxY - minY;
    Object.assign(frame, {
      x: frameX,
      y: frameY,
      width: frameWidth,
      height: frameHeight
    });
    if (isDevEnv() && element.children.length && (frame?.x || frame?.y || frame?.width || frame?.height)) {
      console.info(
        "User provided frame attributes are being considered, if you find this inaccurate, please remove any of the attributes - x, y, width and height so frame coordinates and dimensions are calculated automatically"
      );
    }
  }
  return elementStore.getElements();
};

// components/canvases/index.tsx
init_define_import_meta_env();

// components/canvases/InteractiveCanvas.tsx
init_define_import_meta_env();
init_utils2();
init_constants();
import React41, { useEffect as useEffect37, useRef as useRef36 } from "react";

// reactUtils.ts
init_define_import_meta_env();
init_utils2();
import { unstable_batchedUpdates as unstable_batchedUpdates2 } from "react-dom";
import { version as ReactVersion } from "react";
var withBatchedUpdates = (func) => (event) => {
  unstable_batchedUpdates2(func, event);
};
var withBatchedUpdatesThrottled = (func) => {
  return throttleRAF((event) => {
    unstable_batchedUpdates2(func, event);
  });
};
var isRenderThrottlingEnabled = (() => {
  let IS_REACT_18_AND_UP;
  try {
    const version = ReactVersion.split(".");
    IS_REACT_18_AND_UP = Number(version[0]) > 17;
  } catch {
    IS_REACT_18_AND_UP = false;
  }
  let hasWarned = false;
  return () => {
    if (window.EXCALIDRAW_THROTTLE_RENDER === true) {
      if (!IS_REACT_18_AND_UP) {
        if (!hasWarned) {
          hasWarned = true;
          console.warn(
            "Excalidraw: render throttling is disabled on React versions < 18."
          );
        }
        return false;
      }
      return true;
    }
    return false;
  };
})();

// renderer/interactiveScene.ts
init_define_import_meta_env();
init_element();
init_renderElement();
init_groups();
init_transformHandles();
init_utils2();
init_constants();

// renderer/renderSnaps.ts
init_define_import_meta_env();
init_math();
init_constants();
var SNAP_COLOR_LIGHT = "#ff6b6b";
var SNAP_COLOR_DARK = "#ff0000";
var SNAP_WIDTH = 1;
var SNAP_CROSS_SIZE = 2;
var renderSnaps = (context, appState) => {
  if (!appState.snapLines.length) {
    return;
  }
  const snapColor = appState.theme === THEME.LIGHT || appState.zenModeEnabled ? SNAP_COLOR_LIGHT : SNAP_COLOR_DARK;
  const snapWidth = (appState.zenModeEnabled ? SNAP_WIDTH * 1.5 : SNAP_WIDTH) / appState.zoom.value;
  context.save();
  context.translate(appState.scrollX, appState.scrollY);
  for (const snapLine of appState.snapLines) {
    if (snapLine.type === "pointer") {
      context.lineWidth = snapWidth;
      context.strokeStyle = snapColor;
      drawPointerSnapLine(snapLine, context, appState);
    } else if (snapLine.type === "gap") {
      context.lineWidth = snapWidth;
      context.strokeStyle = snapColor;
      drawGapLine(
        snapLine.points[0],
        snapLine.points[1],
        snapLine.direction,
        appState,
        context
      );
    } else if (snapLine.type === "points") {
      context.lineWidth = snapWidth;
      context.strokeStyle = snapColor;
      drawPointsSnapLine(snapLine, context, appState);
    }
  }
  context.restore();
};
var drawPointsSnapLine = (pointSnapLine, context, appState) => {
  if (!appState.zenModeEnabled) {
    const firstPoint = pointSnapLine.points[0];
    const lastPoint = pointSnapLine.points[pointSnapLine.points.length - 1];
    drawLine(firstPoint, lastPoint, context);
  }
  for (const point2 of pointSnapLine.points) {
    drawCross(point2, appState, context);
  }
};
var drawPointerSnapLine = (pointerSnapLine, context, appState) => {
  drawCross(pointerSnapLine.points[0], appState, context);
  if (!appState.zenModeEnabled) {
    drawLine(pointerSnapLine.points[0], pointerSnapLine.points[1], context);
  }
};
var drawCross = ([x, y], appState, context) => {
  context.save();
  const size = (appState.zenModeEnabled ? SNAP_CROSS_SIZE * 1.5 : SNAP_CROSS_SIZE) / appState.zoom.value;
  context.beginPath();
  context.moveTo(x - size, y - size);
  context.lineTo(x + size, y + size);
  context.moveTo(x + size, y - size);
  context.lineTo(x - size, y + size);
  context.stroke();
  context.restore();
};
var drawLine = (from3, to, context) => {
  context.beginPath();
  context.lineTo(from3[0], from3[1]);
  context.lineTo(to[0], to[1]);
  context.stroke();
};
var drawGapLine = (from3, to, direction, appState, context) => {
  const FULL = 8 / appState.zoom.value;
  const HALF = FULL / 2;
  const QUARTER = FULL / 4;
  if (direction === "horizontal") {
    const halfPoint = [(from3[0] + to[0]) / 2, from3[1]];
    if (!appState.zenModeEnabled) {
      drawLine(
        pointFrom(from3[0], from3[1] - FULL),
        pointFrom(from3[0], from3[1] + FULL),
        context
      );
    }
    drawLine(
      pointFrom(halfPoint[0] - QUARTER, halfPoint[1] - HALF),
      pointFrom(halfPoint[0] - QUARTER, halfPoint[1] + HALF),
      context
    );
    drawLine(
      pointFrom(halfPoint[0] + QUARTER, halfPoint[1] - HALF),
      pointFrom(halfPoint[0] + QUARTER, halfPoint[1] + HALF),
      context
    );
    if (!appState.zenModeEnabled) {
      drawLine(
        pointFrom(to[0], to[1] - FULL),
        pointFrom(to[0], to[1] + FULL),
        context
      );
      drawLine(from3, to, context);
    }
  } else {
    const halfPoint = [from3[0], (from3[1] + to[1]) / 2];
    if (!appState.zenModeEnabled) {
      drawLine(
        pointFrom(from3[0] - FULL, from3[1]),
        pointFrom(from3[0] + FULL, from3[1]),
        context
      );
    }
    drawLine(
      pointFrom(halfPoint[0] - HALF, halfPoint[1] - QUARTER),
      pointFrom(halfPoint[0] + HALF, halfPoint[1] - QUARTER),
      context
    );
    drawLine(
      pointFrom(halfPoint[0] - HALF, halfPoint[1] + QUARTER),
      pointFrom(halfPoint[0] + HALF, halfPoint[1] + QUARTER),
      context
    );
    if (!appState.zenModeEnabled) {
      drawLine(
        pointFrom(to[0] - FULL, to[1]),
        pointFrom(to[0] + FULL, to[1]),
        context
      );
      drawLine(from3, to, context);
    }
  }
};

// renderer/interactiveScene.ts
init_binding();
init_linearElementEditor();
init_helpers2();
init_typeChecks();
init_shapes();
import oc4 from "open-color";
var renderLinearElementPointHighlight = (context, appState, elementsMap) => {
  const { elementId, hoverPointIndex } = appState.selectedLinearElement;
  if (appState.editingLinearElement?.selectedPointsIndices?.includes(
    hoverPointIndex
  )) {
    return;
  }
  const element = LinearElementEditor.getElement(elementId, elementsMap);
  if (!element) {
    return;
  }
  const point2 = LinearElementEditor.getPointAtIndexGlobalCoordinates(
    element,
    hoverPointIndex,
    elementsMap
  );
  context.save();
  context.translate(appState.scrollX, appState.scrollY);
  highlightPoint(point2, context, appState);
  context.restore();
};
var highlightPoint = (point2, context, appState) => {
  context.fillStyle = "rgba(105, 101, 219, 0.4)";
  fillCircle(
    context,
    point2[0],
    point2[1],
    LinearElementEditor.POINT_HANDLE_SIZE / appState.zoom.value,
    false
  );
};
var strokeRectWithRotation = (context, x, y, width, height, cx, cy, angle, fill = false, radius = 0) => {
  context.save();
  context.translate(cx, cy);
  context.rotate(angle);
  if (fill) {
    context.fillRect(x - cx, y - cy, width, height);
  }
  if (radius && context.roundRect) {
    context.beginPath();
    context.roundRect(x - cx, y - cy, width, height, radius);
    context.stroke();
    context.closePath();
  } else {
    context.strokeRect(x - cx, y - cy, width, height);
  }
  context.restore();
};
var strokeDiamondWithRotation = (context, width, height, cx, cy, angle) => {
  context.save();
  context.translate(cx, cy);
  context.rotate(angle);
  context.beginPath();
  context.moveTo(0, height / 2);
  context.lineTo(width / 2, 0);
  context.lineTo(0, -height / 2);
  context.lineTo(-width / 2, 0);
  context.closePath();
  context.stroke();
  context.restore();
};
var renderSingleLinearPoint = (context, appState, point2, radius, isSelected, isPhantomPoint = false) => {
  context.strokeStyle = "#5e5ad8";
  context.setLineDash([]);
  context.fillStyle = "rgba(255, 255, 255, 0.9)";
  if (isSelected) {
    context.fillStyle = "rgba(134, 131, 226, 0.9)";
  } else if (isPhantomPoint) {
    context.fillStyle = "rgba(177, 151, 252, 0.7)";
  }
  fillCircle(
    context,
    point2[0],
    point2[1],
    radius / appState.zoom.value,
    !isPhantomPoint
  );
};
var strokeEllipseWithRotation = (context, width, height, cx, cy, angle) => {
  context.beginPath();
  context.ellipse(cx, cy, width / 2, height / 2, angle, 0, Math.PI * 2);
  context.stroke();
};
var renderBindingHighlightForBindableElement = (context, element, elementsMap) => {
  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);
  const width = x2 - x1;
  const height = y2 - y1;
  const thickness = 10;
  const strokeOffset = 4;
  context.strokeStyle = "rgba(0,0,0,.05)";
  context.lineWidth = thickness - strokeOffset;
  const padding = strokeOffset / 2 + thickness / 2;
  const radius = getCornerRadius(
    Math.min(element.width, element.height),
    element
  );
  switch (element.type) {
    case "rectangle":
    case "text":
    case "image":
    case "iframe":
    case "embeddable":
    case "frame":
    case "magicframe":
      strokeRectWithRotation(
        context,
        x1 - padding,
        y1 - padding,
        width + padding * 2,
        height + padding * 2,
        x1 + width / 2,
        y1 + height / 2,
        element.angle,
        void 0,
        radius
      );
      break;
    case "diamond":
      const side = Math.hypot(width, height);
      const wPadding = padding * side / height;
      const hPadding = padding * side / width;
      strokeDiamondWithRotation(
        context,
        width + wPadding * 2,
        height + hPadding * 2,
        x1 + width / 2,
        y1 + height / 2,
        element.angle
      );
      break;
    case "ellipse":
      strokeEllipseWithRotation(
        context,
        width + padding * 2,
        height + padding * 2,
        x1 + width / 2,
        y1 + height / 2,
        element.angle
      );
      break;
  }
};
var renderBindingHighlightForSuggestedPointBinding = (context, suggestedBinding, elementsMap) => {
  const [element, startOrEnd, bindableElement] = suggestedBinding;
  const threshold = maxBindingGap(
    bindableElement,
    bindableElement.width,
    bindableElement.height
  );
  context.strokeStyle = "rgba(0,0,0,0)";
  context.fillStyle = "rgba(0,0,0,.05)";
  const pointIndices = startOrEnd === "both" ? [0, -1] : startOrEnd === "start" ? [0] : [-1];
  pointIndices.forEach((index) => {
    const [x, y] = LinearElementEditor.getPointAtIndexGlobalCoordinates(
      element,
      index,
      elementsMap
    );
    fillCircle(context, x, y, threshold);
  });
};
var renderSelectionBorder = (context, appState, elementProperties) => {
  const {
    angle,
    elementX1,
    elementY1,
    elementX2,
    elementY2,
    selectionColors,
    cx,
    cy,
    dashed,
    activeEmbeddable
  } = elementProperties;
  const elementWidth = elementX2 - elementX1;
  const elementHeight = elementY2 - elementY1;
  const padding = DEFAULT_TRANSFORM_HANDLE_SPACING * 2;
  const linePadding = padding / appState.zoom.value;
  const lineWidth = 8 / appState.zoom.value;
  const spaceWidth = 4 / appState.zoom.value;
  context.save();
  context.translate(appState.scrollX, appState.scrollY);
  context.lineWidth = (activeEmbeddable ? 4 : 1) / appState.zoom.value;
  const count = selectionColors.length;
  for (let index = 0; index < count; ++index) {
    context.strokeStyle = selectionColors[index];
    if (dashed) {
      context.setLineDash([
        lineWidth,
        spaceWidth + (lineWidth + spaceWidth) * (count - 1)
      ]);
    }
    context.lineDashOffset = (lineWidth + spaceWidth) * index;
    strokeRectWithRotation(
      context,
      elementX1 - linePadding,
      elementY1 - linePadding,
      elementWidth + linePadding * 2,
      elementHeight + linePadding * 2,
      cx,
      cy,
      angle
    );
  }
  context.restore();
};
var renderBindingHighlight = (context, appState, suggestedBinding, elementsMap) => {
  const renderHighlight = Array.isArray(suggestedBinding) ? renderBindingHighlightForSuggestedPointBinding : renderBindingHighlightForBindableElement;
  context.save();
  context.translate(appState.scrollX, appState.scrollY);
  renderHighlight(context, suggestedBinding, elementsMap);
  context.restore();
};
var renderFrameHighlight = (context, appState, frame, elementsMap) => {
  const [x1, y1, x2, y2] = getElementAbsoluteCoords(frame, elementsMap);
  const width = x2 - x1;
  const height = y2 - y1;
  context.strokeStyle = "rgb(0,118,255)";
  context.lineWidth = FRAME_STYLE.strokeWidth / appState.zoom.value;
  context.save();
  context.translate(appState.scrollX, appState.scrollY);
  strokeRectWithRotation(
    context,
    x1,
    y1,
    width,
    height,
    x1 + width / 2,
    y1 + height / 2,
    frame.angle,
    false,
    FRAME_STYLE.radius / appState.zoom.value
  );
  context.restore();
};
var renderElementsBoxHighlight = (context, appState, elements) => {
  const individualElements = elements.filter(
    (element) => element.groupIds.length === 0
  );
  const elementsInGroups = elements.filter(
    (element) => element.groupIds.length > 0
  );
  const getSelectionFromElements = (elements2) => {
    const [elementX1, elementY1, elementX2, elementY2] = getCommonBounds(elements2);
    return {
      angle: 0,
      elementX1,
      elementX2,
      elementY1,
      elementY2,
      selectionColors: ["rgb(0,118,255)"],
      dashed: false,
      cx: elementX1 + (elementX2 - elementX1) / 2,
      cy: elementY1 + (elementY2 - elementY1) / 2,
      activeEmbeddable: false
    };
  };
  const getSelectionForGroupId = (groupId) => {
    const groupElements = getElementsInGroup(elements, groupId);
    return getSelectionFromElements(groupElements);
  };
  Object.entries(selectGroupsFromGivenElements(elementsInGroups, appState)).filter(([id, isSelected]) => isSelected).map(([id, isSelected]) => id).map((groupId) => getSelectionForGroupId(groupId)).concat(
    individualElements.map((element) => getSelectionFromElements([element]))
  ).forEach(
    (selection) => renderSelectionBorder(context, appState, selection)
  );
};
var renderLinearPointHandles = (context, appState, element, elementsMap) => {
  if (!appState.selectedLinearElement) {
    return;
  }
  context.save();
  context.translate(appState.scrollX, appState.scrollY);
  context.lineWidth = 1 / appState.zoom.value;
  const points = LinearElementEditor.getPointsGlobalCoordinates(
    element,
    elementsMap
  );
  const { POINT_HANDLE_SIZE } = LinearElementEditor;
  const radius = appState.editingLinearElement ? POINT_HANDLE_SIZE : POINT_HANDLE_SIZE / 2;
  points.forEach((point2, idx) => {
    if (isElbowArrow(element) && idx !== 0 && idx !== points.length - 1) {
      return;
    }
    const isSelected = !!appState.editingLinearElement?.selectedPointsIndices?.includes(idx);
    renderSingleLinearPoint(context, appState, point2, radius, isSelected);
  });
  const midPoints = LinearElementEditor.getEditorMidPoints(
    element,
    elementsMap,
    appState
  ).filter((midPoint) => midPoint !== null);
  midPoints.forEach((segmentMidPoint) => {
    if (appState?.selectedLinearElement?.segmentMidPointHoveredCoords && LinearElementEditor.arePointsEqual(
      segmentMidPoint,
      appState.selectedLinearElement.segmentMidPointHoveredCoords
    )) {
      if (appState.editingLinearElement) {
        renderSingleLinearPoint(
          context,
          appState,
          segmentMidPoint,
          radius,
          false
        );
        highlightPoint(segmentMidPoint, context, appState);
      } else {
        highlightPoint(segmentMidPoint, context, appState);
        renderSingleLinearPoint(
          context,
          appState,
          segmentMidPoint,
          radius,
          false
        );
      }
    } else if (appState.editingLinearElement || points.length === 2) {
      renderSingleLinearPoint(
        context,
        appState,
        segmentMidPoint,
        POINT_HANDLE_SIZE / 2,
        false,
        true
      );
    }
  });
  context.restore();
};
var renderTransformHandles = (context, renderConfig, appState, transformHandles, angle) => {
  Object.keys(transformHandles).forEach((key) => {
    const transformHandle = transformHandles[key];
    if (transformHandle !== void 0) {
      const [x, y, width, height] = transformHandle;
      context.save();
      context.lineWidth = 1 / appState.zoom.value;
      if (renderConfig.selectionColor) {
        context.strokeStyle = renderConfig.selectionColor;
      }
      if (key === "rotation") {
        fillCircle(context, x + width / 2, y + height / 2, width / 2);
      } else if (context.roundRect) {
        context.beginPath();
        context.roundRect(x, y, width, height, 2 / appState.zoom.value);
        context.fill();
        context.stroke();
      } else {
        strokeRectWithRotation(
          context,
          x,
          y,
          width,
          height,
          x + width / 2,
          y + height / 2,
          angle,
          true
          // fill before stroke
        );
      }
      context.restore();
    }
  });
};
var renderTextBox = (text, context, appState, selectionColor) => {
  context.save();
  const padding = DEFAULT_TRANSFORM_HANDLE_SPACING * 2 / appState.zoom.value;
  const width = text.width + padding * 2;
  const height = text.height + padding * 2;
  const cx = text.x + width / 2;
  const cy = text.y + height / 2;
  const shiftX = -(width / 2 + padding);
  const shiftY = -(height / 2 + padding);
  context.translate(cx + appState.scrollX, cy + appState.scrollY);
  context.rotate(text.angle);
  context.lineWidth = 1 / appState.zoom.value;
  context.strokeStyle = selectionColor;
  context.strokeRect(shiftX, shiftY, width, height);
  context.restore();
};
var _renderInteractiveScene = ({
  canvas: canvas2,
  elementsMap,
  visibleElements,
  selectedElements,
  allElementsMap,
  scale,
  appState,
  renderConfig,
  device
}) => {
  if (canvas2 === null) {
    return { atLeastOneVisibleElement: false, elementsMap };
  }
  const [normalizedWidth, normalizedHeight] = getNormalizedCanvasDimensions(
    canvas2,
    scale
  );
  const context = bootstrapCanvas({
    canvas: canvas2,
    scale,
    normalizedWidth,
    normalizedHeight
  });
  context.save();
  context.scale(appState.zoom.value, appState.zoom.value);
  let editingLinearElement = void 0;
  visibleElements.forEach((element) => {
    if (appState.editingLinearElement?.elementId === element.id) {
      if (element) {
        editingLinearElement = element;
      }
    }
  });
  if (editingLinearElement) {
    renderLinearPointHandles(
      context,
      appState,
      editingLinearElement,
      elementsMap
    );
  }
  if (appState.selectionElement) {
    try {
      renderSelectionElement(
        appState.selectionElement,
        context,
        appState,
        renderConfig.selectionColor
      );
    } catch (error) {
      console.error(error);
    }
  }
  if (appState.editingTextElement && isTextElement(appState.editingTextElement)) {
    const textElement = allElementsMap.get(appState.editingTextElement.id);
    if (textElement && !textElement.autoResize) {
      renderTextBox(
        textElement,
        context,
        appState,
        renderConfig.selectionColor
      );
    }
  }
  if (appState.isBindingEnabled) {
    appState.suggestedBindings.filter((binding) => binding != null).forEach((suggestedBinding) => {
      renderBindingHighlight(
        context,
        appState,
        suggestedBinding,
        elementsMap
      );
    });
  }
  if (appState.frameToHighlight) {
    renderFrameHighlight(
      context,
      appState,
      appState.frameToHighlight,
      elementsMap
    );
  }
  if (appState.elementsToHighlight) {
    renderElementsBoxHighlight(context, appState, appState.elementsToHighlight);
  }
  const isFrameSelected = selectedElements.some(
    (element) => isFrameLikeElement(element)
  );
  if (selectedElements.length === 1 && appState.editingLinearElement?.elementId === selectedElements[0].id) {
    renderLinearPointHandles(
      context,
      appState,
      selectedElements[0],
      elementsMap
    );
  }
  if (appState.selectedLinearElement && appState.selectedLinearElement.hoverPointIndex >= 0 && !(isElbowArrow(selectedElements[0]) && appState.selectedLinearElement.hoverPointIndex > 0 && appState.selectedLinearElement.hoverPointIndex < selectedElements[0].points.length - 1)) {
    renderLinearElementPointHighlight(context, appState, elementsMap);
  }
  if (!appState.multiElement && !appState.editingLinearElement) {
    const showBoundingBox = shouldShowBoundingBox(selectedElements, appState);
    const isSingleLinearElementSelected = selectedElements.length === 1 && isLinearElement(selectedElements[0]);
    if (isSingleLinearElementSelected && appState.selectedLinearElement?.elementId === selectedElements[0].id && !selectedElements[0].locked) {
      renderLinearPointHandles(
        context,
        appState,
        selectedElements[0],
        elementsMap
      );
    }
    const selectionColor = renderConfig.selectionColor || oc4.black;
    if (showBoundingBox) {
      const locallySelectedIds = arrayToMap(selectedElements);
      const selections = [];
      for (const element of elementsMap.values()) {
        const selectionColors = [];
        const remoteClients = renderConfig.remoteSelectedElementIds.get(
          element.id
        );
        if (!// Elbow arrow elements cannot be selected when bound on either end
        (isSingleLinearElementSelected && isElbowArrow(element) && (element.startBinding || element.endBinding))) {
          if (locallySelectedIds.has(element.id) && !isSelectedViaGroup(appState, element)) {
            selectionColors.push(selectionColor);
          }
          if (remoteClients) {
            selectionColors.push(
              ...remoteClients.map((socketId) => {
                const background = getClientColor(
                  socketId,
                  appState.collaborators.get(socketId)
                );
                return background;
              })
            );
          }
        }
        if (selectionColors.length) {
          const [elementX1, elementY1, elementX2, elementY2, cx, cy] = getElementAbsoluteCoords(element, elementsMap, true);
          selections.push({
            angle: element.angle,
            elementX1,
            elementY1,
            elementX2,
            elementY2,
            selectionColors,
            dashed: !!remoteClients,
            cx,
            cy,
            activeEmbeddable: appState.activeEmbeddable?.element === element && appState.activeEmbeddable.state === "active"
          });
        }
      }
      const addSelectionForGroupId = (groupId) => {
        const groupElements = getElementsInGroup(elementsMap, groupId);
        const [elementX1, elementY1, elementX2, elementY2] = getCommonBounds(groupElements);
        selections.push({
          angle: 0,
          elementX1,
          elementX2,
          elementY1,
          elementY2,
          selectionColors: [oc4.black],
          dashed: true,
          cx: elementX1 + (elementX2 - elementX1) / 2,
          cy: elementY1 + (elementY2 - elementY1) / 2,
          activeEmbeddable: false
        });
      };
      for (const groupId of getSelectedGroupIds(appState)) {
        addSelectionForGroupId(groupId);
      }
      if (appState.editingGroupId) {
        addSelectionForGroupId(appState.editingGroupId);
      }
      selections.forEach(
        (selection) => renderSelectionBorder(context, appState, selection)
      );
    }
    context.save();
    context.translate(appState.scrollX, appState.scrollY);
    if (selectedElements.length === 1) {
      context.fillStyle = oc4.white;
      const transformHandles = getTransformHandles(
        selectedElements[0],
        appState.zoom,
        elementsMap,
        "mouse",
        // when we render we don't know which pointer type so use mouse,
        getOmitSidesForDevice(device)
      );
      if (!appState.viewModeEnabled && showBoundingBox && // do not show transform handles when text is being edited
      !isTextElement(appState.editingTextElement)) {
        renderTransformHandles(
          context,
          renderConfig,
          appState,
          transformHandles,
          selectedElements[0].angle
        );
      }
    } else if (selectedElements.length > 1 && !appState.isRotating) {
      const dashedLinePadding = DEFAULT_TRANSFORM_HANDLE_SPACING * 2 / appState.zoom.value;
      context.fillStyle = oc4.white;
      const [x1, y1, x2, y2] = getCommonBounds(selectedElements);
      const initialLineDash = context.getLineDash();
      context.setLineDash([2 / appState.zoom.value]);
      const lineWidth = context.lineWidth;
      context.lineWidth = 1 / appState.zoom.value;
      context.strokeStyle = selectionColor;
      strokeRectWithRotation(
        context,
        x1 - dashedLinePadding,
        y1 - dashedLinePadding,
        x2 - x1 + dashedLinePadding * 2,
        y2 - y1 + dashedLinePadding * 2,
        (x1 + x2) / 2,
        (y1 + y2) / 2,
        0
      );
      context.lineWidth = lineWidth;
      context.setLineDash(initialLineDash);
      const transformHandles = getTransformHandlesFromCoords(
        [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2],
        0,
        appState.zoom,
        "mouse",
        isFrameSelected ? { ...getOmitSidesForDevice(device), rotation: true } : getOmitSidesForDevice(device)
      );
      if (selectedElements.some((element) => !element.locked)) {
        renderTransformHandles(
          context,
          renderConfig,
          appState,
          transformHandles,
          0
        );
      }
    }
    context.restore();
  }
  appState.searchMatches.forEach(({ id, focus, matchedLines }) => {
    const element = elementsMap.get(id);
    if (element && isTextElement(element)) {
      const [elementX1, elementY1, , , cx, cy] = getElementAbsoluteCoords(
        element,
        elementsMap,
        true
      );
      context.save();
      if (appState.theme === THEME.LIGHT) {
        if (focus) {
          context.fillStyle = "rgba(255, 124, 0, 0.4)";
        } else {
          context.fillStyle = "rgba(255, 226, 0, 0.4)";
        }
      } else if (focus) {
        context.fillStyle = "rgba(229, 82, 0, 0.4)";
      } else {
        context.fillStyle = "rgba(99, 52, 0, 0.4)";
      }
      context.translate(appState.scrollX, appState.scrollY);
      context.translate(cx, cy);
      context.rotate(element.angle);
      matchedLines.forEach((matchedLine) => {
        context.fillRect(
          elementX1 + matchedLine.offsetX - cx,
          elementY1 + matchedLine.offsetY - cy,
          matchedLine.width,
          matchedLine.height
        );
      });
      context.restore();
    }
  });
  renderSnaps(context, appState);
  context.restore();
  renderRemoteCursors({
    context,
    renderConfig,
    appState,
    normalizedWidth,
    normalizedHeight
  });
  let scrollBars;
  if (renderConfig.renderScrollbars) {
    scrollBars = getScrollBars(
      visibleElements,
      normalizedWidth,
      normalizedHeight,
      appState
    );
    context.save();
    context.fillStyle = SCROLLBAR_COLOR;
    context.strokeStyle = "rgba(255,255,255,0.8)";
    [scrollBars.horizontal, scrollBars.vertical].forEach((scrollBar) => {
      if (scrollBar) {
        roundRect(
          context,
          scrollBar.x,
          scrollBar.y,
          scrollBar.width,
          scrollBar.height,
          SCROLLBAR_WIDTH / 2
        );
      }
    });
    context.restore();
  }
  return {
    scrollBars,
    atLeastOneVisibleElement: visibleElements.length > 0,
    elementsMap
  };
};
var renderInteractiveSceneThrottled = throttleRAF(
  (config) => {
    const ret = _renderInteractiveScene(config);
    config.callback?.(ret);
  },
  { trailing: true }
);
var renderInteractiveScene = (renderConfig, throttle6) => {
  if (throttle6) {
    renderInteractiveSceneThrottled(renderConfig);
    return void 0;
  }
  const ret = _renderInteractiveScene(renderConfig);
  renderConfig.callback(ret);
  return ret;
};

// components/canvases/InteractiveCanvas.tsx
import { jsx as jsx138 } from "react/jsx-runtime";
var InteractiveCanvas = (props) => {
  const isComponentMounted = useRef36(false);
  useEffect37(() => {
    if (!isComponentMounted.current) {
      isComponentMounted.current = true;
      return;
    }
    const remotePointerButton = /* @__PURE__ */ new Map();
    const remotePointerViewportCoords = /* @__PURE__ */ new Map();
    const remoteSelectedElementIds = /* @__PURE__ */ new Map();
    const remotePointerUsernames = /* @__PURE__ */ new Map();
    const remotePointerUserStates = /* @__PURE__ */ new Map();
    props.appState.collaborators.forEach((user, socketId) => {
      if (user.selectedElementIds) {
        for (const id of Object.keys(user.selectedElementIds)) {
          if (!remoteSelectedElementIds.has(id)) {
            remoteSelectedElementIds.set(id, []);
          }
          remoteSelectedElementIds.get(id).push(socketId);
        }
      }
      if (!user.pointer || user.pointer.renderCursor === false) {
        return;
      }
      if (user.username) {
        remotePointerUsernames.set(socketId, user.username);
      }
      if (user.userState) {
        remotePointerUserStates.set(socketId, user.userState);
      }
      remotePointerViewportCoords.set(
        socketId,
        sceneCoordsToViewportCoords(
          {
            sceneX: user.pointer.x,
            sceneY: user.pointer.y
          },
          props.appState
        )
      );
      remotePointerButton.set(socketId, user.button);
    });
    const selectionColor = props.containerRef?.current && getComputedStyle(props.containerRef.current).getPropertyValue(
      "--color-selection"
    ) || "#6965db";
    renderInteractiveScene(
      {
        canvas: props.canvas,
        elementsMap: props.elementsMap,
        visibleElements: props.visibleElements,
        selectedElements: props.selectedElements,
        allElementsMap: props.allElementsMap,
        scale: window.devicePixelRatio,
        appState: props.appState,
        renderConfig: {
          remotePointerViewportCoords,
          remotePointerButton,
          remoteSelectedElementIds,
          remotePointerUsernames,
          remotePointerUserStates,
          selectionColor,
          renderScrollbars: false
        },
        device: props.device,
        callback: props.renderInteractiveSceneCallback
      },
      isRenderThrottlingEnabled()
    );
  });
  return /* @__PURE__ */ jsx138(
    "canvas",
    {
      className: "excalidraw__canvas interactive",
      style: {
        width: props.appState.width,
        height: props.appState.height,
        cursor: props.appState.viewModeEnabled ? CURSOR_TYPE.GRAB : CURSOR_TYPE.AUTO
      },
      width: props.appState.width * props.scale,
      height: props.appState.height * props.scale,
      ref: props.handleCanvasRef,
      onContextMenu: props.onContextMenu,
      onPointerMove: props.onPointerMove,
      onPointerUp: props.onPointerUp,
      onPointerCancel: props.onPointerCancel,
      onTouchMove: props.onTouchMove,
      onPointerDown: props.onPointerDown,
      onDoubleClick: props.appState.viewModeEnabled ? void 0 : props.onDoubleClick,
      children: t("labels.drawingCanvas")
    }
  );
};
var getRelevantAppStateProps = (appState) => ({
  zoom: appState.zoom,
  scrollX: appState.scrollX,
  scrollY: appState.scrollY,
  width: appState.width,
  height: appState.height,
  viewModeEnabled: appState.viewModeEnabled,
  editingGroupId: appState.editingGroupId,
  editingLinearElement: appState.editingLinearElement,
  selectedElementIds: appState.selectedElementIds,
  frameToHighlight: appState.frameToHighlight,
  offsetLeft: appState.offsetLeft,
  offsetTop: appState.offsetTop,
  theme: appState.theme,
  pendingImageElementId: appState.pendingImageElementId,
  selectionElement: appState.selectionElement,
  selectedGroupIds: appState.selectedGroupIds,
  selectedLinearElement: appState.selectedLinearElement,
  multiElement: appState.multiElement,
  isBindingEnabled: appState.isBindingEnabled,
  suggestedBindings: appState.suggestedBindings,
  isRotating: appState.isRotating,
  elementsToHighlight: appState.elementsToHighlight,
  collaborators: appState.collaborators,
  // Necessary for collab. sessions
  activeEmbeddable: appState.activeEmbeddable,
  snapLines: appState.snapLines,
  zenModeEnabled: appState.zenModeEnabled,
  editingTextElement: appState.editingTextElement,
  searchMatches: appState.searchMatches
});
var areEqual3 = (prevProps, nextProps) => {
  if (prevProps.selectionNonce !== nextProps.selectionNonce || prevProps.sceneNonce !== nextProps.sceneNonce || prevProps.scale !== nextProps.scale || // we need to memoize on elementsMap because they may have renewed
  // even if sceneNonce didn't change (e.g. we filter elements out based
  // on appState)
  prevProps.elementsMap !== nextProps.elementsMap || prevProps.visibleElements !== nextProps.visibleElements || prevProps.selectedElements !== nextProps.selectedElements) {
    return false;
  }
  return isShallowEqual(
    // asserting AppState because we're being passed the whole AppState
    // but resolve to only the InteractiveCanvas-relevant props
    getRelevantAppStateProps(prevProps.appState),
    getRelevantAppStateProps(nextProps.appState)
  );
};
var InteractiveCanvas_default = React41.memo(InteractiveCanvas, areEqual3);

// components/canvases/StaticCanvas.tsx
init_define_import_meta_env();
init_staticScene();
init_utils2();
import React42, { useEffect as useEffect38, useRef as useRef37 } from "react";
import { jsx as jsx139 } from "react/jsx-runtime";
var StaticCanvas = (props) => {
  const wrapperRef = useRef37(null);
  const isComponentMounted = useRef37(false);
  useEffect38(() => {
    const wrapper = wrapperRef.current;
    if (!wrapper) {
      return;
    }
    const canvas2 = props.canvas;
    if (!isComponentMounted.current) {
      isComponentMounted.current = true;
      wrapper.replaceChildren(canvas2);
      canvas2.classList.add("excalidraw__canvas", "static");
    }
    const widthString = `${props.appState.width}px`;
    const heightString = `${props.appState.height}px`;
    if (canvas2.style.width !== widthString) {
      canvas2.style.width = widthString;
    }
    if (canvas2.style.height !== heightString) {
      canvas2.style.height = heightString;
    }
    const scaledWidth = props.appState.width * props.scale;
    const scaledHeight = props.appState.height * props.scale;
    if (canvas2.width !== scaledWidth) {
      canvas2.width = scaledWidth;
    }
    if (canvas2.height !== scaledHeight) {
      canvas2.height = scaledHeight;
    }
    renderStaticScene(
      {
        canvas: canvas2,
        rc: props.rc,
        scale: props.scale,
        elementsMap: props.elementsMap,
        allElementsMap: props.allElementsMap,
        visibleElements: props.visibleElements,
        appState: props.appState,
        renderConfig: props.renderConfig
      },
      isRenderThrottlingEnabled()
    );
  });
  return /* @__PURE__ */ jsx139("div", { className: "excalidraw__canvas-wrapper", ref: wrapperRef });
};
var getRelevantAppStateProps2 = (appState) => ({
  zoom: appState.zoom,
  scrollX: appState.scrollX,
  scrollY: appState.scrollY,
  width: appState.width,
  height: appState.height,
  viewModeEnabled: appState.viewModeEnabled,
  offsetLeft: appState.offsetLeft,
  offsetTop: appState.offsetTop,
  theme: appState.theme,
  pendingImageElementId: appState.pendingImageElementId,
  shouldCacheIgnoreZoom: appState.shouldCacheIgnoreZoom,
  viewBackgroundColor: appState.viewBackgroundColor,
  exportScale: appState.exportScale,
  selectedElementsAreBeingDragged: appState.selectedElementsAreBeingDragged,
  gridSize: appState.gridSize,
  gridStep: appState.gridStep,
  frameRendering: appState.frameRendering,
  selectedElementIds: appState.selectedElementIds,
  frameToHighlight: appState.frameToHighlight,
  editingGroupId: appState.editingGroupId,
  currentHoveredFontFamily: appState.currentHoveredFontFamily
});
var areEqual4 = (prevProps, nextProps) => {
  if (prevProps.sceneNonce !== nextProps.sceneNonce || prevProps.scale !== nextProps.scale || // we need to memoize on elementsMap because they may have renewed
  // even if sceneNonce didn't change (e.g. we filter elements out based
  // on appState)
  prevProps.elementsMap !== nextProps.elementsMap || prevProps.visibleElements !== nextProps.visibleElements) {
    return false;
  }
  return isShallowEqual(
    // asserting AppState because we're being passed the whole AppState
    // but resolve to only the StaticCanvas-relevant props
    getRelevantAppStateProps2(prevProps.appState),
    getRelevantAppStateProps2(nextProps.appState)
  ) && isShallowEqual(prevProps.renderConfig, nextProps.renderConfig);
};
var StaticCanvas_default = React42.memo(StaticCanvas, areEqual4);

// scene/Renderer.ts
init_define_import_meta_env();
init_sizeHelpers();
init_typeChecks();
init_staticScene();
init_utils2();
var Renderer = class {
  scene;
  constructor(scene) {
    this.scene = scene;
  }
  getRenderableElements = (() => {
    const getVisibleCanvasElements = ({
      elementsMap,
      zoom,
      offsetLeft,
      offsetTop,
      scrollX,
      scrollY,
      height,
      width
    }) => {
      const visibleElements = [];
      for (const element of elementsMap.values()) {
        if (isElementInViewport(
          element,
          width,
          height,
          {
            zoom,
            offsetLeft,
            offsetTop,
            scrollX,
            scrollY
          },
          elementsMap
        )) {
          visibleElements.push(element);
        }
      }
      return visibleElements;
    };
    const getRenderableElements = ({
      elements,
      editingTextElement,
      newElementId,
      pendingImageElementId
    }) => {
      const elementsMap = toBrandedType(/* @__PURE__ */ new Map());
      for (const element of elements) {
        if (isImageElement(element)) {
          if (
            // => not placed on canvas yet (but in elements array)
            pendingImageElementId === element.id
          ) {
            continue;
          }
        }
        if (newElementId === element.id) {
          continue;
        }
        if (!editingTextElement || editingTextElement.type !== "text" || element.id !== editingTextElement.id) {
          elementsMap.set(element.id, element);
        }
      }
      return elementsMap;
    };
    return memoize(
      ({
        zoom,
        offsetLeft,
        offsetTop,
        scrollX,
        scrollY,
        height,
        width,
        editingTextElement,
        newElementId,
        pendingImageElementId,
        // cache-invalidation nonce
        sceneNonce: _sceneNonce
      }) => {
        const elements = this.scene.getNonDeletedElements();
        const elementsMap = getRenderableElements({
          elements,
          editingTextElement,
          newElementId,
          pendingImageElementId
        });
        const visibleElements = getVisibleCanvasElements({
          elementsMap,
          zoom,
          offsetLeft,
          offsetTop,
          scrollX,
          scrollY,
          height,
          width
        });
        return { elementsMap, visibleElements };
      }
    );
  })();
  // NOTE Doesn't destroy everything (scene, rc, etc.) because it may not be
  // safe to break TS contract here (for upstream cases)
  destroy() {
    renderInteractiveSceneThrottled.cancel();
    renderStaticSceneThrottled.cancel();
    this.getRenderableElements.clear();
  }
};

// components/App.tsx
init_ShapeCache();

// components/SVGLayer.tsx
init_define_import_meta_env();
import { useEffect as useEffect39, useRef as useRef38 } from "react";
import { jsx as jsx140 } from "react/jsx-runtime";
var SVGLayer = ({ trails }) => {
  const svgRef = useRef38(null);
  useEffect39(() => {
    if (svgRef.current) {
      for (const trail of trails) {
        trail.start(svgRef.current);
      }
    }
    return () => {
      for (const trail of trails) {
        trail.stop();
      }
    };
  }, trails);
  return /* @__PURE__ */ jsx140("div", { className: "SVGLayer", children: /* @__PURE__ */ jsx140("svg", { ref: svgRef }) });
};

// components/App.tsx
init_cursor();
init_emitter();

// element/ElementCanvasButtons.tsx
init_define_import_meta_env();
init_utils2();
init_element();
import { jsx as jsx141 } from "react/jsx-runtime";
var CONTAINER_PADDING2 = 5;
var getContainerCoords2 = (element, appState, elementsMap) => {
  const [x1, y1] = getElementAbsoluteCoords(element, elementsMap);
  const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(
    { sceneX: x1 + element.width, sceneY: y1 },
    appState
  );
  const x = viewportX - appState.offsetLeft + 10;
  const y = viewportY - appState.offsetTop;
  return { x, y };
};
var ElementCanvasButtons = ({
  children,
  element,
  elementsMap
}) => {
  const appState = useExcalidrawAppState();
  if (appState.contextMenu || appState.newElement || appState.resizingElement || appState.isRotating || appState.openMenu || appState.viewModeEnabled) {
    return null;
  }
  const { x, y } = getContainerCoords2(element, appState, elementsMap);
  return /* @__PURE__ */ jsx141(
    "div",
    {
      className: "excalidraw-canvas-buttons",
      style: {
        top: `${y}px`,
        left: `${x}px`,
        // width: CONTAINER_WIDTH,
        padding: CONTAINER_PADDING2
      },
      children
    }
  );
};

// components/App.tsx
init_colors();

// components/MagicButton.tsx
init_define_import_meta_env();
import clsx55 from "clsx";
import { jsx as jsx142, jsxs as jsxs75 } from "react/jsx-runtime";
var DEFAULT_SIZE4 = "small";
var ElementCanvasButton = (props) => {
  return /* @__PURE__ */ jsxs75(
    "label",
    {
      className: clsx55(
        "ToolIcon ToolIcon__MagicButton",
        `ToolIcon_size_${DEFAULT_SIZE4}`,
        {
          "is-mobile": props.isMobile
        }
      ),
      title: `${props.title}`,
      children: [
        /* @__PURE__ */ jsx142(
          "input",
          {
            className: "ToolIcon_type_checkbox",
            type: "checkbox",
            name: props.name,
            onChange: props.onChange,
            checked: props.checked,
            "aria-label": props.title
          }
        ),
        /* @__PURE__ */ jsx142("div", { className: "ToolIcon__icon", children: props.icon })
      ]
    }
  );
};

// components/App.tsx
init_icons();

// components/FollowMode/FollowMode.tsx
init_define_import_meta_env();
init_icons();
import { jsx as jsx143, jsxs as jsxs76 } from "react/jsx-runtime";
var FollowMode = ({
  height,
  width,
  userToFollow,
  onDisconnect
}) => {
  return /* @__PURE__ */ jsx143("div", { className: "follow-mode", style: { width, height }, children: /* @__PURE__ */ jsxs76("div", { className: "follow-mode__badge", children: [
    /* @__PURE__ */ jsxs76("div", { className: "follow-mode__badge__label", children: [
      "Following",
      " ",
      /* @__PURE__ */ jsx143(
        "span",
        {
          className: "follow-mode__badge__username",
          title: userToFollow.username,
          children: userToFollow.username
        }
      )
    ] }),
    /* @__PURE__ */ jsx143(
      "button",
      {
        type: "button",
        onClick: onDisconnect,
        className: "follow-mode__disconnect-btn",
        children: CloseIcon
      }
    )
  ] }) });
};
var FollowMode_default = FollowMode;

// components/App.tsx
init_store();

// animation-frame-handler.ts
init_define_import_meta_env();
var AnimationFrameHandler = class {
  targets = /* @__PURE__ */ new WeakMap();
  rafIds = /* @__PURE__ */ new WeakMap();
  register(key, callback) {
    this.targets.set(key, { callback, stopped: true });
  }
  start(key) {
    const target = this.targets.get(key);
    if (!target) {
      return;
    }
    if (this.rafIds.has(key)) {
      return;
    }
    this.targets.set(key, { ...target, stopped: false });
    this.scheduleFrame(key);
  }
  stop(key) {
    const target = this.targets.get(key);
    if (target && !target.stopped) {
      this.targets.set(key, { ...target, stopped: true });
    }
    this.cancelFrame(key);
  }
  constructFrame(key) {
    return (timestamp) => {
      const target = this.targets.get(key);
      if (!target) {
        return;
      }
      const shouldAbort = this.onFrame(target, timestamp);
      if (!target.stopped && !shouldAbort) {
        this.scheduleFrame(key);
      } else {
        this.cancelFrame(key);
      }
    };
  }
  scheduleFrame(key) {
    const rafId = requestAnimationFrame(this.constructFrame(key));
    this.rafIds.set(key, rafId);
  }
  cancelFrame(key) {
    if (this.rafIds.has(key)) {
      const rafId = this.rafIds.get(key);
      cancelAnimationFrame(rafId);
    }
    this.rafIds.delete(key);
  }
  onFrame(target, timestamp) {
    const shouldAbort = target.callback(timestamp);
    return shouldAbort ?? false;
  }
};

// animated-trail.ts
init_define_import_meta_env();
init_utils2();
init_constants();
import { LaserPointer } from "@excalidraw/laser-pointer";
var AnimatedTrail = class {
  constructor(animationFrameHandler, app, options) {
    this.animationFrameHandler = animationFrameHandler;
    this.app = app;
    this.options = options;
    this.animationFrameHandler.register(this, this.onFrame.bind(this));
    this.trailElement = document.createElementNS(SVG_NS, "path");
  }
  currentTrail;
  pastTrails = [];
  container;
  trailElement;
  get hasCurrentTrail() {
    return !!this.currentTrail;
  }
  hasLastPoint(x, y) {
    if (this.currentTrail) {
      const len = this.currentTrail.originalPoints.length;
      return this.currentTrail.originalPoints[len - 1][0] === x && this.currentTrail.originalPoints[len - 1][1] === y;
    }
    return false;
  }
  start(container) {
    if (container) {
      this.container = container;
    }
    if (this.trailElement.parentNode !== this.container && this.container) {
      this.container.appendChild(this.trailElement);
    }
    this.animationFrameHandler.start(this);
  }
  stop() {
    this.animationFrameHandler.stop(this);
    if (this.trailElement.parentNode === this.container) {
      this.container?.removeChild(this.trailElement);
    }
  }
  startPath(x, y) {
    this.currentTrail = new LaserPointer(this.options);
    this.currentTrail.addPoint([x, y, performance.now()]);
    this.update();
  }
  addPointToPath(x, y) {
    if (this.currentTrail) {
      this.currentTrail.addPoint([x, y, performance.now()]);
      this.update();
    }
  }
  endPath() {
    if (this.currentTrail) {
      this.currentTrail.close();
      this.currentTrail.options.keepHead = false;
      this.pastTrails.push(this.currentTrail);
      this.currentTrail = void 0;
      this.update();
    }
  }
  update() {
    this.start();
  }
  onFrame() {
    const paths = [];
    for (const trail of this.pastTrails) {
      paths.push(this.drawTrail(trail, this.app.state));
    }
    if (this.currentTrail) {
      const currentPath = this.drawTrail(this.currentTrail, this.app.state);
      paths.push(currentPath);
    }
    this.pastTrails = this.pastTrails.filter((trail) => {
      return trail.getStrokeOutline().length !== 0;
    });
    if (paths.length === 0) {
      this.stop();
    }
    const svgPaths = paths.join(" ").trim();
    this.trailElement.setAttribute("d", svgPaths);
    this.trailElement.setAttribute(
      "fill",
      (this.options.fill ?? (() => "black"))(this)
    );
  }
  drawTrail(trail, state) {
    const stroke = trail.getStrokeOutline(trail.options.size / state.zoom.value).map(([x, y]) => {
      const result = sceneCoordsToViewportCoords(
        { sceneX: x, sceneY: y },
        state
      );
      return [result.x, result.y];
    });
    return getSvgPathFromStroke(stroke, true);
  }
};

// laser-trails.ts
init_define_import_meta_env();
init_utils2();
init_constants();
var LaserTrails = class {
  constructor(animationFrameHandler, app) {
    this.animationFrameHandler = animationFrameHandler;
    this.app = app;
    this.animationFrameHandler.register(this, this.onFrame.bind(this));
    this.localTrail = new AnimatedTrail(animationFrameHandler, app, {
      ...this.getTrailOptions(),
      fill: () => DEFAULT_LASER_COLOR
    });
  }
  localTrail;
  collabTrails = /* @__PURE__ */ new Map();
  container;
  getTrailOptions() {
    return {
      simplify: 0,
      streamline: 0.4,
      sizeMapping: (c) => {
        const DECAY_TIME = 1e3;
        const DECAY_LENGTH = 50;
        const t2 = Math.max(
          0,
          1 - (performance.now() - c.pressure) / DECAY_TIME
        );
        const l = (DECAY_LENGTH - Math.min(DECAY_LENGTH, c.totalLength - c.currentIndex)) / DECAY_LENGTH;
        return Math.min(easeOut(l), easeOut(t2));
      }
    };
  }
  startPath(x, y) {
    this.localTrail.startPath(x, y);
  }
  addPointToPath(x, y) {
    this.localTrail.addPointToPath(x, y);
  }
  endPath() {
    this.localTrail.endPath();
  }
  start(container) {
    this.container = container;
    this.animationFrameHandler.start(this);
    this.localTrail.start(container);
  }
  stop() {
    this.animationFrameHandler.stop(this);
    this.localTrail.stop();
  }
  onFrame() {
    this.updateCollabTrails();
  }
  updateCollabTrails() {
    if (!this.container || this.app.state.collaborators.size === 0) {
      return;
    }
    for (const [key, collaborator] of this.app.state.collaborators.entries()) {
      let trail;
      if (!this.collabTrails.has(key)) {
        trail = new AnimatedTrail(this.animationFrameHandler, this.app, {
          ...this.getTrailOptions(),
          fill: () => collaborator.pointer?.laserColor || getClientColor(key, collaborator)
        });
        trail.start(this.container);
        this.collabTrails.set(key, trail);
      } else {
        trail = this.collabTrails.get(key);
      }
      if (collaborator.pointer && collaborator.pointer.tool === "laser") {
        if (collaborator.button === "down" && !trail.hasCurrentTrail) {
          trail.startPath(collaborator.pointer.x, collaborator.pointer.y);
        }
        if (collaborator.button === "down" && trail.hasCurrentTrail && !trail.hasLastPoint(collaborator.pointer.x, collaborator.pointer.y)) {
          trail.addPointToPath(collaborator.pointer.x, collaborator.pointer.y);
        }
        if (collaborator.button === "up" && trail.hasCurrentTrail) {
          trail.addPointToPath(collaborator.pointer.x, collaborator.pointer.y);
          trail.endPath();
        }
      }
    }
    for (const key of this.collabTrails.keys()) {
      if (!this.app.state.collaborators.has(key)) {
        const trail = this.collabTrails.get(key);
        trail.stop();
        this.collabTrails.delete(key);
      }
    }
  }
};

// components/App.tsx
init_renderElement();
init_collision2();

// element/textWysiwyg.tsx
init_define_import_meta_env();
init_keys();
init_utils2();
init_Scene();
init_typeChecks();
init_constants();
init_mutateElement();
init_textElement();
init_linearElementEditor();
init_clipboard();
init_containerCache();
var getTransform = (width, height, angle, appState, maxWidth, maxHeight) => {
  const { zoom } = appState;
  const degree = 180 * angle / Math.PI;
  let translateX = width * (zoom.value - 1) / 2;
  let translateY = height * (zoom.value - 1) / 2;
  if (width > maxWidth && zoom.value !== 1) {
    translateX = maxWidth * (zoom.value - 1) / 2;
  }
  if (height > maxHeight && zoom.value !== 1) {
    translateY = maxHeight * (zoom.value - 1) / 2;
  }
  return `translate(${translateX}px, ${translateY}px) scale(${zoom.value}) rotate(${degree}deg)`;
};
var textWysiwyg = ({
  id,
  onChange,
  onSubmit,
  getViewportCoords,
  element,
  canvas: canvas2,
  excalidrawContainer,
  app,
  autoSelect = true
}) => {
  const textPropertiesUpdated = (updatedTextElement, editable2) => {
    if (!editable2.style.fontFamily || !editable2.style.fontSize) {
      return false;
    }
    const currentFont = editable2.style.fontFamily.replace(/"/g, "");
    if (getFontFamilyString({ fontFamily: updatedTextElement.fontFamily }) !== currentFont) {
      return true;
    }
    if (`${updatedTextElement.fontSize}px` !== editable2.style.fontSize) {
      return true;
    }
    return false;
  };
  const updateWysiwygStyle = () => {
    const appState = app.state;
    const updatedTextElement = Scene_default.getScene(element)?.getElement(id);
    if (!updatedTextElement) {
      return;
    }
    const { textAlign, verticalAlign } = updatedTextElement;
    const elementsMap = app.scene.getNonDeletedElementsMap();
    if (updatedTextElement && isTextElement(updatedTextElement)) {
      let coordX = updatedTextElement.x;
      let coordY = updatedTextElement.y;
      const container = getContainerElement(
        updatedTextElement,
        app.scene.getNonDeletedElementsMap()
      );
      let width = updatedTextElement.width;
      let height = updatedTextElement.height;
      let maxWidth = updatedTextElement.width;
      let maxHeight = updatedTextElement.height;
      if (container && updatedTextElement.containerId) {
        if (isArrowElement(container)) {
          const boundTextCoords = LinearElementEditor.getBoundTextElementPosition(
            container,
            updatedTextElement,
            elementsMap
          );
          coordX = boundTextCoords.x;
          coordY = boundTextCoords.y;
        }
        const propertiesUpdated = textPropertiesUpdated(
          updatedTextElement,
          editable
        );
        let originalContainerData;
        if (propertiesUpdated) {
          originalContainerData = updateOriginalContainerCache(
            container.id,
            container.height
          );
        } else {
          originalContainerData = originalContainerCache[container.id];
          if (!originalContainerData) {
            originalContainerData = updateOriginalContainerCache(
              container.id,
              container.height
            );
          }
        }
        maxWidth = getBoundTextMaxWidth(container, updatedTextElement);
        maxHeight = getBoundTextMaxHeight(
          container,
          updatedTextElement
        );
        if (!isArrowElement(container) && height > maxHeight) {
          const targetContainerHeight = computeContainerDimensionForBoundText(
            height,
            container.type
          );
          mutateElement(container, { height: targetContainerHeight });
          return;
        } else if (
          // autoshrink container height until original container height
          // is reached when text is removed
          !isArrowElement(container) && container.height > originalContainerData.height && height < maxHeight
        ) {
          const targetContainerHeight = computeContainerDimensionForBoundText(
            height,
            container.type
          );
          mutateElement(container, { height: targetContainerHeight });
        } else {
          const { y } = computeBoundTextPosition(
            container,
            updatedTextElement,
            elementsMap
          );
          coordY = y;
        }
      }
      const [viewportX, viewportY] = getViewportCoords(coordX, coordY);
      const initialSelectionStart = editable.selectionStart;
      const initialSelectionEnd = editable.selectionEnd;
      const initialLength = editable.value.length;
      if (initialSelectionStart === initialSelectionEnd && initialSelectionEnd !== initialLength) {
        const diff = initialLength - initialSelectionEnd;
        editable.selectionStart = editable.value.length - diff;
        editable.selectionEnd = editable.value.length - diff;
      }
      if (!container) {
        maxWidth = (appState.width - 8 - viewportX) / appState.zoom.value;
        width = Math.min(width, maxWidth);
      } else {
        width += 0.5;
      }
      height *= 1.05;
      const font = getFontString(updatedTextElement);
      const padding = !isSafari ? Math.ceil(updatedTextElement.fontSize / appState.zoom.value / 2) : 0;
      const editorMaxHeight = (appState.height - viewportY) / appState.zoom.value;
      Object.assign(editable.style, {
        font,
        // must be defined *after* font ¯\_(ツ)_/¯
        lineHeight: updatedTextElement.lineHeight,
        width: `${width}px`,
        height: `${height}px`,
        left: `${viewportX - padding}px`,
        top: `${viewportY}px`,
        transform: getTransform(
          width,
          height,
          getTextElementAngle(updatedTextElement, container),
          appState,
          maxWidth,
          editorMaxHeight
        ),
        padding: `0 ${padding}px`,
        textAlign,
        verticalAlign,
        color: updatedTextElement.strokeColor,
        opacity: updatedTextElement.opacity / 100,
        filter: "var(--theme-filter)",
        maxHeight: `${editorMaxHeight}px`
      });
      editable.scrollTop = 0;
      if (isTestEnv()) {
        editable.style.fontFamily = getFontFamilyString(updatedTextElement);
      }
      mutateElement(updatedTextElement, { x: coordX, y: coordY });
    }
  };
  const editable = document.createElement("textarea");
  editable.dir = "auto";
  editable.tabIndex = 0;
  editable.dataset.type = "wysiwyg";
  editable.wrap = "off";
  editable.classList.add("excalidraw-wysiwyg");
  let whiteSpace = "pre";
  let wordBreak = "normal";
  if (isBoundToContainer(element) || !element.autoResize) {
    whiteSpace = "pre-wrap";
    wordBreak = "break-word";
  }
  Object.assign(editable.style, {
    position: "absolute",
    display: "inline-block",
    minHeight: "1em",
    backfaceVisibility: "hidden",
    margin: 0,
    border: 0,
    outline: 0,
    resize: "none",
    background: "transparent",
    overflow: "hidden",
    // must be specified because in dark mode canvas creates a stacking context
    zIndex: "var(--zIndex-wysiwyg)",
    wordBreak,
    // prevent line wrapping (`whitespace: nowrap` doesn't work on FF)
    whiteSpace,
    overflowWrap: "break-word",
    boxSizing: "content-box"
  });
  editable.value = element.originalText;
  updateWysiwygStyle();
  if (onChange) {
    editable.onpaste = async (event) => {
      const clipboardData = await parseClipboard(event, true);
      if (!clipboardData.text) {
        return;
      }
      const data = normalizeText(clipboardData.text);
      if (!data) {
        return;
      }
      const container = getContainerElement(
        element,
        app.scene.getNonDeletedElementsMap()
      );
      const font = getFontString({
        fontSize: app.state.currentItemFontSize,
        fontFamily: app.state.currentItemFontFamily
      });
      if (container) {
        const boundTextElement = getBoundTextElement(
          container,
          app.scene.getNonDeletedElementsMap()
        );
        const wrappedText = wrapText(
          `${editable.value}${data}`,
          font,
          getBoundTextMaxWidth(container, boundTextElement)
        );
        const width = getTextWidth(wrappedText, font, true);
        editable.style.width = `${width}px`;
      }
    };
    editable.oninput = () => {
      const normalized2 = normalizeText(editable.value);
      if (editable.value !== normalized2) {
        const selectionStart = editable.selectionStart;
        editable.value = normalized2;
        editable.selectionStart = selectionStart;
        editable.selectionEnd = selectionStart;
      }
      onChange(editable.value);
    };
  }
  editable.onkeydown = (event) => {
    if (!event.shiftKey && actionZoomIn.keyTest(event)) {
      event.preventDefault();
      app.actionManager.executeAction(actionZoomIn);
      updateWysiwygStyle();
    } else if (!event.shiftKey && actionZoomOut.keyTest(event)) {
      event.preventDefault();
      app.actionManager.executeAction(actionZoomOut);
      updateWysiwygStyle();
    } else if (!event.shiftKey && actionResetZoom.keyTest(event)) {
      event.preventDefault();
      app.actionManager.executeAction(actionResetZoom);
      updateWysiwygStyle();
    } else if (actionDecreaseFontSize.keyTest(event)) {
      app.actionManager.executeAction(actionDecreaseFontSize);
    } else if (actionIncreaseFontSize.keyTest(event)) {
      app.actionManager.executeAction(actionIncreaseFontSize);
    } else if (event.key === KEYS.ESCAPE) {
      event.preventDefault();
      submittedViaKeyboard = true;
      handleSubmit();
    } else if (event.key === KEYS.ENTER && event[KEYS.CTRL_OR_CMD]) {
      event.preventDefault();
      if (event.isComposing || event.keyCode === 229) {
        return;
      }
      submittedViaKeyboard = true;
      handleSubmit();
    } else if (event.key === KEYS.TAB || event[KEYS.CTRL_OR_CMD] && (event.code === CODES.BRACKET_LEFT || event.code === CODES.BRACKET_RIGHT)) {
      event.preventDefault();
      if (event.isComposing) {
        return;
      } else if (event.shiftKey || event.code === CODES.BRACKET_LEFT) {
        outdent();
      } else {
        indent();
      }
      editable.dispatchEvent(new Event("input"));
    }
  };
  const TAB_SIZE = 4;
  const TAB = " ".repeat(TAB_SIZE);
  const RE_LEADING_TAB = new RegExp(`^ {1,${TAB_SIZE}}`);
  const indent = () => {
    const { selectionStart, selectionEnd } = editable;
    const linesStartIndices = getSelectedLinesStartIndices();
    let value = editable.value;
    linesStartIndices.forEach((startIndex) => {
      const startValue = value.slice(0, startIndex);
      const endValue = value.slice(startIndex);
      value = `${startValue}${TAB}${endValue}`;
    });
    editable.value = value;
    editable.selectionStart = selectionStart + TAB_SIZE;
    editable.selectionEnd = selectionEnd + TAB_SIZE * linesStartIndices.length;
  };
  const outdent = () => {
    const { selectionStart, selectionEnd } = editable;
    const linesStartIndices = getSelectedLinesStartIndices();
    const removedTabs = [];
    let value = editable.value;
    linesStartIndices.forEach((startIndex) => {
      const tabMatch = value.slice(startIndex, startIndex + TAB_SIZE).match(RE_LEADING_TAB);
      if (tabMatch) {
        const startValue = value.slice(0, startIndex);
        const endValue = value.slice(startIndex + tabMatch[0].length);
        value = `${startValue}${endValue}`;
        removedTabs.push(startIndex);
      }
    });
    editable.value = value;
    if (removedTabs.length) {
      if (selectionStart > removedTabs[removedTabs.length - 1]) {
        editable.selectionStart = Math.max(
          selectionStart - TAB_SIZE,
          removedTabs[removedTabs.length - 1]
        );
      } else {
        editable.selectionStart = selectionStart;
      }
      editable.selectionEnd = Math.max(
        editable.selectionStart,
        selectionEnd - TAB_SIZE * removedTabs.length
      );
    }
  };
  const getSelectedLinesStartIndices = () => {
    let { selectionStart, selectionEnd, value } = editable;
    const startOffset = value.slice(0, selectionStart).match(/[^\n]*$/)[0].length;
    selectionStart = selectionStart - startOffset;
    const selected = value.slice(selectionStart, selectionEnd);
    return selected.split("\n").reduce(
      (startIndices, line, idx, lines) => startIndices.concat(
        idx ? (
          // curr line index is prev line's start + prev line's length + \n
          startIndices[idx - 1] + lines[idx - 1].length + 1
        ) : (
          // first selected line
          selectionStart
        )
      ),
      []
    ).reverse();
  };
  const stopEvent = (event) => {
    if (event.target instanceof HTMLCanvasElement) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
  let submittedViaKeyboard = false;
  const handleSubmit = () => {
    if (isDestroyed) {
      return;
    }
    isDestroyed = true;
    cleanup();
    const updateElement = Scene_default.getScene(element)?.getElement(
      element.id
    );
    if (!updateElement) {
      return;
    }
    const container = getContainerElement(
      updateElement,
      app.scene.getNonDeletedElementsMap()
    );
    if (container) {
      if (editable.value.trim()) {
        const boundTextElementId = getBoundTextElementId(container);
        if (!boundTextElementId || boundTextElementId !== element.id) {
          mutateElement(container, {
            boundElements: (container.boundElements || []).concat({
              type: "text",
              id: element.id
            })
          });
        } else if (isArrowElement(container)) {
          bumpVersion(container);
        }
      } else {
        mutateElement(container, {
          boundElements: container.boundElements?.filter(
            (ele) => !isTextElement(
              ele
            )
          )
        });
      }
      redrawTextBoundingBox(
        updateElement,
        container,
        app.scene.getNonDeletedElementsMap()
      );
    }
    onSubmit({
      viaKeyboard: submittedViaKeyboard,
      nextOriginalText: editable.value
    });
  };
  const cleanup = () => {
    editable.onblur = null;
    editable.oninput = null;
    editable.onkeydown = null;
    if (observer) {
      observer.disconnect();
    }
    window.removeEventListener("resize", updateWysiwygStyle);
    window.removeEventListener("wheel", stopEvent, true);
    window.removeEventListener("pointerdown", onPointerDown);
    window.removeEventListener("pointerup", bindBlurEvent);
    window.removeEventListener("blur", handleSubmit);
    window.removeEventListener("beforeunload", handleSubmit);
    unbindUpdate();
    unbindOnScroll();
    editable.remove();
  };
  const bindBlurEvent = (event) => {
    window.removeEventListener("pointerup", bindBlurEvent);
    const target = event?.target;
    const isPropertiesTrigger = target instanceof HTMLElement && target.classList.contains("properties-trigger");
    setTimeout(() => {
      editable.onblur = handleSubmit;
      if (!isPropertiesTrigger) {
        editable.focus();
      }
    });
  };
  const temporarilyDisableSubmit = () => {
    editable.onblur = null;
    window.addEventListener("pointerup", bindBlurEvent);
    window.addEventListener("blur", handleSubmit);
  };
  const onPointerDown = (event) => {
    const target = event?.target;
    if (event.button === POINTER_BUTTON.WHEEL) {
      if (target instanceof HTMLTextAreaElement) {
        event.preventDefault();
        app.handleCanvasPanUsingWheelOrSpaceDrag(event);
      }
      temporarilyDisableSubmit();
      return;
    }
    const isPropertiesTrigger = target instanceof HTMLElement && target.classList.contains("properties-trigger");
    if ((event.target instanceof HTMLElement || event.target instanceof SVGElement) && event.target.closest(
      `.${CLASSES.SHAPE_ACTIONS_MENU}, .${CLASSES.ZOOM_ACTIONS}`
    ) && !isWritableElement(event.target) || isPropertiesTrigger) {
      temporarilyDisableSubmit();
    } else if (event.target instanceof HTMLCanvasElement && // Vitest simply ignores stopPropagation, capture-mode, or rAF
    // so without introducing crazier hacks, nothing we can do
    !isTestEnv()) {
      requestAnimationFrame(() => {
        handleSubmit();
      });
    }
  };
  const unbindUpdate = app.scene.onUpdate(() => {
    updateWysiwygStyle();
    const isPopupOpened = !!document.activeElement?.closest(
      ".properties-content"
    );
    if (!isPopupOpened) {
      editable.focus();
    }
  });
  const unbindOnScroll = app.onScrollChangeEmitter.on(() => {
    updateWysiwygStyle();
  });
  let isDestroyed = false;
  if (autoSelect) {
    editable.select();
  }
  bindBlurEvent();
  let observer = null;
  if (canvas2 && "ResizeObserver" in window) {
    observer = new window.ResizeObserver(() => {
      updateWysiwygStyle();
    });
    observer.observe(canvas2);
  } else {
    window.addEventListener("resize", updateWysiwygStyle);
  }
  editable.onpointerdown = (event) => event.stopPropagation();
  requestAnimationFrame(() => {
    window.addEventListener("pointerdown", onPointerDown, { capture: true });
  });
  window.addEventListener("beforeunload", handleSubmit);
  excalidrawContainer?.querySelector(".excalidraw-textEditorContainer").appendChild(editable);
};

// components/App.tsx
init_fractionalIndex();
init_helpers();

// actions/actionTextAutoResize.ts
init_define_import_meta_env();
init_element();
init_mutateElement();
init_textElement();
init_scene();
init_store();
init_utils2();
init_register();
var actionTextAutoResize = register({
  name: "autoResize",
  label: "labels.autoResize",
  icon: null,
  trackEvent: { category: "element" },
  predicate: (elements, appState, _, app) => {
    const selectedElements = getSelectedElements(elements, appState);
    return selectedElements.length === 1 && isTextElement(selectedElements[0]) && !selectedElements[0].autoResize;
  },
  perform: (elements, appState, _, app) => {
    const selectedElements = getSelectedElements(elements, appState);
    return {
      appState,
      elements: elements.map((element) => {
        if (element.id === selectedElements[0].id && isTextElement(element)) {
          const metrics = measureText(
            element.originalText,
            getFontString(element),
            element.lineHeight
          );
          return newElementWith(element, {
            autoResize: true,
            width: metrics.width,
            height: metrics.height,
            text: element.originalText
          });
        }
        return element;
      }),
      storeAction: StoreAction.CAPTURE
    };
  }
});

// components/App.tsx
init_bounds();

// mermaid.ts
init_define_import_meta_env();
var isMaybeMermaidDefinition = (text) => {
  const chartTypes = [
    "flowchart",
    "graph",
    "sequenceDiagram",
    "classDiagram",
    "stateDiagram",
    "stateDiagram-v2",
    "erDiagram",
    "journey",
    "gantt",
    "pie",
    "quadrantChart",
    "requirementDiagram",
    "gitGraph",
    "C4Context",
    "mindmap",
    "timeline",
    "zenuml",
    "sankey",
    "xychart",
    "block"
  ];
  const re = new RegExp(
    `^(?:%%{.*?}%%[\\s\\n]*)?\\b(?:${chartTypes.map((x) => `\\s*${x}(-beta)?`).join("|")})\\b`
  );
  return re.test(text.trim());
};

// components/canvases/NewElementCanvas.tsx
init_define_import_meta_env();
import { useEffect as useEffect40, useRef as useRef39 } from "react";

// renderer/renderNewElementScene.ts
init_define_import_meta_env();
init_utils2();
init_helpers2();
init_renderElement();
var _renderNewElementScene = ({
  canvas: canvas2,
  rc,
  newElement: newElement2,
  elementsMap,
  allElementsMap,
  scale,
  appState,
  renderConfig
}) => {
  if (canvas2) {
    const [normalizedWidth, normalizedHeight] = getNormalizedCanvasDimensions(
      canvas2,
      scale
    );
    const context = bootstrapCanvas({
      canvas: canvas2,
      scale,
      normalizedWidth,
      normalizedHeight
    });
    context.save();
    context.scale(appState.zoom.value, appState.zoom.value);
    if (newElement2 && newElement2.type !== "selection") {
      renderElement(
        newElement2,
        elementsMap,
        allElementsMap,
        rc,
        context,
        renderConfig,
        appState
      );
    } else {
      context.clearRect(0, 0, normalizedWidth, normalizedHeight);
    }
  }
};
var renderNewElementSceneThrottled = throttleRAF(
  (config) => {
    _renderNewElementScene(config);
  },
  { trailing: true }
);
var renderNewElementScene = (renderConfig, throttle6) => {
  if (throttle6) {
    renderNewElementSceneThrottled(renderConfig);
    return;
  }
  _renderNewElementScene(renderConfig);
};

// components/canvases/NewElementCanvas.tsx
import { jsx as jsx144 } from "react/jsx-runtime";
var NewElementCanvas = (props) => {
  const canvasRef = useRef39(null);
  useEffect40(() => {
    if (!canvasRef.current) {
      return;
    }
    renderNewElementScene(
      {
        canvas: canvasRef.current,
        scale: props.scale,
        newElement: props.appState.newElement,
        elementsMap: props.elementsMap,
        allElementsMap: props.allElementsMap,
        rc: props.rc,
        renderConfig: props.renderConfig,
        appState: props.appState
      },
      isRenderThrottlingEnabled()
    );
  });
  return /* @__PURE__ */ jsx144(
    "canvas",
    {
      className: "excalidraw__canvas",
      style: {
        width: props.appState.width,
        height: props.appState.height
      },
      width: props.appState.width * props.scale,
      height: props.appState.height * props.scale,
      ref: canvasRef
    }
  );
};
var NewElementCanvas_default = NewElementCanvas;

// components/App.tsx
init_routing();
init_math();
import { Fragment as Fragment25, jsx as jsx145, jsxs as jsxs77 } from "react/jsx-runtime";
var AppContext = React43.createContext(null);
var AppPropsContext = React43.createContext(null);
var deviceContextInitialValue = {
  viewport: {
    isMobile: false,
    isLandscape: false
  },
  editor: {
    isMobile: false,
    canFitSidebar: false
  },
  isTouchScreen: false
};
var DeviceContext = React43.createContext(deviceContextInitialValue);
DeviceContext.displayName = "DeviceContext";
var ExcalidrawContainerContext = React43.createContext({ container: null, id: null });
ExcalidrawContainerContext.displayName = "ExcalidrawContainerContext";
var ExcalidrawElementsContext = React43.createContext([]);
ExcalidrawElementsContext.displayName = "ExcalidrawElementsContext";
var ExcalidrawAppStateContext = React43.createContext({
  ...getDefaultAppState(),
  width: 0,
  height: 0,
  offsetLeft: 0,
  offsetTop: 0
});
ExcalidrawAppStateContext.displayName = "ExcalidrawAppStateContext";
var ExcalidrawSetAppStateContext = React43.createContext(() => {
  console.warn("Uninitialized ExcalidrawSetAppStateContext context!");
});
ExcalidrawSetAppStateContext.displayName = "ExcalidrawSetAppStateContext";
var ExcalidrawActionManagerContext = React43.createContext(
  null
);
ExcalidrawActionManagerContext.displayName = "ExcalidrawActionManagerContext";
var useApp = () => useContext3(AppContext);
var useAppProps = () => useContext3(AppPropsContext);
var useDevice = () => useContext3(DeviceContext);
var useExcalidrawContainer = () => useContext3(ExcalidrawContainerContext);
var useExcalidrawElements = () => useContext3(ExcalidrawElementsContext);
var useExcalidrawAppState = () => useContext3(ExcalidrawAppStateContext);
var useExcalidrawSetAppState = () => useContext3(ExcalidrawSetAppStateContext);
var useExcalidrawActionManager = () => useContext3(ExcalidrawActionManagerContext);
var didTapTwice = false;
var tappedTwiceTimer = 0;
var isHoldingSpace = false;
var isPanning = false;
var isDraggingScrollBar = false;
var currentScrollBars = { horizontal: null, vertical: null };
var touchTimeout = 0;
var invalidateContextMenu = false;
var YOUTUBE_VIDEO_STATES = /* @__PURE__ */ new Map();
var IS_PLAIN_PASTE = false;
var IS_PLAIN_PASTE_TIMER = 0;
var PLAIN_PASTE_TOAST_SHOWN = false;
var lastPointerUp = null;
var gesture = {
  pointers: /* @__PURE__ */ new Map(),
  lastCenter: null,
  initialDistance: null,
  initialScale: null
};
var App = class _App extends React43.Component {
  canvas;
  interactiveCanvas = null;
  rc;
  unmounted = false;
  actionManager;
  device = deviceContextInitialValue;
  excalidrawContainerRef = React43.createRef();
  scene;
  fonts;
  renderer;
  visibleElements;
  resizeObserver;
  nearestScrollableContainer;
  library;
  libraryItemsFromStorage;
  id;
  store;
  history;
  excalidrawContainerValue;
  files = {};
  imageCache = /* @__PURE__ */ new Map();
  iFrameRefs = /* @__PURE__ */ new Map();
  /**
   * Indicates whether the embeddable's url has been validated for rendering.
   * If value not set, indicates that the validation is pending.
   * Initially or on url change the flag is not reset so that we can guarantee
   * the validation came from a trusted source (the editor).
   **/
  embedsValidationStatus = /* @__PURE__ */ new Map();
  /** embeds that have been inserted to DOM (as a perf optim, we don't want to
   * insert to DOM before user initially scrolls to them) */
  initializedEmbeds = /* @__PURE__ */ new Set();
  elementsPendingErasure = /* @__PURE__ */ new Set();
  flowChartCreator = new FlowChartCreator();
  flowChartNavigator = new FlowChartNavigator();
  hitLinkElement;
  lastPointerDownEvent = null;
  lastPointerUpEvent = null;
  lastPointerMoveEvent = null;
  lastViewportPosition = { x: 0, y: 0 };
  animationFrameHandler = new AnimationFrameHandler();
  laserTrails = new LaserTrails(this.animationFrameHandler, this);
  eraserTrail = new AnimatedTrail(this.animationFrameHandler, this, {
    streamline: 0.2,
    size: 5,
    keepHead: true,
    sizeMapping: (c) => {
      const DECAY_TIME = 200;
      const DECAY_LENGTH = 10;
      const t2 = Math.max(0, 1 - (performance.now() - c.pressure) / DECAY_TIME);
      const l = (DECAY_LENGTH - Math.min(DECAY_LENGTH, c.totalLength - c.currentIndex)) / DECAY_LENGTH;
      return Math.min(easeOut(l), easeOut(t2));
    },
    fill: () => this.state.theme === THEME.LIGHT ? "rgba(0, 0, 0, 0.2)" : "rgba(255, 255, 255, 0.2)"
  });
  onChangeEmitter = new Emitter();
  onPointerDownEmitter = new Emitter();
  onPointerUpEmitter = new Emitter();
  onUserFollowEmitter = new Emitter();
  onScrollChangeEmitter = new Emitter();
  missingPointerEventCleanupEmitter = new Emitter();
  onRemoveEventListenersEmitter = new Emitter();
  constructor(props) {
    super(props);
    const defaultAppState2 = getDefaultAppState();
    const {
      excalidrawAPI,
      viewModeEnabled = false,
      zenModeEnabled = false,
      gridModeEnabled = false,
      objectsSnapModeEnabled = false,
      theme = defaultAppState2.theme,
      name = `${t("labels.untitled")}-${getDateTime()}`
    } = props;
    this.state = {
      ...defaultAppState2,
      theme,
      isLoading: true,
      ...this.getCanvasOffsets(),
      viewModeEnabled,
      zenModeEnabled,
      objectsSnapModeEnabled,
      gridModeEnabled: gridModeEnabled ?? defaultAppState2.gridModeEnabled,
      name,
      width: window.innerWidth,
      height: window.innerHeight
    };
    this.id = nanoid3();
    this.library = new library_default(this);
    this.actionManager = new ActionManager(
      this.syncActionResult,
      () => this.state,
      () => this.scene.getElementsIncludingDeleted(),
      this
    );
    this.scene = new Scene_default();
    this.canvas = document.createElement("canvas");
    this.rc = rough4.canvas(this.canvas);
    this.renderer = new Renderer(this.scene);
    this.visibleElements = [];
    this.store = new Store();
    this.history = new History();
    if (excalidrawAPI) {
      const api = {
        updateScene: this.updateScene,
        updateLibrary: this.library.updateLibrary,
        addFiles: this.addFiles,
        resetScene: this.resetScene,
        getSceneElementsIncludingDeleted: this.getSceneElementsIncludingDeleted,
        history: {
          clear: this.resetHistory
        },
        scrollToContent: this.scrollToContent,
        getSceneElements: this.getSceneElements,
        getAppState: () => this.state,
        getFiles: () => this.files,
        getName: this.getName,
        registerAction: (action) => {
          this.actionManager.registerAction(action);
        },
        refresh: this.refresh,
        setToast: this.setToast,
        id: this.id,
        setActiveTool: this.setActiveTool,
        setCursor: this.setCursor,
        resetCursor: this.resetCursor,
        updateFrameRendering: this.updateFrameRendering,
        toggleSidebar: this.toggleSidebar,
        onChange: (cb) => this.onChangeEmitter.on(cb),
        onPointerDown: (cb) => this.onPointerDownEmitter.on(cb),
        onPointerUp: (cb) => this.onPointerUpEmitter.on(cb),
        onScrollChange: (cb) => this.onScrollChangeEmitter.on(cb),
        onUserFollow: (cb) => this.onUserFollowEmitter.on(cb)
      };
      if (typeof excalidrawAPI === "function") {
        excalidrawAPI(api);
      } else {
        console.error("excalidrawAPI should be a function!");
      }
    }
    this.excalidrawContainerValue = {
      container: this.excalidrawContainerRef.current,
      id: this.id
    };
    this.fonts = new Fonts({ scene: this.scene });
    this.history = new History();
    this.actionManager.registerAll(actions);
    this.actionManager.registerAction(
      createUndoAction(this.history, this.store)
    );
    this.actionManager.registerAction(
      createRedoAction(this.history, this.store)
    );
  }
  onWindowMessage(event) {
    if (event.origin !== "https://player.vimeo.com" && event.origin !== "https://www.youtube.com") {
      return;
    }
    let data = null;
    try {
      data = JSON.parse(event.data);
    } catch (e) {
    }
    if (!data) {
      return;
    }
    switch (event.origin) {
      case "https://player.vimeo.com":
        if (data.method === "paused") {
          let source = null;
          const iframes = document.body.querySelectorAll(
            "iframe.excalidraw__embeddable"
          );
          if (!iframes) {
            break;
          }
          for (const iframe of iframes) {
            if (iframe.contentWindow === event.source) {
              source = iframe.contentWindow;
            }
          }
          source?.postMessage(
            JSON.stringify({
              method: data.value ? "play" : "pause",
              value: true
            }),
            "*"
          );
        }
        break;
      case "https://www.youtube.com":
        if (data.event === "infoDelivery" && data.info && data.id && typeof data.info.playerState === "number") {
          const id = data.id;
          const playerState = data.info.playerState;
          if (Object.values(YOUTUBE_STATES).includes(playerState)) {
            YOUTUBE_VIDEO_STATES.set(
              id,
              playerState
            );
          }
        }
        break;
    }
  }
  cacheEmbeddableRef(element, ref) {
    if (ref) {
      this.iFrameRefs.set(element.id, ref);
    }
  }
  /**
   * Returns gridSize taking into account `gridModeEnabled`.
   * If disabled, returns null.
   */
  getEffectiveGridSize = () => {
    return isGridModeEnabled(this) ? this.state.gridSize : null;
  };
  getHTMLIFrameElement(element) {
    return this.iFrameRefs.get(element.id);
  }
  handleEmbeddableCenterClick(element) {
    if (this.state.activeEmbeddable?.element === element && this.state.activeEmbeddable?.state === "active") {
      return;
    }
    setTimeout(() => {
      this.setState({
        activeEmbeddable: { element, state: "active" },
        selectedElementIds: { [element.id]: true },
        newElement: null,
        selectionElement: null
      });
    }, 100);
    if (isIframeElement(element)) {
      return;
    }
    const iframe = this.getHTMLIFrameElement(element);
    if (!iframe?.contentWindow) {
      return;
    }
    if (iframe.src.includes("youtube")) {
      const state = YOUTUBE_VIDEO_STATES.get(element.id);
      if (!state) {
        YOUTUBE_VIDEO_STATES.set(element.id, YOUTUBE_STATES.UNSTARTED);
        iframe.contentWindow.postMessage(
          JSON.stringify({
            event: "listening",
            id: element.id
          }),
          "*"
        );
      }
      switch (state) {
        case YOUTUBE_STATES.PLAYING:
        case YOUTUBE_STATES.BUFFERING:
          iframe.contentWindow?.postMessage(
            JSON.stringify({
              event: "command",
              func: "pauseVideo",
              args: ""
            }),
            "*"
          );
          break;
        default:
          iframe.contentWindow?.postMessage(
            JSON.stringify({
              event: "command",
              func: "playVideo",
              args: ""
            }),
            "*"
          );
      }
    }
    if (iframe.src.includes("player.vimeo.com")) {
      iframe.contentWindow.postMessage(
        JSON.stringify({
          method: "paused"
          //video play/pause in onWindowMessage handler
        }),
        "*"
      );
    }
  }
  isIframeLikeElementCenter(el, event, sceneX, sceneY) {
    return el && !event.altKey && !event.shiftKey && !event.metaKey && !event.ctrlKey && (this.state.activeEmbeddable?.element !== el || this.state.activeEmbeddable?.state === "hover" || !this.state.activeEmbeddable) && sceneX >= el.x + el.width / 3 && sceneX <= el.x + 2 * el.width / 3 && sceneY >= el.y + el.height / 3 && sceneY <= el.y + 2 * el.height / 3;
  }
  updateEmbedValidationStatus = (element, status) => {
    this.embedsValidationStatus.set(element.id, status);
    ShapeCache.delete(element);
  };
  updateEmbeddables = () => {
    const iframeLikes = /* @__PURE__ */ new Set();
    let updated = false;
    this.scene.getNonDeletedElements().filter((element) => {
      if (isEmbeddableElement(element)) {
        iframeLikes.add(element.id);
        if (!this.embedsValidationStatus.has(element.id)) {
          updated = true;
          const validated = embeddableURLValidator(
            element.link,
            this.props.validateEmbeddable
          );
          this.updateEmbedValidationStatus(element, validated);
        }
      } else if (isIframeElement(element)) {
        iframeLikes.add(element.id);
      }
      return false;
    });
    if (updated) {
      this.scene.triggerUpdate();
    }
    this.iFrameRefs.forEach((ref, id) => {
      if (!iframeLikes.has(id)) {
        this.iFrameRefs.delete(id);
      }
    });
  };
  renderEmbeddables() {
    const scale = this.state.zoom.value;
    const normalizedWidth = this.state.width;
    const normalizedHeight = this.state.height;
    const embeddableElements = this.scene.getNonDeletedElements().filter(
      (el) => isEmbeddableElement(el) && this.embedsValidationStatus.get(el.id) === true || isIframeElement(el)
    );
    return /* @__PURE__ */ jsx145(Fragment25, { children: embeddableElements.map((el) => {
      const { x, y } = sceneCoordsToViewportCoords(
        { sceneX: el.x, sceneY: el.y },
        this.state
      );
      const isVisible = isElementInViewport(
        el,
        normalizedWidth,
        normalizedHeight,
        this.state,
        this.scene.getNonDeletedElementsMap()
      );
      const hasBeenInitialized = this.initializedEmbeds.has(el.id);
      if (isVisible && !hasBeenInitialized) {
        this.initializedEmbeds.add(el.id);
      }
      const shouldRender = isVisible || hasBeenInitialized;
      if (!shouldRender) {
        return null;
      }
      let src;
      if (isIframeElement(el)) {
        src = null;
        const data = (el.customData?.generationData ?? this.magicGenerations.get(el.id)) || {
          status: "error",
          message: "No generation data",
          code: "ERR_NO_GENERATION_DATA"
        };
        if (data.status === "done") {
          const html = data.html;
          src = {
            intrinsicSize: { w: el.width, h: el.height },
            type: "document",
            srcdoc: () => {
              return html;
            }
          };
        } else if (data.status === "pending") {
          src = {
            intrinsicSize: { w: el.width, h: el.height },
            type: "document",
            srcdoc: () => {
              return createSrcDoc(`
                    <style>
                      html, body {
                        width: 100%;
                        height: 100%;
                        color: ${this.state.theme === THEME.DARK ? "white" : "black"};
                      }
                      body {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        flex-direction: column;
                        gap: 1rem;
                      }

                      .Spinner {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        margin-left: auto;
                        margin-right: auto;
                      }

                      .Spinner svg {
                        animation: rotate 1.6s linear infinite;
                        transform-origin: center center;
                        width: 40px;
                        height: 40px;
                      }

                      .Spinner circle {
                        stroke: currentColor;
                        animation: dash 1.6s linear 0s infinite;
                        stroke-linecap: round;
                      }

                      @keyframes rotate {
                        100% {
                          transform: rotate(360deg);
                        }
                      }

                      @keyframes dash {
                        0% {
                          stroke-dasharray: 1, 300;
                          stroke-dashoffset: 0;
                        }
                        50% {
                          stroke-dasharray: 150, 300;
                          stroke-dashoffset: -200;
                        }
                        100% {
                          stroke-dasharray: 1, 300;
                          stroke-dashoffset: -280;
                        }
                      }
                    </style>
                    <div class="Spinner">
                      <svg
                        viewBox="0 0 100 100"
                      >
                        <circle
                          cx="50"
                          cy="50"
                          r="46"
                          stroke-width="8"
                          fill="none"
                          stroke-miter-limit="10"
                        />
                      </svg>
                    </div>
                    <div>Generating...</div>
                  `);
            }
          };
        } else {
          let message;
          if (data.code === "ERR_GENERATION_INTERRUPTED") {
            message = "Generation was interrupted...";
          } else {
            message = data.message || "Generation failed";
          }
          src = {
            intrinsicSize: { w: el.width, h: el.height },
            type: "document",
            srcdoc: () => {
              return createSrcDoc(`
                    <style>
                    html, body {
                      height: 100%;
                    }
                      body {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        color: ${COLOR_PALETTE.red[3]};
                      }
                      h1, h3 {
                        margin-top: 0;
                        margin-bottom: 0.5rem;
                      }
                    </style>
                    <h1>Error!</h1>
                    <h3>${message}</h3>
                  `);
            }
          };
        }
      } else {
        src = getEmbedLink(toValidURL(el.link || ""));
      }
      const isActive = this.state.activeEmbeddable?.element === el && this.state.activeEmbeddable?.state === "active";
      const isHovered = this.state.activeEmbeddable?.element === el && this.state.activeEmbeddable?.state === "hover";
      return /* @__PURE__ */ jsx145(
        "div",
        {
          className: clsx56("excalidraw__embeddable-container", {
            "is-hovered": isHovered
          }),
          style: {
            transform: isVisible ? `translate(${x - this.state.offsetLeft}px, ${y - this.state.offsetTop}px) scale(${scale})` : "none",
            display: isVisible ? "block" : "none",
            opacity: getRenderOpacity(
              el,
              getContainingFrame(el, this.scene.getNonDeletedElementsMap()),
              this.elementsPendingErasure,
              null
            ),
            ["--embeddable-radius"]: `${getCornerRadius(
              Math.min(el.width, el.height),
              el
            )}px`
          },
          children: /* @__PURE__ */ jsxs77(
            "div",
            {
              className: "excalidraw__embeddable-container__inner",
              style: {
                width: isVisible ? `${el.width}px` : 0,
                height: isVisible ? `${el.height}px` : 0,
                transform: isVisible ? `rotate(${el.angle}rad)` : "none",
                pointerEvents: isActive ? POINTER_EVENTS.enabled : POINTER_EVENTS.disabled
              },
              children: [
                isHovered && /* @__PURE__ */ jsx145("div", { className: "excalidraw__embeddable-hint", children: t("buttons.embeddableInteractionButton") }),
                /* @__PURE__ */ jsx145(
                  "div",
                  {
                    className: "excalidraw__embeddable__outer",
                    style: {
                      padding: `${el.strokeWidth}px`
                    },
                    children: (isEmbeddableElement(el) ? this.props.renderEmbeddable?.(el, this.state) : null) ?? /* @__PURE__ */ jsx145(
                      "iframe",
                      {
                        ref: (ref) => this.cacheEmbeddableRef(el, ref),
                        className: "excalidraw__embeddable",
                        srcDoc: src?.type === "document" ? src.srcdoc(this.state.theme) : void 0,
                        src: src?.type !== "document" ? src?.link ?? "" : void 0,
                        scrolling: "no",
                        referrerPolicy: "no-referrer-when-downgrade",
                        title: "Excalidraw Embedded Content",
                        allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
                        allowFullScreen: true,
                        sandbox: `${src?.sandbox?.allowSameOrigin ? "allow-same-origin" : ""} allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation allow-downloads`
                      }
                    )
                  }
                )
              ]
            }
          )
        },
        el.id
      );
    }) });
  }
  getFrameNameDOMId = (frameElement) => {
    return `${this.id}-frame-name-${frameElement.id}`;
  };
  frameNameBoundsCache = {
    get: (frameElement) => {
      let bounds = this.frameNameBoundsCache._cache.get(frameElement.id);
      if (!bounds || bounds.zoom !== this.state.zoom.value || bounds.versionNonce !== frameElement.versionNonce) {
        const frameNameDiv = document.getElementById(
          this.getFrameNameDOMId(frameElement)
        );
        if (frameNameDiv) {
          const box = frameNameDiv.getBoundingClientRect();
          const boxSceneTopLeft = viewportCoordsToSceneCoords(
            { clientX: box.x, clientY: box.y },
            this.state
          );
          const boxSceneBottomRight = viewportCoordsToSceneCoords(
            { clientX: box.right, clientY: box.bottom },
            this.state
          );
          bounds = {
            x: boxSceneTopLeft.x,
            y: boxSceneTopLeft.y,
            width: boxSceneBottomRight.x - boxSceneTopLeft.x,
            height: boxSceneBottomRight.y - boxSceneTopLeft.y,
            angle: 0,
            zoom: this.state.zoom.value,
            versionNonce: frameElement.versionNonce
          };
          this.frameNameBoundsCache._cache.set(frameElement.id, bounds);
          return bounds;
        }
        return null;
      }
      return bounds;
    },
    /**
     * @private
     */
    _cache: /* @__PURE__ */ new Map()
  };
  renderFrameNames = () => {
    if (!this.state.frameRendering.enabled || !this.state.frameRendering.name) {
      return null;
    }
    const isDarkTheme = this.state.theme === THEME.DARK;
    return this.scene.getNonDeletedFramesLikes().map((f) => {
      if (!isElementInViewport(
        f,
        this.canvas.width / window.devicePixelRatio,
        this.canvas.height / window.devicePixelRatio,
        {
          offsetLeft: this.state.offsetLeft,
          offsetTop: this.state.offsetTop,
          scrollX: this.state.scrollX,
          scrollY: this.state.scrollY,
          zoom: this.state.zoom
        },
        this.scene.getNonDeletedElementsMap()
      )) {
        return null;
      }
      const { x: x1, y: y1 } = sceneCoordsToViewportCoords(
        { sceneX: f.x, sceneY: f.y },
        this.state
      );
      const FRAME_NAME_EDIT_PADDING = 6;
      const reset = () => {
        mutateElement(f, { name: f.name?.trim() || null });
        this.setState({ editingFrame: null });
      };
      let frameNameJSX;
      const frameName = getFrameLikeTitle(f);
      if (f.id === this.state.editingFrame) {
        const frameNameInEdit = frameName;
        frameNameJSX = /* @__PURE__ */ jsx145(
          "input",
          {
            autoFocus: true,
            value: frameNameInEdit,
            onChange: (e) => {
              mutateElement(f, {
                name: e.target.value
              });
            },
            onFocus: (e) => e.target.select(),
            onBlur: () => reset(),
            onKeyDown: (event) => {
              if (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) {
                reset();
              }
            },
            style: {
              background: this.state.viewBackgroundColor,
              filter: isDarkTheme ? THEME_FILTER : "none",
              zIndex: 2,
              border: "none",
              display: "block",
              padding: `${FRAME_NAME_EDIT_PADDING}px`,
              borderRadius: 4,
              boxShadow: "inset 0 0 0 1px var(--color-primary)",
              fontFamily: "Assistant",
              fontSize: "14px",
              transform: `translate(-${FRAME_NAME_EDIT_PADDING}px, ${FRAME_NAME_EDIT_PADDING}px)`,
              color: "var(--color-gray-80)",
              overflow: "hidden",
              maxWidth: `${document.body.clientWidth - x1 - FRAME_NAME_EDIT_PADDING}px`
            },
            size: frameNameInEdit.length + 1 || 1,
            dir: "auto",
            autoComplete: "off",
            autoCapitalize: "off",
            autoCorrect: "off"
          }
        );
      } else {
        frameNameJSX = frameName;
      }
      return /* @__PURE__ */ jsx145(
        "div",
        {
          id: this.getFrameNameDOMId(f),
          style: {
            position: "absolute",
            // Positioning from bottom so that we don't to either
            // calculate text height or adjust using transform (which)
            // messes up input position when editing the frame name.
            // This makes the positioning deterministic and we can calculate
            // the same position when rendering to canvas / svg.
            bottom: `${this.state.height + FRAME_STYLE.nameOffsetY - y1 + this.state.offsetTop}px`,
            left: `${x1 - this.state.offsetLeft}px`,
            zIndex: 2,
            fontSize: FRAME_STYLE.nameFontSize,
            color: isDarkTheme ? FRAME_STYLE.nameColorDarkTheme : FRAME_STYLE.nameColorLightTheme,
            lineHeight: FRAME_STYLE.nameLineHeight,
            width: "max-content",
            maxWidth: `${f.width}px`,
            overflow: f.id === this.state.editingFrame ? "visible" : "hidden",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            cursor: CURSOR_TYPE.MOVE,
            pointerEvents: this.state.viewModeEnabled ? POINTER_EVENTS.disabled : POINTER_EVENTS.enabled
          },
          onPointerDown: (event) => this.handleCanvasPointerDown(event),
          onWheel: (event) => this.handleWheel(event),
          onContextMenu: this.handleCanvasContextMenu,
          onDoubleClick: () => {
            this.setState({
              editingFrame: f.id
            });
          },
          children: frameNameJSX
        },
        f.id
      );
    });
  };
  toggleOverscrollBehavior(event) {
    document.documentElement.style.overscrollBehaviorX = event.type === "pointerenter" ? "none" : "auto";
  }
  render() {
    const selectedElements = this.scene.getSelectedElements(this.state);
    const { renderTopRightUI, renderCustomStats } = this.props;
    const sceneNonce = this.scene.getSceneNonce();
    const { elementsMap, visibleElements } = this.renderer.getRenderableElements({
      sceneNonce,
      zoom: this.state.zoom,
      offsetLeft: this.state.offsetLeft,
      offsetTop: this.state.offsetTop,
      scrollX: this.state.scrollX,
      scrollY: this.state.scrollY,
      height: this.state.height,
      width: this.state.width,
      editingTextElement: this.state.editingTextElement,
      newElementId: this.state.newElement?.id,
      pendingImageElementId: this.state.pendingImageElementId
    });
    this.visibleElements = visibleElements;
    const allElementsMap = this.scene.getNonDeletedElementsMap();
    const shouldBlockPointerEvents = this.state.selectionElement || this.state.newElement || this.state.selectedElementsAreBeingDragged || this.state.resizingElement || this.state.activeTool.type === "laser" && // technically we can just test on this once we make it more safe
    this.state.cursorButton === "down";
    const firstSelectedElement = selectedElements[0];
    return /* @__PURE__ */ jsx145(
      "div",
      {
        className: clsx56("excalidraw excalidraw-container", {
          "excalidraw--view-mode": this.state.viewModeEnabled,
          "excalidraw--mobile": this.device.editor.isMobile
        }),
        style: {
          ["--ui-pointerEvents"]: shouldBlockPointerEvents ? POINTER_EVENTS.disabled : POINTER_EVENTS.enabled
        },
        ref: this.excalidrawContainerRef,
        onDrop: this.handleAppOnDrop,
        tabIndex: 0,
        onKeyDown: this.props.handleKeyboardGlobally ? void 0 : this.onKeyDown,
        onPointerEnter: this.toggleOverscrollBehavior,
        onPointerLeave: this.toggleOverscrollBehavior,
        children: /* @__PURE__ */ jsx145(AppContext.Provider, { value: this, children: /* @__PURE__ */ jsx145(AppPropsContext.Provider, { value: this.props, children: /* @__PURE__ */ jsx145(
          ExcalidrawContainerContext.Provider,
          {
            value: this.excalidrawContainerValue,
            children: /* @__PURE__ */ jsx145(DeviceContext.Provider, { value: this.device, children: /* @__PURE__ */ jsx145(ExcalidrawSetAppStateContext.Provider, { value: this.setAppState, children: /* @__PURE__ */ jsx145(ExcalidrawAppStateContext.Provider, { value: this.state, children: /* @__PURE__ */ jsxs77(
              ExcalidrawElementsContext.Provider,
              {
                value: this.scene.getNonDeletedElements(),
                children: [
                  /* @__PURE__ */ jsxs77(
                    ExcalidrawActionManagerContext.Provider,
                    {
                      value: this.actionManager,
                      children: [
                        /* @__PURE__ */ jsx145(
                          LayerUI_default,
                          {
                            canvas: this.canvas,
                            appState: this.state,
                            files: this.files,
                            setAppState: this.setAppState,
                            actionManager: this.actionManager,
                            elements: this.scene.getNonDeletedElements(),
                            onLockToggle: this.toggleLock,
                            onPenModeToggle: this.togglePenMode,
                            onHandToolToggle: this.onHandToolToggle,
                            langCode: getLanguage().code,
                            renderTopRightUI,
                            renderCustomStats,
                            showExitZenModeBtn: typeof this.props?.zenModeEnabled === "undefined" && this.state.zenModeEnabled,
                            UIOptions: this.props.UIOptions,
                            onExportImage: this.onExportImage,
                            renderWelcomeScreen: !this.state.isLoading && this.state.showWelcomeScreen && this.state.activeTool.type === "selection" && !this.state.zenModeEnabled && !this.scene.getElementsIncludingDeleted().length,
                            app: this,
                            isCollaborating: this.props.isCollaborating,
                            children: this.props.children
                          }
                        ),
                        /* @__PURE__ */ jsx145("div", { className: "excalidraw-textEditorContainer" }),
                        /* @__PURE__ */ jsx145("div", { className: "excalidraw-contextMenuContainer" }),
                        /* @__PURE__ */ jsx145("div", { className: "excalidraw-eye-dropper-container" }),
                        /* @__PURE__ */ jsx145(
                          SVGLayer,
                          {
                            trails: [this.laserTrails, this.eraserTrail]
                          }
                        ),
                        selectedElements.length === 1 && this.state.showHyperlinkPopup && /* @__PURE__ */ jsx145(
                          Hyperlink,
                          {
                            element: firstSelectedElement,
                            elementsMap: allElementsMap,
                            setAppState: this.setAppState,
                            onLinkOpen: this.props.onLinkOpen,
                            setToast: this.setToast,
                            updateEmbedValidationStatus: this.updateEmbedValidationStatus
                          },
                          firstSelectedElement.id
                        ),
                        this.props.aiEnabled !== false && selectedElements.length === 1 && isMagicFrameElement(firstSelectedElement) && /* @__PURE__ */ jsx145(
                          ElementCanvasButtons,
                          {
                            element: firstSelectedElement,
                            elementsMap,
                            children: /* @__PURE__ */ jsx145(
                              ElementCanvasButton,
                              {
                                title: t("labels.convertToCode"),
                                icon: MagicIcon,
                                checked: false,
                                onChange: () => this.onMagicFrameGenerate(
                                  firstSelectedElement,
                                  "button"
                                )
                              }
                            )
                          }
                        ),
                        selectedElements.length === 1 && isIframeElement(firstSelectedElement) && firstSelectedElement.customData?.generationData?.status === "done" && /* @__PURE__ */ jsxs77(
                          ElementCanvasButtons,
                          {
                            element: firstSelectedElement,
                            elementsMap,
                            children: [
                              /* @__PURE__ */ jsx145(
                                ElementCanvasButton,
                                {
                                  title: t("labels.copySource"),
                                  icon: copyIcon,
                                  checked: false,
                                  onChange: () => this.onIframeSrcCopy(firstSelectedElement)
                                }
                              ),
                              /* @__PURE__ */ jsx145(
                                ElementCanvasButton,
                                {
                                  title: "Enter fullscreen",
                                  icon: fullscreenIcon,
                                  checked: false,
                                  onChange: () => {
                                    const iframe = this.getHTMLIFrameElement(
                                      firstSelectedElement
                                    );
                                    if (iframe) {
                                      try {
                                        iframe.requestFullscreen();
                                        this.setState({
                                          activeEmbeddable: {
                                            element: firstSelectedElement,
                                            state: "active"
                                          },
                                          selectedElementIds: {
                                            [firstSelectedElement.id]: true
                                          },
                                          newElement: null,
                                          selectionElement: null
                                        });
                                      } catch (err) {
                                        console.warn(err);
                                        this.setState({
                                          errorMessage: "Couldn't enter fullscreen"
                                        });
                                      }
                                    }
                                  }
                                }
                              )
                            ]
                          }
                        ),
                        this.state.toast !== null && /* @__PURE__ */ jsx145(
                          Toast,
                          {
                            message: this.state.toast.message,
                            onClose: () => this.setToast(null),
                            duration: this.state.toast.duration,
                            closable: this.state.toast.closable
                          }
                        ),
                        this.state.contextMenu && /* @__PURE__ */ jsx145(
                          ContextMenu,
                          {
                            items: this.state.contextMenu.items,
                            top: this.state.contextMenu.top,
                            left: this.state.contextMenu.left,
                            actionManager: this.actionManager,
                            onClose: (callback) => {
                              this.setState({ contextMenu: null }, () => {
                                this.focusContainer();
                                callback?.();
                              });
                            }
                          }
                        ),
                        /* @__PURE__ */ jsx145(
                          StaticCanvas_default,
                          {
                            canvas: this.canvas,
                            rc: this.rc,
                            elementsMap,
                            allElementsMap,
                            visibleElements,
                            sceneNonce,
                            selectionNonce: this.state.selectionElement?.versionNonce,
                            scale: window.devicePixelRatio,
                            appState: this.state,
                            renderConfig: {
                              imageCache: this.imageCache,
                              isExporting: false,
                              renderGrid: isGridModeEnabled(this),
                              canvasBackgroundColor: this.state.viewBackgroundColor,
                              embedsValidationStatus: this.embedsValidationStatus,
                              elementsPendingErasure: this.elementsPendingErasure,
                              pendingFlowchartNodes: this.flowChartCreator.pendingNodes
                            }
                          }
                        ),
                        this.state.newElement && /* @__PURE__ */ jsx145(
                          NewElementCanvas_default,
                          {
                            appState: this.state,
                            scale: window.devicePixelRatio,
                            rc: this.rc,
                            elementsMap,
                            allElementsMap,
                            renderConfig: {
                              imageCache: this.imageCache,
                              isExporting: false,
                              renderGrid: false,
                              canvasBackgroundColor: this.state.viewBackgroundColor,
                              embedsValidationStatus: this.embedsValidationStatus,
                              elementsPendingErasure: this.elementsPendingErasure,
                              pendingFlowchartNodes: null
                            }
                          }
                        ),
                        /* @__PURE__ */ jsx145(
                          InteractiveCanvas_default,
                          {
                            containerRef: this.excalidrawContainerRef,
                            canvas: this.interactiveCanvas,
                            elementsMap,
                            visibleElements,
                            allElementsMap,
                            selectedElements,
                            sceneNonce,
                            selectionNonce: this.state.selectionElement?.versionNonce,
                            scale: window.devicePixelRatio,
                            appState: this.state,
                            device: this.device,
                            renderInteractiveSceneCallback: this.renderInteractiveSceneCallback,
                            handleCanvasRef: this.handleInteractiveCanvasRef,
                            onContextMenu: this.handleCanvasContextMenu,
                            onPointerMove: this.handleCanvasPointerMove,
                            onPointerUp: this.handleCanvasPointerUp,
                            onPointerCancel: this.removePointer,
                            onTouchMove: this.handleTouchMove,
                            onPointerDown: this.handleCanvasPointerDown,
                            onDoubleClick: this.handleCanvasDoubleClick
                          }
                        ),
                        this.state.userToFollow && /* @__PURE__ */ jsx145(
                          FollowMode_default,
                          {
                            width: this.state.width,
                            height: this.state.height,
                            userToFollow: this.state.userToFollow,
                            onDisconnect: this.maybeUnfollowRemoteUser
                          }
                        ),
                        this.renderFrameNames()
                      ]
                    }
                  ),
                  this.renderEmbeddables()
                ]
              }
            ) }) }) })
          }
        ) }) })
      }
    );
  }
  focusContainer = () => {
    this.excalidrawContainerRef.current?.focus();
  };
  getSceneElementsIncludingDeleted = () => {
    return this.scene.getElementsIncludingDeleted();
  };
  getSceneElements = () => {
    return this.scene.getNonDeletedElements();
  };
  onInsertElements = (elements) => {
    this.addElementsFromPasteOrLibrary({
      elements,
      position: "center",
      files: null
    });
  };
  onExportImage = async (type, elements, opts) => {
    trackEvent("export", type, "ui");
    const fileHandle = await exportCanvas(
      type,
      elements,
      this.state,
      this.files,
      {
        exportBackground: this.state.exportBackground,
        name: this.getName(),
        viewBackgroundColor: this.state.viewBackgroundColor,
        exportingFrame: opts.exportingFrame
      }
    ).catch(muteFSAbortError).catch((error) => {
      console.error(error);
      this.setState({ errorMessage: error.message });
    });
    if (this.state.exportEmbedScene && fileHandle && isImageFileHandle(fileHandle)) {
      this.setState({ fileHandle });
    }
  };
  magicGenerations = /* @__PURE__ */ new Map();
  updateMagicGeneration = ({
    frameElement,
    data
  }) => {
    if (data.status === "pending") {
      mutateElement(
        frameElement,
        { customData: { generationData: void 0 } },
        false
      );
    } else {
      mutateElement(
        frameElement,
        { customData: { generationData: data } },
        false
      );
    }
    this.magicGenerations.set(frameElement.id, data);
    this.triggerRender();
  };
  plugins = {};
  setPlugins(plugins) {
    Object.assign(this.plugins, plugins);
  }
  async onMagicFrameGenerate(magicFrame, source) {
    const generateDiagramToCode = this.plugins.diagramToCode?.generate;
    if (!generateDiagramToCode) {
      this.setState({
        errorMessage: "No diagram to code plugin found"
      });
      return;
    }
    const magicFrameChildren = getElementsOverlappingFrame(
      this.scene.getNonDeletedElements(),
      magicFrame
    ).filter((el) => !isMagicFrameElement(el));
    if (!magicFrameChildren.length) {
      if (source === "button") {
        this.setState({ errorMessage: "Cannot generate from an empty frame" });
        trackEvent("ai", "generate (no-children)", "d2c");
      } else {
        this.setActiveTool({ type: "magicframe" });
      }
      return;
    }
    const frameElement = this.insertIframeElement({
      sceneX: magicFrame.x + magicFrame.width + 30,
      sceneY: magicFrame.y,
      width: magicFrame.width,
      height: magicFrame.height
    });
    if (!frameElement) {
      return;
    }
    this.updateMagicGeneration({
      frameElement,
      data: { status: "pending" }
    });
    this.setState({
      selectedElementIds: { [frameElement.id]: true }
    });
    trackEvent("ai", "generate (start)", "d2c");
    try {
      const { html } = await generateDiagramToCode({
        frame: magicFrame,
        children: magicFrameChildren
      });
      trackEvent("ai", "generate (success)", "d2c");
      if (!html.trim()) {
        this.updateMagicGeneration({
          frameElement,
          data: {
            status: "error",
            code: "ERR_OAI",
            message: "Nothing genereated :("
          }
        });
        return;
      }
      const parsedHtml = html.includes("<!DOCTYPE html>") && html.includes("</html>") ? html.slice(
        html.indexOf("<!DOCTYPE html>"),
        html.indexOf("</html>") + "</html>".length
      ) : html;
      this.updateMagicGeneration({
        frameElement,
        data: { status: "done", html: parsedHtml }
      });
    } catch (error) {
      trackEvent("ai", "generate (failed)", "d2c");
      this.updateMagicGeneration({
        frameElement,
        data: {
          status: "error",
          code: "ERR_OAI",
          message: error.message || "Unknown error during generation"
        }
      });
    }
  }
  onIframeSrcCopy(element) {
    if (element.customData?.generationData?.status === "done") {
      copyTextToSystemClipboard(element.customData.generationData.html);
      this.setToast({
        message: "copied to clipboard",
        closable: false,
        duration: 1500
      });
    }
  }
  onMagicframeToolSelect = () => {
    const selectedElements = this.scene.getSelectedElements({
      selectedElementIds: this.state.selectedElementIds
    });
    if (selectedElements.length === 0) {
      this.setActiveTool({ type: TOOL_TYPE.magicframe });
      trackEvent("ai", "tool-select (empty-selection)", "d2c");
    } else {
      const selectedMagicFrame = selectedElements.length === 1 && isMagicFrameElement(selectedElements[0]) && selectedElements[0];
      if (!selectedMagicFrame && selectedElements.some((el) => isFrameLikeElement(el) || el.frameId)) {
        this.setActiveTool({ type: TOOL_TYPE.magicframe });
        return;
      }
      trackEvent("ai", "tool-select (existing selection)", "d2c");
      let frame;
      if (selectedMagicFrame) {
        frame = selectedMagicFrame;
      } else {
        const [minX, minY, maxX, maxY] = getCommonBounds(selectedElements);
        const padding = 50;
        frame = newMagicFrameElement({
          ...FRAME_STYLE,
          x: minX - padding,
          y: minY - padding,
          width: maxX - minX + padding * 2,
          height: maxY - minY + padding * 2,
          opacity: 100,
          locked: false
        });
        this.scene.insertElement(frame);
        for (const child of selectedElements) {
          mutateElement(child, { frameId: frame.id });
        }
        this.setState({
          selectedElementIds: { [frame.id]: true }
        });
      }
      this.onMagicFrameGenerate(frame, "upstream");
    }
  };
  openEyeDropper = ({ type }) => {
    jotaiStore.set(activeEyeDropperAtom, {
      swapPreviewOnAlt: true,
      colorPickerType: type === "stroke" ? "elementStroke" : "elementBackground",
      onSelect: (color, event) => {
        const shouldUpdateStrokeColor = type === "background" && event.altKey || type === "stroke" && !event.altKey;
        const selectedElements = this.scene.getSelectedElements(this.state);
        if (!selectedElements.length || this.state.activeTool.type !== "selection") {
          if (shouldUpdateStrokeColor) {
            this.syncActionResult({
              appState: { ...this.state, currentItemStrokeColor: color },
              storeAction: StoreAction.CAPTURE
            });
          } else {
            this.syncActionResult({
              appState: { ...this.state, currentItemBackgroundColor: color },
              storeAction: StoreAction.CAPTURE
            });
          }
        } else {
          this.updateScene({
            elements: this.scene.getElementsIncludingDeleted().map((el) => {
              if (this.state.selectedElementIds[el.id]) {
                return newElementWith(el, {
                  [shouldUpdateStrokeColor ? "strokeColor" : "backgroundColor"]: color
                });
              }
              return el;
            }),
            storeAction: StoreAction.CAPTURE
          });
        }
      },
      keepOpenOnAlt: false
    });
  };
  dismissLinearEditor = () => {
    setTimeout(() => {
      this.setState({
        editingLinearElement: null
      });
    });
  };
  syncActionResult = withBatchedUpdates((actionResult) => {
    if (this.unmounted || actionResult === false) {
      return;
    }
    if (actionResult.storeAction === StoreAction.UPDATE) {
      this.store.shouldUpdateSnapshot();
    } else if (actionResult.storeAction === StoreAction.CAPTURE) {
      this.store.shouldCaptureIncrement();
    }
    let didUpdate = false;
    let editingTextElement = null;
    if (actionResult.elements) {
      this.scene.replaceAllElements(actionResult.elements);
      didUpdate = true;
    }
    if (actionResult.files) {
      this.files = actionResult.replaceFiles ? actionResult.files : { ...this.files, ...actionResult.files };
      this.addNewImagesToImageCache();
    }
    if (actionResult.appState || editingTextElement || this.state.contextMenu) {
      let viewModeEnabled = actionResult?.appState?.viewModeEnabled || false;
      let zenModeEnabled = actionResult?.appState?.zenModeEnabled || false;
      const theme = actionResult?.appState?.theme || this.props.theme || THEME.LIGHT;
      const name = actionResult?.appState?.name ?? this.state.name;
      const errorMessage = actionResult?.appState?.errorMessage ?? this.state.errorMessage;
      if (typeof this.props.viewModeEnabled !== "undefined") {
        viewModeEnabled = this.props.viewModeEnabled;
      }
      if (typeof this.props.zenModeEnabled !== "undefined") {
        zenModeEnabled = this.props.zenModeEnabled;
      }
      editingTextElement = actionResult.appState?.editingTextElement || null;
      if (actionResult.elements && editingTextElement) {
        actionResult.elements.forEach((element) => {
          if (editingTextElement?.id === element.id && editingTextElement !== element && isNonDeletedElement(element) && isTextElement(element)) {
            editingTextElement = element;
          }
        });
      }
      if (editingTextElement?.isDeleted) {
        editingTextElement = null;
      }
      this.setState((state) => {
        return Object.assign(actionResult.appState || {}, {
          // NOTE this will prevent opening context menu using an action
          // or programmatically from the host, so it will need to be
          // rewritten later
          contextMenu: null,
          editingTextElement,
          viewModeEnabled,
          zenModeEnabled,
          theme,
          name,
          errorMessage
        });
      });
      didUpdate = true;
    }
    if (!didUpdate && actionResult.storeAction !== StoreAction.NONE) {
      this.scene.triggerUpdate();
    }
  });
  // Lifecycle
  onBlur = withBatchedUpdates(() => {
    isHoldingSpace = false;
    this.setState({ isBindingEnabled: true });
  });
  onUnload = () => {
    this.onBlur();
  };
  disableEvent = (event) => {
    event.preventDefault();
  };
  resetHistory = () => {
    this.history.clear();
  };
  resetStore = () => {
    this.store.clear();
  };
  /**
   * Resets scene & history.
   * ! Do not use to clear scene user action !
   */
  resetScene = withBatchedUpdates(
    (opts) => {
      this.scene.replaceAllElements([]);
      this.setState((state) => ({
        ...getDefaultAppState(),
        isLoading: opts?.resetLoadingState ? false : state.isLoading,
        theme: this.state.theme
      }));
      this.resetStore();
      this.resetHistory();
    }
  );
  initializeScene = async () => {
    if ("launchQueue" in window && "LaunchParams" in window) {
      window.launchQueue.setConsumer(
        async (launchParams) => {
          if (!launchParams.files.length) {
            return;
          }
          const fileHandle = launchParams.files[0];
          const blob = await fileHandle.getFile();
          this.loadFileToCanvas(
            new File([blob], blob.name || "", { type: blob.type }),
            fileHandle
          );
        }
      );
    }
    if (this.props.theme) {
      this.setState({ theme: this.props.theme });
    }
    if (!this.state.isLoading) {
      this.setState({ isLoading: true });
    }
    let initialData = null;
    try {
      if (typeof this.props.initialData === "function") {
        initialData = await this.props.initialData() || null;
      } else {
        initialData = await this.props.initialData || null;
      }
      if (initialData?.libraryItems) {
        this.library.updateLibrary({
          libraryItems: initialData.libraryItems,
          merge: true
        }).catch((error) => {
          console.error(error);
        });
      }
    } catch (error) {
      console.error(error);
      initialData = {
        appState: {
          errorMessage: error.message || "Encountered an error during importing or restoring scene data"
        }
      };
    }
    const scene = restore(initialData, null, null, { repairBindings: true });
    scene.appState = {
      ...scene.appState,
      theme: this.props.theme || scene.appState.theme,
      // we're falling back to current (pre-init) state when deciding
      // whether to open the library, to handle a case where we
      // update the state outside of initialData (e.g. when loading the app
      // with a library install link, which should auto-open the library)
      openSidebar: scene.appState?.openSidebar || this.state.openSidebar,
      activeTool: scene.appState.activeTool.type === "image" ? { ...scene.appState.activeTool, type: "selection" } : scene.appState.activeTool,
      isLoading: false,
      toast: this.state.toast
    };
    if (initialData?.scrollToContent) {
      scene.appState = {
        ...scene.appState,
        ...calculateScrollCenter(scene.elements, {
          ...scene.appState,
          width: this.state.width,
          height: this.state.height,
          offsetTop: this.state.offsetTop,
          offsetLeft: this.state.offsetLeft
        })
      };
    }
    this.resetStore();
    this.resetHistory();
    this.syncActionResult({
      ...scene,
      storeAction: StoreAction.UPDATE
    });
    this.clearImageShapeCache();
    this.fonts.loadSceneFonts();
  };
  isMobileBreakpoint = (width, height) => {
    return width < MQ_MAX_WIDTH_PORTRAIT || height < MQ_MAX_HEIGHT_LANDSCAPE && width < MQ_MAX_WIDTH_LANDSCAPE;
  };
  refreshViewportBreakpoints = () => {
    const container = this.excalidrawContainerRef.current;
    if (!container) {
      return;
    }
    const { clientWidth: viewportWidth, clientHeight: viewportHeight } = document.body;
    const prevViewportState = this.device.viewport;
    const nextViewportState = updateObject(prevViewportState, {
      isLandscape: viewportWidth > viewportHeight,
      isMobile: this.isMobileBreakpoint(viewportWidth, viewportHeight)
    });
    if (prevViewportState !== nextViewportState) {
      this.device = { ...this.device, viewport: nextViewportState };
      return true;
    }
    return false;
  };
  refreshEditorBreakpoints = () => {
    const container = this.excalidrawContainerRef.current;
    if (!container) {
      return;
    }
    const { width: editorWidth, height: editorHeight } = container.getBoundingClientRect();
    const sidebarBreakpoint = this.props.UIOptions.dockedSidebarBreakpoint != null ? this.props.UIOptions.dockedSidebarBreakpoint : MQ_RIGHT_SIDEBAR_MIN_WIDTH;
    const prevEditorState = this.device.editor;
    const nextEditorState = updateObject(prevEditorState, {
      isMobile: this.isMobileBreakpoint(editorWidth, editorHeight),
      canFitSidebar: editorWidth > sidebarBreakpoint
    });
    if (prevEditorState !== nextEditorState) {
      this.device = { ...this.device, editor: nextEditorState };
      return true;
    }
    return false;
  };
  clearImageShapeCache(filesMap) {
    const files = filesMap ?? this.files;
    this.scene.getNonDeletedElements().forEach((element) => {
      if (isInitializedImageElement(element) && files[element.fileId]) {
        this.imageCache.delete(element.fileId);
        ShapeCache.delete(element);
      }
    });
  }
  async componentDidMount() {
    this.unmounted = false;
    this.excalidrawContainerValue.container = this.excalidrawContainerRef.current;
    if (define_import_meta_env_default.MODE === ENV.TEST || define_import_meta_env_default.DEV) {
      const setState = this.setState.bind(this);
      Object.defineProperties(window.h, {
        state: {
          configurable: true,
          get: () => {
            return this.state;
          }
        },
        setState: {
          configurable: true,
          value: (...args) => {
            return this.setState(...args);
          }
        },
        app: {
          configurable: true,
          value: this
        },
        history: {
          configurable: true,
          value: this.history
        },
        store: {
          configurable: true,
          value: this.store
        },
        fonts: {
          configurable: true,
          value: this.fonts
        }
      });
    }
    this.store.onStoreIncrementEmitter.on((increment) => {
      this.history.record(increment.elementsChange, increment.appStateChange);
    });
    this.scene.onUpdate(this.triggerRender);
    this.addEventListeners();
    if (this.props.autoFocus && this.excalidrawContainerRef.current) {
      this.focusContainer();
    }
    if (
      // bounding rects don't work in tests so updating
      // the state on init would result in making the test enviro run
      // in mobile breakpoint (0 width/height), making everything fail
      !isTestEnv()
    ) {
      this.refreshViewportBreakpoints();
      this.refreshEditorBreakpoints();
    }
    if (supportsResizeObserver && this.excalidrawContainerRef.current) {
      this.resizeObserver = new ResizeObserver(() => {
        this.refreshEditorBreakpoints();
        this.updateDOMRect();
      });
      this.resizeObserver?.observe(this.excalidrawContainerRef.current);
    }
    const searchParams = new URLSearchParams(window.location.search.slice(1));
    if (searchParams.has("web-share-target")) {
      this.restoreFileFromShare();
    } else {
      this.updateDOMRect(this.initializeScene);
    }
    if (isBrave() && !isMeasureTextSupported()) {
      this.setState({
        errorMessage: /* @__PURE__ */ jsx145(BraveMeasureTextError_default, {})
      });
    }
  }
  componentWillUnmount() {
    window.launchQueue?.setConsumer(() => {
    });
    this.renderer.destroy();
    this.scene.destroy();
    this.scene = new Scene_default();
    this.fonts = new Fonts({ scene: this.scene });
    this.renderer = new Renderer(this.scene);
    this.files = {};
    this.imageCache.clear();
    this.resizeObserver?.disconnect();
    this.unmounted = true;
    this.removeEventListeners();
    this.library.destroy();
    this.laserTrails.stop();
    this.eraserTrail.stop();
    this.onChangeEmitter.clear();
    this.store.onStoreIncrementEmitter.clear();
    ShapeCache.destroy();
    SnapCache.destroy();
    clearTimeout(touchTimeout);
    isSomeElementSelected.clearCache();
    selectGroupsForSelectedElements.clearCache();
    touchTimeout = 0;
    document.documentElement.style.overscrollBehaviorX = "";
  }
  onResize = withBatchedUpdates(() => {
    this.scene.getElementsIncludingDeleted().forEach((element) => ShapeCache.delete(element));
    this.refreshViewportBreakpoints();
    this.updateDOMRect();
    if (!supportsResizeObserver) {
      this.refreshEditorBreakpoints();
    }
    this.setState({});
  });
  /** generally invoked only if fullscreen was invoked programmatically */
  onFullscreenChange = () => {
    if (
      // points to the iframe element we fullscreened
      !document.fullscreenElement && this.state.activeEmbeddable?.state === "active"
    ) {
      this.setState({
        activeEmbeddable: null
      });
    }
  };
  removeEventListeners() {
    this.onRemoveEventListenersEmitter.trigger();
  }
  addEventListeners() {
    this.removeEventListeners();
    if (this.props.handleKeyboardGlobally) {
      this.onRemoveEventListenersEmitter.once(
        addEventListener(document, "keydown" /* KEYDOWN */, this.onKeyDown, false)
      );
    }
    this.onRemoveEventListenersEmitter.once(
      addEventListener(
        this.excalidrawContainerRef.current,
        "wheel" /* WHEEL */,
        this.handleWheel,
        { passive: false }
      ),
      addEventListener(window, "message" /* MESSAGE */, this.onWindowMessage, false),
      addEventListener(document, "pointerup" /* POINTER_UP */, this.removePointer),
      // #3553
      addEventListener(document, "copy" /* COPY */, this.onCopy),
      addEventListener(document, "keyup" /* KEYUP */, this.onKeyUp, { passive: true }),
      addEventListener(
        document,
        "pointermove" /* POINTER_MOVE */,
        this.updateCurrentCursorPosition
      ),
      // rerender text elements on font load to fix #637 && #1553
      addEventListener(document.fonts, "loadingdone", (event) => {
        const loadedFontFaces = event.fontfaces;
        this.fonts.onLoaded(loadedFontFaces);
      }),
      // Safari-only desktop pinch zoom
      addEventListener(
        document,
        "gesturestart" /* GESTURE_START */,
        this.onGestureStart,
        false
      ),
      addEventListener(
        document,
        "gesturechange" /* GESTURE_CHANGE */,
        this.onGestureChange,
        false
      ),
      addEventListener(
        document,
        "gestureend" /* GESTURE_END */,
        this.onGestureEnd,
        false
      ),
      addEventListener(window, "focus" /* FOCUS */, () => {
        this.maybeCleanupAfterMissingPointerUp(null);
        this.triggerRender(true);
      })
    );
    if (this.state.viewModeEnabled) {
      return;
    }
    this.onRemoveEventListenersEmitter.once(
      addEventListener(
        document,
        "fullscreenchange" /* FULLSCREENCHANGE */,
        this.onFullscreenChange
      ),
      addEventListener(document, "paste" /* PASTE */, this.pasteFromClipboard),
      addEventListener(document, "cut" /* CUT */, this.onCut),
      addEventListener(window, "resize" /* RESIZE */, this.onResize, false),
      addEventListener(window, "unload" /* UNLOAD */, this.onUnload, false),
      addEventListener(window, "blur" /* BLUR */, this.onBlur, false),
      addEventListener(
        this.excalidrawContainerRef.current,
        "wheel" /* WHEEL */,
        this.handleWheel
      ),
      addEventListener(
        this.excalidrawContainerRef.current,
        "dragover" /* DRAG_OVER */,
        this.disableEvent,
        false
      ),
      addEventListener(
        this.excalidrawContainerRef.current,
        "drop" /* DROP */,
        this.disableEvent,
        false
      )
    );
    if (this.props.detectScroll) {
      this.onRemoveEventListenersEmitter.once(
        addEventListener(
          getNearestScrollableContainer(this.excalidrawContainerRef.current),
          "scroll" /* SCROLL */,
          this.onScroll
        )
      );
    }
  }
  componentDidUpdate(prevProps, prevState) {
    this.updateEmbeddables();
    const elements = this.scene.getElementsIncludingDeleted();
    const elementsMap = this.scene.getElementsMapIncludingDeleted();
    const nonDeletedElementsMap = this.scene.getNonDeletedElementsMap();
    if (!this.state.showWelcomeScreen && !elements.length) {
      this.setState({ showWelcomeScreen: true });
    }
    if (prevProps.UIOptions.dockedSidebarBreakpoint !== this.props.UIOptions.dockedSidebarBreakpoint) {
      this.refreshEditorBreakpoints();
    }
    const hasFollowedPersonLeft = prevState.userToFollow && !this.state.collaborators.has(prevState.userToFollow.socketId);
    if (hasFollowedPersonLeft) {
      this.maybeUnfollowRemoteUser();
    }
    if (prevState.zoom.value !== this.state.zoom.value || prevState.scrollX !== this.state.scrollX || prevState.scrollY !== this.state.scrollY) {
      this.props?.onScrollChange?.(
        this.state.scrollX,
        this.state.scrollY,
        this.state.zoom
      );
      this.onScrollChangeEmitter.trigger(
        this.state.scrollX,
        this.state.scrollY,
        this.state.zoom
      );
    }
    if (prevState.userToFollow !== this.state.userToFollow) {
      if (prevState.userToFollow) {
        this.onUserFollowEmitter.trigger({
          userToFollow: prevState.userToFollow,
          action: "UNFOLLOW"
        });
      }
      if (this.state.userToFollow) {
        this.onUserFollowEmitter.trigger({
          userToFollow: this.state.userToFollow,
          action: "FOLLOW"
        });
      }
    }
    if (Object.keys(this.state.selectedElementIds).length && isEraserActive(this.state)) {
      this.setState({
        activeTool: updateActiveTool(this.state, { type: "selection" })
      });
    }
    if (this.state.activeTool.type === "eraser" && prevState.theme !== this.state.theme) {
      setEraserCursor(this.interactiveCanvas, this.state.theme);
    }
    if (prevState.activeTool.type === "selection" && this.state.activeTool.type !== "selection" && this.state.showHyperlinkPopup) {
      this.setState({ showHyperlinkPopup: false });
    }
    if (prevProps.langCode !== this.props.langCode) {
      this.updateLanguage();
    }
    if (isEraserActive(prevState) && !isEraserActive(this.state)) {
      this.eraserTrail.endPath();
    }
    if (prevProps.viewModeEnabled !== this.props.viewModeEnabled) {
      this.setState({ viewModeEnabled: !!this.props.viewModeEnabled });
    }
    if (prevState.viewModeEnabled !== this.state.viewModeEnabled) {
      this.addEventListeners();
      this.deselectElements();
    }
    if (prevProps.zenModeEnabled !== this.props.zenModeEnabled) {
      this.setState({ zenModeEnabled: !!this.props.zenModeEnabled });
    }
    if (prevProps.theme !== this.props.theme && this.props.theme) {
      this.setState({ theme: this.props.theme });
    }
    this.excalidrawContainerRef.current?.classList.toggle(
      "theme--dark",
      this.state.theme === THEME.DARK
    );
    if (this.state.editingLinearElement && !this.state.selectedElementIds[this.state.editingLinearElement.elementId]) {
      setTimeout(() => {
        this.state.editingLinearElement && this.actionManager.executeAction(actionFinalize);
      });
    }
    if (this.state.editingTextElement?.isDeleted) {
      this.setState({ editingTextElement: null });
    }
    if (this.state.selectedLinearElement && !this.state.selectedElementIds[this.state.selectedLinearElement.elementId]) {
      this.setState({ selectedLinearElement: null });
    }
    const { multiElement } = prevState;
    if (prevState.activeTool !== this.state.activeTool && multiElement != null && isBindingEnabled(this.state) && isBindingElement(multiElement, false)) {
      maybeBindLinearElement(
        multiElement,
        this.state,
        tupleToCoors(
          LinearElementEditor.getPointAtIndexGlobalCoordinates(
            multiElement,
            -1,
            nonDeletedElementsMap
          )
        ),
        this.scene.getNonDeletedElementsMap(),
        this.scene.getNonDeletedElements()
      );
    }
    this.store.commit(elementsMap, this.state);
    if (!this.state.isLoading) {
      this.props.onChange?.(elements, this.state, this.files);
      this.onChangeEmitter.trigger(elements, this.state, this.files);
    }
  }
  renderInteractiveSceneCallback = ({
    atLeastOneVisibleElement,
    scrollBars,
    elementsMap
  }) => {
    if (scrollBars) {
      currentScrollBars = scrollBars;
    }
    const scrolledOutside = (
      // hide when editing text
      this.state.editingTextElement ? false : !atLeastOneVisibleElement && elementsMap.size > 0
    );
    if (this.state.scrolledOutside !== scrolledOutside) {
      this.setState({ scrolledOutside });
    }
    this.scheduleImageRefresh();
  };
  onScroll = debounce(() => {
    const { offsetTop, offsetLeft } = this.getCanvasOffsets();
    this.setState((state) => {
      if (state.offsetLeft === offsetLeft && state.offsetTop === offsetTop) {
        return null;
      }
      return { offsetTop, offsetLeft };
    });
  }, SCROLL_TIMEOUT);
  // Copy/paste
  onCut = withBatchedUpdates((event) => {
    const isExcalidrawActive = this.excalidrawContainerRef.current?.contains(
      document.activeElement
    );
    if (!isExcalidrawActive || isWritableElement(event.target)) {
      return;
    }
    this.actionManager.executeAction(actionCut, "keyboard", event);
    event.preventDefault();
    event.stopPropagation();
  });
  onCopy = withBatchedUpdates((event) => {
    const isExcalidrawActive = this.excalidrawContainerRef.current?.contains(
      document.activeElement
    );
    if (!isExcalidrawActive || isWritableElement(event.target)) {
      return;
    }
    this.actionManager.executeAction(actionCopy, "keyboard", event);
    event.preventDefault();
    event.stopPropagation();
  });
  static resetTapTwice() {
    didTapTwice = false;
  }
  onTouchStart = (event) => {
    if (isIOS) {
      event.preventDefault();
    }
    if (!didTapTwice) {
      didTapTwice = true;
      clearTimeout(tappedTwiceTimer);
      tappedTwiceTimer = window.setTimeout(
        _App.resetTapTwice,
        TAP_TWICE_TIMEOUT
      );
      return;
    }
    if (didTapTwice && event.touches.length === 1) {
      const touch = event.touches[0];
      this.handleCanvasDoubleClick({
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      didTapTwice = false;
      clearTimeout(tappedTwiceTimer);
    }
    if (event.touches.length === 2) {
      this.setState({
        selectedElementIds: makeNextSelectedElementIds({}, this.state),
        activeEmbeddable: null
      });
    }
  };
  onTouchEnd = (event) => {
    this.resetContextMenuTimer();
    if (event.touches.length > 0) {
      this.setState({
        previousSelectedElementIds: {},
        selectedElementIds: makeNextSelectedElementIds(
          this.state.previousSelectedElementIds,
          this.state
        )
      });
    } else {
      gesture.pointers.clear();
    }
  };
  pasteFromClipboard = withBatchedUpdates(
    async (event) => {
      const isPlainPaste = !!IS_PLAIN_PASTE;
      const target = document.activeElement;
      const isExcalidrawActive = this.excalidrawContainerRef.current?.contains(target);
      if (event && !isExcalidrawActive) {
        return;
      }
      const elementUnderCursor = document.elementFromPoint(
        this.lastViewportPosition.x,
        this.lastViewportPosition.y
      );
      if (event && (!(elementUnderCursor instanceof HTMLCanvasElement) || isWritableElement(target))) {
        return;
      }
      const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(
        {
          clientX: this.lastViewportPosition.x,
          clientY: this.lastViewportPosition.y
        },
        this.state
      );
      let file2 = event?.clipboardData?.files[0];
      const data = await parseClipboard(event, isPlainPaste);
      if (!file2 && !isPlainPaste) {
        if (data.mixedContent) {
          return this.addElementsFromMixedContentPaste(data.mixedContent, {
            isPlainPaste,
            sceneX,
            sceneY
          });
        } else if (data.text) {
          const string = data.text.trim();
          if (string.startsWith("<svg") && string.endsWith("</svg>")) {
            file2 = SVGStringToFile(string);
          }
        }
      }
      if (isSupportedImageFile(file2) && !data.spreadsheet) {
        if (!this.isToolSupported("image")) {
          this.setState({ errorMessage: t("errors.imageToolNotSupported") });
          return;
        }
        const imageElement = this.createImageElement({ sceneX, sceneY });
        this.insertImageElement(imageElement, file2);
        this.initializeImageDimensions(imageElement);
        this.setState({
          selectedElementIds: makeNextSelectedElementIds(
            {
              [imageElement.id]: true
            },
            this.state
          )
        });
        return;
      }
      if (this.props.onPaste) {
        try {
          if (await this.props.onPaste(data, event) === false) {
            return;
          }
        } catch (error) {
          console.error(error);
        }
      }
      if (data.errorMessage) {
        this.setState({ errorMessage: data.errorMessage });
      } else if (data.spreadsheet && !isPlainPaste) {
        this.setState({
          pasteDialog: {
            data: data.spreadsheet,
            shown: true
          }
        });
      } else if (data.elements) {
        const elements = data.programmaticAPI ? convertToExcalidrawElements(
          data.elements
        ) : data.elements;
        this.addElementsFromPasteOrLibrary({
          elements,
          files: data.files || null,
          position: "cursor",
          retainSeed: isPlainPaste
        });
      } else if (data.text) {
        if (data.text && isMaybeMermaidDefinition(data.text)) {
          const api = await import("@excalidraw/mermaid-to-excalidraw");
          try {
            const { elements: skeletonElements, files } = await api.parseMermaidToExcalidraw(data.text);
            const elements = convertToExcalidrawElements(skeletonElements, {
              regenerateIds: true
            });
            this.addElementsFromPasteOrLibrary({
              elements,
              files,
              position: "cursor"
            });
            return;
          } catch (err) {
            console.warn(
              `parsing pasted text as mermaid definition failed: ${err.message}`
            );
          }
        }
        const nonEmptyLines = normalizeEOL(data.text).split(/\n+/).map((s) => s.trim()).filter(Boolean);
        const embbeddableUrls = nonEmptyLines.map((str) => maybeParseEmbedSrc(str)).filter((string) => {
          return embeddableURLValidator(string, this.props.validateEmbeddable) && (/^(http|https):\/\/[^\s/$.?#].[^\s]*$/.test(string) || getEmbedLink(string)?.type === "video");
        });
        if (!IS_PLAIN_PASTE && embbeddableUrls.length > 0 && // if there were non-embeddable text (lines) mixed in with embeddable
        // urls, ignore and paste as text
        embbeddableUrls.length === nonEmptyLines.length) {
          const embeddables = [];
          for (const url of embbeddableUrls) {
            const prevEmbeddable = embeddables[embeddables.length - 1];
            const embeddable = this.insertEmbeddableElement({
              sceneX: prevEmbeddable ? prevEmbeddable.x + prevEmbeddable.width + 20 : sceneX,
              sceneY,
              link: normalizeLink(url)
            });
            if (embeddable) {
              embeddables.push(embeddable);
            }
          }
          if (embeddables.length) {
            this.setState({
              selectedElementIds: Object.fromEntries(
                embeddables.map((embeddable) => [embeddable.id, true])
              )
            });
          }
          return;
        }
        this.addTextFromPaste(data.text, isPlainPaste);
      }
      this.setActiveTool({ type: "selection" });
      event?.preventDefault();
    }
  );
  addElementsFromPasteOrLibrary = (opts) => {
    let elements = opts.elements.map((el, _, elements2) => {
      if (isElbowArrow(el)) {
        const startEndElements = [
          el.startBinding && elements2.find((l) => l.id === el.startBinding?.elementId),
          el.endBinding && elements2.find((l) => l.id === el.endBinding?.elementId)
        ];
        const startBinding = startEndElements[0] ? el.startBinding : null;
        const endBinding = startEndElements[1] ? el.endBinding : null;
        return {
          ...el,
          ...updateElbowArrow(
            {
              ...el,
              startBinding,
              endBinding
            },
            toBrandedType(
              new Map(
                startEndElements.filter((x2) => x2 != null).map(
                  (el2) => [el2.id, el2]
                )
              )
            ),
            [el.points[0], el.points[el.points.length - 1]]
          )
        };
      }
      return el;
    });
    elements = restoreElements(elements, null, void 0);
    const [minX, minY, maxX, maxY] = getCommonBounds(elements);
    const elementsCenterX = distance(minX, maxX) / 2;
    const elementsCenterY = distance(minY, maxY) / 2;
    const clientX = typeof opts.position === "object" ? opts.position.clientX : opts.position === "cursor" ? this.lastViewportPosition.x : this.state.width / 2 + this.state.offsetLeft;
    const clientY = typeof opts.position === "object" ? opts.position.clientY : opts.position === "cursor" ? this.lastViewportPosition.y : this.state.height / 2 + this.state.offsetTop;
    const { x, y } = viewportCoordsToSceneCoords(
      { clientX, clientY },
      this.state
    );
    const dx = x - elementsCenterX;
    const dy = y - elementsCenterY;
    const [gridX, gridY] = getGridPoint(dx, dy, this.getEffectiveGridSize());
    const newElements = duplicateElements(
      elements.map((element) => {
        return newElementWith(element, {
          x: element.x + gridX - minX,
          y: element.y + gridY - minY
        });
      }),
      {
        randomizeSeed: !opts.retainSeed
      }
    );
    const prevElements = this.scene.getElementsIncludingDeleted();
    const nextElements = [...prevElements, ...newElements];
    syncMovedIndices(nextElements, arrayToMap(newElements));
    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({ x, y });
    if (topLayerFrame) {
      const eligibleElements = filterElementsEligibleAsFrameChildren(
        newElements,
        topLayerFrame
      );
      addElementsToFrame(nextElements, eligibleElements, topLayerFrame);
    }
    this.scene.replaceAllElements(nextElements);
    newElements.forEach((newElement2) => {
      if (isTextElement(newElement2) && isBoundToContainer(newElement2)) {
        const container = getContainerElement(
          newElement2,
          this.scene.getElementsMapIncludingDeleted()
        );
        redrawTextBoundingBox(
          newElement2,
          container,
          this.scene.getElementsMapIncludingDeleted()
        );
      }
    });
    if (opts.files) {
      this.files = { ...this.files, ...opts.files };
    }
    this.store.shouldCaptureIncrement();
    const nextElementsToSelect = excludeElementsInFramesFromSelection(newElements);
    this.setState(
      {
        ...this.state,
        // keep sidebar (presumably the library) open if it's docked and
        // can fit.
        //
        // Note, we should close the sidebar only if we're dropping items
        // from library, not when pasting from clipboard. Alas.
        openSidebar: this.state.openSidebar && this.device.editor.canFitSidebar && jotaiStore.get(isSidebarDockedAtom) ? this.state.openSidebar : null,
        ...selectGroupsForSelectedElements(
          {
            editingGroupId: null,
            selectedElementIds: nextElementsToSelect.reduce(
              (acc, element) => {
                if (!isBoundToContainer(element)) {
                  acc[element.id] = true;
                }
                return acc;
              },
              {}
            )
          },
          this.scene.getNonDeletedElements(),
          this.state,
          this
        )
      },
      () => {
        if (opts.files) {
          this.addNewImagesToImageCache();
        }
      }
    );
    this.setActiveTool({ type: "selection" });
    if (opts.fitToContent) {
      this.scrollToContent(newElements, {
        fitToContent: true,
        canvasOffsets: this.getEditorUIOffsets()
      });
    }
  };
  // TODO rewrite this to paste both text & images at the same time if
  // pasted data contains both
  async addElementsFromMixedContentPaste(mixedContent, {
    isPlainPaste,
    sceneX,
    sceneY
  }) {
    if (!isPlainPaste && mixedContent.some((node) => node.type === "imageUrl") && this.isToolSupported("image")) {
      const imageURLs = mixedContent.filter((node) => node.type === "imageUrl").map((node) => node.value);
      const responses = await Promise.all(
        imageURLs.map(async (url) => {
          try {
            return { file: await ImageURLToFile(url) };
          } catch (error2) {
            let errorMessage = error2.message;
            if (error2.cause === "FETCH_ERROR") {
              errorMessage = t("errors.failedToFetchImage");
            } else if (error2.cause === "UNSUPPORTED") {
              errorMessage = t("errors.unsupportedFileType");
            }
            return { errorMessage };
          }
        })
      );
      let y = sceneY;
      let firstImageYOffsetDone = false;
      const nextSelectedIds = {};
      for (const response of responses) {
        if (response.file) {
          const imageElement = this.createImageElement({
            sceneX,
            sceneY: y
          });
          const initializedImageElement = await this.insertImageElement(
            imageElement,
            response.file
          );
          if (initializedImageElement) {
            if (!firstImageYOffsetDone) {
              firstImageYOffsetDone = true;
              y -= initializedImageElement.height / 2;
            }
            mutateElement(initializedImageElement, { y }, false);
            y = imageElement.y + imageElement.height + 25;
            nextSelectedIds[imageElement.id] = true;
          }
        }
      }
      this.setState({
        selectedElementIds: makeNextSelectedElementIds(
          nextSelectedIds,
          this.state
        )
      });
      const error = responses.find((response) => !!response.errorMessage);
      if (error && error.errorMessage) {
        this.setState({ errorMessage: error.errorMessage });
      }
    } else {
      const textNodes = mixedContent.filter((node) => node.type === "text");
      if (textNodes.length) {
        this.addTextFromPaste(
          textNodes.map((node) => node.value).join("\n\n"),
          isPlainPaste
        );
      }
    }
  }
  addTextFromPaste(text, isPlainPaste = false) {
    const { x, y } = viewportCoordsToSceneCoords(
      {
        clientX: this.lastViewportPosition.x,
        clientY: this.lastViewportPosition.y
      },
      this.state
    );
    const textElementProps = {
      x,
      y,
      strokeColor: this.state.currentItemStrokeColor,
      backgroundColor: this.state.currentItemBackgroundColor,
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roundness: null,
      roughness: this.state.currentItemRoughness,
      opacity: this.state.currentItemOpacity,
      text,
      fontSize: this.state.currentItemFontSize,
      fontFamily: this.state.currentItemFontFamily,
      textAlign: DEFAULT_TEXT_ALIGN,
      verticalAlign: DEFAULT_VERTICAL_ALIGN,
      locked: false
    };
    const fontString = getFontString({
      fontSize: textElementProps.fontSize,
      fontFamily: textElementProps.fontFamily
    });
    const lineHeight = getLineHeight(textElementProps.fontFamily);
    const [x1, , x2] = getVisibleSceneBounds(this.state);
    const maxTextWidth = Math.max(Math.min((x2 - x1) * 0.5, 800), 200);
    const LINE_GAP = 10;
    let currentY = y;
    const lines = isPlainPaste ? [text] : text.split("\n");
    const textElements = lines.reduce(
      (acc, line, idx) => {
        const originalText = normalizeText(line).trim();
        if (originalText.length) {
          const topLayerFrame = this.getTopLayerFrameAtSceneCoords({
            x,
            y: currentY
          });
          let metrics = measureText(originalText, fontString, lineHeight);
          const isTextUnwrapped = metrics.width > maxTextWidth;
          const text2 = isTextUnwrapped ? wrapText(originalText, fontString, maxTextWidth) : originalText;
          metrics = isTextUnwrapped ? measureText(text2, fontString, lineHeight) : metrics;
          const startX = x - metrics.width / 2;
          const startY = currentY - metrics.height / 2;
          const element = newTextElement({
            ...textElementProps,
            x: startX,
            y: startY,
            text: text2,
            originalText,
            lineHeight,
            autoResize: !isTextUnwrapped,
            frameId: topLayerFrame ? topLayerFrame.id : null
          });
          acc.push(element);
          currentY += element.height + LINE_GAP;
        } else {
          const prevLine = lines[idx - 1]?.trim();
          if (prevLine) {
            currentY += getLineHeightInPx(textElementProps.fontSize, lineHeight) + LINE_GAP;
          }
        }
        return acc;
      },
      []
    );
    if (textElements.length === 0) {
      return;
    }
    this.scene.insertElements(textElements);
    this.setState({
      selectedElementIds: makeNextSelectedElementIds(
        Object.fromEntries(textElements.map((el) => [el.id, true])),
        this.state
      )
    });
    if (!isPlainPaste && textElements.length > 1 && PLAIN_PASTE_TOAST_SHOWN === false && !this.device.editor.isMobile) {
      this.setToast({
        message: t("toast.pasteAsSingleElement", {
          shortcut: getShortcutKey("CtrlOrCmd+Shift+V")
        }),
        duration: 5e3
      });
      PLAIN_PASTE_TOAST_SHOWN = true;
    }
    this.store.shouldCaptureIncrement();
  }
  setAppState = (state, callback) => {
    this.setState(state, callback);
  };
  removePointer = (event) => {
    if (touchTimeout) {
      this.resetContextMenuTimer();
    }
    gesture.pointers.delete(event.pointerId);
  };
  toggleLock = (source = "ui") => {
    if (!this.state.activeTool.locked) {
      trackEvent(
        "toolbar",
        "toggleLock",
        `${source} (${this.device.editor.isMobile ? "mobile" : "desktop"})`
      );
    }
    this.setState((prevState) => {
      return {
        activeTool: {
          ...prevState.activeTool,
          ...updateActiveTool(
            this.state,
            prevState.activeTool.locked ? { type: "selection" } : prevState.activeTool
          ),
          locked: !prevState.activeTool.locked
        }
      };
    });
  };
  updateFrameRendering = (opts) => {
    this.setState((prevState) => {
      const next = typeof opts === "function" ? opts(prevState.frameRendering) : opts;
      return {
        frameRendering: {
          enabled: next?.enabled ?? prevState.frameRendering.enabled,
          clip: next?.clip ?? prevState.frameRendering.clip,
          name: next?.name ?? prevState.frameRendering.name,
          outline: next?.outline ?? prevState.frameRendering.outline
        }
      };
    });
  };
  togglePenMode = (force) => {
    this.setState((prevState) => {
      return {
        penMode: force ?? !prevState.penMode,
        penDetected: true
      };
    });
  };
  onHandToolToggle = () => {
    this.actionManager.executeAction(actionToggleHandTool);
  };
  /**
   * Zooms on canvas viewport center
   */
  zoomCanvas = (value) => {
    this.setState({
      ...getStateForZoom(
        {
          viewportX: this.state.width / 2 + this.state.offsetLeft,
          viewportY: this.state.height / 2 + this.state.offsetTop,
          nextZoom: getNormalizedZoom(value)
        },
        this.state
      )
    });
  };
  cancelInProgressAnimation = null;
  scrollToContent = (target = this.scene.getNonDeletedElements(), opts) => {
    this.cancelInProgressAnimation?.();
    const targetElements = Array.isArray(target) ? target : [target];
    let zoom = this.state.zoom;
    let scrollX = this.state.scrollX;
    let scrollY = this.state.scrollY;
    if (opts?.fitToContent || opts?.fitToViewport) {
      const { appState } = zoomToFit({
        canvasOffsets: opts.canvasOffsets,
        targetElements,
        appState: this.state,
        fitToViewport: !!opts?.fitToViewport,
        viewportZoomFactor: opts?.viewportZoomFactor,
        minZoom: opts?.minZoom,
        maxZoom: opts?.maxZoom
      });
      zoom = appState.zoom;
      scrollX = appState.scrollX;
      scrollY = appState.scrollY;
    } else {
      const scroll = calculateScrollCenter(targetElements, this.state);
      scrollX = scroll.scrollX;
      scrollY = scroll.scrollY;
    }
    if (opts?.animate) {
      const origScrollX = this.state.scrollX;
      const origScrollY = this.state.scrollY;
      const origZoom = this.state.zoom.value;
      const cancel = easeToValuesRAF({
        fromValues: {
          scrollX: origScrollX,
          scrollY: origScrollY,
          zoom: origZoom
        },
        toValues: { scrollX, scrollY, zoom: zoom.value },
        interpolateValue: (from3, to, progress, key) => {
          if (key === "zoom") {
            return from3 * Math.pow(to / from3, easeOut(progress));
          }
          return void 0;
        },
        onStep: ({ scrollX: scrollX2, scrollY: scrollY2, zoom: zoom2 }) => {
          this.setState({
            scrollX: scrollX2,
            scrollY: scrollY2,
            zoom: { value: zoom2 }
          });
        },
        onStart: () => {
          this.setState({ shouldCacheIgnoreZoom: true });
        },
        onEnd: () => {
          this.setState({ shouldCacheIgnoreZoom: false });
        },
        onCancel: () => {
          this.setState({ shouldCacheIgnoreZoom: false });
        },
        duration: opts?.duration ?? 500
      });
      this.cancelInProgressAnimation = () => {
        cancel();
        this.cancelInProgressAnimation = null;
      };
    } else {
      this.setState({ scrollX, scrollY, zoom });
    }
  };
  maybeUnfollowRemoteUser = () => {
    if (this.state.userToFollow) {
      this.setState({ userToFollow: null });
    }
  };
  /** use when changing scrollX/scrollY/zoom based on user interaction */
  translateCanvas = (state) => {
    this.cancelInProgressAnimation?.();
    this.maybeUnfollowRemoteUser();
    this.setState(state);
  };
  setToast = (toast) => {
    this.setState({ toast });
  };
  restoreFileFromShare = async () => {
    try {
      const webShareTargetCache = await caches.open("web-share-target");
      const response = await webShareTargetCache.match("shared-file");
      if (response) {
        const blob = await response.blob();
        const file2 = new File([blob], blob.name || "", { type: blob.type });
        this.loadFileToCanvas(file2, null);
        await webShareTargetCache.delete("shared-file");
        window.history.replaceState(null, APP_NAME, window.location.pathname);
      }
    } catch (error) {
      this.setState({ errorMessage: error.message });
    }
  };
  /** adds supplied files to existing files in the appState */
  addFiles = withBatchedUpdates(
    (files) => {
      const filesMap = files.reduce((acc, fileData) => {
        acc.set(fileData.id, fileData);
        return acc;
      }, /* @__PURE__ */ new Map());
      this.files = { ...this.files, ...Object.fromEntries(filesMap) };
      this.clearImageShapeCache(Object.fromEntries(filesMap));
      this.scene.triggerUpdate();
      this.addNewImagesToImageCache();
    }
  );
  updateScene = withBatchedUpdates(
    (sceneData) => {
      const nextElements = syncInvalidIndices(sceneData.elements ?? []);
      if (sceneData.storeAction && sceneData.storeAction !== StoreAction.NONE) {
        const prevCommittedAppState = this.store.snapshot.appState;
        const prevCommittedElements = this.store.snapshot.elements;
        const nextCommittedAppState = sceneData.appState ? Object.assign({}, prevCommittedAppState, sceneData.appState) : prevCommittedAppState;
        const nextCommittedElements = sceneData.elements ? this.store.filterUncomittedElements(
          this.scene.getElementsMapIncludingDeleted(),
          // Only used to detect uncomitted local elements
          arrayToMap(nextElements)
          // We expect all (already reconciled) elements
        ) : prevCommittedElements;
        if (sceneData.storeAction === StoreAction.CAPTURE) {
          this.store.captureIncrement(
            nextCommittedElements,
            nextCommittedAppState
          );
        } else if (sceneData.storeAction === StoreAction.UPDATE) {
          this.store.updateSnapshot(
            nextCommittedElements,
            nextCommittedAppState
          );
        }
      }
      if (sceneData.appState) {
        this.setState(sceneData.appState);
      }
      if (sceneData.elements) {
        this.scene.replaceAllElements(nextElements);
      }
      if (sceneData.collaborators) {
        this.setState({ collaborators: sceneData.collaborators });
      }
    }
  );
  triggerRender = (force) => {
    if (force === true) {
      this.scene.triggerUpdate();
    } else {
      this.setState({});
    }
  };
  /**
   * @returns whether the menu was toggled on or off
   */
  toggleSidebar = ({
    name,
    tab,
    force
  }) => {
    let nextName;
    if (force === void 0) {
      nextName = this.state.openSidebar?.name === name && this.state.openSidebar?.tab === tab ? null : name;
    } else {
      nextName = force ? name : null;
    }
    const nextState = nextName ? { name: nextName } : null;
    if (nextState && tab) {
      nextState.tab = tab;
    }
    this.setState({ openSidebar: nextState });
    return !!nextName;
  };
  updateCurrentCursorPosition = withBatchedUpdates(
    (event) => {
      this.lastViewportPosition.x = event.clientX;
      this.lastViewportPosition.y = event.clientY;
    }
  );
  getEditorUIOffsets = () => {
    const toolbarBottom = this.excalidrawContainerRef?.current?.querySelector(".App-toolbar")?.getBoundingClientRect()?.bottom ?? 0;
    const sidebarRect = this.excalidrawContainerRef?.current?.querySelector(".sidebar")?.getBoundingClientRect();
    const propertiesPanelRect = this.excalidrawContainerRef?.current?.querySelector(".App-menu__left")?.getBoundingClientRect();
    const PADDING = 16;
    return getLanguage().rtl ? {
      top: toolbarBottom + PADDING,
      right: Math.max(
        this.state.width - (propertiesPanelRect?.left ?? this.state.width),
        0
      ) + PADDING,
      bottom: PADDING,
      left: Math.max(sidebarRect?.right ?? 0, 0) + PADDING
    } : {
      top: toolbarBottom + PADDING,
      right: Math.max(
        this.state.width - (sidebarRect?.left ?? this.state.width) + PADDING,
        0
      ),
      bottom: PADDING,
      left: Math.max(propertiesPanelRect?.right ?? 0, 0) + PADDING
    };
  };
  // Input handling
  onKeyDown = withBatchedUpdates(
    (event) => {
      if ("Proxy" in window && (!event.shiftKey && /^[A-Z]$/.test(event.key) || event.shiftKey && /^[a-z]$/.test(event.key))) {
        event = new Proxy(event, {
          get(ev, prop) {
            const value = ev[prop];
            if (typeof value === "function") {
              return value.bind(ev);
            }
            return prop === "key" ? (
              // CapsLock inverts capitalization based on ShiftKey, so invert
              // it back
              event.shiftKey ? ev.key.toUpperCase() : ev.key.toLowerCase()
            ) : value;
          }
        });
      }
      if (!isInputLike(event.target)) {
        if (event.key === KEYS.ESCAPE && this.flowChartCreator.isCreatingChart) {
          this.flowChartCreator.clear();
          this.triggerRender(true);
          return;
        }
        const arrowKeyPressed = isArrowKey(event.key);
        if (event[KEYS.CTRL_OR_CMD] && arrowKeyPressed && !event.shiftKey) {
          event.preventDefault();
          const selectedElements = getSelectedElements(
            this.scene.getNonDeletedElementsMap(),
            this.state
          );
          if (selectedElements.length === 1 && isFlowchartNodeElement(selectedElements[0])) {
            this.flowChartCreator.createNodes(
              selectedElements[0],
              this.scene.getNonDeletedElementsMap(),
              this.state,
              getLinkDirectionFromKey(event.key)
            );
          }
          if (this.flowChartCreator.pendingNodes?.length && !isElementCompletelyInViewport(
            this.flowChartCreator.pendingNodes,
            this.canvas.width / window.devicePixelRatio,
            this.canvas.height / window.devicePixelRatio,
            {
              offsetLeft: this.state.offsetLeft,
              offsetTop: this.state.offsetTop,
              scrollX: this.state.scrollX,
              scrollY: this.state.scrollY,
              zoom: this.state.zoom
            },
            this.scene.getNonDeletedElementsMap(),
            this.getEditorUIOffsets()
          )) {
            this.scrollToContent(this.flowChartCreator.pendingNodes, {
              animate: true,
              duration: 300,
              fitToContent: true,
              canvasOffsets: this.getEditorUIOffsets()
            });
          }
          return;
        }
        if (event.altKey) {
          const selectedElements = getSelectedElements(
            this.scene.getNonDeletedElementsMap(),
            this.state
          );
          if (selectedElements.length === 1 && arrowKeyPressed) {
            event.preventDefault();
            const nextId = this.flowChartNavigator.exploreByDirection(
              selectedElements[0],
              this.scene.getNonDeletedElementsMap(),
              getLinkDirectionFromKey(event.key)
            );
            if (nextId) {
              this.setState((prevState) => ({
                selectedElementIds: makeNextSelectedElementIds(
                  {
                    [nextId]: true
                  },
                  prevState
                )
              }));
              const nextNode = this.scene.getNonDeletedElementsMap().get(nextId);
              if (nextNode && !isElementCompletelyInViewport(
                [nextNode],
                this.canvas.width / window.devicePixelRatio,
                this.canvas.height / window.devicePixelRatio,
                {
                  offsetLeft: this.state.offsetLeft,
                  offsetTop: this.state.offsetTop,
                  scrollX: this.state.scrollX,
                  scrollY: this.state.scrollY,
                  zoom: this.state.zoom
                },
                this.scene.getNonDeletedElementsMap(),
                this.getEditorUIOffsets()
              )) {
                this.scrollToContent(nextNode, {
                  animate: true,
                  duration: 300,
                  canvasOffsets: this.getEditorUIOffsets()
                });
              }
            }
            return;
          }
        }
      }
      if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.P && !event.shiftKey && !event.altKey) {
        this.setToast({
          message: t("commandPalette.shortcutHint", {
            shortcut: getShortcutFromShortcutName("commandPalette")
          })
        });
        event.preventDefault();
        return;
      }
      if (event[KEYS.CTRL_OR_CMD] && event.key.toLowerCase() === KEYS.V) {
        IS_PLAIN_PASTE = event.shiftKey;
        clearTimeout(IS_PLAIN_PASTE_TIMER);
        IS_PLAIN_PASTE_TIMER = window.setTimeout(() => {
          IS_PLAIN_PASTE = false;
        }, 100);
      }
      if (event[KEYS.CTRL_OR_CMD] && isWritableElement(event.target)) {
        if (event.code === CODES.MINUS || event.code === CODES.EQUAL) {
          event.preventDefault();
          return;
        }
      }
      if (
        // inside an input
        isWritableElement(event.target) && // unless pressing escape (finalize action)
        event.key !== KEYS.ESCAPE || // or unless using arrows (to move between buttons)
        isArrowKey(event.key) && isInputLike(event.target)
      ) {
        return;
      }
      if (event.key === KEYS.QUESTION_MARK) {
        this.setState({
          openDialog: { name: "help" }
        });
        return;
      } else if (event.key.toLowerCase() === KEYS.E && event.shiftKey && event[KEYS.CTRL_OR_CMD]) {
        event.preventDefault();
        this.setState({ openDialog: { name: "imageExport" } });
        return;
      }
      if (event.key === KEYS.PAGE_UP || event.key === KEYS.PAGE_DOWN) {
        let offset2 = (event.shiftKey ? this.state.width : this.state.height) / this.state.zoom.value;
        if (event.key === KEYS.PAGE_DOWN) {
          offset2 = -offset2;
        }
        if (event.shiftKey) {
          this.translateCanvas((state) => ({
            scrollX: state.scrollX + offset2
          }));
        } else {
          this.translateCanvas((state) => ({
            scrollY: state.scrollY + offset2
          }));
        }
      }
      if (this.actionManager.handleKeyDown(event)) {
        return;
      }
      if (this.state.viewModeEnabled) {
        return;
      }
      if (event[KEYS.CTRL_OR_CMD] && this.state.isBindingEnabled) {
        this.setState({ isBindingEnabled: false });
      }
      if (isArrowKey(event.key)) {
        let selectedElements = this.scene.getSelectedElements({
          selectedElementIds: this.state.selectedElementIds,
          includeBoundTextElement: true,
          includeElementsInFrames: true
        });
        const elbowArrow = selectedElements.find(isElbowArrow);
        const arrowIdsToRemove = /* @__PURE__ */ new Set();
        selectedElements.filter(isElbowArrow).filter((arrow) => {
          const startElementNotInSelection = arrow.startBinding && !selectedElements.some(
            (el) => el.id === arrow.startBinding?.elementId
          );
          const endElementNotInSelection = arrow.endBinding && !selectedElements.some(
            (el) => el.id === arrow.endBinding?.elementId
          );
          return startElementNotInSelection || endElementNotInSelection;
        }).forEach((arrow) => arrowIdsToRemove.add(arrow.id));
        selectedElements = selectedElements.filter(
          (el) => !arrowIdsToRemove.has(el.id)
        );
        const step = this.getEffectiveGridSize() && (event.shiftKey ? ELEMENT_TRANSLATE_AMOUNT : this.getEffectiveGridSize()) || (event.shiftKey ? ELEMENT_SHIFT_TRANSLATE_AMOUNT : ELEMENT_TRANSLATE_AMOUNT);
        let offsetX = 0;
        let offsetY = 0;
        if (event.key === KEYS.ARROW_LEFT) {
          offsetX = -step;
        } else if (event.key === KEYS.ARROW_RIGHT) {
          offsetX = step;
        } else if (event.key === KEYS.ARROW_UP) {
          offsetY = -step;
        } else if (event.key === KEYS.ARROW_DOWN) {
          offsetY = step;
        }
        selectedElements.forEach((element) => {
          mutateElement(element, {
            x: element.x + offsetX,
            y: element.y + offsetY
          });
          updateBoundElements(element, this.scene.getNonDeletedElementsMap(), {
            simultaneouslyUpdated: selectedElements
          });
        });
        this.setState({
          suggestedBindings: getSuggestedBindingsForArrows(
            selectedElements.filter(
              (element) => element.id !== elbowArrow?.id || step !== 0
            ),
            this.scene.getNonDeletedElementsMap()
          )
        });
        event.preventDefault();
      } else if (event.key === KEYS.ENTER) {
        const selectedElements = this.scene.getSelectedElements(this.state);
        if (selectedElements.length === 1) {
          const selectedElement = selectedElements[0];
          if (event[KEYS.CTRL_OR_CMD]) {
            if (isLinearElement(selectedElement)) {
              if (!this.state.editingLinearElement || this.state.editingLinearElement.elementId !== selectedElements[0].id) {
                this.store.shouldCaptureIncrement();
                if (!isElbowArrow(selectedElement)) {
                  this.setState({
                    editingLinearElement: new LinearElementEditor(
                      selectedElement
                    )
                  });
                }
              }
            }
          } else if (isTextElement(selectedElement) || isValidTextContainer(selectedElement)) {
            let container;
            if (!isTextElement(selectedElement)) {
              container = selectedElement;
            }
            const midPoint = getContainerCenter(
              selectedElement,
              this.state,
              this.scene.getNonDeletedElementsMap()
            );
            const sceneX = midPoint.x;
            const sceneY = midPoint.y;
            this.startTextEditing({
              sceneX,
              sceneY,
              container
            });
            event.preventDefault();
            return;
          } else if (isFrameLikeElement(selectedElement)) {
            this.setState({
              editingFrame: selectedElement.id
            });
          }
        }
      } else if (!event.ctrlKey && !event.altKey && !event.metaKey && !this.state.newElement && !this.state.selectionElement && !this.state.selectedElementsAreBeingDragged) {
        const shape = findShapeByKey(event.key);
        if (shape) {
          if (this.state.activeTool.type !== shape) {
            trackEvent(
              "toolbar",
              shape,
              `keyboard (${this.device.editor.isMobile ? "mobile" : "desktop"})`
            );
          }
          if (shape === "arrow" && this.state.activeTool.type === "arrow") {
            this.setState((prevState) => ({
              currentItemArrowType: prevState.currentItemArrowType === ARROW_TYPE.sharp ? ARROW_TYPE.round : prevState.currentItemArrowType === ARROW_TYPE.round ? ARROW_TYPE.elbow : ARROW_TYPE.sharp
            }));
          }
          this.setActiveTool({ type: shape });
          event.stopPropagation();
        } else if (event.key === KEYS.Q) {
          this.toggleLock("keyboard");
          event.stopPropagation();
        }
      }
      if (event.key === KEYS.SPACE && gesture.pointers.size === 0) {
        isHoldingSpace = true;
        setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);
        event.preventDefault();
      }
      if ((event.key === KEYS.G || event.key === KEYS.S) && !event.altKey && !event[KEYS.CTRL_OR_CMD]) {
        const selectedElements = this.scene.getSelectedElements(this.state);
        if (this.state.activeTool.type === "selection" && !selectedElements.length) {
          return;
        }
        if (event.key === KEYS.G && (hasBackground(this.state.activeTool.type) || selectedElements.some((element) => hasBackground(element.type)))) {
          this.setState({ openPopup: "elementBackground" });
          event.stopPropagation();
        }
        if (event.key === KEYS.S) {
          this.setState({ openPopup: "elementStroke" });
          event.stopPropagation();
        }
      }
      if (!event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key.toLowerCase() === KEYS.F) {
        const selectedElements = this.scene.getSelectedElements(this.state);
        if (this.state.activeTool.type === "selection" && !selectedElements.length) {
          return;
        }
        if (this.state.activeTool.type === "text" || selectedElements.find(
          (element) => isTextElement(element) || getBoundTextElement(
            element,
            this.scene.getNonDeletedElementsMap()
          )
        )) {
          event.preventDefault();
          this.setState({ openPopup: "fontFamily" });
        }
      }
      if (event.key === KEYS.K && !event.altKey && !event[KEYS.CTRL_OR_CMD]) {
        if (this.state.activeTool.type === "laser") {
          this.setActiveTool({ type: "selection" });
        } else {
          this.setActiveTool({ type: "laser" });
        }
        return;
      }
      if (event[KEYS.CTRL_OR_CMD] && (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE)) {
        jotaiStore.set(activeConfirmDialogAtom, "clearCanvas");
      }
      const lowerCased = event.key.toLocaleLowerCase();
      const isPickingStroke = lowerCased === KEYS.S && event.shiftKey;
      const isPickingBackground = event.key === KEYS.I || lowerCased === KEYS.G && event.shiftKey;
      if (isPickingStroke || isPickingBackground) {
        this.openEyeDropper({
          type: isPickingStroke ? "stroke" : "background"
        });
      }
    }
  );
  onKeyUp = withBatchedUpdates((event) => {
    if (event.key === KEYS.SPACE) {
      if (this.state.viewModeEnabled) {
        setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);
      } else if (this.state.activeTool.type === "selection") {
        resetCursor(this.interactiveCanvas);
      } else {
        setCursorForShape(this.interactiveCanvas, this.state);
        this.setState({
          selectedElementIds: makeNextSelectedElementIds({}, this.state),
          selectedGroupIds: {},
          editingGroupId: null,
          activeEmbeddable: null
        });
      }
      isHoldingSpace = false;
    }
    if (!event[KEYS.CTRL_OR_CMD] && !this.state.isBindingEnabled) {
      this.setState({ isBindingEnabled: true });
    }
    if (isArrowKey(event.key)) {
      bindOrUnbindLinearElements(
        this.scene.getSelectedElements(this.state).filter(isLinearElement),
        this.scene.getNonDeletedElementsMap(),
        this.scene.getNonDeletedElements(),
        this.scene,
        isBindingEnabled(this.state),
        this.state.selectedLinearElement?.selectedPointsIndices ?? []
      );
      this.setState({ suggestedBindings: [] });
    }
    if (!event.altKey) {
      if (this.flowChartNavigator.isExploring) {
        this.flowChartNavigator.clear();
        this.syncActionResult({ storeAction: StoreAction.CAPTURE });
      }
    }
    if (!event[KEYS.CTRL_OR_CMD]) {
      if (this.flowChartCreator.isCreatingChart) {
        if (this.flowChartCreator.pendingNodes?.length) {
          this.scene.insertElements(this.flowChartCreator.pendingNodes);
        }
        const firstNode = this.flowChartCreator.pendingNodes?.[0];
        if (firstNode) {
          this.setState((prevState) => ({
            selectedElementIds: makeNextSelectedElementIds(
              {
                [firstNode.id]: true
              },
              prevState
            )
          }));
          if (!isElementCompletelyInViewport(
            [firstNode],
            this.canvas.width / window.devicePixelRatio,
            this.canvas.height / window.devicePixelRatio,
            {
              offsetLeft: this.state.offsetLeft,
              offsetTop: this.state.offsetTop,
              scrollX: this.state.scrollX,
              scrollY: this.state.scrollY,
              zoom: this.state.zoom
            },
            this.scene.getNonDeletedElementsMap(),
            this.getEditorUIOffsets()
          )) {
            this.scrollToContent(firstNode, {
              animate: true,
              duration: 300,
              canvasOffsets: this.getEditorUIOffsets()
            });
          }
        }
        this.flowChartCreator.clear();
        this.syncActionResult({ storeAction: StoreAction.CAPTURE });
      }
    }
  });
  // We purposely widen the `tool` type so this helper can be called with
  // any tool without having to type check it
  isToolSupported = (tool) => {
    return this.props.UIOptions.tools?.[tool] !== false;
  };
  setActiveTool = (tool) => {
    if (!this.isToolSupported(tool.type)) {
      console.warn(
        `"${tool.type}" tool is disabled via "UIOptions.canvasActions.tools.${tool.type}"`
      );
      return;
    }
    const nextActiveTool = updateActiveTool(this.state, tool);
    if (nextActiveTool.type === "hand") {
      setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);
    } else if (!isHoldingSpace) {
      setCursorForShape(this.interactiveCanvas, this.state);
    }
    if (isToolIcon(document.activeElement)) {
      this.focusContainer();
    }
    if (!isLinearElementType(nextActiveTool.type)) {
      this.setState({ suggestedBindings: [] });
    }
    if (nextActiveTool.type === "image") {
      this.onImageAction({
        insertOnCanvasDirectly: (tool.type === "image" && tool.insertOnCanvasDirectly) ?? false
      });
    }
    this.setState((prevState) => {
      const commonResets = {
        snapLines: prevState.snapLines.length ? [] : prevState.snapLines,
        originSnapOffset: null,
        activeEmbeddable: null
      };
      if (nextActiveTool.type === "freedraw") {
        this.store.shouldCaptureIncrement();
      }
      if (nextActiveTool.type !== "selection") {
        return {
          ...prevState,
          activeTool: nextActiveTool,
          selectedElementIds: makeNextSelectedElementIds({}, prevState),
          selectedGroupIds: makeNextSelectedElementIds({}, prevState),
          editingGroupId: null,
          multiElement: null,
          ...commonResets
        };
      }
      return {
        ...prevState,
        activeTool: nextActiveTool,
        ...commonResets
      };
    });
  };
  setOpenDialog = (dialogType) => {
    this.setState({ openDialog: dialogType });
  };
  setCursor = (cursor) => {
    setCursor(this.interactiveCanvas, cursor);
  };
  resetCursor = () => {
    resetCursor(this.interactiveCanvas);
  };
  /**
   * returns whether user is making a gesture with >= 2 fingers (points)
   * on o touch screen (not on a trackpad). Currently only relates to Darwin
   * (iOS/iPadOS,MacOS), but may work on other devices in the future if
   * GestureEvent is standardized.
   */
  isTouchScreenMultiTouchGesture = () => {
    return gesture.pointers.size >= 2;
  };
  getName = () => {
    return this.state.name || this.props.name || `${t("labels.untitled")}-${getDateTime()}`;
  };
  // fires only on Safari
  onGestureStart = withBatchedUpdates((event) => {
    event.preventDefault();
    if (this.isTouchScreenMultiTouchGesture()) {
      this.setState({
        selectedElementIds: makeNextSelectedElementIds({}, this.state),
        activeEmbeddable: null
      });
    }
    gesture.initialScale = this.state.zoom.value;
  });
  // fires only on Safari
  onGestureChange = withBatchedUpdates((event) => {
    event.preventDefault();
    if (this.isTouchScreenMultiTouchGesture()) {
      return;
    }
    const initialScale = gesture.initialScale;
    if (initialScale) {
      this.setState((state) => ({
        ...getStateForZoom(
          {
            viewportX: this.lastViewportPosition.x,
            viewportY: this.lastViewportPosition.y,
            nextZoom: getNormalizedZoom(initialScale * event.scale)
          },
          state
        )
      }));
    }
  });
  // fires only on Safari
  onGestureEnd = withBatchedUpdates((event) => {
    event.preventDefault();
    if (this.isTouchScreenMultiTouchGesture()) {
      this.setState({
        previousSelectedElementIds: {},
        selectedElementIds: makeNextSelectedElementIds(
          this.state.previousSelectedElementIds,
          this.state
        )
      });
    }
    gesture.initialScale = null;
  });
  handleTextWysiwyg(element, {
    isExistingElement = false
  }) {
    const elementsMap = this.scene.getElementsMapIncludingDeleted();
    const updateElement = (nextOriginalText, isDeleted) => {
      this.scene.replaceAllElements([
        // Not sure why we include deleted elements as well hence using deleted elements map
        ...this.scene.getElementsIncludingDeleted().map((_element) => {
          if (_element.id === element.id && isTextElement(_element)) {
            return newElementWith(_element, {
              originalText: nextOriginalText,
              isDeleted: isDeleted ?? _element.isDeleted,
              // returns (wrapped) text and new dimensions
              ...refreshTextDimensions(
                _element,
                getContainerElement(_element, elementsMap),
                elementsMap,
                nextOriginalText
              )
            });
          }
          return _element;
        })
      ]);
    };
    textWysiwyg({
      id: element.id,
      canvas: this.canvas,
      getViewportCoords: (x, y) => {
        const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(
          {
            sceneX: x,
            sceneY: y
          },
          this.state
        );
        return [
          viewportX - this.state.offsetLeft,
          viewportY - this.state.offsetTop
        ];
      },
      onChange: withBatchedUpdates((nextOriginalText) => {
        updateElement(nextOriginalText, false);
        if (isNonDeletedElement(element)) {
          updateBoundElements(element, this.scene.getNonDeletedElementsMap());
        }
      }),
      onSubmit: withBatchedUpdates(({ viaKeyboard, nextOriginalText }) => {
        const isDeleted = !nextOriginalText.trim();
        updateElement(nextOriginalText, isDeleted);
        if (!isDeleted && viaKeyboard) {
          const elementIdToSelect = element.containerId ? element.containerId : element.id;
          flushSync(() => {
            this.setState((prevState) => ({
              selectedElementIds: makeNextSelectedElementIds(
                {
                  ...prevState.selectedElementIds,
                  [elementIdToSelect]: true
                },
                prevState
              )
            }));
          });
        }
        if (isDeleted) {
          fixBindingsAfterDeletion(this.scene.getNonDeletedElements(), [
            element
          ]);
        }
        if (!isDeleted || isExistingElement) {
          this.store.shouldCaptureIncrement();
        }
        this.setState({
          newElement: null,
          editingTextElement: null
        });
        if (this.state.activeTool.locked) {
          setCursorForShape(this.interactiveCanvas, this.state);
        }
        this.focusContainer();
      }),
      element,
      excalidrawContainer: this.excalidrawContainerRef.current,
      app: this,
      // when text is selected, it's hard (at least on iOS) to re-position the
      // caret (i.e. deselect). There's not much use for always selecting
      // the text on edit anyway (and users can select-all from contextmenu
      // if needed)
      autoSelect: !this.device.isTouchScreen
    });
    this.deselectElements();
    updateElement(element.originalText, false);
  }
  deselectElements() {
    this.setState({
      selectedElementIds: makeNextSelectedElementIds({}, this.state),
      selectedGroupIds: {},
      editingGroupId: null,
      activeEmbeddable: null
    });
  }
  getTextElementAtPosition(x, y) {
    const element = this.getElementAtPosition(x, y, {
      includeBoundTextElement: true
    });
    if (element && isTextElement(element) && !element.isDeleted) {
      return element;
    }
    return null;
  }
  getElementAtPosition(x, y, opts) {
    const allHitElements = this.getElementsAtPosition(
      x,
      y,
      opts?.includeBoundTextElement,
      opts?.includeLockedElements
    );
    if (allHitElements.length > 1) {
      if (opts?.preferSelected) {
        for (let index = allHitElements.length - 1; index > -1; index--) {
          if (this.state.selectedElementIds[allHitElements[index].id]) {
            return allHitElements[index];
          }
        }
      }
      const elementWithHighestZIndex = allHitElements[allHitElements.length - 1];
      return hitElementItself({
        x,
        y,
        element: elementWithHighestZIndex,
        shape: getElementShape(
          elementWithHighestZIndex,
          this.scene.getNonDeletedElementsMap()
        ),
        // when overlapping, we would like to be more precise
        // this also avoids the need to update past tests
        threshold: this.getElementHitThreshold() / 2,
        frameNameBound: isFrameLikeElement(elementWithHighestZIndex) ? this.frameNameBoundsCache.get(elementWithHighestZIndex) : null
      }) ? elementWithHighestZIndex : allHitElements[allHitElements.length - 2];
    }
    if (allHitElements.length === 1) {
      return allHitElements[0];
    }
    return null;
  }
  getElementsAtPosition(x, y, includeBoundTextElement = false, includeLockedElements = false) {
    const iframeLikes = [];
    const elementsMap = this.scene.getNonDeletedElementsMap();
    const elements = (includeBoundTextElement && includeLockedElements ? this.scene.getNonDeletedElements() : this.scene.getNonDeletedElements().filter(
      (element) => (includeLockedElements || !element.locked) && (includeBoundTextElement || !(isTextElement(element) && element.containerId))
    )).filter((el) => this.hitElement(x, y, el)).filter((element) => {
      const containingFrame = getContainingFrame(element, elementsMap);
      return containingFrame && this.state.frameRendering.enabled && this.state.frameRendering.clip ? isCursorInFrame({ x, y }, containingFrame, elementsMap) : true;
    }).filter((el) => {
      if (isIframeElement(el)) {
        iframeLikes.push(el);
        return false;
      }
      return true;
    }).concat(iframeLikes);
    return elements;
  }
  getElementHitThreshold() {
    return DEFAULT_COLLISION_THRESHOLD / this.state.zoom.value;
  }
  hitElement(x, y, element, considerBoundingBox = true) {
    if (considerBoundingBox && this.state.selectedElementIds[element.id] && shouldShowBoundingBox([element], this.state)) {
      const selectionShape = getSelectionBoxShape(
        element,
        this.scene.getNonDeletedElementsMap(),
        this.getElementHitThreshold()
      );
      return isPointInShape(pointFrom(x, y), selectionShape);
    }
    const hitBoundTextOfElement = hitElementBoundText(
      x,
      y,
      getBoundTextShape(element, this.scene.getNonDeletedElementsMap())
    );
    if (hitBoundTextOfElement) {
      return true;
    }
    return hitElementItself({
      x,
      y,
      element,
      shape: getElementShape(element, this.scene.getNonDeletedElementsMap()),
      threshold: this.getElementHitThreshold(),
      frameNameBound: isFrameLikeElement(element) ? this.frameNameBoundsCache.get(element) : null
    });
  }
  getTextBindableContainerAtPosition(x, y) {
    const elements = this.scene.getNonDeletedElements();
    const selectedElements = this.scene.getSelectedElements(this.state);
    if (selectedElements.length === 1) {
      return isTextBindableContainer(selectedElements[0], false) ? selectedElements[0] : null;
    }
    let hitElement = null;
    for (let index = elements.length - 1; index >= 0; --index) {
      if (elements[index].isDeleted) {
        continue;
      }
      const [x1, y1, x2, y2] = getElementAbsoluteCoords(
        elements[index],
        this.scene.getNonDeletedElementsMap()
      );
      if (isArrowElement(elements[index]) && hitElementItself({
        x,
        y,
        element: elements[index],
        shape: getElementShape(
          elements[index],
          this.scene.getNonDeletedElementsMap()
        ),
        threshold: this.getElementHitThreshold()
      })) {
        hitElement = elements[index];
        break;
      } else if (x1 < x && x < x2 && y1 < y && y < y2) {
        hitElement = elements[index];
        break;
      }
    }
    return isTextBindableContainer(hitElement, false) ? hitElement : null;
  }
  startTextEditing = ({
    sceneX,
    sceneY,
    insertAtParentCenter = true,
    container,
    autoEdit = true
  }) => {
    let shouldBindToContainer = false;
    let parentCenterPosition = insertAtParentCenter && this.getTextWysiwygSnappedToCenterPosition(
      sceneX,
      sceneY,
      this.state,
      container
    );
    if (container && parentCenterPosition) {
      const boundTextElementToContainer = getBoundTextElement(
        container,
        this.scene.getNonDeletedElementsMap()
      );
      if (!boundTextElementToContainer) {
        shouldBindToContainer = true;
      }
    }
    let existingTextElement = null;
    const selectedElements = this.scene.getSelectedElements(this.state);
    if (selectedElements.length === 1) {
      if (isTextElement(selectedElements[0])) {
        existingTextElement = selectedElements[0];
      } else if (container) {
        existingTextElement = getBoundTextElement(
          selectedElements[0],
          this.scene.getNonDeletedElementsMap()
        );
      } else {
        existingTextElement = this.getTextElementAtPosition(sceneX, sceneY);
      }
    } else {
      existingTextElement = this.getTextElementAtPosition(sceneX, sceneY);
    }
    const fontFamily = existingTextElement?.fontFamily || this.state.currentItemFontFamily;
    const lineHeight = existingTextElement?.lineHeight || getLineHeight(fontFamily);
    const fontSize = this.state.currentItemFontSize;
    if (!existingTextElement && shouldBindToContainer && container && !isArrowElement(container)) {
      const fontString = {
        fontSize,
        fontFamily
      };
      const minWidth = getApproxMinLineWidth(
        getFontString(fontString),
        lineHeight
      );
      const minHeight = getApproxMinLineHeight(fontSize, lineHeight);
      const newHeight = Math.max(container.height, minHeight);
      const newWidth = Math.max(container.width, minWidth);
      mutateElement(container, { height: newHeight, width: newWidth });
      sceneX = container.x + newWidth / 2;
      sceneY = container.y + newHeight / 2;
      if (parentCenterPosition) {
        parentCenterPosition = this.getTextWysiwygSnappedToCenterPosition(
          sceneX,
          sceneY,
          this.state,
          container
        );
      }
    }
    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({
      x: sceneX,
      y: sceneY
    });
    const element = existingTextElement ? existingTextElement : newTextElement({
      x: parentCenterPosition ? parentCenterPosition.elementCenterX : sceneX,
      y: parentCenterPosition ? parentCenterPosition.elementCenterY : sceneY,
      strokeColor: this.state.currentItemStrokeColor,
      backgroundColor: this.state.currentItemBackgroundColor,
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roughness: this.state.currentItemRoughness,
      opacity: this.state.currentItemOpacity,
      text: "",
      fontSize,
      fontFamily,
      textAlign: parentCenterPosition ? "center" : this.state.currentItemTextAlign,
      verticalAlign: parentCenterPosition ? VERTICAL_ALIGN.MIDDLE : DEFAULT_VERTICAL_ALIGN,
      containerId: shouldBindToContainer ? container?.id : void 0,
      groupIds: container?.groupIds ?? [],
      lineHeight,
      angle: container?.angle ?? 0,
      frameId: topLayerFrame ? topLayerFrame.id : null
    });
    if (!existingTextElement && shouldBindToContainer && container) {
      mutateElement(container, {
        boundElements: (container.boundElements || []).concat({
          type: "text",
          id: element.id
        })
      });
    }
    this.setState({ editingTextElement: element });
    if (!existingTextElement) {
      if (container && shouldBindToContainer) {
        const containerIndex = this.scene.getElementIndex(container.id);
        this.scene.insertElementAtIndex(element, containerIndex + 1);
      } else {
        this.scene.insertElement(element);
      }
    }
    if (autoEdit || existingTextElement || container) {
      this.handleTextWysiwyg(element, {
        isExistingElement: !!existingTextElement
      });
    } else {
      this.setState({
        newElement: element,
        multiElement: null
      });
    }
  };
  handleCanvasDoubleClick = (event) => {
    if (this.state.multiElement) {
      return;
    }
    if (this.state.activeTool.type !== "selection") {
      return;
    }
    const selectedElements = this.scene.getSelectedElements(this.state);
    if (selectedElements.length === 1 && isLinearElement(selectedElements[0])) {
      if (event[KEYS.CTRL_OR_CMD] && (!this.state.editingLinearElement || this.state.editingLinearElement.elementId !== selectedElements[0].id) && !isElbowArrow(selectedElements[0])) {
        this.store.shouldCaptureIncrement();
        this.setState({
          editingLinearElement: new LinearElementEditor(selectedElements[0])
        });
        return;
      }
    }
    resetCursor(this.interactiveCanvas);
    let { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(
      event,
      this.state
    );
    const selectedGroupIds = getSelectedGroupIds(this.state);
    if (selectedGroupIds.length > 0) {
      const hitElement = this.getElementAtPosition(sceneX, sceneY);
      const selectedGroupId = hitElement && getSelectedGroupIdForElement(hitElement, this.state.selectedGroupIds);
      if (selectedGroupId) {
        this.store.shouldCaptureIncrement();
        this.setState((prevState) => ({
          ...prevState,
          ...selectGroupsForSelectedElements(
            {
              editingGroupId: selectedGroupId,
              selectedElementIds: { [hitElement.id]: true }
            },
            this.scene.getNonDeletedElements(),
            prevState,
            this
          )
        }));
        return;
      }
    }
    resetCursor(this.interactiveCanvas);
    if (!event[KEYS.CTRL_OR_CMD] && !this.state.viewModeEnabled) {
      const hitElement = this.getElementAtPosition(sceneX, sceneY);
      if (isIframeLikeElement(hitElement)) {
        this.setState({
          activeEmbeddable: { element: hitElement, state: "active" }
        });
        return;
      }
      const container = this.getTextBindableContainerAtPosition(sceneX, sceneY);
      if (container) {
        if (hasBoundTextElement(container) || !isTransparent(container.backgroundColor) || hitElementItself({
          x: sceneX,
          y: sceneY,
          element: container,
          shape: getElementShape(
            container,
            this.scene.getNonDeletedElementsMap()
          ),
          threshold: this.getElementHitThreshold()
        })) {
          const midPoint = getContainerCenter(
            container,
            this.state,
            this.scene.getNonDeletedElementsMap()
          );
          sceneX = midPoint.x;
          sceneY = midPoint.y;
        }
      }
      this.startTextEditing({
        sceneX,
        sceneY,
        insertAtParentCenter: !event.altKey,
        container
      });
    }
  };
  getElementLinkAtPosition = (scenePointer, hitElement) => {
    const elements = this.scene.getNonDeletedElements().slice().reverse();
    let hitElementIndex = Infinity;
    return elements.find((element, index) => {
      if (hitElement && element.id === hitElement.id) {
        hitElementIndex = index;
      }
      return element.link && index <= hitElementIndex && isPointHittingLink(
        element,
        this.scene.getNonDeletedElementsMap(),
        this.state,
        pointFrom(scenePointer.x, scenePointer.y),
        this.device.editor.isMobile
      );
    });
  };
  redirectToLink = (event, isTouchScreen) => {
    const draggedDistance = pointDistance(
      pointFrom(
        this.lastPointerDownEvent.clientX,
        this.lastPointerDownEvent.clientY
      ),
      pointFrom(
        this.lastPointerUpEvent.clientX,
        this.lastPointerUpEvent.clientY
      )
    );
    if (!this.hitLinkElement || // For touch screen allow dragging threshold else strict check
    isTouchScreen && draggedDistance > DRAGGING_THRESHOLD || !isTouchScreen && draggedDistance !== 0) {
      return;
    }
    const lastPointerDownCoords = viewportCoordsToSceneCoords(
      this.lastPointerDownEvent,
      this.state
    );
    const elementsMap = this.scene.getNonDeletedElementsMap();
    const lastPointerDownHittingLinkIcon = isPointHittingLink(
      this.hitLinkElement,
      elementsMap,
      this.state,
      pointFrom(lastPointerDownCoords.x, lastPointerDownCoords.y),
      this.device.editor.isMobile
    );
    const lastPointerUpCoords = viewportCoordsToSceneCoords(
      this.lastPointerUpEvent,
      this.state
    );
    const lastPointerUpHittingLinkIcon = isPointHittingLink(
      this.hitLinkElement,
      elementsMap,
      this.state,
      pointFrom(lastPointerUpCoords.x, lastPointerUpCoords.y),
      this.device.editor.isMobile
    );
    if (lastPointerDownHittingLinkIcon && lastPointerUpHittingLinkIcon) {
      let url = this.hitLinkElement.link;
      if (url) {
        url = normalizeLink(url);
        let customEvent;
        if (this.props.onLinkOpen) {
          customEvent = wrapEvent("excalidraw-link" /* EXCALIDRAW_LINK */, event.nativeEvent);
          this.props.onLinkOpen(
            {
              ...this.hitLinkElement,
              link: url
            },
            customEvent
          );
        }
        if (!customEvent?.defaultPrevented) {
          const target = isLocalLink(url) ? "_self" : "_blank";
          const newWindow = window.open(void 0, target);
          if (newWindow) {
            newWindow.opener = null;
            newWindow.location = url;
          }
        }
      }
    }
  };
  getTopLayerFrameAtSceneCoords = (sceneCoords) => {
    const elementsMap = this.scene.getNonDeletedElementsMap();
    const frames = this.scene.getNonDeletedFramesLikes().filter(
      (frame) => isCursorInFrame(sceneCoords, frame, elementsMap)
    );
    return frames.length ? frames[frames.length - 1] : null;
  };
  handleCanvasPointerMove = (event) => {
    this.savePointer(event.clientX, event.clientY, this.state.cursorButton);
    this.lastPointerMoveEvent = event.nativeEvent;
    if (gesture.pointers.has(event.pointerId)) {
      gesture.pointers.set(event.pointerId, {
        x: event.clientX,
        y: event.clientY
      });
    }
    const initialScale = gesture.initialScale;
    if (gesture.pointers.size === 2 && gesture.lastCenter && initialScale && gesture.initialDistance) {
      const center = getCenter(gesture.pointers);
      const deltaX = center.x - gesture.lastCenter.x;
      const deltaY = center.y - gesture.lastCenter.y;
      gesture.lastCenter = center;
      const distance3 = getDistance(Array.from(gesture.pointers.values()));
      const scaleFactor = this.state.activeTool.type === "freedraw" && this.state.penMode ? 1 : distance3 / gesture.initialDistance;
      const nextZoom = scaleFactor ? getNormalizedZoom(initialScale * scaleFactor) : this.state.zoom.value;
      this.setState((state) => {
        const zoomState = getStateForZoom(
          {
            viewportX: center.x,
            viewportY: center.y,
            nextZoom
          },
          state
        );
        this.translateCanvas({
          zoom: zoomState.zoom,
          // 2x multiplier is just a magic number that makes this work correctly
          // on touchscreen devices (note: if we get report that panning is slower/faster
          // than actual movement, consider swapping with devicePixelRatio)
          scrollX: zoomState.scrollX + 2 * (deltaX / nextZoom),
          scrollY: zoomState.scrollY + 2 * (deltaY / nextZoom),
          shouldCacheIgnoreZoom: true
        });
      });
      this.resetShouldCacheIgnoreZoomDebounced();
    } else {
      gesture.lastCenter = gesture.initialDistance = gesture.initialScale = null;
    }
    if (isHoldingSpace || isPanning || isDraggingScrollBar || isHandToolActive(this.state)) {
      return;
    }
    const isPointerOverScrollBars = isOverScrollBars(
      currentScrollBars,
      event.clientX - this.state.offsetLeft,
      event.clientY - this.state.offsetTop
    );
    const isOverScrollBar = isPointerOverScrollBars.isOverEither;
    if (!this.state.newElement && !this.state.selectionElement && !this.state.selectedElementsAreBeingDragged && !this.state.multiElement) {
      if (isOverScrollBar) {
        resetCursor(this.interactiveCanvas);
      } else {
        setCursorForShape(this.interactiveCanvas, this.state);
      }
    }
    const scenePointer = viewportCoordsToSceneCoords(event, this.state);
    const { x: scenePointerX, y: scenePointerY } = scenePointer;
    if (!this.state.newElement && isActiveToolNonLinearSnappable(this.state.activeTool.type)) {
      const { originOffset, snapLines } = getSnapLinesAtPointer(
        this.scene.getNonDeletedElements(),
        this,
        {
          x: scenePointerX,
          y: scenePointerY
        },
        event,
        this.scene.getNonDeletedElementsMap()
      );
      this.setState((prevState) => {
        const nextSnapLines = updateStable(prevState.snapLines, snapLines);
        const nextOriginOffset = prevState.originSnapOffset ? updateStable(prevState.originSnapOffset, originOffset) : originOffset;
        if (prevState.snapLines === nextSnapLines && prevState.originSnapOffset === nextOriginOffset) {
          return null;
        }
        return {
          snapLines: nextSnapLines,
          originSnapOffset: nextOriginOffset
        };
      });
    } else if (!this.state.newElement && !this.state.selectedElementsAreBeingDragged && !this.state.selectionElement) {
      this.setState((prevState) => {
        if (prevState.snapLines.length) {
          return {
            snapLines: []
          };
        }
        return null;
      });
    }
    if (this.state.editingLinearElement && !this.state.editingLinearElement.isDragging) {
      const editingLinearElement = LinearElementEditor.handlePointerMove(
        event,
        scenePointerX,
        scenePointerY,
        this,
        this.scene.getNonDeletedElementsMap()
      );
      if (editingLinearElement && editingLinearElement !== this.state.editingLinearElement) {
        flushSync(() => {
          this.setState({
            editingLinearElement
          });
        });
      }
      if (editingLinearElement?.lastUncommittedPoint != null) {
        this.maybeSuggestBindingAtCursor(scenePointer);
      } else {
        flushSync(() => {
          this.setState({ suggestedBindings: [] });
        });
      }
    }
    if (isBindingElementType(this.state.activeTool.type)) {
      const { newElement: newElement2 } = this.state;
      if (isBindingElement(newElement2, false)) {
        this.maybeSuggestBindingsForLinearElementAtCoords(
          newElement2,
          [scenePointer],
          this.state.startBoundElement
        );
      } else {
        this.maybeSuggestBindingAtCursor(scenePointer);
      }
    }
    if (this.state.multiElement) {
      const { multiElement } = this.state;
      const { x: rx, y: ry } = multiElement;
      const { points, lastCommittedPoint } = multiElement;
      const lastPoint = points[points.length - 1];
      setCursorForShape(this.interactiveCanvas, this.state);
      if (lastPoint === lastCommittedPoint) {
        if (pointDistance(
          pointFrom(scenePointerX - rx, scenePointerY - ry),
          lastPoint
        ) >= LINE_CONFIRM_THRESHOLD) {
          mutateElement(
            multiElement,
            {
              points: [
                ...points,
                pointFrom(scenePointerX - rx, scenePointerY - ry)
              ]
            },
            false
          );
        } else {
          setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
        }
      } else if (points.length > 2 && lastCommittedPoint && pointDistance(
        pointFrom(scenePointerX - rx, scenePointerY - ry),
        lastCommittedPoint
      ) < LINE_CONFIRM_THRESHOLD) {
        setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
        mutateElement(
          multiElement,
          {
            points: points.slice(0, -1)
          },
          false
        );
      } else {
        const [gridX, gridY] = getGridPoint(
          scenePointerX,
          scenePointerY,
          event[KEYS.CTRL_OR_CMD] || isElbowArrow(multiElement) ? null : this.getEffectiveGridSize()
        );
        const [lastCommittedX, lastCommittedY] = multiElement?.lastCommittedPoint ?? [0, 0];
        let dxFromLastCommitted = gridX - rx - lastCommittedX;
        let dyFromLastCommitted = gridY - ry - lastCommittedY;
        if (shouldRotateWithDiscreteAngle(event)) {
          ({ width: dxFromLastCommitted, height: dyFromLastCommitted } = getLockedLinearCursorAlignSize(
            // actual coordinate of the last committed point
            lastCommittedX + rx,
            lastCommittedY + ry,
            // cursor-grid coordinate
            gridX,
            gridY
          ));
        }
        if (isPathALoop(points, this.state.zoom.value)) {
          setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
        }
        if (isElbowArrow(multiElement)) {
          mutateElbowArrow(
            multiElement,
            this.scene.getNonDeletedElementsMap(),
            [
              ...points.slice(0, -1),
              pointFrom(
                lastCommittedX + dxFromLastCommitted,
                lastCommittedY + dyFromLastCommitted
              )
            ],
            void 0,
            void 0,
            {
              isDragging: true,
              informMutation: false
            }
          );
        } else {
          mutateElement(
            multiElement,
            {
              points: [
                ...points.slice(0, -1),
                pointFrom(
                  lastCommittedX + dxFromLastCommitted,
                  lastCommittedY + dyFromLastCommitted
                )
              ]
            },
            false
          );
        }
        this.triggerRender(false);
      }
      return;
    }
    const hasDeselectedButton = Boolean(event.buttons);
    if (hasDeselectedButton || this.state.activeTool.type !== "selection" && this.state.activeTool.type !== "text" && this.state.activeTool.type !== "eraser") {
      return;
    }
    const elements = this.scene.getNonDeletedElements();
    const selectedElements = this.scene.getSelectedElements(this.state);
    if (selectedElements.length === 1 && !isOverScrollBar && !this.state.editingLinearElement) {
      if (this.state.selectedLinearElement) {
        this.handleHoverSelectedLinearElement(
          this.state.selectedLinearElement,
          scenePointerX,
          scenePointerY
        );
      }
      if ((!this.state.selectedLinearElement || this.state.selectedLinearElement.hoverPointIndex === -1) && !(selectedElements.length === 1 && isElbowArrow(selectedElements[0]))) {
        const elementWithTransformHandleType = getElementWithTransformHandleType(
          elements,
          this.state,
          scenePointerX,
          scenePointerY,
          this.state.zoom,
          event.pointerType,
          this.scene.getNonDeletedElementsMap(),
          this.device
        );
        if (elementWithTransformHandleType && elementWithTransformHandleType.transformHandleType) {
          setCursor(
            this.interactiveCanvas,
            getCursorForResizingElement(elementWithTransformHandleType)
          );
          return;
        }
      }
    } else if (selectedElements.length > 1 && !isOverScrollBar) {
      const transformHandleType = getTransformHandleTypeFromCoords(
        getCommonBounds(selectedElements),
        scenePointerX,
        scenePointerY,
        this.state.zoom,
        event.pointerType,
        this.device
      );
      if (transformHandleType) {
        setCursor(
          this.interactiveCanvas,
          getCursorForResizingElement({
            transformHandleType
          })
        );
        return;
      }
    }
    const hitElement = this.getElementAtPosition(
      scenePointer.x,
      scenePointer.y
    );
    this.hitLinkElement = this.getElementLinkAtPosition(
      scenePointer,
      hitElement
    );
    if (isEraserActive(this.state)) {
      return;
    }
    if (this.hitLinkElement && !this.state.selectedElementIds[this.hitLinkElement.id]) {
      setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
      showHyperlinkTooltip(
        this.hitLinkElement,
        this.state,
        this.scene.getNonDeletedElementsMap()
      );
    } else {
      hideHyperlinkToolip();
      if (hitElement && (hitElement.link || isEmbeddableElement(hitElement)) && this.state.selectedElementIds[hitElement.id] && !this.state.contextMenu && !this.state.showHyperlinkPopup) {
        this.setState({ showHyperlinkPopup: "info" });
      } else if (this.state.activeTool.type === "text") {
        setCursor(
          this.interactiveCanvas,
          isTextElement(hitElement) ? CURSOR_TYPE.TEXT : CURSOR_TYPE.CROSSHAIR
        );
      } else if (this.state.viewModeEnabled) {
        setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);
      } else if (isOverScrollBar) {
        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);
      } else if (this.state.selectedLinearElement) {
        this.handleHoverSelectedLinearElement(
          this.state.selectedLinearElement,
          scenePointerX,
          scenePointerY
        );
      } else if (
        // if using cmd/ctrl, we're not dragging
        !event[KEYS.CTRL_OR_CMD]
      ) {
        if ((hitElement || this.isHittingCommonBoundingBoxOfSelectedElements(
          scenePointer,
          selectedElements
        )) && !hitElement?.locked) {
          if (hitElement && isIframeLikeElement(hitElement) && this.isIframeLikeElementCenter(
            hitElement,
            event,
            scenePointerX,
            scenePointerY
          )) {
            setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
            this.setState({
              activeEmbeddable: { element: hitElement, state: "hover" }
            });
          } else {
            setCursor(this.interactiveCanvas, CURSOR_TYPE.MOVE);
            if (this.state.activeEmbeddable?.state === "hover") {
              this.setState({ activeEmbeddable: null });
            }
          }
        }
      } else {
        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);
      }
    }
  };
  handleEraser = (event, pointerDownState, scenePointer) => {
    this.eraserTrail.addPointToPath(scenePointer.x, scenePointer.y);
    let didChange = false;
    const processedGroups = /* @__PURE__ */ new Set();
    const nonDeletedElements = this.scene.getNonDeletedElements();
    const processElements = (elements) => {
      for (const element of elements) {
        if (element.locked) {
          return;
        }
        if (event.altKey) {
          if (this.elementsPendingErasure.delete(element.id)) {
            didChange = true;
          }
        } else if (!this.elementsPendingErasure.has(element.id)) {
          didChange = true;
          this.elementsPendingErasure.add(element.id);
        }
        if (didChange && element.groupIds?.length) {
          const shallowestGroupId = element.groupIds.at(-1);
          if (!processedGroups.has(shallowestGroupId)) {
            processedGroups.add(shallowestGroupId);
            const elems = getElementsInGroup(
              nonDeletedElements,
              shallowestGroupId
            );
            for (const elem of elems) {
              if (event.altKey) {
                this.elementsPendingErasure.delete(elem.id);
              } else {
                this.elementsPendingErasure.add(elem.id);
              }
            }
          }
        }
      }
    };
    const distance3 = pointDistance(
      pointFrom(pointerDownState.lastCoords.x, pointerDownState.lastCoords.y),
      pointFrom(scenePointer.x, scenePointer.y)
    );
    const threshold = this.getElementHitThreshold();
    const p = { ...pointerDownState.lastCoords };
    let samplingInterval = 0;
    while (samplingInterval <= distance3) {
      const hitElements = this.getElementsAtPosition(p.x, p.y);
      processElements(hitElements);
      if (samplingInterval === distance3) {
        break;
      }
      samplingInterval = Math.min(samplingInterval + threshold, distance3);
      const distanceRatio = samplingInterval / distance3;
      const nextX = (1 - distanceRatio) * p.x + distanceRatio * scenePointer.x;
      const nextY = (1 - distanceRatio) * p.y + distanceRatio * scenePointer.y;
      p.x = nextX;
      p.y = nextY;
    }
    pointerDownState.lastCoords.x = scenePointer.x;
    pointerDownState.lastCoords.y = scenePointer.y;
    if (didChange) {
      for (const element of this.scene.getNonDeletedElements()) {
        if (isBoundToContainer(element) && (this.elementsPendingErasure.has(element.id) || this.elementsPendingErasure.has(element.containerId))) {
          if (event.altKey) {
            this.elementsPendingErasure.delete(element.id);
            this.elementsPendingErasure.delete(element.containerId);
          } else {
            this.elementsPendingErasure.add(element.id);
            this.elementsPendingErasure.add(element.containerId);
          }
        }
      }
      this.elementsPendingErasure = new Set(this.elementsPendingErasure);
      this.triggerRender();
    }
  };
  // set touch moving for mobile context menu
  handleTouchMove = (event) => {
    invalidateContextMenu = true;
  };
  handleHoverSelectedLinearElement(linearElementEditor, scenePointerX, scenePointerY) {
    const elementsMap = this.scene.getNonDeletedElementsMap();
    const element = LinearElementEditor.getElement(
      linearElementEditor.elementId,
      elementsMap
    );
    if (!element) {
      return;
    }
    if (this.state.selectedLinearElement) {
      let hoverPointIndex = -1;
      let segmentMidPointHoveredCoords = null;
      if (hitElementItself({
        x: scenePointerX,
        y: scenePointerY,
        element,
        shape: getElementShape(
          element,
          this.scene.getNonDeletedElementsMap()
        )
      })) {
        hoverPointIndex = LinearElementEditor.getPointIndexUnderCursor(
          element,
          elementsMap,
          this.state.zoom,
          scenePointerX,
          scenePointerY
        );
        segmentMidPointHoveredCoords = LinearElementEditor.getSegmentMidpointHitCoords(
          linearElementEditor,
          { x: scenePointerX, y: scenePointerY },
          this.state,
          this.scene.getNonDeletedElementsMap()
        );
        if (hoverPointIndex >= 0 || segmentMidPointHoveredCoords) {
          setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
        } else if (this.hitElement(scenePointerX, scenePointerY, element)) {
          setCursor(this.interactiveCanvas, CURSOR_TYPE.MOVE);
        }
      } else if (this.hitElement(scenePointerX, scenePointerY, element)) {
        if (!isElbowArrow(element) || !(element.startBinding || element.endBinding)) {
          setCursor(this.interactiveCanvas, CURSOR_TYPE.MOVE);
        }
      }
      if (this.state.selectedLinearElement.hoverPointIndex !== hoverPointIndex) {
        this.setState({
          selectedLinearElement: {
            ...this.state.selectedLinearElement,
            hoverPointIndex
          }
        });
      }
      if (!LinearElementEditor.arePointsEqual(
        this.state.selectedLinearElement.segmentMidPointHoveredCoords,
        segmentMidPointHoveredCoords
      )) {
        this.setState({
          selectedLinearElement: {
            ...this.state.selectedLinearElement,
            segmentMidPointHoveredCoords
          }
        });
      }
    } else {
      setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);
    }
  }
  handleCanvasPointerDown = (event) => {
    this.maybeCleanupAfterMissingPointerUp(event.nativeEvent);
    this.maybeUnfollowRemoteUser();
    if (this.state.searchMatches) {
      this.setState((state) => ({
        searchMatches: state.searchMatches.map((searchMatch) => ({
          ...searchMatch,
          focus: false
        }))
      }));
      jotaiStore.set(searchItemInFocusAtom, null);
    }
    if (this.state.contextMenu) {
      this.setState({ contextMenu: null });
    }
    if (this.state.snapLines) {
      this.setAppState({ snapLines: [] });
    }
    this.updateGestureOnPointerDown(event);
    if (event.pointerType === "touch" && this.state.newElement && this.state.newElement.type === "freedraw") {
      const element = this.state.newElement;
      this.updateScene({
        ...element.points.length < 10 ? {
          elements: this.scene.getElementsIncludingDeleted().filter((el) => el.id !== element.id)
        } : {},
        appState: {
          newElement: null,
          editingTextElement: null,
          startBoundElement: null,
          suggestedBindings: [],
          selectedElementIds: makeNextSelectedElementIds(
            Object.keys(this.state.selectedElementIds).filter((key) => key !== element.id).reduce((obj, key) => {
              obj[key] = this.state.selectedElementIds[key];
              return obj;
            }, {}),
            this.state
          )
        },
        storeAction: StoreAction.UPDATE
      });
      return;
    }
    const selection = document.getSelection();
    if (selection?.anchorNode) {
      selection.removeAllRanges();
    }
    this.maybeOpenContextMenuAfterPointerDownOnTouchDevices(event);
    if (!this.state.penDetected && event.pointerType === "pen") {
      this.setState((prevState) => {
        return {
          penMode: true,
          penDetected: true
        };
      });
    }
    if (!this.device.isTouchScreen && ["pen", "touch"].includes(event.pointerType)) {
      this.device = updateObject(this.device, { isTouchScreen: true });
    }
    if (isPanning) {
      return;
    }
    this.lastPointerDownEvent = event;
    if (this.handleCanvasPanUsingWheelOrSpaceDrag(event)) {
      return;
    }
    this.setState({
      lastPointerDownWith: event.pointerType,
      cursorButton: "down"
    });
    this.savePointer(event.clientX, event.clientY, "down");
    if (event.button === POINTER_BUTTON.ERASER && this.state.activeTool.type !== TOOL_TYPE.eraser) {
      this.setState(
        {
          activeTool: updateActiveTool(this.state, {
            type: TOOL_TYPE.eraser,
            lastActiveToolBeforeEraser: this.state.activeTool
          })
        },
        () => {
          this.handleCanvasPointerDown(event);
          const onPointerUp2 = () => {
            unsubPointerUp();
            unsubCleanup?.();
            if (isEraserActive(this.state)) {
              this.setState({
                activeTool: updateActiveTool(this.state, {
                  ...this.state.activeTool.lastActiveTool || {
                    type: TOOL_TYPE.selection
                  },
                  lastActiveToolBeforeEraser: null
                })
              });
            }
          };
          const unsubPointerUp = addEventListener(
            window,
            "pointerup" /* POINTER_UP */,
            onPointerUp2,
            {
              once: true
            }
          );
          let unsubCleanup;
          requestAnimationFrame(() => {
            unsubCleanup = this.missingPointerEventCleanupEmitter.once(onPointerUp2);
          });
        }
      );
      return;
    }
    if (event.button !== POINTER_BUTTON.MAIN && event.button !== POINTER_BUTTON.TOUCH && event.button !== POINTER_BUTTON.ERASER) {
      return;
    }
    if (gesture.pointers.size > 1) {
      return;
    }
    const pointerDownState = this.initialPointerDownState(event);
    this.setState({
      selectedElementsAreBeingDragged: false
    });
    if (this.handleDraggingScrollBar(event, pointerDownState)) {
      return;
    }
    this.clearSelectionIfNotUsingSelection();
    this.updateBindingEnabledOnPointerMove(event);
    if (this.handleSelectionOnPointerDown(event, pointerDownState)) {
      return;
    }
    const allowOnPointerDown = !this.state.penMode || event.pointerType !== "touch" || this.state.activeTool.type === "selection" || this.state.activeTool.type === "text" || this.state.activeTool.type === "image";
    if (!allowOnPointerDown) {
      return;
    }
    if (this.state.activeTool.type === "text") {
      this.handleTextOnPointerDown(event, pointerDownState);
    } else if (this.state.activeTool.type === "arrow" || this.state.activeTool.type === "line") {
      this.handleLinearElementOnPointerDown(
        event,
        this.state.activeTool.type,
        pointerDownState
      );
    } else if (this.state.activeTool.type === "image") {
      setCursor(this.interactiveCanvas, CURSOR_TYPE.CROSSHAIR);
      const pendingImageElement = this.state.pendingImageElementId && this.scene.getElement(this.state.pendingImageElementId);
      if (!pendingImageElement) {
        return;
      }
      this.setState({
        newElement: pendingImageElement,
        pendingImageElementId: null,
        multiElement: null
      });
      const { x, y } = viewportCoordsToSceneCoords(event, this.state);
      const frame = this.getTopLayerFrameAtSceneCoords({ x, y });
      mutateElement(pendingImageElement, {
        x,
        y,
        frameId: frame ? frame.id : null
      });
    } else if (this.state.activeTool.type === "freedraw") {
      this.handleFreeDrawElementOnPointerDown(
        event,
        this.state.activeTool.type,
        pointerDownState
      );
    } else if (this.state.activeTool.type === "custom") {
      setCursorForShape(this.interactiveCanvas, this.state);
    } else if (this.state.activeTool.type === TOOL_TYPE.frame || this.state.activeTool.type === TOOL_TYPE.magicframe) {
      this.createFrameElementOnPointerDown(
        pointerDownState,
        this.state.activeTool.type
      );
    } else if (this.state.activeTool.type === "laser") {
      this.laserTrails.startPath(
        pointerDownState.lastCoords.x,
        pointerDownState.lastCoords.y
      );
    } else if (this.state.activeTool.type !== "eraser" && this.state.activeTool.type !== "hand") {
      this.createGenericElementOnPointerDown(
        this.state.activeTool.type,
        pointerDownState
      );
    }
    this.props?.onPointerDown?.(this.state.activeTool, pointerDownState);
    this.onPointerDownEmitter.trigger(
      this.state.activeTool,
      pointerDownState,
      event
    );
    if (this.state.activeTool.type === "eraser") {
      this.eraserTrail.startPath(
        pointerDownState.lastCoords.x,
        pointerDownState.lastCoords.y
      );
    }
    const onPointerMove = this.onPointerMoveFromPointerDownHandler(pointerDownState);
    const onPointerUp = this.onPointerUpFromPointerDownHandler(pointerDownState);
    const onKeyDown = this.onKeyDownFromPointerDownHandler(pointerDownState);
    const onKeyUp = this.onKeyUpFromPointerDownHandler(pointerDownState);
    this.missingPointerEventCleanupEmitter.once(
      (_event) => onPointerUp(_event || event.nativeEvent)
    );
    if (!this.state.viewModeEnabled || this.state.activeTool.type === "laser") {
      window.addEventListener("pointermove" /* POINTER_MOVE */, onPointerMove);
      window.addEventListener("pointerup" /* POINTER_UP */, onPointerUp);
      window.addEventListener("keydown" /* KEYDOWN */, onKeyDown);
      window.addEventListener("keyup" /* KEYUP */, onKeyUp);
      pointerDownState.eventListeners.onMove = onPointerMove;
      pointerDownState.eventListeners.onUp = onPointerUp;
      pointerDownState.eventListeners.onKeyUp = onKeyUp;
      pointerDownState.eventListeners.onKeyDown = onKeyDown;
    }
  };
  handleCanvasPointerUp = (event) => {
    this.removePointer(event);
    this.lastPointerUpEvent = event;
    const scenePointer = viewportCoordsToSceneCoords(
      { clientX: event.clientX, clientY: event.clientY },
      this.state
    );
    const clicklength = event.timeStamp - (this.lastPointerDownEvent?.timeStamp ?? 0);
    if (this.device.editor.isMobile && clicklength < 300) {
      const hitElement = this.getElementAtPosition(
        scenePointer.x,
        scenePointer.y
      );
      if (isIframeLikeElement(hitElement) && this.isIframeLikeElementCenter(
        hitElement,
        event,
        scenePointer.x,
        scenePointer.y
      )) {
        this.handleEmbeddableCenterClick(hitElement);
        return;
      }
    }
    if (this.device.isTouchScreen) {
      const hitElement = this.getElementAtPosition(
        scenePointer.x,
        scenePointer.y
      );
      this.hitLinkElement = this.getElementLinkAtPosition(
        scenePointer,
        hitElement
      );
    }
    if (this.hitLinkElement && !this.state.selectedElementIds[this.hitLinkElement.id]) {
      if (clicklength < 300 && isIframeLikeElement(this.hitLinkElement) && !isPointHittingLinkIcon(
        this.hitLinkElement,
        this.scene.getNonDeletedElementsMap(),
        this.state,
        pointFrom(scenePointer.x, scenePointer.y)
      )) {
        this.handleEmbeddableCenterClick(this.hitLinkElement);
      } else {
        this.redirectToLink(event, this.device.isTouchScreen);
      }
    } else if (this.state.viewModeEnabled) {
      this.setState({
        activeEmbeddable: null,
        selectedElementIds: {}
      });
    }
  };
  maybeOpenContextMenuAfterPointerDownOnTouchDevices = (event) => {
    if (event.pointerType === "touch") {
      invalidateContextMenu = false;
      if (touchTimeout) {
        invalidateContextMenu = true;
      } else {
        touchTimeout = window.setTimeout(() => {
          touchTimeout = 0;
          if (!invalidateContextMenu) {
            this.handleCanvasContextMenu(event);
          }
        }, TOUCH_CTX_MENU_TIMEOUT);
      }
    }
  };
  resetContextMenuTimer = () => {
    clearTimeout(touchTimeout);
    touchTimeout = 0;
    invalidateContextMenu = false;
  };
  /**
   * pointerup may not fire in certian cases (user tabs away...), so in order
   * to properly cleanup pointerdown state, we need to fire any hanging
   * pointerup handlers manually
   */
  maybeCleanupAfterMissingPointerUp = (event) => {
    lastPointerUp?.();
    this.missingPointerEventCleanupEmitter.trigger(event).clear();
  };
  // Returns whether the event is a panning
  handleCanvasPanUsingWheelOrSpaceDrag = (event) => {
    if (!(gesture.pointers.size <= 1 && (event.button === POINTER_BUTTON.WHEEL || event.button === POINTER_BUTTON.MAIN && isHoldingSpace || isHandToolActive(this.state) || this.state.viewModeEnabled))) {
      return false;
    }
    isPanning = true;
    this.focusContainer();
    if (!this.state.editingTextElement) {
      event.preventDefault();
    }
    let nextPastePrevented = false;
    const isLinux = typeof window === void 0 ? false : /Linux/.test(window.navigator.platform);
    setCursor(this.interactiveCanvas, CURSOR_TYPE.GRABBING);
    let { clientX: lastX, clientY: lastY } = event;
    const onPointerMove = withBatchedUpdatesThrottled((event2) => {
      const deltaX = lastX - event2.clientX;
      const deltaY = lastY - event2.clientY;
      lastX = event2.clientX;
      lastY = event2.clientY;
      if (isLinux && !nextPastePrevented && (Math.abs(deltaX) > 1 || Math.abs(deltaY) > 1)) {
        nextPastePrevented = true;
        const preventNextPaste = (event3) => {
          document.body.removeEventListener("paste" /* PASTE */, preventNextPaste);
          event3.stopPropagation();
        };
        const enableNextPaste = () => {
          setTimeout(() => {
            document.body.removeEventListener("paste" /* PASTE */, preventNextPaste);
            window.removeEventListener("pointerup" /* POINTER_UP */, enableNextPaste);
          }, 100);
        };
        document.body.addEventListener("paste" /* PASTE */, preventNextPaste);
        window.addEventListener("pointerup" /* POINTER_UP */, enableNextPaste);
      }
      this.translateCanvas({
        scrollX: this.state.scrollX - deltaX / this.state.zoom.value,
        scrollY: this.state.scrollY - deltaY / this.state.zoom.value
      });
    });
    const teardown = withBatchedUpdates(
      lastPointerUp = () => {
        lastPointerUp = null;
        isPanning = false;
        if (!isHoldingSpace) {
          if (this.state.viewModeEnabled) {
            setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);
          } else {
            setCursorForShape(this.interactiveCanvas, this.state);
          }
        }
        this.setState({
          cursorButton: "up"
        });
        this.savePointer(event.clientX, event.clientY, "up");
        window.removeEventListener("pointermove" /* POINTER_MOVE */, onPointerMove);
        window.removeEventListener("pointerup" /* POINTER_UP */, teardown);
        window.removeEventListener("blur" /* BLUR */, teardown);
        onPointerMove.flush();
      }
    );
    window.addEventListener("blur" /* BLUR */, teardown);
    window.addEventListener("pointermove" /* POINTER_MOVE */, onPointerMove, {
      passive: true
    });
    window.addEventListener("pointerup" /* POINTER_UP */, teardown);
    return true;
  };
  updateGestureOnPointerDown(event) {
    gesture.pointers.set(event.pointerId, {
      x: event.clientX,
      y: event.clientY
    });
    if (gesture.pointers.size === 2) {
      gesture.lastCenter = getCenter(gesture.pointers);
      gesture.initialScale = this.state.zoom.value;
      gesture.initialDistance = getDistance(
        Array.from(gesture.pointers.values())
      );
    }
  }
  initialPointerDownState(event) {
    const origin = viewportCoordsToSceneCoords(event, this.state);
    const selectedElements = this.scene.getSelectedElements(this.state);
    const [minX, minY, maxX, maxY] = getCommonBounds(selectedElements);
    const isElbowArrowOnly = selectedElements.findIndex(isElbowArrow) === 0;
    return {
      origin,
      withCmdOrCtrl: event[KEYS.CTRL_OR_CMD],
      originInGrid: tupleToCoors(
        getGridPoint(
          origin.x,
          origin.y,
          event[KEYS.CTRL_OR_CMD] || isElbowArrowOnly ? null : this.getEffectiveGridSize()
        )
      ),
      scrollbars: isOverScrollBars(
        currentScrollBars,
        event.clientX - this.state.offsetLeft,
        event.clientY - this.state.offsetTop
      ),
      // we need to duplicate because we'll be updating this state
      lastCoords: { ...origin },
      originalElements: this.scene.getNonDeletedElements().reduce((acc, element) => {
        acc.set(element.id, deepCopyElement(element));
        return acc;
      }, /* @__PURE__ */ new Map()),
      resize: {
        handleType: false,
        isResizing: false,
        offset: { x: 0, y: 0 },
        arrowDirection: "origin",
        center: { x: (maxX + minX) / 2, y: (maxY + minY) / 2 }
      },
      hit: {
        element: null,
        allHitElements: [],
        wasAddedToSelection: false,
        hasBeenDuplicated: false,
        hasHitCommonBoundingBoxOfSelectedElements: this.isHittingCommonBoundingBoxOfSelectedElements(
          origin,
          selectedElements
        )
      },
      drag: {
        hasOccurred: false,
        offset: null
      },
      eventListeners: {
        onMove: null,
        onUp: null,
        onKeyUp: null,
        onKeyDown: null
      },
      boxSelection: {
        hasOccurred: false
      }
    };
  }
  // Returns whether the event is a dragging a scrollbar
  handleDraggingScrollBar(event, pointerDownState) {
    if (!(pointerDownState.scrollbars.isOverEither && !this.state.multiElement)) {
      return false;
    }
    isDraggingScrollBar = true;
    pointerDownState.lastCoords.x = event.clientX;
    pointerDownState.lastCoords.y = event.clientY;
    const onPointerMove = withBatchedUpdatesThrottled((event2) => {
      const target = event2.target;
      if (!(target instanceof HTMLElement)) {
        return;
      }
      this.handlePointerMoveOverScrollbars(event2, pointerDownState);
    });
    const onPointerUp = withBatchedUpdates(() => {
      lastPointerUp = null;
      isDraggingScrollBar = false;
      setCursorForShape(this.interactiveCanvas, this.state);
      this.setState({
        cursorButton: "up"
      });
      this.savePointer(event.clientX, event.clientY, "up");
      window.removeEventListener("pointermove" /* POINTER_MOVE */, onPointerMove);
      window.removeEventListener("pointerup" /* POINTER_UP */, onPointerUp);
      onPointerMove.flush();
    });
    lastPointerUp = onPointerUp;
    window.addEventListener("pointermove" /* POINTER_MOVE */, onPointerMove);
    window.addEventListener("pointerup" /* POINTER_UP */, onPointerUp);
    return true;
  }
  clearSelectionIfNotUsingSelection = () => {
    if (this.state.activeTool.type !== "selection") {
      this.setState({
        selectedElementIds: makeNextSelectedElementIds({}, this.state),
        selectedGroupIds: {},
        editingGroupId: null,
        activeEmbeddable: null
      });
    }
  };
  /**
   * @returns whether the pointer event has been completely handled
   */
  handleSelectionOnPointerDown = (event, pointerDownState) => {
    if (this.state.activeTool.type === "selection") {
      const elements = this.scene.getNonDeletedElements();
      const elementsMap = this.scene.getNonDeletedElementsMap();
      const selectedElements = this.scene.getSelectedElements(this.state);
      if (selectedElements.length === 1 && !this.state.editingLinearElement && !(this.state.selectedLinearElement && this.state.selectedLinearElement.hoverPointIndex !== -1)) {
        const elementWithTransformHandleType = getElementWithTransformHandleType(
          elements,
          this.state,
          pointerDownState.origin.x,
          pointerDownState.origin.y,
          this.state.zoom,
          event.pointerType,
          this.scene.getNonDeletedElementsMap(),
          this.device
        );
        if (elementWithTransformHandleType != null) {
          this.setState({
            resizingElement: elementWithTransformHandleType.element
          });
          pointerDownState.resize.handleType = elementWithTransformHandleType.transformHandleType;
        }
      } else if (selectedElements.length > 1) {
        pointerDownState.resize.handleType = getTransformHandleTypeFromCoords(
          getCommonBounds(selectedElements),
          pointerDownState.origin.x,
          pointerDownState.origin.y,
          this.state.zoom,
          event.pointerType,
          this.device
        );
      }
      if (pointerDownState.resize.handleType) {
        pointerDownState.resize.isResizing = true;
        pointerDownState.resize.offset = tupleToCoors(
          getResizeOffsetXY(
            pointerDownState.resize.handleType,
            selectedElements,
            elementsMap,
            pointerDownState.origin.x,
            pointerDownState.origin.y
          )
        );
        if (selectedElements.length === 1 && isLinearElement(selectedElements[0]) && selectedElements[0].points.length === 2) {
          pointerDownState.resize.arrowDirection = getResizeArrowDirection(
            pointerDownState.resize.handleType,
            selectedElements[0]
          );
        }
      } else {
        if (this.state.selectedLinearElement) {
          const linearElementEditor = this.state.editingLinearElement || this.state.selectedLinearElement;
          const ret = LinearElementEditor.handlePointerDown(
            event,
            this,
            this.store,
            pointerDownState.origin,
            linearElementEditor,
            this.scene
          );
          if (ret.hitElement) {
            pointerDownState.hit.element = ret.hitElement;
          }
          if (ret.linearElementEditor) {
            this.setState({ selectedLinearElement: ret.linearElementEditor });
            if (this.state.editingLinearElement) {
              this.setState({ editingLinearElement: ret.linearElementEditor });
            }
          }
          if (ret.didAddPoint) {
            return true;
          }
        }
        pointerDownState.hit.element = pointerDownState.hit.element ?? this.getElementAtPosition(
          pointerDownState.origin.x,
          pointerDownState.origin.y
        );
        if (pointerDownState.hit.element) {
          const hitLinkElement = this.getElementLinkAtPosition(
            {
              x: pointerDownState.origin.x,
              y: pointerDownState.origin.y
            },
            pointerDownState.hit.element
          );
          if (hitLinkElement) {
            return false;
          }
        }
        pointerDownState.hit.allHitElements = this.getElementsAtPosition(
          pointerDownState.origin.x,
          pointerDownState.origin.y
        );
        const hitElement = pointerDownState.hit.element;
        const someHitElementIsSelected = pointerDownState.hit.allHitElements.some(
          (element) => this.isASelectedElement(element)
        );
        if ((hitElement === null || !someHitElementIsSelected) && !event.shiftKey && !pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements) {
          this.clearSelection(hitElement);
        }
        if (this.state.editingLinearElement) {
          this.setState({
            selectedElementIds: makeNextSelectedElementIds(
              {
                [this.state.editingLinearElement.elementId]: true
              },
              this.state
            )
          });
        } else if (hitElement != null) {
          if (event[KEYS.CTRL_OR_CMD]) {
            if (!this.state.selectedElementIds[hitElement.id]) {
              pointerDownState.hit.wasAddedToSelection = true;
            }
            this.setState((prevState) => ({
              ...editGroupForSelectedElement(prevState, hitElement),
              previousSelectedElementIds: this.state.selectedElementIds
            }));
            return false;
          }
          if (!this.state.selectedElementIds[hitElement.id]) {
            if (this.state.editingGroupId && !isElementInGroup(hitElement, this.state.editingGroupId)) {
              this.setState({
                selectedElementIds: makeNextSelectedElementIds({}, this.state),
                selectedGroupIds: {},
                editingGroupId: null,
                activeEmbeddable: null
              });
            }
            if (!someHitElementIsSelected && !pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements) {
              this.setState((prevState) => {
                const nextSelectedElementIds = {
                  ...prevState.selectedElementIds,
                  [hitElement.id]: true
                };
                const previouslySelectedElements = [];
                Object.keys(prevState.selectedElementIds).forEach((id) => {
                  const element = this.scene.getElement(id);
                  element && previouslySelectedElements.push(element);
                });
                if (isFrameLikeElement(hitElement)) {
                  getFrameChildren(
                    previouslySelectedElements,
                    hitElement.id
                  ).forEach((element) => {
                    delete nextSelectedElementIds[element.id];
                  });
                } else if (hitElement.frameId) {
                  if (nextSelectedElementIds[hitElement.frameId]) {
                    delete nextSelectedElementIds[hitElement.id];
                  }
                } else {
                  const groupIds = hitElement.groupIds;
                  const framesInGroups = new Set(
                    groupIds.flatMap(
                      (gid) => getElementsInGroup(
                        this.scene.getNonDeletedElements(),
                        gid
                      )
                    ).filter((element) => isFrameLikeElement(element)).map((frame) => frame.id)
                  );
                  if (framesInGroups.size > 0) {
                    previouslySelectedElements.forEach((element) => {
                      if (element.frameId && framesInGroups.has(element.frameId)) {
                        delete nextSelectedElementIds[element.id];
                        element.groupIds.flatMap(
                          (gid) => getElementsInGroup(
                            this.scene.getNonDeletedElements(),
                            gid
                          )
                        ).forEach((element2) => {
                          delete nextSelectedElementIds[element2.id];
                        });
                      }
                    });
                  }
                }
                return {
                  ...selectGroupsForSelectedElements(
                    {
                      editingGroupId: prevState.editingGroupId,
                      selectedElementIds: nextSelectedElementIds
                    },
                    this.scene.getNonDeletedElements(),
                    prevState,
                    this
                  ),
                  showHyperlinkPopup: hitElement.link || isEmbeddableElement(hitElement) ? "info" : false
                };
              });
              pointerDownState.hit.wasAddedToSelection = true;
            }
          }
        }
        this.setState({
          previousSelectedElementIds: this.state.selectedElementIds
        });
      }
    }
    return false;
  };
  isASelectedElement(hitElement) {
    return hitElement != null && this.state.selectedElementIds[hitElement.id];
  }
  isHittingCommonBoundingBoxOfSelectedElements(point2, selectedElements) {
    if (selectedElements.length < 2) {
      return false;
    }
    const threshold = this.getElementHitThreshold();
    const [x1, y1, x2, y2] = getCommonBounds(selectedElements);
    return point2.x > x1 - threshold && point2.x < x2 + threshold && point2.y > y1 - threshold && point2.y < y2 + threshold;
  }
  handleTextOnPointerDown = (event, pointerDownState) => {
    if (this.state.editingTextElement) {
      return;
    }
    let sceneX = pointerDownState.origin.x;
    let sceneY = pointerDownState.origin.y;
    const element = this.getElementAtPosition(sceneX, sceneY, {
      includeBoundTextElement: true
    });
    let container = this.getTextBindableContainerAtPosition(sceneX, sceneY);
    if (hasBoundTextElement(element)) {
      container = element;
      sceneX = element.x + element.width / 2;
      sceneY = element.y + element.height / 2;
    }
    this.startTextEditing({
      sceneX,
      sceneY,
      insertAtParentCenter: !event.altKey,
      container,
      autoEdit: false
    });
    resetCursor(this.interactiveCanvas);
    if (!this.state.activeTool.locked) {
      this.setState({
        activeTool: updateActiveTool(this.state, { type: "selection" })
      });
    }
  };
  handleFreeDrawElementOnPointerDown = (event, elementType, pointerDownState) => {
    const [gridX, gridY] = getGridPoint(
      pointerDownState.origin.x,
      pointerDownState.origin.y,
      null
    );
    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({
      x: gridX,
      y: gridY
    });
    const simulatePressure = event.pressure === 0.5;
    const element = newFreeDrawElement({
      type: elementType,
      x: gridX,
      y: gridY,
      strokeColor: this.state.currentItemStrokeColor,
      backgroundColor: this.state.currentItemBackgroundColor,
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roughness: this.state.currentItemRoughness,
      opacity: this.state.currentItemOpacity,
      roundness: null,
      simulatePressure,
      locked: false,
      frameId: topLayerFrame ? topLayerFrame.id : null,
      points: [pointFrom(0, 0)],
      pressures: simulatePressure ? [] : [event.pressure]
    });
    this.scene.insertElement(element);
    this.setState((prevState) => {
      const nextSelectedElementIds = {
        ...prevState.selectedElementIds
      };
      delete nextSelectedElementIds[element.id];
      return {
        selectedElementIds: makeNextSelectedElementIds(
          nextSelectedElementIds,
          prevState
        )
      };
    });
    const boundElement = getHoveredElementForBinding(
      pointerDownState.origin,
      this.scene.getNonDeletedElements(),
      this.scene.getNonDeletedElementsMap()
    );
    this.setState({
      newElement: element,
      startBoundElement: boundElement,
      suggestedBindings: []
    });
  };
  insertIframeElement = ({
    sceneX,
    sceneY,
    width,
    height
  }) => {
    const [gridX, gridY] = getGridPoint(
      sceneX,
      sceneY,
      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const element = newIframeElement({
      type: "iframe",
      x: gridX,
      y: gridY,
      strokeColor: "transparent",
      backgroundColor: "transparent",
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roughness: this.state.currentItemRoughness,
      roundness: this.getCurrentItemRoundness("iframe"),
      opacity: this.state.currentItemOpacity,
      locked: false,
      width,
      height
    });
    this.scene.insertElement(element);
    return element;
  };
  //create rectangle element with youtube top left on nearest grid point width / hight 640/360
  insertEmbeddableElement = ({
    sceneX,
    sceneY,
    link
  }) => {
    const [gridX, gridY] = getGridPoint(
      sceneX,
      sceneY,
      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const embedLink = getEmbedLink(link);
    if (!embedLink) {
      return;
    }
    if (embedLink.error instanceof URIError) {
      this.setToast({
        message: t("toast.unrecognizedLinkFormat"),
        closable: true
      });
    }
    const element = newEmbeddableElement({
      type: "embeddable",
      x: gridX,
      y: gridY,
      strokeColor: "transparent",
      backgroundColor: "transparent",
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roughness: this.state.currentItemRoughness,
      roundness: this.getCurrentItemRoundness("embeddable"),
      opacity: this.state.currentItemOpacity,
      locked: false,
      width: embedLink.intrinsicSize.w,
      height: embedLink.intrinsicSize.h,
      link
    });
    this.scene.insertElement(element);
    return element;
  };
  createImageElement = ({
    sceneX,
    sceneY,
    addToFrameUnderCursor = true
  }) => {
    const [gridX, gridY] = getGridPoint(
      sceneX,
      sceneY,
      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const topLayerFrame = addToFrameUnderCursor ? this.getTopLayerFrameAtSceneCoords({
      x: gridX,
      y: gridY
    }) : null;
    const element = newImageElement({
      type: "image",
      x: gridX,
      y: gridY,
      strokeColor: this.state.currentItemStrokeColor,
      backgroundColor: this.state.currentItemBackgroundColor,
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roughness: this.state.currentItemRoughness,
      roundness: null,
      opacity: this.state.currentItemOpacity,
      locked: false,
      frameId: topLayerFrame ? topLayerFrame.id : null
    });
    return element;
  };
  handleLinearElementOnPointerDown = (event, elementType, pointerDownState) => {
    if (this.state.multiElement) {
      const { multiElement } = this.state;
      if (multiElement.type === "line" && isPathALoop(multiElement.points, this.state.zoom.value)) {
        mutateElement(multiElement, {
          lastCommittedPoint: multiElement.points[multiElement.points.length - 1]
        });
        this.actionManager.executeAction(actionFinalize);
        return;
      }
      if (isElbowArrow(multiElement) && multiElement.points.length > 1) {
        mutateElement(multiElement, {
          lastCommittedPoint: multiElement.points[multiElement.points.length - 1]
        });
        this.actionManager.executeAction(actionFinalize);
        return;
      }
      const { x: rx, y: ry, lastCommittedPoint } = multiElement;
      if (multiElement.points.length > 1 && lastCommittedPoint && pointDistance(
        pointFrom(
          pointerDownState.origin.x - rx,
          pointerDownState.origin.y - ry
        ),
        lastCommittedPoint
      ) < LINE_CONFIRM_THRESHOLD) {
        this.actionManager.executeAction(actionFinalize);
        return;
      }
      this.setState((prevState) => ({
        selectedElementIds: makeNextSelectedElementIds(
          {
            ...prevState.selectedElementIds,
            [multiElement.id]: true
          },
          prevState
        )
      }));
      mutateElement(multiElement, {
        lastCommittedPoint: multiElement.points[multiElement.points.length - 1]
      });
      setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);
    } else {
      const [gridX, gridY] = getGridPoint(
        pointerDownState.origin.x,
        pointerDownState.origin.y,
        event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
      );
      const topLayerFrame = this.getTopLayerFrameAtSceneCoords({
        x: gridX,
        y: gridY
      });
      const { currentItemStartArrowhead, currentItemEndArrowhead } = this.state;
      const [startArrowhead, endArrowhead] = elementType === "arrow" ? [currentItemStartArrowhead, currentItemEndArrowhead] : [null, null];
      const element = elementType === "arrow" ? newArrowElement({
        type: elementType,
        x: gridX,
        y: gridY,
        strokeColor: this.state.currentItemStrokeColor,
        backgroundColor: this.state.currentItemBackgroundColor,
        fillStyle: this.state.currentItemFillStyle,
        strokeWidth: this.state.currentItemStrokeWidth,
        strokeStyle: this.state.currentItemStrokeStyle,
        roughness: this.state.currentItemRoughness,
        opacity: this.state.currentItemOpacity,
        roundness: this.state.currentItemArrowType === ARROW_TYPE.round ? { type: ROUNDNESS.PROPORTIONAL_RADIUS } : (
          // note, roundness doesn't have any effect for elbow arrows,
          // but it's best to set it to null as well
          null
        ),
        startArrowhead,
        endArrowhead,
        locked: false,
        frameId: topLayerFrame ? topLayerFrame.id : null,
        elbowed: this.state.currentItemArrowType === ARROW_TYPE.elbow
      }) : newLinearElement({
        type: elementType,
        x: gridX,
        y: gridY,
        strokeColor: this.state.currentItemStrokeColor,
        backgroundColor: this.state.currentItemBackgroundColor,
        fillStyle: this.state.currentItemFillStyle,
        strokeWidth: this.state.currentItemStrokeWidth,
        strokeStyle: this.state.currentItemStrokeStyle,
        roughness: this.state.currentItemRoughness,
        opacity: this.state.currentItemOpacity,
        roundness: this.state.currentItemRoundness === "round" ? { type: ROUNDNESS.PROPORTIONAL_RADIUS } : null,
        locked: false,
        frameId: topLayerFrame ? topLayerFrame.id : null
      });
      this.setState((prevState) => {
        const nextSelectedElementIds = {
          ...prevState.selectedElementIds
        };
        delete nextSelectedElementIds[element.id];
        return {
          selectedElementIds: makeNextSelectedElementIds(
            nextSelectedElementIds,
            prevState
          )
        };
      });
      mutateElement(element, {
        points: [...element.points, pointFrom(0, 0)]
      });
      const boundElement = getHoveredElementForBinding(
        pointerDownState.origin,
        this.scene.getNonDeletedElements(),
        this.scene.getNonDeletedElementsMap(),
        isElbowArrow(element)
      );
      this.scene.insertElement(element);
      this.setState({
        newElement: element,
        startBoundElement: boundElement,
        suggestedBindings: []
      });
    }
  };
  getCurrentItemRoundness(elementType) {
    return this.state.currentItemRoundness === "round" ? {
      type: isUsingAdaptiveRadius(elementType) ? ROUNDNESS.ADAPTIVE_RADIUS : ROUNDNESS.PROPORTIONAL_RADIUS
    } : null;
  }
  createGenericElementOnPointerDown = (elementType, pointerDownState) => {
    const [gridX, gridY] = getGridPoint(
      pointerDownState.origin.x,
      pointerDownState.origin.y,
      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({
      x: gridX,
      y: gridY
    });
    const baseElementAttributes = {
      x: gridX,
      y: gridY,
      strokeColor: this.state.currentItemStrokeColor,
      backgroundColor: this.state.currentItemBackgroundColor,
      fillStyle: this.state.currentItemFillStyle,
      strokeWidth: this.state.currentItemStrokeWidth,
      strokeStyle: this.state.currentItemStrokeStyle,
      roughness: this.state.currentItemRoughness,
      opacity: this.state.currentItemOpacity,
      roundness: this.getCurrentItemRoundness(elementType),
      locked: false,
      frameId: topLayerFrame ? topLayerFrame.id : null
    };
    let element;
    if (elementType === "embeddable") {
      element = newEmbeddableElement({
        type: "embeddable",
        ...baseElementAttributes
      });
    } else {
      element = newElement({
        type: elementType,
        ...baseElementAttributes
      });
    }
    if (element.type === "selection") {
      this.setState({
        selectionElement: element
      });
    } else {
      this.scene.insertElement(element);
      this.setState({
        multiElement: null,
        newElement: element
      });
    }
  };
  createFrameElementOnPointerDown = (pointerDownState, type) => {
    const [gridX, gridY] = getGridPoint(
      pointerDownState.origin.x,
      pointerDownState.origin.y,
      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const constructorOpts = {
      x: gridX,
      y: gridY,
      opacity: this.state.currentItemOpacity,
      locked: false,
      ...FRAME_STYLE
    };
    const frame = type === TOOL_TYPE.magicframe ? newMagicFrameElement(constructorOpts) : newFrameElement(constructorOpts);
    this.scene.insertElement(frame);
    this.setState({
      multiElement: null,
      newElement: frame
    });
  };
  maybeCacheReferenceSnapPoints(event, selectedElements, recomputeAnyways = false) {
    if (isSnappingEnabled({
      event,
      app: this,
      selectedElements
    }) && (recomputeAnyways || !SnapCache.getReferenceSnapPoints())) {
      SnapCache.setReferenceSnapPoints(
        getReferenceSnapPoints(
          this.scene.getNonDeletedElements(),
          selectedElements,
          this.state,
          this.scene.getNonDeletedElementsMap()
        )
      );
    }
  }
  maybeCacheVisibleGaps(event, selectedElements, recomputeAnyways = false) {
    if (isSnappingEnabled({
      event,
      app: this,
      selectedElements
    }) && (recomputeAnyways || !SnapCache.getVisibleGaps())) {
      SnapCache.setVisibleGaps(
        getVisibleGaps(
          this.scene.getNonDeletedElements(),
          selectedElements,
          this.state,
          this.scene.getNonDeletedElementsMap()
        )
      );
    }
  }
  onKeyDownFromPointerDownHandler(pointerDownState) {
    return withBatchedUpdates((event) => {
      if (this.maybeHandleResize(pointerDownState, event)) {
        return;
      }
      this.maybeDragNewGenericElement(pointerDownState, event);
    });
  }
  onKeyUpFromPointerDownHandler(pointerDownState) {
    return withBatchedUpdates((event) => {
      event.key === KEYS.ALT && event.preventDefault();
      if (this.maybeHandleResize(pointerDownState, event)) {
        return;
      }
      this.maybeDragNewGenericElement(pointerDownState, event);
    });
  }
  onPointerMoveFromPointerDownHandler(pointerDownState) {
    return withBatchedUpdatesThrottled((event) => {
      if (pointerDownState.drag.offset === null) {
        pointerDownState.drag.offset = tupleToCoors(
          getDragOffsetXY(
            this.scene.getSelectedElements(this.state),
            pointerDownState.origin.x,
            pointerDownState.origin.y
          )
        );
      }
      const target = event.target;
      if (!(target instanceof HTMLElement)) {
        return;
      }
      if (this.handlePointerMoveOverScrollbars(event, pointerDownState)) {
        return;
      }
      const pointerCoords = viewportCoordsToSceneCoords(event, this.state);
      if (isEraserActive(this.state)) {
        this.handleEraser(event, pointerDownState, pointerCoords);
        return;
      }
      if (this.state.activeTool.type === "laser") {
        this.laserTrails.addPointToPath(pointerCoords.x, pointerCoords.y);
      }
      const [gridX, gridY] = getGridPoint(
        pointerCoords.x,
        pointerCoords.y,
        event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
      );
      if (!pointerDownState.drag.hasOccurred && (this.state.activeTool.type === "arrow" || this.state.activeTool.type === "line")) {
        if (pointDistance(
          pointFrom(pointerCoords.x, pointerCoords.y),
          pointFrom(pointerDownState.origin.x, pointerDownState.origin.y)
        ) < DRAGGING_THRESHOLD) {
          return;
        }
      }
      if (pointerDownState.resize.isResizing) {
        pointerDownState.lastCoords.x = pointerCoords.x;
        pointerDownState.lastCoords.y = pointerCoords.y;
        if (this.maybeHandleResize(pointerDownState, event)) {
          return true;
        }
      }
      const elementsMap = this.scene.getNonDeletedElementsMap();
      if (this.state.selectedLinearElement) {
        const linearElementEditor = this.state.editingLinearElement || this.state.selectedLinearElement;
        if (LinearElementEditor.shouldAddMidpoint(
          this.state.selectedLinearElement,
          pointerCoords,
          this.state,
          elementsMap
        )) {
          const ret = LinearElementEditor.addMidpoint(
            this.state.selectedLinearElement,
            pointerCoords,
            this,
            !event[KEYS.CTRL_OR_CMD],
            elementsMap
          );
          if (!ret) {
            return;
          }
          flushSync(() => {
            if (this.state.selectedLinearElement) {
              this.setState({
                selectedLinearElement: {
                  ...this.state.selectedLinearElement,
                  pointerDownState: ret.pointerDownState,
                  selectedPointsIndices: ret.selectedPointsIndices
                }
              });
            }
            if (this.state.editingLinearElement) {
              this.setState({
                editingLinearElement: {
                  ...this.state.editingLinearElement,
                  pointerDownState: ret.pointerDownState,
                  selectedPointsIndices: ret.selectedPointsIndices
                }
              });
            }
          });
          return;
        } else if (linearElementEditor.pointerDownState.segmentMidpoint.value !== null && !linearElementEditor.pointerDownState.segmentMidpoint.added) {
          return;
        }
        const didDrag = LinearElementEditor.handlePointDragging(
          event,
          this,
          pointerCoords.x,
          pointerCoords.y,
          (element, pointsSceneCoords) => {
            this.maybeSuggestBindingsForLinearElementAtCoords(
              element,
              pointsSceneCoords
            );
          },
          linearElementEditor,
          this.scene
        );
        if (didDrag) {
          pointerDownState.lastCoords.x = pointerCoords.x;
          pointerDownState.lastCoords.y = pointerCoords.y;
          pointerDownState.drag.hasOccurred = true;
          if (this.state.editingLinearElement && !this.state.editingLinearElement.isDragging) {
            this.setState({
              editingLinearElement: {
                ...this.state.editingLinearElement,
                isDragging: true
              }
            });
          }
          if (!this.state.selectedLinearElement.isDragging) {
            this.setState({
              selectedLinearElement: {
                ...this.state.selectedLinearElement,
                isDragging: true
              }
            });
          }
          return;
        }
      }
      const hasHitASelectedElement = pointerDownState.hit.allHitElements.some(
        (element) => this.isASelectedElement(element)
      );
      const isSelectingPointsInLineEditor = this.state.editingLinearElement && event.shiftKey && this.state.editingLinearElement.elementId === pointerDownState.hit.element?.id;
      if ((hasHitASelectedElement || pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements) && !isSelectingPointsInLineEditor) {
        const selectedElements = this.scene.getSelectedElements(this.state);
        if (selectedElements.every((element) => element.locked)) {
          return;
        }
        const selectedElementsHasAFrame = selectedElements.find(
          (e) => isFrameLikeElement(e)
        );
        const topLayerFrame = this.getTopLayerFrameAtSceneCoords(pointerCoords);
        this.setState({
          frameToHighlight: topLayerFrame && !selectedElementsHasAFrame ? topLayerFrame : null
        });
        pointerDownState.drag.hasOccurred = true;
        if (selectedElements.length > 0 && !pointerDownState.withCmdOrCtrl && !this.state.editingTextElement && this.state.activeEmbeddable?.state !== "active") {
          const dragOffset = {
            x: pointerCoords.x - pointerDownState.origin.x,
            y: pointerCoords.y - pointerDownState.origin.y
          };
          const originalElements = [
            ...pointerDownState.originalElements.values()
          ];
          const lockDirection = event.shiftKey;
          if (lockDirection) {
            const distanceX = Math.abs(dragOffset.x);
            const distanceY = Math.abs(dragOffset.y);
            const lockX = lockDirection && distanceX < distanceY;
            const lockY = lockDirection && distanceX > distanceY;
            if (lockX) {
              dragOffset.x = 0;
            }
            if (lockY) {
              dragOffset.y = 0;
            }
          }
          this.maybeCacheVisibleGaps(event, selectedElements);
          this.maybeCacheReferenceSnapPoints(event, selectedElements);
          const { snapOffset, snapLines } = snapDraggedElements(
            originalElements,
            dragOffset,
            this,
            event,
            this.scene.getNonDeletedElementsMap()
          );
          this.setState({ snapLines });
          !this.state.editingFrame && dragSelectedElements(
            pointerDownState,
            selectedElements,
            dragOffset,
            this.scene,
            snapOffset,
            event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
          );
          this.setState({
            selectedElementsAreBeingDragged: true,
            // element is being dragged and selectionElement that was created on pointer down
            // should be removed
            selectionElement: null
          });
          if (selectedElements.length !== 1 || !isElbowArrow(selectedElements[0])) {
            this.setState({
              suggestedBindings: getSuggestedBindingsForArrows(
                selectedElements,
                this.scene.getNonDeletedElementsMap()
              )
            });
          }
          if (event.altKey && !pointerDownState.hit.hasBeenDuplicated) {
            pointerDownState.hit.hasBeenDuplicated = true;
            const nextElements = [];
            const elementsToAppend = [];
            const groupIdMap = /* @__PURE__ */ new Map();
            const oldIdToDuplicatedId = /* @__PURE__ */ new Map();
            const hitElement = pointerDownState.hit.element;
            const selectedElementIds = new Set(
              this.scene.getSelectedElements({
                selectedElementIds: this.state.selectedElementIds,
                includeBoundTextElement: true,
                includeElementsInFrames: true
              }).map((element) => element.id)
            );
            const elements = this.scene.getElementsIncludingDeleted();
            for (const element of elements) {
              if (selectedElementIds.has(element.id) || // case: the state.selectedElementIds might not have been
              // updated yet by the time this mousemove event is fired
              element.id === hitElement?.id && pointerDownState.hit.wasAddedToSelection) {
                const duplicatedElement = duplicateElement(
                  this.state.editingGroupId,
                  groupIdMap,
                  element
                );
                const origElement = pointerDownState.originalElements.get(
                  element.id
                );
                mutateElement(duplicatedElement, {
                  x: origElement.x,
                  y: origElement.y
                });
                pointerDownState.originalElements.set(
                  duplicatedElement.id,
                  duplicatedElement
                );
                nextElements.push(duplicatedElement);
                elementsToAppend.push(element);
                oldIdToDuplicatedId.set(element.id, duplicatedElement.id);
              } else {
                nextElements.push(element);
              }
            }
            const nextSceneElements = [...nextElements, ...elementsToAppend];
            syncMovedIndices(nextSceneElements, arrayToMap(elementsToAppend));
            bindTextToShapeAfterDuplication(
              nextElements,
              elementsToAppend,
              oldIdToDuplicatedId
            );
            fixBindingsAfterDuplication(
              nextSceneElements,
              elementsToAppend,
              oldIdToDuplicatedId,
              "duplicatesServeAsOld"
            );
            bindElementsToFramesAfterDuplication(
              nextSceneElements,
              elementsToAppend,
              oldIdToDuplicatedId
            );
            this.scene.replaceAllElements(nextSceneElements);
            this.maybeCacheVisibleGaps(event, selectedElements, true);
            this.maybeCacheReferenceSnapPoints(event, selectedElements, true);
          }
          return;
        }
      }
      if (this.state.selectionElement) {
        pointerDownState.lastCoords.x = pointerCoords.x;
        pointerDownState.lastCoords.y = pointerCoords.y;
        this.maybeDragNewGenericElement(pointerDownState, event);
      } else {
        const newElement2 = this.state.newElement;
        if (!newElement2) {
          return;
        }
        if (newElement2.type === "freedraw") {
          const points = newElement2.points;
          const dx = pointerCoords.x - newElement2.x;
          const dy = pointerCoords.y - newElement2.y;
          const lastPoint = points.length > 0 && points[points.length - 1];
          const discardPoint = lastPoint && lastPoint[0] === dx && lastPoint[1] === dy;
          if (!discardPoint) {
            const pressures = newElement2.simulatePressure ? newElement2.pressures : [...newElement2.pressures, event.pressure];
            mutateElement(
              newElement2,
              {
                points: [...points, pointFrom(dx, dy)],
                pressures
              },
              false
            );
            this.setState({
              newElement: newElement2
            });
          }
        } else if (isLinearElement(newElement2)) {
          pointerDownState.drag.hasOccurred = true;
          const points = newElement2.points;
          let dx = gridX - newElement2.x;
          let dy = gridY - newElement2.y;
          if (shouldRotateWithDiscreteAngle(event) && points.length === 2) {
            ({ width: dx, height: dy } = getLockedLinearCursorAlignSize(
              newElement2.x,
              newElement2.y,
              pointerCoords.x,
              pointerCoords.y
            ));
          }
          if (points.length === 1) {
            mutateElement(
              newElement2,
              {
                points: [...points, pointFrom(dx, dy)]
              },
              false
            );
          } else if (points.length > 1 && isElbowArrow(newElement2)) {
            mutateElbowArrow(
              newElement2,
              elementsMap,
              [...points.slice(0, -1), pointFrom(dx, dy)],
              vector(0, 0),
              void 0,
              {
                isDragging: true,
                informMutation: false
              }
            );
          } else if (points.length === 2) {
            mutateElement(
              newElement2,
              {
                points: [...points.slice(0, -1), pointFrom(dx, dy)]
              },
              false
            );
          }
          this.setState({
            newElement: newElement2
          });
          if (isBindingElement(newElement2, false)) {
            this.maybeSuggestBindingsForLinearElementAtCoords(
              newElement2,
              [pointerCoords],
              this.state.startBoundElement
            );
          }
        } else {
          pointerDownState.lastCoords.x = pointerCoords.x;
          pointerDownState.lastCoords.y = pointerCoords.y;
          this.maybeDragNewGenericElement(pointerDownState, event, false);
        }
      }
      if (this.state.activeTool.type === "selection") {
        pointerDownState.boxSelection.hasOccurred = true;
        const elements = this.scene.getNonDeletedElements();
        if (this.state.editingLinearElement) {
          LinearElementEditor.handleBoxSelection(
            event,
            this.state,
            this.setState.bind(this),
            this.scene.getNonDeletedElementsMap()
          );
        } else {
          let shouldReuseSelection = true;
          if (!event.shiftKey && isSomeElementSelected(elements, this.state)) {
            if (pointerDownState.withCmdOrCtrl && pointerDownState.hit.element) {
              this.setState(
                (prevState) => selectGroupsForSelectedElements(
                  {
                    ...prevState,
                    selectedElementIds: {
                      [pointerDownState.hit.element.id]: true
                    }
                  },
                  this.scene.getNonDeletedElements(),
                  prevState,
                  this
                )
              );
            } else {
              shouldReuseSelection = false;
            }
          }
          const elementsWithinSelection = this.state.selectionElement ? getElementsWithinSelection(
            elements,
            this.state.selectionElement,
            this.scene.getNonDeletedElementsMap()
          ) : [];
          this.setState((prevState) => {
            const nextSelectedElementIds = {
              ...shouldReuseSelection && prevState.selectedElementIds,
              ...elementsWithinSelection.reduce(
                (acc, element) => {
                  acc[element.id] = true;
                  return acc;
                },
                {}
              )
            };
            if (pointerDownState.hit.element) {
              if (!elementsWithinSelection.length) {
                nextSelectedElementIds[pointerDownState.hit.element.id] = true;
              } else {
                delete nextSelectedElementIds[pointerDownState.hit.element.id];
              }
            }
            prevState = !shouldReuseSelection ? { ...prevState, selectedGroupIds: {}, editingGroupId: null } : prevState;
            return {
              ...selectGroupsForSelectedElements(
                {
                  editingGroupId: prevState.editingGroupId,
                  selectedElementIds: nextSelectedElementIds
                },
                this.scene.getNonDeletedElements(),
                prevState,
                this
              ),
              // select linear element only when we haven't box-selected anything else
              selectedLinearElement: elementsWithinSelection.length === 1 && isLinearElement(elementsWithinSelection[0]) ? new LinearElementEditor(elementsWithinSelection[0]) : null,
              showHyperlinkPopup: elementsWithinSelection.length === 1 && (elementsWithinSelection[0].link || isEmbeddableElement(elementsWithinSelection[0])) ? "info" : false
            };
          });
        }
      }
    });
  }
  // Returns whether the pointer move happened over either scrollbar
  handlePointerMoveOverScrollbars(event, pointerDownState) {
    if (pointerDownState.scrollbars.isOverHorizontal) {
      const x = event.clientX;
      const dx = x - pointerDownState.lastCoords.x;
      this.translateCanvas({
        scrollX: this.state.scrollX - dx / this.state.zoom.value
      });
      pointerDownState.lastCoords.x = x;
      return true;
    }
    if (pointerDownState.scrollbars.isOverVertical) {
      const y = event.clientY;
      const dy = y - pointerDownState.lastCoords.y;
      this.translateCanvas({
        scrollY: this.state.scrollY - dy / this.state.zoom.value
      });
      pointerDownState.lastCoords.y = y;
      return true;
    }
    return false;
  }
  onPointerUpFromPointerDownHandler(pointerDownState) {
    return withBatchedUpdates((childEvent) => {
      this.removePointer(childEvent);
      if (pointerDownState.eventListeners.onMove) {
        pointerDownState.eventListeners.onMove.flush();
      }
      const {
        newElement: newElement2,
        resizingElement,
        multiElement,
        activeTool,
        isResizing,
        isRotating
      } = this.state;
      this.setState((prevState) => ({
        isResizing: false,
        isRotating: false,
        resizingElement: null,
        selectionElement: null,
        frameToHighlight: null,
        elementsToHighlight: null,
        cursorButton: "up",
        snapLines: updateStable(prevState.snapLines, []),
        originSnapOffset: null
      }));
      SnapCache.setReferenceSnapPoints(null);
      SnapCache.setVisibleGaps(null);
      this.savePointer(childEvent.clientX, childEvent.clientY, "up");
      this.setState({
        selectedElementsAreBeingDragged: false
      });
      const elementsMap = this.scene.getNonDeletedElementsMap();
      if (this.state.editingLinearElement) {
        if (!pointerDownState.boxSelection.hasOccurred && pointerDownState.hit?.element?.id !== this.state.editingLinearElement.elementId) {
          this.actionManager.executeAction(actionFinalize);
        } else {
          const editingLinearElement = LinearElementEditor.handlePointerUp(
            childEvent,
            this.state.editingLinearElement,
            this.state,
            this.scene
          );
          if (editingLinearElement !== this.state.editingLinearElement) {
            this.setState({
              editingLinearElement,
              suggestedBindings: []
            });
          }
        }
      } else if (this.state.selectedLinearElement) {
        if (pointerDownState.hit?.element?.id !== this.state.selectedLinearElement.elementId) {
          const selectedELements = this.scene.getSelectedElements(this.state);
          if (selectedELements.length > 1) {
            this.setState({ selectedLinearElement: null });
          }
        } else {
          const linearElementEditor = LinearElementEditor.handlePointerUp(
            childEvent,
            this.state.selectedLinearElement,
            this.state,
            this.scene
          );
          const { startBindingElement, endBindingElement } = linearElementEditor;
          const element = this.scene.getElement(linearElementEditor.elementId);
          if (isBindingElement(element)) {
            bindOrUnbindLinearElement(
              element,
              startBindingElement,
              endBindingElement,
              elementsMap,
              this.scene
            );
          }
          if (linearElementEditor !== this.state.selectedLinearElement) {
            this.setState({
              selectedLinearElement: {
                ...linearElementEditor,
                selectedPointsIndices: null
              },
              suggestedBindings: []
            });
          }
        }
      }
      this.missingPointerEventCleanupEmitter.clear();
      window.removeEventListener(
        "pointermove" /* POINTER_MOVE */,
        pointerDownState.eventListeners.onMove
      );
      window.removeEventListener(
        "pointerup" /* POINTER_UP */,
        pointerDownState.eventListeners.onUp
      );
      window.removeEventListener(
        "keydown" /* KEYDOWN */,
        pointerDownState.eventListeners.onKeyDown
      );
      window.removeEventListener(
        "keyup" /* KEYUP */,
        pointerDownState.eventListeners.onKeyUp
      );
      if (this.state.pendingImageElementId) {
        this.setState({ pendingImageElementId: null });
      }
      this.props?.onPointerUp?.(activeTool, pointerDownState);
      this.onPointerUpEmitter.trigger(
        this.state.activeTool,
        pointerDownState,
        childEvent
      );
      if (newElement2?.type === "freedraw") {
        const pointerCoords = viewportCoordsToSceneCoords(
          childEvent,
          this.state
        );
        const points = newElement2.points;
        let dx = pointerCoords.x - newElement2.x;
        let dy = pointerCoords.y - newElement2.y;
        if (dx === points[0][0] && dy === points[0][1]) {
          dy += 1e-4;
          dx += 1e-4;
        }
        const pressures = newElement2.simulatePressure ? [] : [...newElement2.pressures, childEvent.pressure];
        mutateElement(newElement2, {
          points: [...points, pointFrom(dx, dy)],
          pressures,
          lastCommittedPoint: pointFrom(dx, dy)
        });
        this.actionManager.executeAction(actionFinalize);
        return;
      }
      if (isImageElement(newElement2)) {
        const imageElement = newElement2;
        try {
          this.initializeImageDimensions(imageElement);
          this.setState(
            {
              selectedElementIds: makeNextSelectedElementIds(
                { [imageElement.id]: true },
                this.state
              )
            },
            () => {
              this.actionManager.executeAction(actionFinalize);
            }
          );
        } catch (error) {
          console.error(error);
          this.scene.replaceAllElements(
            this.scene.getElementsIncludingDeleted().filter((el) => el.id !== imageElement.id)
          );
          this.actionManager.executeAction(actionFinalize);
        }
        return;
      }
      if (isLinearElement(newElement2)) {
        if (newElement2.points.length > 1) {
          this.store.shouldCaptureIncrement();
        }
        const pointerCoords = viewportCoordsToSceneCoords(
          childEvent,
          this.state
        );
        if (!pointerDownState.drag.hasOccurred && newElement2 && !multiElement) {
          mutateElement(newElement2, {
            points: [
              ...newElement2.points,
              pointFrom(
                pointerCoords.x - newElement2.x,
                pointerCoords.y - newElement2.y
              )
            ]
          });
          this.setState({
            multiElement: newElement2,
            newElement: newElement2
          });
        } else if (pointerDownState.drag.hasOccurred && !multiElement) {
          if (isBindingEnabled(this.state) && isBindingElement(newElement2, false)) {
            maybeBindLinearElement(
              newElement2,
              this.state,
              pointerCoords,
              this.scene.getNonDeletedElementsMap(),
              this.scene.getNonDeletedElements()
            );
          }
          this.setState({ suggestedBindings: [], startBoundElement: null });
          if (!activeTool.locked) {
            resetCursor(this.interactiveCanvas);
            this.setState((prevState) => ({
              newElement: null,
              activeTool: updateActiveTool(this.state, {
                type: "selection"
              }),
              selectedElementIds: makeNextSelectedElementIds(
                {
                  ...prevState.selectedElementIds,
                  [newElement2.id]: true
                },
                prevState
              ),
              selectedLinearElement: new LinearElementEditor(newElement2)
            }));
          } else {
            this.setState((prevState) => ({
              newElement: null
            }));
          }
          this.scene.triggerUpdate();
        }
        return;
      }
      if (isTextElement(newElement2)) {
        const minWidth = getMinTextElementWidth(
          getFontString({
            fontSize: newElement2.fontSize,
            fontFamily: newElement2.fontFamily
          }),
          newElement2.lineHeight
        );
        if (newElement2.width < minWidth) {
          mutateElement(newElement2, {
            autoResize: true
          });
        }
        this.resetCursor();
        this.handleTextWysiwyg(newElement2, {
          isExistingElement: true
        });
      }
      if (activeTool.type !== "selection" && newElement2 && isInvisiblySmallElement(newElement2)) {
        this.updateScene({
          elements: this.scene.getElementsIncludingDeleted().filter((el) => el.id !== newElement2.id),
          appState: {
            newElement: null
          },
          storeAction: StoreAction.UPDATE
        });
        return;
      }
      if (isFrameLikeElement(newElement2)) {
        const elementsInsideFrame = getElementsInNewFrame(
          this.scene.getElementsIncludingDeleted(),
          newElement2,
          this.scene.getNonDeletedElementsMap()
        );
        this.scene.replaceAllElements(
          addElementsToFrame(
            this.scene.getElementsMapIncludingDeleted(),
            elementsInsideFrame,
            newElement2
          )
        );
      }
      if (newElement2) {
        mutateElement(newElement2, getNormalizedDimensions(newElement2));
        this.scene.triggerUpdate();
      }
      if (pointerDownState.drag.hasOccurred) {
        const sceneCoords = viewportCoordsToSceneCoords(childEvent, this.state);
        if (this.state.selectedLinearElement && this.state.selectedLinearElement.isDragging) {
          const linearElement = this.scene.getElement(
            this.state.selectedLinearElement.elementId
          );
          if (linearElement?.frameId) {
            const frame = getContainingFrame(linearElement, elementsMap);
            if (frame && linearElement) {
              if (!elementOverlapsWithFrame(
                linearElement,
                frame,
                this.scene.getNonDeletedElementsMap()
              )) {
                mutateElement(linearElement, {
                  groupIds: []
                });
                removeElementsFromFrame(
                  [linearElement],
                  this.scene.getNonDeletedElementsMap()
                );
                this.scene.triggerUpdate();
              }
            }
          }
        } else {
          const topLayerFrame = this.getTopLayerFrameAtSceneCoords(sceneCoords);
          const selectedElements = this.scene.getSelectedElements(this.state);
          let nextElements = this.scene.getElementsMapIncludingDeleted();
          const updateGroupIdsAfterEditingGroup = (elements) => {
            if (elements.length > 0) {
              for (const element of elements) {
                const index = element.groupIds.indexOf(
                  this.state.editingGroupId
                );
                mutateElement(
                  element,
                  {
                    groupIds: element.groupIds.slice(0, index)
                  },
                  false
                );
              }
              nextElements.forEach((element) => {
                if (element.groupIds.length && getElementsInGroup(
                  nextElements,
                  element.groupIds[element.groupIds.length - 1]
                ).length < 2) {
                  mutateElement(
                    element,
                    {
                      groupIds: []
                    },
                    false
                  );
                }
              });
              this.setState({
                editingGroupId: null
              });
            }
          };
          if (topLayerFrame && !this.state.selectedElementIds[topLayerFrame.id]) {
            const elementsToAdd = selectedElements.filter(
              (element) => element.frameId !== topLayerFrame.id && isElementInFrame(element, nextElements, this.state)
            );
            if (this.state.editingGroupId) {
              updateGroupIdsAfterEditingGroup(elementsToAdd);
            }
            nextElements = addElementsToFrame(
              nextElements,
              elementsToAdd,
              topLayerFrame
            );
          } else if (!topLayerFrame) {
            if (this.state.editingGroupId) {
              const elementsToRemove = selectedElements.filter(
                (element) => element.frameId && !isElementInFrame(element, nextElements, this.state)
              );
              updateGroupIdsAfterEditingGroup(elementsToRemove);
            }
          }
          nextElements = updateFrameMembershipOfSelectedElements(
            nextElements,
            this.state,
            this
          );
          this.scene.replaceAllElements(nextElements);
        }
      }
      if (resizingElement) {
        this.store.shouldCaptureIncrement();
      }
      if (resizingElement && isInvisiblySmallElement(resizingElement)) {
        this.updateScene({
          elements: this.scene.getElementsIncludingDeleted().filter((el) => el.id !== resizingElement.id),
          storeAction: StoreAction.UPDATE
        });
      }
      if (pointerDownState.resize.isResizing) {
        let nextElements = updateFrameMembershipOfSelectedElements(
          this.scene.getElementsIncludingDeleted(),
          this.state,
          this
        );
        const selectedFrames = this.scene.getSelectedElements(this.state).filter(
          (element) => isFrameLikeElement(element)
        );
        for (const frame of selectedFrames) {
          nextElements = replaceAllElementsInFrame(
            nextElements,
            getElementsInResizingFrame(
              this.scene.getElementsIncludingDeleted(),
              frame,
              this.state,
              elementsMap
            ),
            frame,
            this
          );
        }
        this.scene.replaceAllElements(nextElements);
      }
      const hitElement = pointerDownState.hit.element;
      if (this.state.selectedLinearElement?.elementId !== hitElement?.id && isLinearElement(hitElement)) {
        const selectedELements = this.scene.getSelectedElements(this.state);
        if (selectedELements.length === 1) {
          this.setState({
            selectedLinearElement: new LinearElementEditor(hitElement)
          });
        }
      }
      const pointerStart = this.lastPointerDownEvent;
      const pointerEnd = this.lastPointerUpEvent || this.lastPointerMoveEvent;
      if (isEraserActive(this.state) && pointerStart && pointerEnd) {
        this.eraserTrail.endPath();
        const draggedDistance = pointDistance(
          pointFrom(pointerStart.clientX, pointerStart.clientY),
          pointFrom(pointerEnd.clientX, pointerEnd.clientY)
        );
        if (draggedDistance === 0) {
          const scenePointer = viewportCoordsToSceneCoords(
            {
              clientX: pointerEnd.clientX,
              clientY: pointerEnd.clientY
            },
            this.state
          );
          const hitElements = this.getElementsAtPosition(
            scenePointer.x,
            scenePointer.y
          );
          hitElements.forEach(
            (hitElement2) => this.elementsPendingErasure.add(hitElement2.id)
          );
        }
        this.eraseElements();
        return;
      } else if (this.elementsPendingErasure.size) {
        this.restoreReadyToEraseElements();
      }
      if (hitElement && !pointerDownState.drag.hasOccurred && !pointerDownState.hit.wasAddedToSelection && // if we're editing a line, pointerup shouldn't switch selection if
      // box selected
      (!this.state.editingLinearElement || !pointerDownState.boxSelection.hasOccurred)) {
        if (childEvent.shiftKey && !this.state.editingLinearElement) {
          if (this.state.selectedElementIds[hitElement.id]) {
            if (isSelectedViaGroup(this.state, hitElement)) {
              this.setState((_prevState) => {
                const nextSelectedElementIds = {
                  ..._prevState.selectedElementIds
                };
                for (const groupedElement of hitElement.groupIds.flatMap(
                  (groupId) => getElementsInGroup(
                    this.scene.getNonDeletedElements(),
                    groupId
                  )
                )) {
                  delete nextSelectedElementIds[groupedElement.id];
                }
                return {
                  selectedGroupIds: {
                    ..._prevState.selectedElementIds,
                    ...hitElement.groupIds.map((gId) => ({ [gId]: false })).reduce((prev, acc) => ({ ...prev, ...acc }), {})
                  },
                  selectedElementIds: makeNextSelectedElementIds(
                    nextSelectedElementIds,
                    _prevState
                  )
                };
              });
            } else if (!this.state.selectedLinearElement?.isDragging) {
              this.setState((prevState) => {
                const newSelectedElementIds = {
                  ...prevState.selectedElementIds
                };
                delete newSelectedElementIds[hitElement.id];
                const newSelectedElements = getSelectedElements(
                  this.scene.getNonDeletedElements(),
                  { selectedElementIds: newSelectedElementIds }
                );
                return {
                  ...selectGroupsForSelectedElements(
                    {
                      editingGroupId: prevState.editingGroupId,
                      selectedElementIds: newSelectedElementIds
                    },
                    this.scene.getNonDeletedElements(),
                    prevState,
                    this
                  ),
                  // set selectedLinearElement only if thats the only element selected
                  selectedLinearElement: newSelectedElements.length === 1 && isLinearElement(newSelectedElements[0]) ? new LinearElementEditor(newSelectedElements[0]) : prevState.selectedLinearElement
                };
              });
            }
          } else if (hitElement.frameId && this.state.selectedElementIds[hitElement.frameId]) {
            this.setState((prevState) => {
              const nextSelectedElementIds = {
                ...prevState.selectedElementIds,
                [hitElement.id]: true
              };
              delete nextSelectedElementIds[hitElement.frameId];
              (this.scene.getElement(hitElement.frameId)?.groupIds ?? []).flatMap(
                (gid) => getElementsInGroup(this.scene.getNonDeletedElements(), gid)
              ).forEach((element) => {
                delete nextSelectedElementIds[element.id];
              });
              return {
                ...selectGroupsForSelectedElements(
                  {
                    editingGroupId: prevState.editingGroupId,
                    selectedElementIds: nextSelectedElementIds
                  },
                  this.scene.getNonDeletedElements(),
                  prevState,
                  this
                ),
                showHyperlinkPopup: hitElement.link || isEmbeddableElement(hitElement) ? "info" : false
              };
            });
          } else {
            this.setState((_prevState) => ({
              selectedElementIds: makeNextSelectedElementIds(
                {
                  ..._prevState.selectedElementIds,
                  [hitElement.id]: true
                },
                _prevState
              )
            }));
          }
        } else {
          this.setState((prevState) => ({
            ...selectGroupsForSelectedElements(
              {
                editingGroupId: prevState.editingGroupId,
                selectedElementIds: { [hitElement.id]: true }
              },
              this.scene.getNonDeletedElements(),
              prevState,
              this
            ),
            selectedLinearElement: isLinearElement(hitElement) && // Don't set `selectedLinearElement` if its same as the hitElement, this is mainly to prevent resetting the `hoverPointIndex` to -1.
            // Future we should update the API to take care of setting the correct `hoverPointIndex` when initialized
            prevState.selectedLinearElement?.elementId !== hitElement.id ? new LinearElementEditor(hitElement) : prevState.selectedLinearElement
          }));
        }
      }
      if (
        // not dragged
        !pointerDownState.drag.hasOccurred && // not resized
        !this.state.isResizing && // only hitting the bounding box of the previous hit element
        (hitElement && hitElementBoundingBoxOnly(
          {
            x: pointerDownState.origin.x,
            y: pointerDownState.origin.y,
            element: hitElement,
            shape: getElementShape(
              hitElement,
              this.scene.getNonDeletedElementsMap()
            ),
            threshold: this.getElementHitThreshold(),
            frameNameBound: isFrameLikeElement(hitElement) ? this.frameNameBoundsCache.get(hitElement) : null
          },
          elementsMap
        ) || !hitElement && pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements)
      ) {
        if (this.state.editingLinearElement) {
          this.setState({ editingLinearElement: null });
        } else {
          this.setState({
            selectedElementIds: makeNextSelectedElementIds({}, this.state),
            selectedGroupIds: {},
            editingGroupId: null,
            activeEmbeddable: null
          });
        }
        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);
        return;
      }
      if (!activeTool.locked && activeTool.type !== "freedraw" && newElement2) {
        this.setState((prevState) => ({
          selectedElementIds: makeNextSelectedElementIds(
            {
              ...prevState.selectedElementIds,
              [newElement2.id]: true
            },
            prevState
          ),
          showHyperlinkPopup: isEmbeddableElement(newElement2) && !newElement2.link ? "editor" : prevState.showHyperlinkPopup
        }));
      }
      if (activeTool.type !== "selection" || isSomeElementSelected(this.scene.getNonDeletedElements(), this.state) || !isShallowEqual(
        this.state.previousSelectedElementIds,
        this.state.selectedElementIds
      )) {
        this.store.shouldCaptureIncrement();
      }
      if (pointerDownState.drag.hasOccurred || isResizing || isRotating) {
        const linearElements = this.scene.getSelectedElements(this.state).filter(isLinearElement);
        bindOrUnbindLinearElements(
          linearElements,
          this.scene.getNonDeletedElementsMap(),
          this.scene.getNonDeletedElements(),
          this.scene,
          isBindingEnabled(this.state),
          this.state.selectedLinearElement?.selectedPointsIndices ?? []
        );
      }
      if (activeTool.type === "laser") {
        this.laserTrails.endPath();
        return;
      }
      if (!activeTool.locked && activeTool.type !== "freedraw") {
        resetCursor(this.interactiveCanvas);
        this.setState({
          newElement: null,
          suggestedBindings: [],
          activeTool: updateActiveTool(this.state, { type: "selection" })
        });
      } else {
        this.setState({
          newElement: null,
          suggestedBindings: []
        });
      }
      if (hitElement && this.lastPointerUpEvent && this.lastPointerDownEvent && this.lastPointerUpEvent.timeStamp - this.lastPointerDownEvent.timeStamp < 300 && gesture.pointers.size <= 1 && isIframeLikeElement(hitElement) && this.isIframeLikeElementCenter(
        hitElement,
        this.lastPointerUpEvent,
        pointerDownState.origin.x,
        pointerDownState.origin.y
      )) {
        this.handleEmbeddableCenterClick(hitElement);
      }
    });
  }
  restoreReadyToEraseElements = () => {
    this.elementsPendingErasure = /* @__PURE__ */ new Set();
    this.triggerRender();
  };
  eraseElements = () => {
    let didChange = false;
    const elements = this.scene.getElementsIncludingDeleted().map((ele) => {
      if (this.elementsPendingErasure.has(ele.id) || ele.frameId && this.elementsPendingErasure.has(ele.frameId) || isBoundToContainer(ele) && this.elementsPendingErasure.has(ele.containerId)) {
        didChange = true;
        return newElementWith(ele, { isDeleted: true });
      }
      return ele;
    });
    this.elementsPendingErasure = /* @__PURE__ */ new Set();
    if (didChange) {
      this.store.shouldCaptureIncrement();
      this.scene.replaceAllElements(elements);
    }
  };
  initializeImage = async ({
    imageFile,
    imageElement: _imageElement,
    showCursorImagePreview = false
  }) => {
    if (!isSupportedImageFile(imageFile)) {
      throw new Error(t("errors.unsupportedFileType"));
    }
    const mimeType = imageFile.type;
    setCursor(this.interactiveCanvas, "wait");
    if (mimeType === MIME_TYPES.svg) {
      try {
        imageFile = SVGStringToFile(
          await normalizeSVG(await imageFile.text()),
          imageFile.name
        );
      } catch (error) {
        console.warn(error);
        throw new Error(t("errors.svgImageInsertError"));
      }
    }
    const fileId = await (this.props.generateIdForFile?.(
      imageFile
    ) || generateIdFromFile(imageFile));
    if (!fileId) {
      console.warn(
        "Couldn't generate file id or the supplied `generateIdForFile` didn't resolve to one."
      );
      throw new Error(t("errors.imageInsertError"));
    }
    const existingFileData = this.files[fileId];
    if (!existingFileData?.dataURL) {
      try {
        imageFile = await resizeImageFile(imageFile, {
          maxWidthOrHeight: DEFAULT_MAX_IMAGE_WIDTH_OR_HEIGHT
        });
      } catch (error) {
        console.error(
          "Error trying to resizing image file on insertion",
          error
        );
      }
      if (imageFile.size > MAX_ALLOWED_FILE_BYTES) {
        throw new Error(
          t("errors.fileTooBig", {
            maxSize: `${Math.trunc(MAX_ALLOWED_FILE_BYTES / 1024 / 1024)}MB`
          })
        );
      }
    }
    if (showCursorImagePreview) {
      const dataURL2 = this.files[fileId]?.dataURL;
      const resizedFile = dataURL2 && dataURLToFile(dataURL2);
      this.setImagePreviewCursor(resizedFile || imageFile);
    }
    const dataURL = this.files[fileId]?.dataURL || await getDataURL(imageFile);
    const imageElement = mutateElement(
      _imageElement,
      {
        fileId
      },
      false
    );
    return new Promise(
      async (resolve, reject) => {
        try {
          this.files = {
            ...this.files,
            [fileId]: {
              mimeType,
              id: fileId,
              dataURL,
              created: Date.now(),
              lastRetrieved: Date.now()
            }
          };
          const cachedImageData = this.imageCache.get(fileId);
          if (!cachedImageData) {
            this.addNewImagesToImageCache();
            await this.updateImageCache([imageElement]);
          }
          if (cachedImageData?.image instanceof Promise) {
            await cachedImageData.image;
          }
          if (this.state.pendingImageElementId !== imageElement.id && this.state.newElement?.id !== imageElement.id) {
            this.initializeImageDimensions(imageElement, true);
          }
          resolve(imageElement);
        } catch (error) {
          console.error(error);
          reject(new Error(t("errors.imageInsertError")));
        } finally {
          if (!showCursorImagePreview) {
            resetCursor(this.interactiveCanvas);
          }
        }
      }
    );
  };
  /**
   * inserts image into elements array and rerenders
   */
  insertImageElement = async (imageElement, imageFile, showCursorImagePreview) => {
    if (!this.isToolSupported("image")) {
      this.setState({ errorMessage: t("errors.imageToolNotSupported") });
      return;
    }
    this.scene.insertElement(imageElement);
    try {
      return await this.initializeImage({
        imageFile,
        imageElement,
        showCursorImagePreview
      });
    } catch (error) {
      mutateElement(imageElement, {
        isDeleted: true
      });
      this.actionManager.executeAction(actionFinalize);
      this.setState({
        errorMessage: error.message || t("errors.imageInsertError")
      });
      return null;
    }
  };
  setImagePreviewCursor = async (imageFile) => {
    const cursorImageSizePx = 96;
    let imagePreview;
    try {
      imagePreview = await resizeImageFile(imageFile, {
        maxWidthOrHeight: cursorImageSizePx
      });
    } catch (e) {
      if (e.cause === "UNSUPPORTED") {
        throw new Error(t("errors.unsupportedFileType"));
      }
      throw e;
    }
    let previewDataURL2 = await getDataURL(imagePreview);
    if (imageFile.type === MIME_TYPES.svg) {
      const img = await loadHTMLImageElement(previewDataURL2);
      let height = Math.min(img.height, cursorImageSizePx);
      let width = height * (img.width / img.height);
      if (width > cursorImageSizePx) {
        width = cursorImageSizePx;
        height = width * (img.height / img.width);
      }
      const canvas2 = document.createElement("canvas");
      canvas2.height = height;
      canvas2.width = width;
      const context = canvas2.getContext("2d");
      context.drawImage(img, 0, 0, width, height);
      previewDataURL2 = canvas2.toDataURL(MIME_TYPES.svg);
    }
    if (this.state.pendingImageElementId) {
      setCursor(this.interactiveCanvas, `url(${previewDataURL2}) 4 4, auto`);
    }
  };
  onImageAction = async ({
    insertOnCanvasDirectly
  }) => {
    try {
      const clientX = this.state.width / 2 + this.state.offsetLeft;
      const clientY = this.state.height / 2 + this.state.offsetTop;
      const { x, y } = viewportCoordsToSceneCoords(
        { clientX, clientY },
        this.state
      );
      const imageFile = await fileOpen({
        description: "Image",
        extensions: Object.keys(
          IMAGE_MIME_TYPES
        )
      });
      const imageElement = this.createImageElement({
        sceneX: x,
        sceneY: y,
        addToFrameUnderCursor: false
      });
      if (insertOnCanvasDirectly) {
        this.insertImageElement(imageElement, imageFile);
        this.initializeImageDimensions(imageElement);
        this.setState(
          {
            selectedElementIds: makeNextSelectedElementIds(
              { [imageElement.id]: true },
              this.state
            )
          },
          () => {
            this.actionManager.executeAction(actionFinalize);
          }
        );
      } else {
        this.setState(
          {
            pendingImageElementId: imageElement.id
          },
          () => {
            this.insertImageElement(
              imageElement,
              imageFile,
              /* showCursorImagePreview */
              true
            );
          }
        );
      }
    } catch (error) {
      if (error.name !== "AbortError") {
        console.error(error);
      } else {
        console.warn(error);
      }
      this.setState(
        {
          pendingImageElementId: null,
          newElement: null,
          activeTool: updateActiveTool(this.state, { type: "selection" })
        },
        () => {
          this.actionManager.executeAction(actionFinalize);
        }
      );
    }
  };
  initializeImageDimensions = (imageElement, forceNaturalSize = false) => {
    const image = isInitializedImageElement(imageElement) && this.imageCache.get(imageElement.fileId)?.image;
    if (!image || image instanceof Promise) {
      if (imageElement.width < DRAGGING_THRESHOLD / this.state.zoom.value && imageElement.height < DRAGGING_THRESHOLD / this.state.zoom.value) {
        const placeholderSize = 100 / this.state.zoom.value;
        mutateElement(imageElement, {
          x: imageElement.x - placeholderSize / 2,
          y: imageElement.y - placeholderSize / 2,
          width: placeholderSize,
          height: placeholderSize
        });
      }
      return;
    }
    if (forceNaturalSize || // if user-created bounding box is below threshold, assume the
    // intention was to click instead of drag, and use the image's
    // intrinsic size
    imageElement.width < DRAGGING_THRESHOLD / this.state.zoom.value && imageElement.height < DRAGGING_THRESHOLD / this.state.zoom.value) {
      const minHeight = Math.max(this.state.height - 120, 160);
      const maxHeight = Math.min(
        minHeight,
        Math.floor(this.state.height * 0.5) / this.state.zoom.value
      );
      const height = Math.min(image.naturalHeight, maxHeight);
      const width = height * (image.naturalWidth / image.naturalHeight);
      const x = imageElement.x + imageElement.width / 2 - width / 2;
      const y = imageElement.y + imageElement.height / 2 - height / 2;
      mutateElement(imageElement, { x, y, width, height });
    }
  };
  /** updates image cache, refreshing updated elements and/or setting status
      to error for images that fail during <img> element creation */
  updateImageCache = async (elements, files = this.files) => {
    const { updatedFiles, erroredFiles } = await updateImageCache({
      imageCache: this.imageCache,
      fileIds: elements.map((element) => element.fileId),
      files
    });
    if (updatedFiles.size || erroredFiles.size) {
      for (const element of elements) {
        if (updatedFiles.has(element.fileId)) {
          ShapeCache.delete(element);
        }
      }
    }
    if (erroredFiles.size) {
      this.scene.replaceAllElements(
        this.scene.getElementsIncludingDeleted().map((element) => {
          if (isInitializedImageElement(element) && erroredFiles.has(element.fileId)) {
            return newElementWith(element, {
              status: "error"
            });
          }
          return element;
        })
      );
    }
    return { updatedFiles, erroredFiles };
  };
  /** adds new images to imageCache and re-renders if needed */
  addNewImagesToImageCache = async (imageElements = getInitializedImageElements(
    this.scene.getNonDeletedElements()
  ), files = this.files) => {
    const uncachedImageElements = imageElements.filter(
      (element) => !element.isDeleted && !this.imageCache.has(element.fileId)
    );
    if (uncachedImageElements.length) {
      const { updatedFiles } = await this.updateImageCache(
        uncachedImageElements,
        files
      );
      if (updatedFiles.size) {
        this.scene.triggerUpdate();
      }
    }
  };
  /** generally you should use `addNewImagesToImageCache()` directly if you need
   *  to render new images. This is just a failsafe  */
  scheduleImageRefresh = throttle4(() => {
    this.addNewImagesToImageCache();
  }, IMAGE_RENDER_TIMEOUT);
  updateBindingEnabledOnPointerMove = (event) => {
    const shouldEnableBinding = shouldEnableBindingForPointerEvent(event);
    if (this.state.isBindingEnabled !== shouldEnableBinding) {
      this.setState({ isBindingEnabled: shouldEnableBinding });
    }
  };
  maybeSuggestBindingAtCursor = (pointerCoords) => {
    const hoveredBindableElement = getHoveredElementForBinding(
      pointerCoords,
      this.scene.getNonDeletedElements(),
      this.scene.getNonDeletedElementsMap()
    );
    this.setState({
      suggestedBindings: hoveredBindableElement != null ? [hoveredBindableElement] : []
    });
  };
  maybeSuggestBindingsForLinearElementAtCoords = (linearElement, pointerCoords, oppositeBindingBoundElement) => {
    if (!pointerCoords.length) {
      return;
    }
    const suggestedBindings = pointerCoords.reduce(
      (acc, coords) => {
        const hoveredBindableElement = getHoveredElementForBinding(
          coords,
          this.scene.getNonDeletedElements(),
          this.scene.getNonDeletedElementsMap(),
          isArrowElement(linearElement) && isElbowArrow(linearElement)
        );
        if (hoveredBindableElement != null && !isLinearElementSimpleAndAlreadyBound(
          linearElement,
          oppositeBindingBoundElement?.id,
          hoveredBindableElement
        )) {
          acc.push(hoveredBindableElement);
        }
        return acc;
      },
      []
    );
    this.setState({ suggestedBindings });
  };
  clearSelection(hitElement) {
    this.setState((prevState) => ({
      selectedElementIds: makeNextSelectedElementIds({}, prevState),
      activeEmbeddable: null,
      selectedGroupIds: {},
      // Continue editing the same group if the user selected a different
      // element from it
      editingGroupId: prevState.editingGroupId && hitElement != null && isElementInGroup(hitElement, prevState.editingGroupId) ? prevState.editingGroupId : null
    }));
    this.setState({
      selectedElementIds: makeNextSelectedElementIds({}, this.state),
      activeEmbeddable: null,
      previousSelectedElementIds: this.state.selectedElementIds
    });
  }
  handleInteractiveCanvasRef = (canvas2) => {
    if (canvas2 !== null) {
      this.interactiveCanvas = canvas2;
      this.interactiveCanvas.addEventListener(
        "touchstart" /* TOUCH_START */,
        this.onTouchStart
      );
      this.interactiveCanvas.addEventListener("touchend" /* TOUCH_END */, this.onTouchEnd);
    } else {
      this.interactiveCanvas?.removeEventListener(
        "touchstart" /* TOUCH_START */,
        this.onTouchStart
      );
      this.interactiveCanvas?.removeEventListener(
        "touchend" /* TOUCH_END */,
        this.onTouchEnd
      );
    }
  };
  handleAppOnDrop = async (event) => {
    const { file: file2, fileHandle } = await getFileFromEvent(event);
    const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(
      event,
      this.state
    );
    try {
      if (isSupportedImageFile(file2) && this.isToolSupported("image")) {
        if (file2?.type === MIME_TYPES.png || file2?.type === MIME_TYPES.svg) {
          try {
            const scene = await loadFromBlob(
              file2,
              this.state,
              this.scene.getElementsIncludingDeleted(),
              fileHandle
            );
            this.syncActionResult({
              ...scene,
              appState: {
                ...scene.appState || this.state,
                isLoading: false
              },
              replaceFiles: true,
              storeAction: StoreAction.CAPTURE
            });
            return;
          } catch (error) {
            if (error.name !== "EncodingError") {
              throw new Error(t("alerts.couldNotLoadInvalidFile"));
            }
          }
        }
        const imageElement = this.createImageElement({ sceneX, sceneY });
        this.insertImageElement(imageElement, file2);
        this.initializeImageDimensions(imageElement);
        this.setState({
          selectedElementIds: makeNextSelectedElementIds(
            { [imageElement.id]: true },
            this.state
          )
        });
        return;
      }
    } catch (error) {
      return this.setState({
        isLoading: false,
        errorMessage: error.message
      });
    }
    const libraryJSON = event.dataTransfer.getData(MIME_TYPES.excalidrawlib);
    if (libraryJSON && typeof libraryJSON === "string") {
      try {
        const libraryItems = parseLibraryJSON(libraryJSON);
        this.addElementsFromPasteOrLibrary({
          elements: distributeLibraryItemsOnSquareGrid(libraryItems),
          position: event,
          files: null
        });
      } catch (error) {
        this.setState({ errorMessage: error.message });
      }
      return;
    }
    if (file2) {
      await this.loadFileToCanvas(file2, fileHandle);
    }
    if (event.dataTransfer?.types?.includes("text/plain")) {
      const text = event.dataTransfer?.getData("text");
      if (text && embeddableURLValidator(text, this.props.validateEmbeddable) && (/^(http|https):\/\/[^\s/$.?#].[^\s]*$/.test(text) || getEmbedLink(text)?.type === "video")) {
        const embeddable = this.insertEmbeddableElement({
          sceneX,
          sceneY,
          link: normalizeLink(text)
        });
        if (embeddable) {
          this.setState({ selectedElementIds: { [embeddable.id]: true } });
        }
      }
    }
  };
  loadFileToCanvas = async (file2, fileHandle) => {
    file2 = await normalizeFile(file2);
    try {
      const elements = this.scene.getElementsIncludingDeleted();
      let ret;
      try {
        ret = await loadSceneOrLibraryFromBlob(
          file2,
          this.state,
          elements,
          fileHandle
        );
      } catch (error) {
        const imageSceneDataError = error instanceof ImageSceneDataError;
        if (imageSceneDataError && error.code === "IMAGE_NOT_CONTAINS_SCENE_DATA" && !this.isToolSupported("image")) {
          this.setState({
            isLoading: false,
            errorMessage: t("errors.imageToolNotSupported")
          });
          return;
        }
        const errorMessage = imageSceneDataError ? t("alerts.cannotRestoreFromImage") : t("alerts.couldNotLoadInvalidFile");
        this.setState({
          isLoading: false,
          errorMessage
        });
      }
      if (!ret) {
        return;
      }
      if (ret.type === MIME_TYPES.excalidraw) {
        syncInvalidIndices(elements.concat(ret.data.elements));
        this.store.updateSnapshot(arrayToMap(elements), this.state);
        this.setState({ isLoading: true });
        this.syncActionResult({
          ...ret.data,
          appState: {
            ...ret.data.appState || this.state,
            isLoading: false
          },
          replaceFiles: true,
          storeAction: StoreAction.CAPTURE
        });
      } else if (ret.type === MIME_TYPES.excalidrawlib) {
        await this.library.updateLibrary({
          libraryItems: file2,
          merge: true,
          openLibraryMenu: true
        }).catch((error) => {
          console.error(error);
          this.setState({ errorMessage: t("errors.importLibraryError") });
        });
      }
    } catch (error) {
      this.setState({ isLoading: false, errorMessage: error.message });
    }
  };
  handleCanvasContextMenu = (event) => {
    event.preventDefault();
    if (("pointerType" in event.nativeEvent && event.nativeEvent.pointerType === "touch" || "pointerType" in event.nativeEvent && event.nativeEvent.pointerType === "pen" && // always allow if user uses a pen secondary button
    event.button !== POINTER_BUTTON.SECONDARY) && this.state.activeTool.type !== "selection") {
      return;
    }
    const { x, y } = viewportCoordsToSceneCoords(event, this.state);
    const element = this.getElementAtPosition(x, y, {
      preferSelected: true,
      includeLockedElements: true
    });
    const selectedElements = this.scene.getSelectedElements(this.state);
    const isHittingCommonBoundBox = this.isHittingCommonBoundingBoxOfSelectedElements(
      { x, y },
      selectedElements
    );
    const type = element || isHittingCommonBoundBox ? "element" : "canvas";
    const container = this.excalidrawContainerRef.current;
    const { top: offsetTop, left: offsetLeft } = container.getBoundingClientRect();
    const left = event.clientX - offsetLeft;
    const top = event.clientY - offsetTop;
    trackEvent("contextMenu", "openContextMenu", type);
    this.setState(
      {
        ...element && !this.state.selectedElementIds[element.id] ? {
          ...this.state,
          ...selectGroupsForSelectedElements(
            {
              editingGroupId: this.state.editingGroupId,
              selectedElementIds: { [element.id]: true }
            },
            this.scene.getNonDeletedElements(),
            this.state,
            this
          ),
          selectedLinearElement: isLinearElement(element) ? new LinearElementEditor(element) : null
        } : this.state,
        showHyperlinkPopup: false
      },
      () => {
        this.setState({
          contextMenu: { top, left, items: this.getContextMenuItems(type) }
        });
      }
    );
  };
  maybeDragNewGenericElement = (pointerDownState, event, informMutation = true) => {
    const selectionElement = this.state.selectionElement;
    const pointerCoords = pointerDownState.lastCoords;
    if (selectionElement && this.state.activeTool.type !== "eraser") {
      dragNewElement({
        newElement: selectionElement,
        elementType: this.state.activeTool.type,
        originX: pointerDownState.origin.x,
        originY: pointerDownState.origin.y,
        x: pointerCoords.x,
        y: pointerCoords.y,
        width: distance(pointerDownState.origin.x, pointerCoords.x),
        height: distance(pointerDownState.origin.y, pointerCoords.y),
        shouldMaintainAspectRatio: shouldMaintainAspectRatio(event),
        shouldResizeFromCenter: shouldResizeFromCenter(event),
        zoom: this.state.zoom.value,
        informMutation
      });
      return;
    }
    const newElement2 = this.state.newElement;
    if (!newElement2) {
      return;
    }
    let [gridX, gridY] = getGridPoint(
      pointerCoords.x,
      pointerCoords.y,
      event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const image = isInitializedImageElement(newElement2) && this.imageCache.get(newElement2.fileId)?.image;
    const aspectRatio = image && !(image instanceof Promise) ? image.width / image.height : null;
    this.maybeCacheReferenceSnapPoints(event, [newElement2]);
    const { snapOffset, snapLines } = snapNewElement(
      newElement2,
      this,
      event,
      {
        x: pointerDownState.originInGrid.x + (this.state.originSnapOffset?.x ?? 0),
        y: pointerDownState.originInGrid.y + (this.state.originSnapOffset?.y ?? 0)
      },
      {
        x: gridX - pointerDownState.originInGrid.x,
        y: gridY - pointerDownState.originInGrid.y
      },
      this.scene.getNonDeletedElementsMap()
    );
    gridX += snapOffset.x;
    gridY += snapOffset.y;
    this.setState({
      snapLines
    });
    dragNewElement({
      newElement: newElement2,
      elementType: this.state.activeTool.type,
      originX: pointerDownState.originInGrid.x,
      originY: pointerDownState.originInGrid.y,
      x: gridX,
      y: gridY,
      width: distance(pointerDownState.originInGrid.x, gridX),
      height: distance(pointerDownState.originInGrid.y, gridY),
      shouldMaintainAspectRatio: isImageElement(newElement2) ? !shouldMaintainAspectRatio(event) : shouldMaintainAspectRatio(event),
      shouldResizeFromCenter: shouldResizeFromCenter(event),
      zoom: this.state.zoom.value,
      widthAspectRatio: aspectRatio,
      originOffset: this.state.originSnapOffset,
      informMutation
    });
    this.setState({
      newElement: newElement2
    });
    if (this.state.activeTool.type === TOOL_TYPE.frame || this.state.activeTool.type === TOOL_TYPE.magicframe) {
      this.setState({
        elementsToHighlight: getElementsInResizingFrame(
          this.scene.getNonDeletedElements(),
          newElement2,
          this.state,
          this.scene.getNonDeletedElementsMap()
        )
      });
    }
  };
  maybeHandleResize = (pointerDownState, event) => {
    const selectedElements = this.scene.getSelectedElements(this.state);
    const selectedFrames = selectedElements.filter(
      (element) => isFrameLikeElement(element)
    );
    const transformHandleType = pointerDownState.resize.handleType;
    if (
      // Frames cannot be rotated.
      selectedFrames.length > 0 && transformHandleType === "rotation" || // Elbow arrows cannot be transformed (resized or rotated).
      selectedElements.length === 1 && isElbowArrow(selectedElements[0])
    ) {
      return false;
    }
    this.setState({
      // TODO: rename this state field to "isScaling" to distinguish
      // it from the generic "isResizing" which includes scaling and
      // rotating
      isResizing: transformHandleType && transformHandleType !== "rotation",
      isRotating: transformHandleType === "rotation",
      activeEmbeddable: null
    });
    const pointerCoords = pointerDownState.lastCoords;
    let [resizeX, resizeY] = getGridPoint(
      pointerCoords.x - pointerDownState.resize.offset.x,
      pointerCoords.y - pointerDownState.resize.offset.y,
      event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
    );
    const frameElementsOffsetsMap = /* @__PURE__ */ new Map();
    selectedFrames.forEach((frame) => {
      const elementsInFrame = getFrameChildren(
        this.scene.getNonDeletedElements(),
        frame.id
      );
      elementsInFrame.forEach((element) => {
        frameElementsOffsetsMap.set(frame.id + element.id, {
          x: element.x - frame.x,
          y: element.y - frame.y
        });
      });
    });
    if (!this.state.selectedElementsAreBeingDragged) {
      const [gridX, gridY] = getGridPoint(
        pointerCoords.x,
        pointerCoords.y,
        event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize()
      );
      const dragOffset = {
        x: gridX - pointerDownState.originInGrid.x,
        y: gridY - pointerDownState.originInGrid.y
      };
      const originalElements = [...pointerDownState.originalElements.values()];
      this.maybeCacheReferenceSnapPoints(event, selectedElements);
      const { snapOffset, snapLines } = snapResizingElements(
        selectedElements,
        getSelectedElements(originalElements, this.state),
        this,
        event,
        dragOffset,
        transformHandleType
      );
      resizeX += snapOffset.x;
      resizeY += snapOffset.y;
      this.setState({
        snapLines
      });
    }
    if (transformElements(
      pointerDownState.originalElements,
      transformHandleType,
      selectedElements,
      this.scene.getElementsMapIncludingDeleted(),
      shouldRotateWithDiscreteAngle(event),
      shouldResizeFromCenter(event),
      selectedElements.some((element) => isImageElement(element)) ? !shouldMaintainAspectRatio(event) : shouldMaintainAspectRatio(event),
      resizeX,
      resizeY,
      pointerDownState.resize.center.x,
      pointerDownState.resize.center.y
    )) {
      const suggestedBindings = getSuggestedBindingsForArrows(
        selectedElements,
        this.scene.getNonDeletedElementsMap()
      );
      const elementsToHighlight = /* @__PURE__ */ new Set();
      selectedFrames.forEach((frame) => {
        getElementsInResizingFrame(
          this.scene.getNonDeletedElements(),
          frame,
          this.state,
          this.scene.getNonDeletedElementsMap()
        ).forEach((element) => elementsToHighlight.add(element));
      });
      this.setState({
        elementsToHighlight: [...elementsToHighlight],
        suggestedBindings
      });
      return true;
    }
    return false;
  };
  getContextMenuItems = (type) => {
    const options = [];
    options.push(actionCopyAsPng, actionCopyAsSvg);
    if (type === "canvas") {
      if (this.state.viewModeEnabled) {
        return [
          ...options,
          actionToggleGridMode,
          actionToggleZenMode,
          actionToggleViewMode,
          actionToggleStats
        ];
      }
      return [
        actionPaste,
        CONTEXT_MENU_SEPARATOR,
        actionCopyAsPng,
        actionCopyAsSvg,
        copyText,
        CONTEXT_MENU_SEPARATOR,
        actionSelectAll,
        actionUnlockAllElements,
        CONTEXT_MENU_SEPARATOR,
        actionToggleGridMode,
        actionToggleObjectsSnapMode,
        actionToggleZenMode,
        actionToggleViewMode,
        actionToggleStats
      ];
    }
    options.push(copyText);
    if (this.state.viewModeEnabled) {
      return [actionCopy, ...options];
    }
    return [
      CONTEXT_MENU_SEPARATOR,
      actionCut,
      actionCopy,
      actionPaste,
      actionSelectAllElementsInFrame,
      actionRemoveAllElementsFromFrame,
      CONTEXT_MENU_SEPARATOR,
      ...options,
      CONTEXT_MENU_SEPARATOR,
      actionCopyStyles,
      actionPasteStyles,
      CONTEXT_MENU_SEPARATOR,
      actionGroup,
      actionTextAutoResize,
      actionUnbindText,
      actionBindText,
      actionWrapTextInContainer,
      actionUngroup,
      CONTEXT_MENU_SEPARATOR,
      actionAddToLibrary,
      CONTEXT_MENU_SEPARATOR,
      actionSendBackward,
      actionBringForward,
      actionSendToBack,
      actionBringToFront,
      CONTEXT_MENU_SEPARATOR,
      actionFlipHorizontal,
      actionFlipVertical,
      CONTEXT_MENU_SEPARATOR,
      actionToggleLinearEditor,
      actionLink,
      actionDuplicateSelection,
      actionToggleElementLock,
      CONTEXT_MENU_SEPARATOR,
      actionDeleteSelected
    ];
  };
  handleWheel = withBatchedUpdates(
    (event) => {
      if (!(event.target instanceof HTMLCanvasElement || event.target instanceof HTMLTextAreaElement || event.target instanceof HTMLIFrameElement)) {
        if (event[KEYS.CTRL_OR_CMD]) {
          event.preventDefault();
        }
        return;
      }
      event.preventDefault();
      if (isPanning) {
        return;
      }
      const { deltaX, deltaY } = event;
      if (event.metaKey || event.ctrlKey) {
        const sign2 = Math.sign(deltaY);
        const MAX_STEP = ZOOM_STEP * 100;
        const absDelta = Math.abs(deltaY);
        let delta = deltaY;
        if (absDelta > MAX_STEP) {
          delta = MAX_STEP * sign2;
        }
        let newZoom = this.state.zoom.value - delta / 100;
        newZoom += Math.log10(Math.max(1, this.state.zoom.value)) * -sign2 * // reduced amplification for small deltas (small movements on a trackpad)
        Math.min(1, absDelta / 20);
        this.translateCanvas((state) => ({
          ...getStateForZoom(
            {
              viewportX: this.lastViewportPosition.x,
              viewportY: this.lastViewportPosition.y,
              nextZoom: getNormalizedZoom(newZoom)
            },
            state
          ),
          shouldCacheIgnoreZoom: true
        }));
        this.resetShouldCacheIgnoreZoomDebounced();
        return;
      }
      if (event.shiftKey) {
        this.translateCanvas(({ zoom, scrollX }) => ({
          // on Mac, shift+wheel tends to result in deltaX
          scrollX: scrollX - (deltaY || deltaX) / zoom.value
        }));
        return;
      }
      this.translateCanvas(({ zoom, scrollX, scrollY }) => ({
        scrollX: scrollX - deltaX / zoom.value,
        scrollY: scrollY - deltaY / zoom.value
      }));
    }
  );
  getTextWysiwygSnappedToCenterPosition(x, y, appState, container) {
    if (container) {
      let elementCenterX = container.x + container.width / 2;
      let elementCenterY = container.y + container.height / 2;
      const elementCenter = getContainerCenter(
        container,
        appState,
        this.scene.getNonDeletedElementsMap()
      );
      if (elementCenter) {
        elementCenterX = elementCenter.x;
        elementCenterY = elementCenter.y;
      }
      const distanceToCenter = Math.hypot(
        x - elementCenterX,
        y - elementCenterY
      );
      const isSnappedToCenter = distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;
      if (isSnappedToCenter) {
        const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(
          { sceneX: elementCenterX, sceneY: elementCenterY },
          appState
        );
        return { viewportX, viewportY, elementCenterX, elementCenterY };
      }
    }
  }
  savePointer = (x, y, button) => {
    if (!x || !y) {
      return;
    }
    const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(
      { clientX: x, clientY: y },
      this.state
    );
    if (isNaN(sceneX) || isNaN(sceneY)) {
    }
    const pointer = {
      x: sceneX,
      y: sceneY,
      tool: this.state.activeTool.type === "laser" ? "laser" : "pointer"
    };
    this.props.onPointerUpdate?.({
      pointer,
      button,
      pointersMap: gesture.pointers
    });
  };
  resetShouldCacheIgnoreZoomDebounced = debounce(() => {
    if (!this.unmounted) {
      this.setState({ shouldCacheIgnoreZoom: false });
    }
  }, 300);
  updateDOMRect = (cb) => {
    if (this.excalidrawContainerRef?.current) {
      const excalidrawContainer = this.excalidrawContainerRef.current;
      const {
        width,
        height,
        left: offsetLeft,
        top: offsetTop
      } = excalidrawContainer.getBoundingClientRect();
      const {
        width: currentWidth,
        height: currentHeight,
        offsetTop: currentOffsetTop,
        offsetLeft: currentOffsetLeft
      } = this.state;
      if (width === currentWidth && height === currentHeight && offsetLeft === currentOffsetLeft && offsetTop === currentOffsetTop) {
        if (cb) {
          cb();
        }
        return;
      }
      this.setState(
        {
          width,
          height,
          offsetLeft,
          offsetTop
        },
        () => {
          cb && cb();
        }
      );
    }
  };
  refresh = () => {
    this.setState({ ...this.getCanvasOffsets() });
  };
  getCanvasOffsets() {
    if (this.excalidrawContainerRef?.current) {
      const excalidrawContainer = this.excalidrawContainerRef.current;
      const { left, top } = excalidrawContainer.getBoundingClientRect();
      return {
        offsetLeft: left,
        offsetTop: top
      };
    }
    return {
      offsetLeft: 0,
      offsetTop: 0
    };
  }
  async updateLanguage() {
    const currentLang2 = languages.find((lang) => lang.code === this.props.langCode) || defaultLang;
    await setLanguage(currentLang2);
    this.setAppState({});
  }
};
var createTestHook = () => {
  if (define_import_meta_env_default.MODE === ENV.TEST || define_import_meta_env_default.DEV) {
    window.h = window.h || {};
    Object.defineProperties(window.h, {
      elements: {
        configurable: true,
        get() {
          return this.app?.scene.getElementsIncludingDeleted();
        },
        set(elements) {
          return this.app?.scene.replaceAllElements(
            syncInvalidIndices(elements)
          );
        }
      },
      scene: {
        configurable: true,
        get() {
          return this.app?.scene;
        }
      }
    });
  }
};
createTestHook();
var App_default = App;

// index.tsx
init_utils2();

// polyfill.ts
init_define_import_meta_env();
var polyfill = () => {
  if (!Array.prototype.at) {
    Object.defineProperty(Array.prototype, "at", {
      value: function(n) {
        n = Math.trunc(n) || 0;
        if (n < 0) {
          n += this.length;
        }
        if (n < 0 || n >= this.length) {
          return void 0;
        }
        return this[n];
      },
      writable: true,
      enumerable: false,
      configurable: true
    });
  }
  if (!Element.prototype.replaceChildren) {
    Element.prototype.replaceChildren = function(...nodes) {
      this.innerHTML = "";
      this.append(...nodes);
    };
  }
};
var polyfill_default = polyfill;

// index.tsx
init_constants();
import { Provider as Provider2 } from "jotai";

// components/footer/FooterCenter.tsx
init_define_import_meta_env();
import clsx57 from "clsx";
import { jsx as jsx146 } from "react/jsx-runtime";
var FooterCenter = ({ children }) => {
  const { FooterCenterTunnel } = useTunnels();
  const appState = useUIAppState();
  return /* @__PURE__ */ jsx146(FooterCenterTunnel.In, { children: /* @__PURE__ */ jsx146(
    "div",
    {
      className: clsx57("footer-center zen-mode-transition", {
        "layer-ui__wrapper__footer-left--transition-bottom": appState.zenModeEnabled
      }),
      children
    }
  ) });
};
var FooterCenter_default = FooterCenter;
FooterCenter.displayName = "FooterCenter";

// components/welcome-screen/WelcomeScreen.tsx
init_define_import_meta_env();

// components/welcome-screen/WelcomeScreen.Center.tsx
init_define_import_meta_env();
init_icons();

// components/ExcalidrawLogo.tsx
init_define_import_meta_env();
import { jsx as jsx147, jsxs as jsxs78 } from "react/jsx-runtime";
var LogoIcon = () => /* @__PURE__ */ jsx147(
  "svg",
  {
    viewBox: "0 0 40 40",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    className: "ExcalidrawLogo-icon",
    children: /* @__PURE__ */ jsx147(
      "path",
      {
        d: "M39.9 32.889a.326.326 0 0 0-.279-.056c-2.094-3.083-4.774-6-7.343-8.833l-.419-.472a.212.212 0 0 0-.056-.139.586.586 0 0 0-.167-.111l-.084-.083-.056-.056c-.084-.167-.28-.278-.475-.167-.782.39-1.507.973-2.206 1.528-.92.722-1.842 1.445-2.708 2.25a8.405 8.405 0 0 0-.977 1.028c-.14.194-.028.361.14.444-.615.611-1.23 1.223-1.843 1.861a.315.315 0 0 0-.084.223c0 .083.056.166.111.194l1.09.833v.028c1.535 1.528 4.244 3.611 7.12 5.861.418.334.865.667 1.284 1 .195.223.39.473.558.695.084.11.28.139.391.055.056.056.14.111.196.167a.398.398 0 0 0 .167.056.255.255 0 0 0 .224-.111.394.394 0 0 0 .055-.167c.029 0 .028.028.056.028a.318.318 0 0 0 .224-.084l5.082-5.528a.309.309 0 0 0 0-.444Zm-14.63-1.917a.485.485 0 0 0 .111.14c.586.5 1.2 1 1.843 1.555l-2.569-1.945-.251-.166c-.056-.028-.112-.084-.168-.111l-.195-.167.056-.056.055-.055.112-.111c.866-.861 2.346-2.306 3.1-3.028-.81.805-2.43 3.167-2.095 3.944Zm8.767 6.89-2.122-1.612a44.713 44.713 0 0 0-2.625-2.5c1.145.861 2.122 1.611 2.262 1.75 1.117.972 1.06.806 1.815 1.445l.921.666a1.06 1.06 0 0 1-.251.25Zm.558.416-.056-.028c.084-.055.168-.111.252-.194l-.196.222ZM1.089 5.75c.055.361.14.722.195 1.056.335 1.833.67 3.5 1.284 4.75l.252.944c.084.361.223.806.363.917 1.424 1.25 3.602 3.11 5.947 4.889a.295.295 0 0 0 .363 0s0 .027.028.027a.254.254 0 0 0 .196.084.318.318 0 0 0 .223-.084c2.988-3.305 5.221-6.027 6.813-8.305.112-.111.14-.278.14-.417.111-.111.195-.25.307-.333.111-.111.111-.306 0-.39l-.028-.027c0-.055-.028-.139-.084-.167-.698-.666-1.2-1.138-1.731-1.638-.922-.862-1.871-1.75-3.881-3.75l-.028-.028c-.028-.028-.056-.056-.112-.056-.558-.194-1.703-.389-3.127-.639C6.087 2.223 3.21 1.723.614.944c0 0-.168 0-.196.028l-.083.084c-.028.027-.056.055-.224.11h.056-.056c.028.167.028.278.084.473 0 .055.112.5.112.555l.782 3.556Zm15.496 3.278-.335-.334c.084.112.196.195.335.334Zm-3.546 4.666-.056.056c0-.028.028-.056.056-.056Zm-2.038-10c.168.167.866.834 1.033.973-.726-.334-2.54-1.167-3.379-1.445.838.167 1.983.334 2.346.472ZM1.424 2.306c.419.722.754 3.222 1.089 5.666-.196-.778-.335-1.555-.503-2.278-.251-1.277-.503-2.416-.838-3.416.056 0 .14 0 .252.028Zm-.168-.584c-.112 0-.223-.028-.307-.028 0-.027 0-.055-.028-.055.14 0 .223.028.335.083Zm-1.089.222c0-.027 0-.027 0 0ZM39.453 1.333c.028-.11-.558-.61-.363-.639.42-.027.42-.666 0-.666-.558.028-1.144.166-1.675.25-.977.194-1.982.389-2.96.61-2.205.473-4.383.973-6.561 1.557-.67.194-1.424.333-2.066.666-.224.111-.196.333-.084.472-.056.028-.084.028-.14.056-.195.028-.363.056-.558.083-.168.028-.252.167-.224.334 0 .027.028.083.028.11-1.173 1.556-2.485 3.195-3.909 4.945-1.396 1.611-2.876 3.306-4.356 5.056-4.719 5.5-10.052 11.75-15.943 17.25a.268.268 0 0 0 0 .389c.028.027.056.055.084.055-.084.084-.168.14-.252.222-.056.056-.084.111-.084.167a.605.605 0 0 0-.111.139c-.112.111-.112.305.028.389.111.11.307.11.39-.028.029-.028.029-.056.056-.056a.44.44 0 0 1 .615 0c.335.362.67.723.977 1.028l-.698-.583c-.112-.111-.307-.083-.39.028-.113.11-.085.305.027.389l7.427 6.194c.056.056.112.056.196.056s.14-.028.195-.084l.168-.166c.028.027.083.027.111.027.084 0 .14-.027.196-.083 10.052-10.055 18.15-17.639 27.42-24.417.083-.055.111-.166.111-.25.112 0 .196-.083.251-.194 1.704-5.194 2.039-9.806 2.15-12.083v-.028c0-.028.028-.056.028-.083.028-.056.028-.084.028-.084a1.626 1.626 0 0 0-.111-1.028ZM21.472 9.5c.446-.5.893-1.028 1.34-1.5-2.876 3.778-7.65 9.583-14.408 16.5 4.607-5.083 9.242-10.333 13.068-15ZM5.193 35.778h.084-.084Zm3.462 3.194c-.027-.028-.027-.028 0-.028v.028Zm4.16-3.583c.224-.25.448-.472.699-.722 0 0 0 .027.028.027-.252.223-.475.445-.726.695Zm1.146-1.111c.14-.14.279-.334.446-.5l.028-.028c1.648-1.694 3.351-3.389 5.082-5.111l.028-.028c.419-.333.921-.694 1.368-1.028a379.003 379.003 0 0 0-6.952 6.695ZM24.794 6.472c-.921 1.195-1.954 2.778-2.82 4.028-2.736 3.944-11.532 13.583-11.727 13.75a1976.983 1976.983 0 0 1-8.042 7.639l-.167.167c-.14-.167-.14-.417.028-.556C14.49 19.861 22.03 10.167 25.074 5.917c-.084.194-.14.36-.28.555Zm4.83 5.695c-1.116-.64-1.646-1.64-1.34-2.611l.084-.334c.028-.083.084-.194.14-.277.307-.5.754-.917 1.257-1.167.027 0 .055 0 .083-.028-.028-.056-.028-.139-.028-.222.028-.167.14-.278.335-.278.335 0 1.369.306 1.76.639.111.083.223.194.335.305.14.167.363.445.474.667.056.028.112.306.196.445.056.222.111.472.084.694-.028.028 0 .194-.028.194a2.668 2.668 0 0 1-.363 1.028c-.028.028-.028.056-.056.084l-.028.027c-.14.223-.335.417-.53.556-.643.444-1.369.583-2.095.389 0 0-.195-.084-.28-.111Zm8.154-.834a39.098 39.098 0 0 1-.893 3.167c0 .028-.028.083 0 .111-.056 0-.084.028-.14.056-2.206 1.61-4.356 3.305-6.506 5.028 1.843-1.64 3.686-3.306 5.613-4.945.558-.5.949-1.139 1.06-1.861l.28-1.667v-.055c.14-.334.67-.195.586.166Z",
        fill: "currentColor"
      }
    )
  }
);
var LogoText = () => /* @__PURE__ */ jsxs78(
  "svg",
  {
    viewBox: "0 0 450 55",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    className: "ExcalidrawLogo-text",
    children: [
      /* @__PURE__ */ jsx147(
        "path",
        {
          d: "M429.27 96.74c2.47-1.39 4.78-3.02 6.83-4.95 1.43-1.35 2.73-2.86 3.81-4.51-.66.9-1.4 1.77-2.23 2.59-2.91 2.84-5.72 5.09-8.42 6.87h.01ZM343.6 69.36c.33 3.13.58 6.27.79 9.4.09 1.37.18 2.75.25 4.12-.12-4.46-.27-8.93-.5-13.39-.11-2.08-.24-4.16-.4-6.24-.06 1.79-.11 3.85-.13 6.11h-.01ZM378.47 98.34c.01-.37.07-1.13.01-6.51-.11 1.9-.22 3.81-.31 5.71-.07 1.42-.22 2.91-.16 4.35.39.03.78.07 1.17.1-.92-.85-.76-2.01-.72-3.66l.01.01ZM344.09 86.12c-.09-2.41-.22-4.83-.39-7.24v12.21c.15-.05.32-.09.47-.14.05-1.61-.03-3.23-.09-4.83h.01ZM440.69 66.79c-.22-.34-.45-.67-.69-.99-3.71-4.87-9.91-7.14-15.65-8.55-1.05-.26-2.12-.49-3.18-.71 2.29.59 4.48 1.26 6.64 2.02 7.19 2.54 10.57 5.41 12.88 8.23ZM305.09 72.46l1.2 3.6c.84 2.53 1.67 5.06 2.46 7.61.24.78.5 1.57.73 2.36.22-.04.44-.08.67-.12a776.9 776.9 0 0 1-5.01-13.57c-.02.04-.03.09-.05.13v-.01ZM345.49 90.25v.31c1.48-.42 3.05-.83 4.66-1.2-1.56.25-3.12.52-4.66.89ZM371.02 90.22c0-.57-.04-1.14-.11-1.71-.06-.02-.12-.04-.19-.05-.21-.05-.43-.08-.65-.11.42.16.74.88.95 1.87ZM398.93 54.23c-.13 0-.27-.01-.4-.02l.03.4c.11-.15.23-.27.37-.38ZM401.57 62.28v-.15c-1.22-.24-2.86-.61-3.23-1.25-.09-.15-.18-.51-.27-.98-.09.37-.2.73-.33 1.09 1.24.56 2.52.98 3.83 1.29ZM421.73 88.68c-2.97 1.65-6.28 3.12-9.69 3.68v.18c4.72-.14 11.63-3.85 16.33-8.38-2.04 1.75-4.33 3.24-6.63 4.53l-.01-.01ZM411.28 80.92c-.05-1.2-.09-2.4-.15-3.6-.21 5.66-.46 11.38-.47 14.51.24-.02.48-.04.71-.07.15-3.61.05-7.23-.09-10.83v-.01Z",
          transform: "translate(-144.023 -51.76)"
        }
      ),
      /* @__PURE__ */ jsx147(
        "path",
        {
          d: "M425.38 67.41c-3.5-1.45-7.19-2.57-14.06-3.62.09 1.97.06 4.88-.03 8.12.03.04.06.09.06.15.19 1.36.28 2.73.37 4.1.25 3.77.39 7.55.41 11.33 0 1.38-.01 2.76-.07 4.13 1.4-.25 2.78-.65 4.12-1.15 4.07-1.5 7.94-3.78 11.28-6.54 2.33-1.92 5.13-4.49 5.88-7.58.63-3.53-2.45-6.68-7.97-8.96l.01.02ZM411.35 92.53v-.06l-.34.03c.11.01.22.03.34.03ZM314.26 64.06c-.23-.59-.47-1.17-.7-1.75.57 1.62 1.11 3.25 1.6 4.9l.15.54 2.35 6.05c.32.82.66 1.64.98 2.46-1.38-4.1-2.83-8.17-4.39-12.2h.01ZM156.82 103.07c-.18.13-.38.23-.58.33 1.32-.03 2.66-.2 3.93-.34.86-.09 1.72-.22 2.58-.33-2.12.1-4.12.17-5.94.34h.01ZM210.14 68.88s.03.04.05.07c.18-.31.39-.64.58-.96-.21.3-.42.6-.64.89h.01ZM201.65 82.8c-.5.77-1.02 1.56-1.49 2.37 1.11-1.55 2.21-3.1 3.2-4.59-.23.23-.49.51-.75.79-.32.47-.65.95-.96 1.43ZM194.03 98.66c-.33-.4-.65-.84-1.05-1.17-.24-.2-.07-.49.17-.56-.23-.26-.42-.5-.63-.75 1.51-2.55 3.93-5.87 6.4-9.28-.17-.08-.29-.28-.2-.49.04-.09.09-.17.13-.26-1.21 1.78-2.42 3.55-3.61 5.33-.87 1.31-1.74 2.64-2.54 4-.29.5-.63 1.04-.87 1.61.81.65 1.63 1.27 2.47 1.88-.09-.11-.18-.21-.27-.32v.01ZM307.79 82.93c-1-3.17-2.05-6.32-3.1-9.48-1.62 4.08-3.69 9.17-6.16 15.19 3.32-1.04 6.77-1.87 10.27-2.5-.32-1.08-.67-2.15-1.01-3.21ZM149.5 80.7c.05-1.71.04-3.43 0-5.14-.1 2.26-.16 4.51-.22 6.77-.02.73-.03 1.46-.04 2.19.14-1.27.2-2.55.24-3.82h.02ZM228.98 98.3c.39 1.25.91 3.03.94 3.91.06-.03.12-.07.17-.1.08-1.29-.55-2.65-1.11-3.81ZM307.72 53.36c.81.5 1.53 1.04 2.07 1.49-.38-.8-.78-1.58-1.21-2.35-.17.03-.34.06-.51.11-.43.12-.86.26-1.29.41.35-.01.53.1.94.34ZM283.69 96.14c3.91-7.25 6.89-13.35 8.88-18.15l1.1-2.66c-1.27 2.64-2.56 5.27-3.83 7.9-1.53 3.15-3.06 6.31-4.58 9.47-.87 1.81-1.76 3.62-2.54 5.47.04.02.07.04.11.07.05.05.1.09.15.14.05-.73.27-1.48.71-2.24ZM289.92 103.23s-.04.01-.05.03c0-.02.04-.03.05-.04.05-.05.11-.1.16-.15l.21-.21c-.55 0-1.5-.27-2.55-.72.4.26.8.51 1.22.74.24.13.48.26.73.37.05.02.1.03.14.05a.27.27 0 0 1 .08-.07h.01ZM269.23 68.49c-.39-.19-.82-.48-1.33-.87-3.06-1.56-6.31-2.78-9.36-2.35-3.5.49-5.7 1.11-7.74 2.44 5.71-2.6 12.82-2.07 18.44.79l-.01-.01ZM177.87 53.69l1.06.03c-.96-.22-2-.25-2.89-.3-4.95-.26-9.99.33-14.86 1.19-2.44.43-4.88.95-7.28 1.59 9.09-1.76 15.69-2.77 23.97-2.51ZM219.85 55.51c-.18.12-.36.27-.56.45-.45.53-.86 1.11-1.26 1.66-1.91 2.61-3.71 5.31-5.57 7.95l-.12.18 8.05-10.11c-.18-.05-.36-.1-.55-.13h.01ZM510.71 54.1c.12-.15.29-.3.53-.45.69-.4 3.72-.63 5.87-.74-.36-.02-.73-.04-1.09-.05-1.84-.03-3.67.09-5.49.35.05.3.12.59.18.88v.01ZM510.76 86.02c1.37-3.07 2.49-6.27 3.57-9.46.55-1.64 1.12-3.3 1.6-4.97-1.59 4.01-3.67 9.14-6.2 15.3.24-.08.5-.14.74-.22.1-.22.19-.44.29-.65ZM566.95 75.76c.11-.02.23.03.31.11-.05-.13-.09-.26-.14-.39-.05.09-.11.18-.17.28ZM511.33 86.41c3.08-.89 6.24-1.62 9.46-2.14-1.51-3.98-2.98-7.96-4.39-11.87-.05.15-.09.31-.14.46-1.02 3.32-2.15 6.61-3.39 9.85-.48 1.25-.98 2.49-1.53 3.7h-.01ZM578.24 74.45c.11-.44.23-.87.35-1.31-.31.7-.64 1.39-.97 2.08.09.21.19.4.28.61.12-.46.23-.92.35-1.38h-.01ZM520.62 53.11c-.09 0-.18-.01-.28-.02.38.34.29 1.08.93 2.53l6.65 17.15c2.2 5.68 4.69 11.36 7.41 16.87l1.06 2.17c-2.95-7.05-5.92-14.08-8.87-21.13-1.58-3.79-3.16-7.59-4.7-11.4-.78-1.92-1.73-3.89-2.25-5.91-.03-.1 0-.19.04-.26h.01ZM578.78 77.87c1.45-5.77 3.07-10.43 3.58-13.36.05-.34.16-.88.31-1.55-.67 1.79-1.37 3.56-2.08 5.33-.12.43-.23.86-.35 1.29-.65 2.43-1.29 4.86-1.9 7.3.14.33.29.65.43 1l.01-.01ZM545.3 94.66c.02-.44.03-.83.05-1.12.02-1.01.05-2.02.11-3.02.03-6.66-.46-14.33-1.46-22.8-.13-.42-.27-1.24-.56-2.89 0-.02 0-.04-.01-.06.62 6.61.95 13.25 1.32 19.87.17 3.08.33 6.16.52 9.23.02.25.03.52.04.78l-.01.01ZM580.77 102.81c.13.2.27.38.37.49.27-.11.53-.22.8-.32-.43.09-.82.05-1.17-.16v-.01ZM530.48 104.07h.33c-.36-.13-.71-.32-1.04-.56.14.24.3.47.45.7.06-.08.14-.13.26-.13v-.01ZM542.63 58.82c.06.23.11.47.15.71.14-.33.36-.62.7-.86-.28.05-.57.11-.85.15ZM583.81 57.87c.15-.7.29-1.41.42-2.11-.14.45-.28.9-.42 1.34-.46 1.44-.89 2.89-1.31 4.34.44-1.19.88-2.37 1.31-3.57ZM523.62 91.48c-4.66 1.17-9.05 2.89-14.02 5.27 4.65-1.84 9.48-3.29 14.28-4.63-.09-.22-.17-.41-.26-.64ZM460.64 78.3c-.04-2.9-.11-5.81-.28-8.71-.1-1.68-.17-3.43-.5-5.09-.07.02-.14.03-.2.05.3 6.54.45 12.17.51 17.12.17-.07.34-.14.51-.2 0-1.06-.01-2.11-.03-3.17h-.01ZM470.63 63.24c-3.38-.26-6.81.32-10.1 1.1.41 2.01.47 4.14.57 6.18.18 3.55.25 7.11.27 10.67 3.31-1.38 6.5-3.12 9.3-5.35 1.96-1.56 3.86-3.41 5.02-5.66.73-1.41 1.19-3.22.26-4.65-1.09-1.7-3.46-2.14-5.32-2.29ZM460.29 63.68c1-.24 2.01-.46 3.04-.65-1.15.16-2.37.38-3.71.69v.13c.07-.02.15-.04.22-.05.11-.13.3-.18.45-.11v-.01ZM457.24 100.96c.43-.03.86-.07 1.29-.11.14-.49.27-.99.38-1.49-.44.7-1 1.23-1.67 1.6ZM482.88 104.98c-.18.23-.36.38-.55.47.14.09.27.19.4.28a70.76 70.76 0 0 0 4.37-4.63c.76-.89 1.52-1.81 2.19-2.77-.3-.27-.61-.53-.92-.79-.07 1.94-4.62 6.32-5.49 7.45v-.01Z",
          transform: "translate(-144.023 -51.76)"
        }
      ),
      /* @__PURE__ */ jsx147(
        "path",
        {
          d: "M474.36 63.31c-.4-.16-.84-.27-1.29-.37 1.56.42 3.08 1.22 3.76 2.74.62 1.4.32 2.95-.28 4.32.7-1.22.94-2.34.74-3.47-.24-1.33-1.19-2.54-2.93-3.21v-.01ZM477.34 89.18c-1.2-.81-2.4-1.62-3.6-2.42-.14.1-.26.19-.4.29 1.4.67 2.73 1.39 4 2.13ZM465.88 93.85c.37.25.74.5 1.1.75.46.32.92.65 1.38.97-1.57-1.2-2.01-1.61-2.49-1.72h.01ZM574.92 90.06c-2.28-5.21-4.93-11.13-5.67-12.26-.1-.15-1.57-3.01-1.63-3.08 0 0-.01.02-.02.02.4 1.37 1.09 2.69 1.65 3.99 2.14 4.95 4.36 9.86 6.67 14.73.6 1.26 1.21 2.52 1.83 3.78-.75-2.01-1.64-4.45-2.83-7.18ZM448.73 65.29c.1.2.22.38.34.57.22-.02.43-.06.65-.08v-.08c-.14-.05-.25 0-.99-.41ZM460.16 94.81c-.02.31-.06.59-.1.89-.03 1.71-.33 3.43-.79 5.07.15-.02.3-.03.45-.05.01-.04.02-.08.03-.11.09-.34.15-.69.2-1.03.17-1.07.25-2.16.33-3.24.05-.69.08-1.39.12-2.08-.27.1-.27.26-.24.57v-.02Z",
          transform: "translate(-144.023 -51.76)"
        }
      ),
      /* @__PURE__ */ jsx147(
        "path",
        {
          d: "m328.67 98.12-3.22-6.58c-1.29-2.63-2.53-5.29-3.72-7.97-.25-.85-.52-1.69-.79-2.53-.81-2.57-1.67-5.12-2.55-7.67-1.92-5.53-3.9-11.08-6.32-16.41-.72-1.58-1.46-3.44-2.63-4.79-.03-.17-.16-.29-.34-.36a.282.282 0 0 0-.23-.04c-.06-.01-.12 0-.18.01-.74.06-1.5.38-2.19.61-2.22.77-4.4 1.64-6.63 2.38-.03-.08-.06-.16-.09-.25-.15-.42-.82-.24-.67.19.03.09.07.19.1.28l-.18.06c-.36.11-.28.6 0 .68.18 1.18.63 2.36.98 3.49.03.09.06.17.08.26-.08.23-.17.46-.24.64-.37.98-.79 1.94-1.21 2.9-1.27 2.89-2.62 5.75-3.98 8.6-3.18 6.67-6.44 13.31-9.64 19.97-1.08 2.25-2.2 4.5-3.15 6.81-.13.32.24.5.5.37 1.34 1.33 2.84 2.5 4.4 3.57.65.44 1.31.87 2.01 1.24.4.22.86.48 1.33.5.24.01.35-.19.33-.37.11-.1.21-.21.28-.28.41-.41.81-.84 1.2-1.26.85-.92 1.69-1.87 2.5-2.84 6.31-2.34 12.6-4.31 18.71-5.84 2.14 5.3 3.43 8.43 3.97 9.58.55 1.05 1.15 1.88 1.82 2.52 1.32.56 6.96-.03 9.23-1.96.87-1.28 1.19-2.67.93-4.15-.09-.5-.22-.95-.4-1.33l-.01-.03Zm-20.09-45.61c.43.77.83 1.56 1.21 2.35-.54-.45-1.27-.99-2.07-1.49-.42-.24-.6-.35-.94-.34.43-.15.85-.29 1.29-.41.17-.05.34-.08.51-.11Zm-25.86 45.66c.78-1.85 1.67-3.66 2.54-5.47 1.51-3.16 3.05-6.31 4.58-9.47 1.28-2.63 2.56-5.26 3.83-7.9l-1.1 2.66c-1.99 4.79-4.97 10.9-8.88 18.15-.43.76-.66 1.51-.71 2.24-.05-.05-.1-.09-.15-.14a.259.259 0 0 0-.11-.07Zm6.24 4.71c-.42-.23-.82-.48-1.22-.74 1.05.45 2 .72 2.55.72l-.21.21c-.05.05-.11.1-.16.15-.01.01-.04.03-.05.04 0-.02.03-.02.05-.03a.27.27 0 0 0-.08.07c-.05-.02-.1-.03-.14-.05-.25-.1-.49-.24-.73-.37h-.01Zm15.73-29.43c1.05 3.15 2.1 6.31 3.1 9.48.34 1.06.69 2.13 1.01 3.21-3.5.63-6.95 1.46-10.27 2.5 2.48-6.03 4.54-11.11 6.16-15.19Zm4.79 12.57c-.23-.79-.49-1.58-.73-2.36-.79-2.54-1.63-5.08-2.46-7.61l-1.2-3.6c.02-.04.04-.09.05-.13 1.6 4.45 3.28 9 5.01 13.57l-.67.12v.01Zm5.83-18.27-.15-.54c-.49-1.64-1.03-3.28-1.6-4.9.23.58.47 1.17.7 1.75 1.56 4.03 3.01 8.1 4.39 12.2-.33-.82-.67-1.64-.98-2.46l-2.35-6.05h-.01ZM390.43 79.37c-.13-10.43-.22-17.5-.24-19.97-.24-1.6.21-2.88-.65-3.65-.14-.13-.32-.23-.52-.32h.03c.45 0 .45-.69 0-.7-1.75-.03-3.5-.04-5.25-.14-1.38-.08-2.76-.21-4.15-.31-.07 0-.12.01-.17.04-.21-.07-.47.03-.45.31l.03.45c-.11.14-.19.3-.22.5-.21 1.26-.32 13.67-.36 23.59-.32 5.79-.67 11.57-.97 17.36-.09 1.73-.29 3.54-.21 5.3-.39.02-.38.64.04.69v.12c.05.44.74.45.7 0v-.06c1.1.09 2.2.21 3.3.3 1.14.19 2.44.2 3.29.17 1.73-.05 2.92-.05 3.8-.37.45-.05.9-.11 1.35-.17.44-.06.25-.73-.19-.67h-.01c.24-.32.45-.72.62-1.25.66-1.84.41-6.36.34-11.33l-.13-9.9.02.01Zm-12.26 18.17c.09-1.91.2-3.81.31-5.71.06 5.38 0 6.14-.01 6.51-.05 1.65-.21 2.81.72 3.66-.39-.04-.78-.07-1.17-.1-.06-1.44.09-2.93.16-4.35l-.01-.01ZM588.97 53.85c-2.06-.25-3.17-.51-3.76-.6a.3.3 0 0 1 .04-.08c.22-.39-.39-.75-.6-.35-.56 1.02-.9 2.19-1.26 3.29-.61 1.88-1.17 3.78-1.72 5.68-.63 2.19-1.24 4.39-1.83 6.59-.81 2.03-1.67 4.05-2.61 6.03-1.7-3.64-3.11-6.04-4.03-7.57-2.26-3.74-2.85-5.48-3.57-6.08l.31-.09c.43-.12.25-.8-.19-.67-1.06.3-2.12.6-3.17.95-.93.32-1.85.69-2.76 1.07-.13.05-.19.16-.22.27-.04.02-.08.05-.11.07-.04-.06-.07-.12-.11-.18a.354.354 0 0 0-.48-.12c-.16.09-.22.32-.13.48l.33.54c0 .09.02.18.06.28.51 1.16.78 1.38.72 1.47-2.42 3.44-5.41 7.86-6.2 9.1-1.27 1.97-2.01 3.14-2.45 3.84l-.91-6.56-.43-4.1c-.19-1.85-.37-3.23-.53-4.13-.19-1.1-.3-2.15-.45-3.16-.2-1.36-.29-2.06-.47-2.42h.04c.45.02.45-.68 0-.7-3.43-.16-6.81.94-10.17 1.48-.24-.22-.73-.04-.58.32.24.59.33 1.25.43 1.87.17 1.06.29 2.13.4 3.2.32 3.09.53 6.2.74 9.3.44 6.75.77 13.51 1.17 20.26.11 1.95.13 3.96.46 5.89.05.3.37.31.55.14.74 1.71 2.87 1.27 6.13 1.27 1.34 0 2.39.04 2.99-.11.02.32.48.53.63.18 3.61-8.26 7.41-16.46 12.05-24.2.03-.05.04-.1.05-.15.3.73.64 1.45.94 2.16.97 2.26 1.97 4.52 2.98 6.76 2.26 5.03 4.54 10.07 7.09 14.96.47.9.94 1.79 1.47 2.65.2.32.4.67.66.96-.18.25 0 .68.34.54.91-.38 1.82-.75 2.76-1.07 1.04-.35 2.11-.65 3.17-.95.39-.11.28-.66-.07-.68.62-.4.95-.96.87-1.91-.3-3.34.72-7.47.86-8.52l2.14-11.43c1.75-10.74 3.13-17.51 3.23-20.86.02-.49.08-2.84.13-3.24.17-1.25.48-1-4.96-1.65l.03-.02Zm-46.19 5.67c-.04-.24-.09-.48-.15-.71l.85-.15c-.34.24-.56.53-.7.86Zm1.95 25.12c-.36-6.63-.7-13.26-1.32-19.87 0 .02 0 .04.01.06.29 1.65.44 2.47.56 2.89 1 8.46 1.5 16.14 1.46 22.8-.06.99-.1 2-.11 3.02-.01.29-.03.68-.05 1.12-.01-.26-.03-.53-.04-.78-.19-3.08-.35-6.16-.52-9.23l.01-.01Zm36.4 18.66c-.11-.11-.24-.29-.37-.49.35.21.74.26 1.17.16-.27.11-.53.22-.8.32v.01Zm-.89-33.72c.12-.43.23-.86.35-1.29.71-1.77 1.41-3.55 2.08-5.33-.15.68-.26 1.22-.31 1.55-.5 2.94-2.13 7.59-3.58 13.36-.15-.35-.29-.66-.43-1 .61-2.44 1.25-4.87 1.9-7.3l-.01.01Zm3.56-12.48c.14-.44.28-.89.42-1.34-.13.7-.27 1.41-.42 2.11-.43 1.19-.86 2.38-1.31 3.57.42-1.45.85-2.9 1.31-4.34Zm-5.22 16.05c-.11.44-.23.87-.35 1.31-.12.46-.23.92-.35 1.38-.1-.22-.19-.4-.28-.61.34-.69.66-1.38.97-2.08h.01Zm-11.64 2.62c.06-.1.12-.19.17-.28.05.13.09.26.14.39a.398.398 0 0 0-.31-.11Zm2.3 2.98c-.56-1.3-1.25-2.63-1.65-3.99 0 0 .01-.02.02-.02.06.08 1.52 2.93 1.63 3.08.73 1.13 3.38 7.04 5.67 12.26 1.2 2.73 2.08 5.17 2.83 7.18-.62-1.25-1.23-2.51-1.83-3.78-2.31-4.87-4.53-9.78-6.67-14.73ZM275.92 87.03c-1.06-2.18-1.13-3.45-2.44-2.93-1.52.57-2.94 1.3-4.5 2.1-1.4.72-2.68 1.44-3.92 2.12.01-.25-.24-.5-.51-.34-4.8 2.93-12.41 4.7-17.28 1.31-1.98-1.77-3.32-4.15-3.97-5.78-.29-.95-.49-1.94-.63-2.93-.14-3.34 1.58-6.53 3.9-9.12.8-.79 1.68-1.51 2.66-2.12 3.7-2.3 8.22-3.07 12.51-2.51 2.71.35 5.32 1.24 7.71 2.55.39.22.75-.39.35-.6-.18-.1-.37-.18-.55-.27.56.27 1.03.33 1.51.19l-.48.39c-.15.11-.23.3-.13.48.09.15.33.24.48.13 1.3-.97 2.46-2.09 3.45-3.37.37-.29.64-.6.65-.97v-.02c.08-.33-.03-.7-.21-1.08-.31-.87-.98-2.01-2.19-3.26-2.43-2.52-3.79-3.45-5.68-4.26-1.14-.49-3.12-1.06-4.42-1.23-3.28-.42-10.64-1.21-18.18 4.11-7.74 5.46-11.94 12.3-12.23 20.61-.08 2.06.04 3.98.34 5.71.74 4.18 2.57 8 5.44 11.34 4.26 4.99 9.76 7.52 16.34 7.52 4.85 0 9.69-1.77 14.89-4.62.23-.12.45-.23.68-.35 2.19-1.1 4.37-2.23 6.46-3.5.49-.3 1.03-.61 1.5-.98 1.47-.87 1.11-1.12.49-2.95-.39-1.14-.76-2.7-2.06-5.36l.02-.01Zm-17.38-21.76c3.05-.42 6.31.79 9.36 2.35.51.39.94.68 1.33.87-5.61-2.86-12.72-3.39-18.44-.79 2.05-1.33 4.24-1.95 7.74-2.44l.01.01ZM443.67 72.67c-.4-2.2-1.15-4.33-2.37-6.22-1.49-2.32-3.58-4.19-5.91-5.64-6.17-3.81-13.75-5.11-20.83-6.01-3.23-.41-6.47-.69-9.72-.92l-1.39-.12c-.85-.07-1.52-.1-2.05-.1-1.08-.06-2.17-.12-3.25-.17-.08 0-.14.02-.19.05-.1.05-.18.14-.16.3.27 2.55-.01 5.12-.92 7.52-.15.38.4.56.62.28 1.32.59 2.68 1.05 4.08 1.37 0 2.78-.14 7.58-.33 12.91 0 0 0 .02-.01.03-.61 3.66-.79 7.42-1 11.12-.23 4.01-.43 8.03-.44 12.05 0 .64 0 1.28.03 1.93.02.31 0 .68.15.96.06.11.14.16.24.17-.2.17-.21.54.11.59 3.83.67 7.78.71 11.68.25 2.3-.19 4.87-.65 7.65-1.56 1.85-.54 3.67-1.18 5.43-1.91 7.2-3.02 14.31-8.07 17.35-15.53.76-1.86 1.17-3.8 1.31-5.75.3-1.93.28-3.82-.09-5.58l.01-.02Zm-19.32-15.42c5.74 1.41 11.94 3.68 15.65 8.55.25.32.47.65.69.99-2.3-2.82-5.68-5.69-12.88-8.23-2.16-.76-4.35-1.43-6.64-2.02 1.06.21 2.13.45 3.18.71Zm-25.82-3.04c.13 0 .27.01.4.02-.14.1-.26.23-.37.38 0-.13-.02-.26-.03-.4Zm34.82 22.17c-.75 3.09-3.55 5.66-5.88 7.58-3.35 2.76-7.21 5.03-11.28 6.54-1.33.49-2.71.9-4.12 1.15.06-1.38.08-2.76.07-4.13-.02-3.78-.16-7.56-.41-11.33-.09-1.37-.18-2.74-.37-4.1 0-.06-.03-.11-.06-.15.09-3.25.12-6.16.03-8.12 6.86 1.05 10.56 2.17 14.06 3.62 5.52 2.28 8.59 5.44 7.97 8.96l-.01-.02Zm-22 16.15c-.12 0-.23-.02-.34-.03l.34-.03v.06Zm-.69-.7c0-3.13.26-8.84.47-14.51.06 1.2.11 2.41.15 3.6.15 3.6.25 7.23.09 10.83-.24.03-.48.05-.71.07v.01Zm-12.33-30.94c.37.63 2.01 1.01 3.23 1.25v.15c-1.31-.31-2.59-.73-3.83-1.29.12-.36.23-.72.33-1.09.08.48.18.84.27.98Zm13.7 31.65v-.18c3.41-.56 6.71-2.02 9.69-3.68 2.31-1.28 4.59-2.78 6.63-4.53-4.69 4.53-11.61 8.24-16.33 8.38l.01.01Zm24.07-.75c-2.05 1.93-4.37 3.56-6.83 4.95 2.7-1.78 5.52-4.03 8.42-6.87.82-.82 1.56-1.69 2.23-2.59-1.08 1.65-2.38 3.16-3.81 4.51h-.01ZM187.16 92.14c-.79-2.47-2.1-7.12-3.1-6.87-.19-.01-2.09.77-4.08 1.54-3.06 1.18-5.91 2.13-10.09 2.82-2.74.42-5.87 1.01-10.61 1.06.04-3.34.05-6.01.05-7.99 7.97-.65 12.33-2.11 16.37-3.55 1.11-.39 2.69-1.01 2.63-1.8-.08-.35-.55-1.39-1.17-2.61-.47-1.16-.98-2.31-1.61-3.38-.42-.71-1.04-1.69-1.86-2.06-.11-.08-.22-.13-.29-.12-.02 0-.04 0-.07.01-.19-.04-.39-.05-.6-.01-.17.03-.24.15-.25.28-.04.02-.09.04-.14.05-4.33 1.48-8.85 2.33-13.24 3.61a499.1 499.1 0 0 0-.31-8.19c4.51-.99 8.88-1.38 13.11-1.82 3.68-.38 6.28.12 7.47.34.59.11.9.16 1.16.18h.1c-.1.37.44.66.62.28.02-.04.03-.08.05-.13.15.2.53.22.62-.1.17-.58.19-1.21.21-1.81v-.36c.03-.15.05-.3.07-.45.52-2.47.33-5.09-.64-7.44-.11-.27-.44-.28-.6-.14-.08-.21-.15-.42-.24-.62-.19-.41-.79-.05-.6.35.03.07.05.15.09.22-.98-.42-2.15-.54-3.17-.63-2.17-.19-4.37-.14-6.54 0-5.7.35-11.4 1.3-16.91 2.79-2.08.56-4.13 1.22-6.14 2-4.54 1.05-3.79 1.51-2.17 6.07.18.51.46 1.68.54 1.94.82 2.47 1.08 2.13 3.1 2.13s0 .05 0 .08h.52c-.48 2.66-.51 5.45-.62 8.13-.15 3.48-.22 6.96-.28 10.45 0 .41-.01.82-.02 1.23-.16.29-.33.57-.51.85-.05.38-.09.77-.14 1.18-.42 3.52-.59 6.48-.52 8.8v.34c.02.47.05.76.06.87.16 1.57-.26 3.47 1.35 3.79 1.61.32 3.5.55 4.85.55.11 0 .22-.02.33-.02 1.79.24 3.67.05 5.45-.12 2.85-.28 5.69-.7 8.51-1.19 3.03-.53 6.05-1.14 9.04-1.86 2.4-.58 4.82-1.19 7.13-2.06.51-.19 1.73-.57 2.46-1.14 1.81-.68 2.18-1 1.57-2.67-.23-.62-.48-1.49-.91-2.78l-.03-.02Zm-11.12-38.71c.89.05 1.93.08 2.89.3-.33 0-.68-.02-1.06-.03-8.28-.26-14.88.75-23.97 2.51 2.41-.64 4.85-1.16 7.28-1.59 4.87-.86 9.91-1.45 14.86-1.19Zm-26.53 22.13c.03 1.71.04 3.43 0 5.14-.04 1.27-.11 2.55-.24 3.82 0-.73.02-1.46.04-2.19.05-2.26.12-4.51.22-6.77h-.02Zm6.73 27.85c.2-.1.4-.21.58-.33 1.82-.17 3.82-.24 5.94-.34-.86.11-1.72.24-2.58.33-1.27.14-2.61.31-3.93.34h-.01ZM534.48 85.44c-3.52-8.38-7.07-16.75-10.5-25.17-.63-1.54-1.25-3.09-1.86-4.65-.31-.8-.65-1.6-.87-2.43-.04-.17-.17-.24-.31-.25.1-.2 0-.51-.29-.53-1.59-.08-3.18-.22-4.78-.25-1.96-.03-3.91.13-5.84.42-.31.05-.31.38-.13.56-.03.06-.05.14-.04.22.23 1.54.63 3.06 1.16 4.53.13.35.27.7.41 1.06l-2.68 6.18c-.11.03-.2.09-.25.22-.67 1.9-1.52 3.73-2.34 5.56a536.85 536.85 0 0 1-3.9 8.45c-2.64 5.64-5.34 11.25-7.91 16.93-.44.97-.88 1.94-1.29 2.93-.2.48-.47 1-.55 1.52v.05c-.02.12.02.26.16.34 1.19.73 2.41 1.41 3.66 2.05 1.2.62 2.45 1.25 3.76 1.61.43.12.62-.55.19-.67-1.13-.31-2.2-.83-3.24-1.36 1.09.36 2.1.69 2.75.93 2.82 1.01 2.38 1.1 4.3-3.75 2.1-1.09 4.34-1.96 6.53-2.79 4.35-1.64 8.8-3.03 13.27-4.29.82 2.01 1.77 3.97 2.72 5.92.35.83.62 1.45.79 1.82.22.42.45.8.69 1.15.17.33.33.67.5 1 .42.8.84 1.63 1.4 2.35.23.29.6 0 .55-.31 1.53-.02 3.06-.07 4.58-.27.92-.12 1.82-.32 2.71-.54 1.39-.27 3.85-1.11 3.74-1.42-.67-1.96-1.55-3.87-2.34-5.78-1.57-3.78-3.16-7.56-4.75-11.33v-.01Zm-11.65-26.16c1.54 3.81 3.12 7.6 4.7 11.4 2.94 7.05 5.91 14.09 8.87 21.13l-1.06-2.17c-2.71-5.51-5.2-11.19-7.41-16.87l-6.65-17.15c-.65-1.45-.55-2.19-.93-2.53.09 0 .18.01.28.02a.29.29 0 0 0-.04.26c.52 2.02 1.47 3.98 2.25 5.91h-.01Zm-6.58 13.58c.05-.15.09-.31.14-.46 1.41 3.92 2.88 7.9 4.39 11.87-3.22.52-6.38 1.25-9.46 2.14.55-1.22 1.05-2.46 1.53-3.7 1.24-3.24 2.37-6.53 3.39-9.85h.01Zm-.23-20c.36 0 .73.03 1.09.05-2.15.1-5.18.33-5.87.74-.24.15-.41.3-.53.45-.06-.29-.13-.58-.18-.88 1.82-.26 3.65-.39 5.49-.35v-.01Zm-.09 18.72c-.49 1.67-1.05 3.33-1.6 4.97-1.07 3.19-2.19 6.38-3.57 9.46-.09.21-.19.43-.29.65-.25.07-.5.14-.74.22 2.53-6.16 4.61-11.29 6.2-15.3Zm-6.34 25.16c4.97-2.38 9.37-4.1 14.02-5.27l.26.64c-4.8 1.35-9.63 2.8-14.28 4.63Zm20.17 6.76c.33.23.68.42 1.04.56h-.33c-.12 0-.21.06-.26.13-.15-.23-.31-.45-.45-.7v.01ZM226.57 91.75c-3.55-4.74-6.68-9.11-9.31-12.99 9.2-15.25 10.05-17.81 10.35-18.38.17-.34 1.09-2.27.64-2.53-1.13-.65-1.03-.65-2.97-1.71-1.19-.65-3.04-1.61-4.53-2.12-1.71-.59-1.24-.36-3 2.77-.06.1-.11.2-.17.3-.75 1.02-1.48 2.05-2.2 3.09-1.88 2.71-3.73 5.45-5.69 8.1-3.68-4.91-6.88-8.76-9.51-11.43-.15-.15-.3-.29-.46-.42-1.27-1.28-7.24 3.53-7.93 5.58-.09.09-.19.16-.28.25-.27.26.03.64.33.58.19.65.5 1.29.94 1.91 3.85 5.06 7.19 9.76 9.94 14-1.23 2.61-3.06 5-4.67 7.38l-2.28 3.33c-.5.66-.93 1.23-1.29 1.69-.67.93-2.09 2.61-2.3 3.87-.51.85-1.16 1.84-1.29 2.83-.06.44.61.63.67.19.01-.08.04-.15.06-.22 1.36 1.08 2.76 2.11 4.19 3.11 1.3.91 2.62 1.85 4.04 2.56.21.1.4 0 .48-.17.24.07.48.14.72.2.44.1.62-.57.19-.67-2.02-.48-3.77-1.57-5.23-3.02-.47-.46-.9-.96-1.32-1.46 1.74 1.35 4.2 2.89 5.89 4.14 1.39 1.03 2.85-2.27 4.22-4.2 1.86-2.64 3.96-5.86 5.52-8.29l10.39 14.51c.67.81 1.14 1.21 1.57 1.36-.05.24.12.51.41.4 1.53-.58 3.05-1.19 4.54-1.87 1.52-.69 3.06-1.45 4.36-2.5a.28.28 0 0 0 .12-.23c1.66-1.1.81-1.74-1.41-4.91-1.13-1.58-1.71-2.36-3.7-5.01l-.03-.02Zm2.41 6.54c.56 1.15 1.19 2.52 1.11 3.81-.06.04-.12.07-.17.1-.03-.88-.55-2.66-.94-3.91Zm-16.51-32.73c1.86-2.65 3.65-5.35 5.57-7.95.4-.55.81-1.13 1.26-1.66.19-.18.38-.33.56-.45.18.03.36.08.55.13l-8.05 10.11.12-.18h-.01ZM192.7 95.48c.79-1.37 1.66-2.69 2.54-4 1.19-1.79 2.4-3.56 3.61-5.33-.04.09-.09.17-.13.26-.1.22.03.41.2.49-2.47 3.42-4.89 6.73-6.4 9.28.21.24.4.48.63.75-.24.07-.4.36-.17.56.4.33.72.77 1.05 1.17.09.11.18.21.27.32-.84-.61-1.66-1.24-2.47-1.88.24-.57.58-1.11.87-1.61v-.01Zm7.46-10.32c.47-.81.98-1.59 1.49-2.37.31-.48.64-.95.96-1.43.26-.29.52-.56.75-.79-.99 1.48-2.09 3.03-3.2 4.59Zm10.03-16.22s-.03-.05-.05-.07c.22-.29.43-.59.64-.89-.2.32-.4.65-.58.96h-.01ZM371.54 87.96c-.01-.08-.01-.16-.03-.23-.06-.38-.58-.29-.66.03-.3-.05-.6-.08-.81-.11-1.14-.15-2.29-.19-3.44-.2 1.04-.09 2.09-.18 3.14-.23.45-.02.45-.72 0-.7-6.57.35-13.14 1.23-19.65 2.11-1.53.21-3.05.42-4.57.68-.01 0-.02.01-.04.01-.04-3.33-.13-6.66-.24-9.99-.19-5.7-.4-11.41-.88-17.1-.13-1.51-.23-3.07-.49-4.58 0-.25 0-.48-.02-.68-.06-1.19-.04-2.61-.68-2.78-.16-.07-.72-.16-1.5-.24.22-.17.16-.62-.2-.63-1.19-.04-2.39.09-3.57.23-1.2.14-2.41.32-3.59.6-.16-.1-.41-.06-.5.12-.06.02-.13.03-.19.05-.35.1-.29.55-.03.66-.26.6-.19 2.27-.21 3-.02.66-.66 33.73-.9 40.3-.03.65.06 1.12.04 1.45-.16 3.05.87 4.96 6.34 3.93 1.09-.08 2.75-.77 5.36-1.43 4.13-1.04 5.78-1.52 6.2-1.65 6.43-1.69 6.78-1.97 11.72-2.43.55-.05 4.8-.38 6.03-.3.64.04 1.19.07 1.65.1.09 0 .16-.03.24-.05.1.27.56.33.66-.02.39-1.32.61-2.71.78-4.08.2-1.61.29-3.24.15-4.86.24.03.52-.23.38-.53-.09-.2-.27-.33-.49-.43v-.02Zm-.63.56c.07.57.11 1.14.11 1.71-.21-.99-.53-1.71-.95-1.87.22.03.44.06.65.11.06.01.12.04.19.05Zm-25.41 1.73c1.54-.36 3.1-.64 4.66-.89-1.61.37-3.18.77-4.66 1.2v-.31Zm-.86-7.37c-.07-1.37-.16-2.75-.25-4.12-.21-3.13-.45-6.27-.79-9.4.02-2.25.08-4.31.13-6.11.16 2.08.29 4.16.4 6.24.23 4.46.38 8.93.5 13.39h.01Zm-.94-4c.16 2.41.29 4.83.39 7.24.06 1.6.14 3.22.09 4.83-.15.05-.32.09-.47.14V78.88h-.01ZM483.72 92.83c-3.05-2.28-6.22-4.4-9.38-6.51 8.86-6.49 13.49-12.95 13.73-19.23.04-.76 0-1.5-.13-2.2-.67-3.82-3.5-6.68-8.39-8.48.13.04.27.08.4.13 3.92 1.39 7.74 4.23 8.5 8.56.34 1.95-.05 3.96-.98 5.69-.21.4.39.75.6.35 1.86-3.46 1.46-7.55-.97-10.63-3.53-4.47-9.76-5.88-15.16-6.16-2.32-.12-4.64-.04-6.95.19-6 .32-12.71 1.68-17.63 3.21-.37.11-.67.23-.92.35-.2-.17-.62.02-.57.37v.03c-.64.68-.18 1.64.48 3.21.38.91.67 1.89 1.15 2.58.32.76.68 1.51 1.13 2.19.14.21.38.19.53.07.19-.02.38-.05.57-.08v1.57c-.06.06-.1.13-.11.23-.27 4.18-.34 8.38-.48 12.57l-.3 9.03c-.24 3.91-.44 6.77-.46 7.26-.05.88-.11 1.95.07 2.81-.01.22-.02.43-.04.65 0 .11-.02.23-.03.35 0 .05-.03.27-.01.16-.05.4.5.59.64.28.05.04.12.08.2.08 1.75.13 3.5.28 5.25.3 1.69.02 3.38-.12 5.06-.32.08.23.36.39.55.15.06-.08.11-.17.16-.26.18-.09.24-.32.18-.48.05-.2.1-.4.13-.6.16-.86.25-1.74.33-2.62.11-1.17.17-2.34.23-3.51.15-.01.32-.03.52-.04.36-.03 1.73-.15 2.06-.15.39 0 .7-.02.95-.04 1.76 1.11 3.45 2.35 5.14 3.55 2.83 2.01 5.64 4.04 8.47 6.04 1.42 1 2.85 2 4.29 2.97.1.06.19.07.27.04.08 0 .17-.02.25-.1 1.61-1.56 3.15-3.18 4.6-4.88.75-.88 1.49-1.78 2.15-2.73.01.01.03.02.04.03.34.3.83-.2.49-.49-2.16-1.9-4.34-3.76-6.64-5.48l.03-.01Zm-6.38-3.65a55.72 55.72 0 0 0-4-2.13c.14-.1.26-.19.4-.29 1.2.81 2.4 1.61 3.6 2.42Zm-20.1 11.78c.67-.37 1.23-.91 1.67-1.6-.11.5-.24 1-.38 1.49-.43.04-.86.08-1.29.11Zm2.38-37.24c1.34-.31 2.56-.52 3.71-.69-1.03.19-2.04.41-3.04.65-.14-.07-.34-.02-.45.11-.07.02-.15.04-.22.05v-.13.01Zm.04.84c.07-.02.14-.03.2-.05.34 1.66.41 3.41.5 5.09.17 2.9.24 5.81.28 8.71l.03 3.17c-.17.07-.34.14-.51.2-.06-4.96-.21-10.58-.51-17.12h.01Zm16.04 5.62c-1.16 2.25-3.06 4.1-5.02 5.66-2.8 2.23-5.99 3.97-9.3 5.35-.01-3.56-.09-7.12-.27-10.67-.1-2.04-.16-4.16-.57-6.18 3.3-.78 6.72-1.36 10.1-1.1 1.85.14 4.23.59 5.32 2.29.92 1.43.46 3.24-.26 4.65Zm.85-.18c.6-1.37.9-2.92.28-4.32-.67-1.52-2.2-2.32-3.76-2.74.46.1.89.21 1.29.37 1.74.67 2.69 1.88 2.93 3.21.2 1.13-.05 2.25-.74 3.47V70Zm-27.47-4.14c-.12-.19-.23-.38-.34-.57.74.42.85.36.99.41v.08c-.22.03-.43.06-.65.08Zm11.21 30.46c-.08 1.08-.16 2.17-.33 3.24-.05.35-.11.69-.2 1.03 0 .04-.02.07-.03.11-.15.02-.3.04-.45.05.45-1.64.76-3.36.79-5.07.03-.29.08-.57.1-.89-.03-.31-.03-.47.24-.57-.04.69-.07 1.39-.12 2.08v.02Zm5.6-2.47c.48.11.92.52 2.49 1.72-.46-.32-.92-.65-1.38-.97-.37-.25-.73-.5-1.1-.75h-.01Zm21.23 7.24a70.76 70.76 0 0 1-4.37 4.63c-.14-.09-.27-.19-.4-.28.19-.09.37-.24.55-.47.87-1.14 5.43-5.51 5.49-7.45.31.26.62.53.92.79-.67.97-1.42 1.88-2.19 2.77v.01Z",
          fill: "currentColor",
          transform: "translate(-144.023 -51.76)"
        }
      )
    ]
  }
);
var ExcalidrawLogo = ({
  style,
  size = "small",
  withText
}) => {
  return /* @__PURE__ */ jsxs78("div", { className: `ExcalidrawLogo is-${size}`, style, children: [
    /* @__PURE__ */ jsx147(LogoIcon, {}),
    withText && /* @__PURE__ */ jsx147(LogoText, {})
  ] });
};

// components/welcome-screen/WelcomeScreen.Center.tsx
import { Fragment as Fragment26, jsx as jsx148, jsxs as jsxs79 } from "react/jsx-runtime";
var WelcomeScreenMenuItemContent = ({
  icon,
  shortcut,
  children
}) => {
  const device = useDevice();
  return /* @__PURE__ */ jsxs79(Fragment26, { children: [
    /* @__PURE__ */ jsx148("div", { className: "welcome-screen-menu-item__icon", children: icon }),
    /* @__PURE__ */ jsx148("div", { className: "welcome-screen-menu-item__text", children }),
    shortcut && !device.editor.isMobile && /* @__PURE__ */ jsx148("div", { className: "welcome-screen-menu-item__shortcut", children: shortcut })
  ] });
};
WelcomeScreenMenuItemContent.displayName = "WelcomeScreenMenuItemContent";
var WelcomeScreenMenuItem = ({
  onSelect,
  children,
  icon,
  shortcut,
  className = "",
  ...props
}) => {
  return /* @__PURE__ */ jsx148(
    "button",
    {
      ...props,
      type: "button",
      className: `welcome-screen-menu-item ${className}`,
      onClick: onSelect,
      children: /* @__PURE__ */ jsx148(WelcomeScreenMenuItemContent, { icon, shortcut, children })
    }
  );
};
WelcomeScreenMenuItem.displayName = "WelcomeScreenMenuItem";
var WelcomeScreenMenuItemLink = ({
  children,
  href,
  icon,
  shortcut,
  className = "",
  ...props
}) => {
  return /* @__PURE__ */ jsx148(
    "a",
    {
      ...props,
      className: `welcome-screen-menu-item ${className}`,
      href,
      target: "_blank",
      rel: "noreferrer",
      children: /* @__PURE__ */ jsx148(WelcomeScreenMenuItemContent, { icon, shortcut, children })
    }
  );
};
WelcomeScreenMenuItemLink.displayName = "WelcomeScreenMenuItemLink";
var Center = ({ children }) => {
  const { WelcomeScreenCenterTunnel } = useTunnels();
  return /* @__PURE__ */ jsx148(WelcomeScreenCenterTunnel.In, { children: /* @__PURE__ */ jsx148("div", { className: "welcome-screen-center", children: children || /* @__PURE__ */ jsxs79(Fragment26, { children: [
    /* @__PURE__ */ jsx148(Logo, {}),
    /* @__PURE__ */ jsx148(Heading, { children: t("welcomeScreen.defaults.center_heading") }),
    /* @__PURE__ */ jsxs79(Menu, { children: [
      /* @__PURE__ */ jsx148(MenuItemLoadScene, {}),
      /* @__PURE__ */ jsx148(MenuItemHelp, {})
    ] })
  ] }) }) });
};
Center.displayName = "Center";
var Logo = ({ children }) => {
  return /* @__PURE__ */ jsx148("div", { className: "welcome-screen-center__logo excalifont welcome-screen-decor", children: children || /* @__PURE__ */ jsx148(ExcalidrawLogo, { withText: true }) });
};
Logo.displayName = "Logo";
var Heading = ({ children }) => {
  return /* @__PURE__ */ jsx148("div", { className: "welcome-screen-center__heading welcome-screen-decor excalifont", children });
};
Heading.displayName = "Heading";
var Menu = ({ children }) => {
  return /* @__PURE__ */ jsx148("div", { className: "welcome-screen-menu", children });
};
Menu.displayName = "Menu";
var MenuItemHelp = () => {
  const actionManager = useExcalidrawActionManager();
  return /* @__PURE__ */ jsx148(
    WelcomeScreenMenuItem,
    {
      onSelect: () => actionManager.executeAction(actionShortcuts),
      shortcut: "?",
      icon: HelpIcon,
      children: t("helpDialog.title")
    }
  );
};
MenuItemHelp.displayName = "MenuItemHelp";
var MenuItemLoadScene = () => {
  const appState = useUIAppState();
  const actionManager = useExcalidrawActionManager();
  if (appState.viewModeEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsx148(
    WelcomeScreenMenuItem,
    {
      onSelect: () => actionManager.executeAction(actionLoadScene),
      shortcut: getShortcutFromShortcutName("loadScene"),
      icon: LoadIcon,
      children: t("buttons.load")
    }
  );
};
MenuItemLoadScene.displayName = "MenuItemLoadScene";
var MenuItemLiveCollaborationTrigger = ({
  onSelect
}) => {
  const { t: t2 } = useI18n();
  return /* @__PURE__ */ jsx148(WelcomeScreenMenuItem, { shortcut: null, onSelect, icon: usersIcon, children: t2("labels.liveCollaboration") });
};
MenuItemLiveCollaborationTrigger.displayName = "MenuItemLiveCollaborationTrigger";
Center.Logo = Logo;
Center.Heading = Heading;
Center.Menu = Menu;
Center.MenuItem = WelcomeScreenMenuItem;
Center.MenuItemLink = WelcomeScreenMenuItemLink;
Center.MenuItemHelp = MenuItemHelp;
Center.MenuItemLoadScene = MenuItemLoadScene;
Center.MenuItemLiveCollaborationTrigger = MenuItemLiveCollaborationTrigger;

// components/welcome-screen/WelcomeScreen.Hints.tsx
init_define_import_meta_env();
init_icons();
import { jsx as jsx149, jsxs as jsxs80 } from "react/jsx-runtime";
var MenuHint = ({ children }) => {
  const { WelcomeScreenMenuHintTunnel } = useTunnels();
  return /* @__PURE__ */ jsx149(WelcomeScreenMenuHintTunnel.In, { children: /* @__PURE__ */ jsxs80("div", { className: "excalifont welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--menu", children: [
    WelcomeScreenMenuArrow,
    /* @__PURE__ */ jsx149("div", { className: "welcome-screen-decor-hint__label", children: children || t("welcomeScreen.defaults.menuHint") })
  ] }) });
};
MenuHint.displayName = "MenuHint";
var ToolbarHint = ({ children }) => {
  const { WelcomeScreenToolbarHintTunnel } = useTunnels();
  return /* @__PURE__ */ jsx149(WelcomeScreenToolbarHintTunnel.In, { children: /* @__PURE__ */ jsxs80("div", { className: "excalifont welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--toolbar", children: [
    /* @__PURE__ */ jsx149("div", { className: "welcome-screen-decor-hint__label", children: children || t("welcomeScreen.defaults.toolbarHint") }),
    WelcomeScreenTopToolbarArrow
  ] }) });
};
ToolbarHint.displayName = "ToolbarHint";
var HelpHint = ({ children }) => {
  const { WelcomeScreenHelpHintTunnel } = useTunnels();
  return /* @__PURE__ */ jsx149(WelcomeScreenHelpHintTunnel.In, { children: /* @__PURE__ */ jsxs80("div", { className: "excalifont welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--help", children: [
    /* @__PURE__ */ jsx149("div", { children: children || t("welcomeScreen.defaults.helpHint") }),
    WelcomeScreenHelpArrow
  ] }) });
};
HelpHint.displayName = "HelpHint";

// components/welcome-screen/WelcomeScreen.tsx
import { Fragment as Fragment27, jsx as jsx150, jsxs as jsxs81 } from "react/jsx-runtime";
var WelcomeScreen = (props) => {
  return /* @__PURE__ */ jsx150(Fragment27, { children: props.children || /* @__PURE__ */ jsxs81(Fragment27, { children: [
    /* @__PURE__ */ jsx150(Center, {}),
    /* @__PURE__ */ jsx150(MenuHint, {}),
    /* @__PURE__ */ jsx150(ToolbarHint, {}),
    /* @__PURE__ */ jsx150(HelpHint, {})
  ] }) });
};
WelcomeScreen.displayName = "WelcomeScreen";
WelcomeScreen.Center = Center;
WelcomeScreen.Hints = { MenuHint, ToolbarHint, HelpHint };
var WelcomeScreen_default = WelcomeScreen;

// components/live-collaboration/LiveCollaborationTrigger.tsx
init_define_import_meta_env();
init_icons();
import clsx58 from "clsx";
import { jsx as jsx151, jsxs as jsxs82 } from "react/jsx-runtime";
var LiveCollaborationTrigger2 = ({
  isCollaborating,
  onSelect,
  ...rest
}) => {
  const appState = useUIAppState();
  const showIconOnly = appState.width < 830;
  return /* @__PURE__ */ jsxs82(
    Button,
    {
      ...rest,
      className: clsx58("collab-button", { active: isCollaborating }),
      type: "button",
      onSelect,
      style: { position: "relative", width: showIconOnly ? void 0 : "auto" },
      title: t("labels.liveCollaboration"),
      children: [
        showIconOnly ? share : t("labels.share"),
        appState.collaborators.size > 0 && /* @__PURE__ */ jsx151("div", { className: "CollabButton-collaborators", children: appState.collaborators.size })
      ]
    }
  );
};
var LiveCollaborationTrigger_default = LiveCollaborationTrigger2;
LiveCollaborationTrigger2.displayName = "LiveCollaborationTrigger";

// index.tsx
init_element();
init_restore();

// data/reconcile.ts
init_define_import_meta_env();
init_constants();
init_fractionalIndex();
init_utils2();
import throttle5 from "lodash.throttle";
var shouldDiscardRemoteElement = (localAppState, local, remote) => {
  if (local && // local element is being edited
  (local.id === localAppState.editingTextElement?.id || local.id === localAppState.resizingElement?.id || local.id === localAppState.newElement?.id || // TODO: Is this still valid? As newElement is selection element, which is never part of the elements array
  // local element is newer
  local.version > remote.version || // resolve conflicting edits deterministically by taking the one with
  // the lowest versionNonce
  local.version === remote.version && local.versionNonce < remote.versionNonce)) {
    return true;
  }
  return false;
};
var validateIndicesThrottled2 = throttle5(
  (orderedElements, localElements, remoteElements) => {
    if (define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST || window?.DEBUG_FRACTIONAL_INDICES) {
      const elements = syncInvalidIndices(
        orderedElements.map((x) => ({ ...x }))
      );
      validateFractionalIndices(elements, {
        // throw in dev & test only, to remain functional on `DEBUG_FRACTIONAL_INDICES`
        shouldThrow: define_import_meta_env_default.DEV || define_import_meta_env_default.MODE === ENV.TEST,
        includeBoundTextValidation: true,
        reconciliationContext: {
          localElements,
          remoteElements
        }
      });
    }
  },
  1e3 * 60,
  { leading: true, trailing: false }
);
var reconcileElements = (localElements, remoteElements, localAppState) => {
  const localElementsMap = arrayToMap(localElements);
  const reconciledElements = [];
  const added = /* @__PURE__ */ new Set();
  for (const remoteElement of remoteElements) {
    if (!added.has(remoteElement.id)) {
      const localElement = localElementsMap.get(remoteElement.id);
      const discardRemoteElement = shouldDiscardRemoteElement(
        localAppState,
        localElement,
        remoteElement
      );
      if (localElement && discardRemoteElement) {
        reconciledElements.push(localElement);
        added.add(localElement.id);
      } else {
        reconciledElements.push(remoteElement);
        added.add(remoteElement.id);
      }
    }
  }
  for (const localElement of localElements) {
    if (!added.has(localElement.id)) {
      reconciledElements.push(localElement);
      added.add(localElement.id);
    }
  }
  const orderedElements = orderByFractionalIndex(reconciledElements);
  validateIndicesThrottled2(orderedElements, localElements, remoteElements);
  syncInvalidIndices(orderedElements);
  return orderedElements;
};

// index.tsx
init_export2();
init_json();
init_blob();
init_renderElement();
init_typeChecks();
init_constants();
init_mutateElement();
init_store();
init_utils2();

// components/TTDDialog/TTDDialogTrigger.tsx
init_define_import_meta_env();
init_icons();
import { jsx as jsx152, jsxs as jsxs83 } from "react/jsx-runtime";
var TTDDialogTrigger = ({
  children,
  icon
}) => {
  const { TTDDialogTriggerTunnel } = useTunnels();
  const setAppState = useExcalidrawSetAppState();
  return /* @__PURE__ */ jsx152(TTDDialogTriggerTunnel.In, { children: /* @__PURE__ */ jsxs83(
    DropdownMenu_default.Item,
    {
      onSelect: () => {
        trackEvent("ai", "dialog open", "ttd");
        setAppState({ openDialog: { name: "ttd", tab: "text-to-diagram" } });
      },
      icon: icon ?? brainIcon,
      children: [
        children ?? t("labels.textToDiagram"),
        /* @__PURE__ */ jsx152(DropdownMenu_default.Item.Badge, { children: "AI" })
      ]
    }
  ) });
};
TTDDialogTrigger.displayName = "TTDDialogTrigger";

// index.tsx
init_url();
init_bounds();
init_withinBounds();

// components/DiagramToCodePlugin/DiagramToCodePlugin.tsx
init_define_import_meta_env();
import { useLayoutEffect as useLayoutEffect10 } from "react";
var DiagramToCodePlugin = (props) => {
  const app = useApp();
  useLayoutEffect10(() => {
    app.setPlugins({
      diagramToCode: { generate: props.generate }
    });
  }, [app, props.generate]);
  return null;
};

// index.tsx
init_blob();
import { jsx as jsx153 } from "react/jsx-runtime";
polyfill_default();
var ExcalidrawBase = (props) => {
  const {
    onChange,
    initialData,
    excalidrawAPI,
    isCollaborating = false,
    onPointerUpdate,
    renderTopRightUI,
    langCode = defaultLang.code,
    viewModeEnabled,
    zenModeEnabled,
    gridModeEnabled,
    libraryReturnUrl,
    theme,
    name,
    renderCustomStats,
    onPaste,
    detectScroll = true,
    handleKeyboardGlobally = false,
    onLibraryChange,
    autoFocus = false,
    generateIdForFile,
    onLinkOpen,
    onPointerDown,
    onPointerUp,
    onScrollChange,
    children,
    validateEmbeddable,
    renderEmbeddable,
    aiEnabled,
    showDeprecatedFonts
  } = props;
  const canvasActions = props.UIOptions?.canvasActions;
  const UIOptions = {
    ...props.UIOptions,
    canvasActions: {
      ...DEFAULT_UI_OPTIONS.canvasActions,
      ...canvasActions
    },
    tools: {
      image: props.UIOptions?.tools?.image ?? true
    }
  };
  if (canvasActions?.export) {
    UIOptions.canvasActions.export.saveFileToDisk = canvasActions.export?.saveFileToDisk ?? DEFAULT_UI_OPTIONS.canvasActions.export.saveFileToDisk;
  }
  if (UIOptions.canvasActions.toggleTheme === null && typeof theme === "undefined") {
    UIOptions.canvasActions.toggleTheme = true;
  }
  useEffect41(() => {
    const importPolyfill = async () => {
      await import("canvas-roundrect-polyfill");
    };
    importPolyfill();
    const handleTouchMove = (event) => {
      if (typeof event.scale === "number" && event.scale !== 1) {
        event.preventDefault();
      }
    };
    document.addEventListener("touchmove", handleTouchMove, {
      passive: false
    });
    return () => {
      document.removeEventListener("touchmove", handleTouchMove);
    };
  }, []);
  return /* @__PURE__ */ jsx153(Provider2, { unstable_createStore: () => jotaiStore, scope: jotaiScope, children: /* @__PURE__ */ jsx153(InitializeApp, { langCode, theme, children: /* @__PURE__ */ jsx153(
    App_default,
    {
      onChange,
      initialData,
      excalidrawAPI,
      isCollaborating,
      onPointerUpdate,
      renderTopRightUI,
      langCode,
      viewModeEnabled,
      zenModeEnabled,
      gridModeEnabled,
      libraryReturnUrl,
      theme,
      name,
      renderCustomStats,
      UIOptions,
      onPaste,
      detectScroll,
      handleKeyboardGlobally,
      onLibraryChange,
      autoFocus,
      generateIdForFile,
      onLinkOpen,
      onPointerDown,
      onPointerUp,
      onScrollChange,
      validateEmbeddable,
      renderEmbeddable,
      aiEnabled: aiEnabled !== false,
      showDeprecatedFonts,
      children
    }
  ) }) });
};
var areEqual5 = (prevProps, nextProps) => {
  if (prevProps.children !== nextProps.children) {
    return false;
  }
  const {
    initialData: prevInitialData,
    UIOptions: prevUIOptions = {},
    ...prev
  } = prevProps;
  const {
    initialData: nextInitialData,
    UIOptions: nextUIOptions = {},
    ...next
  } = nextProps;
  const prevUIOptionsKeys = Object.keys(prevUIOptions);
  const nextUIOptionsKeys = Object.keys(nextUIOptions);
  if (prevUIOptionsKeys.length !== nextUIOptionsKeys.length) {
    return false;
  }
  const isUIOptionsSame = prevUIOptionsKeys.every((key) => {
    if (key === "canvasActions") {
      const canvasOptionKeys = Object.keys(
        prevUIOptions.canvasActions
      );
      return canvasOptionKeys.every((key2) => {
        if (key2 === "export" && prevUIOptions?.canvasActions?.export && nextUIOptions?.canvasActions?.export) {
          return prevUIOptions.canvasActions.export.saveFileToDisk === nextUIOptions.canvasActions.export.saveFileToDisk;
        }
        return prevUIOptions?.canvasActions?.[key2] === nextUIOptions?.canvasActions?.[key2];
      });
    }
    return prevUIOptions[key] === nextUIOptions[key];
  });
  return isUIOptionsSame && isShallowEqual(prev, next);
};
var Excalidraw = React44.memo(ExcalidrawBase, areEqual5);
Excalidraw.displayName = "Excalidraw";
export {
  Button,
  DEFAULT_LASER_COLOR,
  DefaultSidebar,
  DiagramToCodePlugin,
  Excalidraw,
  FONT_FAMILY,
  FooterCenter_default as Footer,
  LiveCollaborationTrigger_default as LiveCollaborationTrigger,
  MIME_TYPES,
  MainMenu_default as MainMenu,
  ROUNDNESS,
  Sidebar,
  Stats,
  StoreAction,
  THEME,
  TTDDialog,
  TTDDialogTrigger,
  WelcomeScreen_default as WelcomeScreen,
  bumpVersion,
  convertToExcalidrawElements,
  defaultLang,
  elementPartiallyOverlapsWithOrContainsBBox,
  elementsOverlappingBBox,
  exportToBlob,
  exportToCanvas2 as exportToCanvas,
  exportToClipboard,
  exportToSvg2 as exportToSvg,
  getCommonBounds,
  getDataURL,
  getFreeDrawSvgPath,
  getLibraryItemsHash,
  getNonDeletedElements2 as getNonDeletedElements,
  getSceneVersion,
  getTextFromElements,
  getVisibleSceneBounds,
  hashElementsVersion,
  hashString,
  isElementInsideBBox,
  isInvisiblySmallElement,
  isLinearElement,
  languages,
  loadFromBlob,
  loadLibraryFromBlob,
  loadSceneOrLibraryFromBlob,
  mergeLibraryItems,
  mutateElement,
  newElementWith,
  normalizeLink,
  parseLibraryTokensFromUrl,
  reconcileElements,
  restore,
  restoreAppState,
  restoreElements,
  restoreLibraryItems,
  sceneCoordsToViewportCoords,
  serializeAsJSON,
  serializeLibraryAsJSON,
  useDevice,
  useHandleLibrary,
  useI18n,
  viewportCoordsToSceneCoords,
  zoomToFitBounds
};
/**
* The following wasm module is generated with `scripts/buildWasm.js` and encoded as base64.
*
* The source of this content is taken from the package "fonteditor-core", which contains the following metadata:
* 
* @author [{"name":"kekee000","email":"kekee000@gmail.com"},{"name":"junmer","email":"junmer@foxmail.com"}] 
* @license [{"type":"MIT","url":"https://github.com/kekee000/fonteditor-core/raw/master/LICENSE"}]
* @version 2.4.0

The MIT License (MIT)

Copyright (c) 2014 ecomfe

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/**
* The following wasm module is generated with `scripts/buildWasm.js` and encoded as base64.
*
* The source of this content is taken from the package "harfbuzzjs", which contains the following metadata:
* 
* @author Ebrahim Byagowi <ebrahim@gnu.org> 
* @license MIT
* @version 0.3.6

Apache license for Zephyr libc implementations (zephyr-string.c),
emmalloc.cpp (from emscripten project) and MIT for rest of the project

Copyright (c) 2019 Ebrahim Byagowi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//# sourceMappingURL=index.js.map
